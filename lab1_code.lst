
lab1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000154  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000933  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000820  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000149  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d5  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  ac:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  b4:	40 b3       	in	r20, 0x10	; 16
  b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	84 2f       	mov	r24, r20
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 2b       	or	r18, r24
  cc:	39 2b       	or	r19, r25
  ce:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	21 15       	cp	r18, r1
  da:	30 4f       	sbci	r19, 0xF0	; 240
  dc:	09 f0       	breq	.+2      	; 0xe0 <debounce_switch+0x2c>
  de:	80 e0       	ldi	r24, 0x00	; 0
  if (state == 0xF000) return 1;
  return 0;
}
  e0:	08 95       	ret

000000e2 <main>:
// Check switch S0.  When found low for 12 passes of "debounce_switch(), increment
// PORTB.  This will make an incrementing count on the port B LEDS. 
//*******************************************************************************
int main()
{
DDRB = 0xFF;  //set port B to all outputs
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23
uint8_t tens = 0;	//initialize integer variable for parsed tens unit
uint8_t ones = 0;	//initialize integer variable for parsed ones unit
uint8_t counter = 0;	//initialize integer variable to keep track of counts
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	ed ec       	ldi	r30, 0xCD	; 205
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  ea:	30 b3       	in	r19, 0x10	; 16
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	90 6e       	ori	r25, 0xE0	; 224
  fa:	63 2f       	mov	r22, r19
  fc:	61 70       	andi	r22, 0x01	; 1
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	86 2b       	or	r24, r22
 102:	97 2b       	or	r25, r23
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  if (state == 0xF000) return 1;
 10c:	81 15       	cp	r24, r1
 10e:	90 4f       	sbci	r25, 0xF0	; 240
 110:	09 f4       	brne	.+2      	; 0x114 <main+0x32>
DDRB = 0xFF;  //set port B to all outputs
uint8_t tens = 0;	//initialize integer variable for parsed tens unit
uint8_t ones = 0;	//initialize integer variable for parsed ones unit
uint8_t counter = 0;	//initialize integer variable to keep track of counts
while(1){     //do forever
 if(debounce_switch()) {counter++;}  //if switch true for 12 passes, increment the counter
 112:	2f 5f       	subi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9f e1       	ldi	r25, 0x1F	; 31
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x36>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x3c>
 11e:	00 00       	nop
  _delay_ms(2);                    //keep in loop to debounce 24ms

  if(counter == 100){				//check if counter is at 100
 120:	24 36       	cpi	r18, 0x64	; 100
 122:	91 f0       	breq	.+36     	; 0x148 <main+0x66>
 124:	2e 9f       	mul	r18, r30
 126:	81 2d       	mov	r24, r1
 128:	11 24       	eor	r1, r1
 12a:	86 95       	lsr	r24
 12c:	86 95       	lsr	r24
 12e:	86 95       	lsr	r24
 130:	90 e1       	ldi	r25, 0x10	; 16
 132:	89 9f       	mul	r24, r25
 134:	a0 01       	movw	r20, r0
 136:	11 24       	eor	r1, r1
 138:	92 2f       	mov	r25, r18
 13a:	3a e0       	ldi	r19, 0x0A	; 10
 13c:	83 9f       	mul	r24, r19
 13e:	90 19       	sub	r25, r0
 140:	11 24       	eor	r1, r1
 142:	49 2b       	or	r20, r25
  }

  tens = counter/10;				//parse out the tens digit via integer division
  ones = counter%10;				//parse out the ones digit via mod division

  PORTB = (tens << 4) | (ones);		//output the tens digit to LEDs 4-7, ones digit to LEDs 0-3
 144:	48 bb       	out	0x18, r20	; 24

  } //while 
 146:	d1 cf       	rjmp	.-94     	; 0xea <main+0x8>
 148:	40 e0       	ldi	r20, 0x00	; 0
while(1){     //do forever
 if(debounce_switch()) {counter++;}  //if switch true for 12 passes, increment the counter
  _delay_ms(2);                    //keep in loop to debounce 24ms

  if(counter == 100){				//check if counter is at 100
 	counter = 0;					//if counter is at 100, then reset back to 0, as indicated by the lab instructions
 14a:	20 e0       	ldi	r18, 0x00	; 0
  }

  tens = counter/10;				//parse out the tens digit via integer division
  ones = counter%10;				//parse out the ones digit via mod division

  PORTB = (tens << 4) | (ones);		//output the tens digit to LEDs 4-7, ones digit to LEDs 0-3
 14c:	48 bb       	out	0x18, r20	; 24
 14e:	cd cf       	rjmp	.-102    	; 0xea <main+0x8>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
