
radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  00800102  00800102  00001386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d0b  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111d  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001257  00000000  00000000  000052e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  0000653c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dd  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc5  00000000  00000000  00007271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00008f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	c3 05       	cpc	r28, r3
      8e:	9a 05       	cpc	r25, r10
      90:	9a 05       	cpc	r25, r10
      92:	9a 05       	cpc	r25, r10
      94:	9a 05       	cpc	r25, r10
      96:	9a 05       	cpc	r25, r10
      98:	9a 05       	cpc	r25, r10
      9a:	9a 05       	cpc	r25, r10
      9c:	c3 05       	cpc	r28, r3
      9e:	9a 05       	cpc	r25, r10
      a0:	9a 05       	cpc	r25, r10
      a2:	9a 05       	cpc	r25, r10
      a4:	9a 05       	cpc	r25, r10
      a6:	9a 05       	cpc	r25, r10
      a8:	9a 05       	cpc	r25, r10
      aa:	9a 05       	cpc	r25, r10
      ac:	cd 05       	cpc	r28, r13
      ae:	9a 05       	cpc	r25, r10
      b0:	9a 05       	cpc	r25, r10
      b2:	9a 05       	cpc	r25, r10
      b4:	9a 05       	cpc	r25, r10
      b6:	9a 05       	cpc	r25, r10
      b8:	9a 05       	cpc	r25, r10
      ba:	9a 05       	cpc	r25, r10
      bc:	9a 05       	cpc	r25, r10
      be:	9a 05       	cpc	r25, r10
      c0:	9a 05       	cpc	r25, r10
      c2:	9a 05       	cpc	r25, r10
      c4:	9a 05       	cpc	r25, r10
      c6:	9a 05       	cpc	r25, r10
      c8:	9a 05       	cpc	r25, r10
      ca:	9a 05       	cpc	r25, r10
      cc:	cd 05       	cpc	r28, r13
      ce:	9a 05       	cpc	r25, r10
      d0:	9a 05       	cpc	r25, r10
      d2:	9a 05       	cpc	r25, r10
      d4:	9a 05       	cpc	r25, r10
      d6:	9a 05       	cpc	r25, r10
      d8:	9a 05       	cpc	r25, r10
      da:	9a 05       	cpc	r25, r10
      dc:	9a 05       	cpc	r25, r10
      de:	9a 05       	cpc	r25, r10
      e0:	9a 05       	cpc	r25, r10
      e2:	9a 05       	cpc	r25, r10
      e4:	9a 05       	cpc	r25, r10
      e6:	9a 05       	cpc	r25, r10
      e8:	9a 05       	cpc	r25, r10
      ea:	9a 05       	cpc	r25, r10
      ec:	e4 05       	cpc	r30, r4
      ee:	9a 05       	cpc	r25, r10
      f0:	9a 05       	cpc	r25, r10
      f2:	9a 05       	cpc	r25, r10
      f4:	9a 05       	cpc	r25, r10
      f6:	9a 05       	cpc	r25, r10
      f8:	9a 05       	cpc	r25, r10
      fa:	9a 05       	cpc	r25, r10
      fc:	e8 05       	cpc	r30, r8
      fe:	9a 05       	cpc	r25, r10
     100:	9a 05       	cpc	r25, r10
     102:	9a 05       	cpc	r25, r10
     104:	9a 05       	cpc	r25, r10
     106:	9a 05       	cpc	r25, r10
     108:	9a 05       	cpc	r25, r10
     10a:	9a 05       	cpc	r25, r10
     10c:	9a 05       	cpc	r25, r10
     10e:	9a 05       	cpc	r25, r10
     110:	9a 05       	cpc	r25, r10
     112:	9a 05       	cpc	r25, r10
     114:	9a 05       	cpc	r25, r10
     116:	9a 05       	cpc	r25, r10
     118:	9a 05       	cpc	r25, r10
     11a:	9a 05       	cpc	r25, r10
     11c:	f6 05       	cpc	r31, r6
     11e:	9a 05       	cpc	r25, r10
     120:	9a 05       	cpc	r25, r10
     122:	9a 05       	cpc	r25, r10
     124:	9a 05       	cpc	r25, r10
     126:	9a 05       	cpc	r25, r10
     128:	9a 05       	cpc	r25, r10
     12a:	9a 05       	cpc	r25, r10
     12c:	b4 05       	cpc	r27, r4

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e0 ef       	ldi	r30, 0xF0	; 240
     142:	f2 e1       	ldi	r31, 0x12	; 18
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 30       	cpi	r26, 0x02	; 2
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	a2 e0       	ldi	r26, 0x02	; 2
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ad 31       	cpi	r26, 0x1D	; 29
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 68 08 	call	0x10d0	; 0x10d0 <main>
     168:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	8f 93       	push	r24
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <STC_interrupt>
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	81 11       	cpse	r24, r1
     192:	01 c0       	rjmp	.+2      	; 0x196 <send_lcd+0x8>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     198:	77 9b       	sbis	0x0e, 7	; 14
     19a:	fe cf       	rjmp	.-4      	; 0x198 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     19c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     19e:	77 9b       	sbis	0x0e, 7	; 14
     1a0:	fe cf       	rjmp	.-4      	; 0x19e <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1b0:	87 7f       	andi	r24, 0xF7	; 247
     1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1b6:	08 95       	ret

000001b8 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     1b8:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <i.2094>
     1bc:	82 0f       	add	r24, r18
     1be:	91 1d       	adc	r25, r1
     1c0:	fc 01       	movw	r30, r24
     1c2:	80 81       	ld	r24, Z
     1c4:	81 11       	cpse	r24, r1
     1c6:	1f c0       	rjmp	.+62     	; 0x206 <refresh_lcd+0x4e>
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1d2:	77 9b       	sbis	0x0e, 7	; 14
     1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1da:	77 9b       	sbis	0x0e, 7	; 14
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1e2:	88 60       	ori	r24, 0x08	; 8
     1e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ec:	87 7f       	andi	r24, 0xF7	; 247
     1ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     1f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <i.2094>
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     1fc:	80 31       	cpi	r24, 0x10	; 16
     1fe:	49 f1       	breq	.+82     	; 0x252 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     200:	80 32       	cpi	r24, 0x20	; 32
     202:	69 f0       	breq	.+26     	; 0x21e <refresh_lcd+0x66>
     204:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     206:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <null_flag.2095>
     20a:	91 11       	cpse	r25, r1
     20c:	e0 cf       	rjmp	.-64     	; 0x1ce <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     212:	77 9b       	sbis	0x0e, 7	; 14
     214:	fe cf       	rjmp	.-4      	; 0x212 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     216:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     218:	77 9b       	sbis	0x0e, 7	; 14
     21a:	fe cf       	rjmp	.-4      	; 0x218 <refresh_lcd+0x60>
     21c:	e0 cf       	rjmp	.-64     	; 0x1de <refresh_lcd+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	85 ed       	ldi	r24, 0xD5	; 213
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <refresh_lcd+0x68>
     224:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     226:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     228:	77 9b       	sbis	0x0e, 7	; 14
     22a:	fe cf       	rjmp	.-4      	; 0x228 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     22c:	80 e8       	ldi	r24, 0x80	; 128
     22e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     230:	77 9b       	sbis	0x0e, 7	; 14
     232:	fe cf       	rjmp	.-4      	; 0x230 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     234:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     238:	88 60       	ori	r24, 0x08	; 8
     23a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     23e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     248:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <null_flag.2095>
      i=0;
     24c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i.2094>
     250:	08 95       	ret
     252:	f5 ed       	ldi	r31, 0xD5	; 213
     254:	fa 95       	dec	r31
     256:	f1 f7       	brne	.-4      	; 0x254 <refresh_lcd+0x9c>
     258:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     25a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     25c:	77 9b       	sbis	0x0e, 7	; 14
     25e:	fe cf       	rjmp	.-4      	; 0x25c <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     260:	80 ec       	ldi	r24, 0xC0	; 192
     262:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     264:	77 9b       	sbis	0x0e, 7	; 14
     266:	fe cf       	rjmp	.-4      	; 0x264 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     268:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     26c:	88 60       	ori	r24, 0x08	; 8
     26e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     272:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     27c:	08 95       	ret

0000027e <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     27e:	66 0f       	add	r22, r22
     280:	66 0f       	add	r22, r22
     282:	66 0f       	add	r22, r22
     284:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     286:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     288:	77 9b       	sbis	0x0e, 7	; 14
     28a:	fe cf       	rjmp	.-4      	; 0x288 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     28c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     28e:	77 9b       	sbis	0x0e, 7	; 14
     290:	fe cf       	rjmp	.-4      	; 0x28e <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     292:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     296:	28 60       	ori	r18, 0x08	; 8
     298:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     29c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a0:	27 7f       	andi	r18, 0xF7	; 247
     2a2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a6:	25 ed       	ldi	r18, 0xD5	; 213
     2a8:	2a 95       	dec	r18
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <set_custom_character+0x2a>
     2ac:	00 00       	nop
     2ae:	fc 01       	movw	r30, r24
     2b0:	9c 01       	movw	r18, r24
     2b2:	28 5f       	subi	r18, 0xF8	; 248
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2b6:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     2b8:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2ba:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2bc:	77 9b       	sbis	0x0e, 7	; 14
     2be:	fe cf       	rjmp	.-4      	; 0x2bc <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     2c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2c2:	77 9b       	sbis	0x0e, 7	; 14
     2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2d4:	87 7f       	andi	r24, 0xF7	; 247
     2d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2da:	85 ed       	ldi	r24, 0xD5	; 213
     2dc:	8a 95       	dec	r24
     2de:	f1 f7       	brne	.-4      	; 0x2dc <set_custom_character+0x5e>
     2e0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     2e2:	e2 17       	cp	r30, r18
     2e4:	f3 07       	cpc	r31, r19
     2e6:	41 f7       	brne	.-48     	; 0x2b8 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     2e8:	08 95       	ret

000002ea <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     2ea:	90 e4       	ldi	r25, 0x40	; 64
     2ec:	89 9f       	mul	r24, r25
     2ee:	60 0d       	add	r22, r0
     2f0:	11 24       	eor	r1, r1
     2f2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2f6:	77 9b       	sbis	0x0e, 7	; 14
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     2fa:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     300:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     304:	88 60       	ori	r24, 0x08	; 8
     306:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     30a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     30e:	87 7f       	andi	r24, 0xF7	; 247
     310:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     314:	08 95       	ret

00000316 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     316:	81 11       	cpse	r24, r1
     318:	13 c0       	rjmp	.+38     	; 0x340 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     31e:	77 9b       	sbis	0x0e, 7	; 14
     320:	fe cf       	rjmp	.-4      	; 0x31e <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     322:	80 e3       	ldi	r24, 0x30	; 48
     324:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     326:	77 9b       	sbis	0x0e, 7	; 14
     328:	fe cf       	rjmp	.-4      	; 0x326 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     32a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     32e:	88 60       	ori	r24, 0x08	; 8
     330:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     338:	87 7f       	andi	r24, 0xF7	; 247
     33a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     33e:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     340:	84 36       	cpi	r24, 0x64	; 100
     342:	b0 f4       	brcc	.+44     	; 0x370 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     344:	8a 30       	cpi	r24, 0x0A	; 10
     346:	60 f5       	brcc	.+88     	; 0x3a0 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     34c:	77 9b       	sbis	0x0e, 7	; 14
     34e:	fe cf       	rjmp	.-4      	; 0x34c <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     350:	9d ec       	ldi	r25, 0xCD	; 205
     352:	89 9f       	mul	r24, r25
     354:	91 2d       	mov	r25, r1
     356:	11 24       	eor	r1, r1
     358:	96 95       	lsr	r25
     35a:	96 95       	lsr	r25
     35c:	96 95       	lsr	r25
     35e:	2a e0       	ldi	r18, 0x0A	; 10
     360:	92 9f       	mul	r25, r18
     362:	80 19       	sub	r24, r0
     364:	11 24       	eor	r1, r1
     366:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     368:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     36a:	77 9b       	sbis	0x0e, 7	; 14
     36c:	fe cf       	rjmp	.-4      	; 0x36a <uint2lcd+0x54>
     36e:	dd cf       	rjmp	.-70     	; 0x32a <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     370:	99 e2       	ldi	r25, 0x29	; 41
     372:	89 9f       	mul	r24, r25
     374:	91 2d       	mov	r25, r1
     376:	11 24       	eor	r1, r1
     378:	92 95       	swap	r25
     37a:	9f 70       	andi	r25, 0x0F	; 15
     37c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     382:	77 9b       	sbis	0x0e, 7	; 14
     384:	fe cf       	rjmp	.-4      	; 0x382 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     386:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     388:	77 9b       	sbis	0x0e, 7	; 14
     38a:	fe cf       	rjmp	.-4      	; 0x388 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     38c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     390:	98 60       	ori	r25, 0x08	; 8
     392:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     396:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     39a:	97 7f       	andi	r25, 0xF7	; 247
     39c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     3a0:	99 e2       	ldi	r25, 0x29	; 41
     3a2:	89 9f       	mul	r24, r25
     3a4:	91 2d       	mov	r25, r1
     3a6:	11 24       	eor	r1, r1
     3a8:	92 95       	swap	r25
     3aa:	9f 70       	andi	r25, 0x0F	; 15
     3ac:	38 2f       	mov	r19, r24
     3ae:	24 e6       	ldi	r18, 0x64	; 100
     3b0:	92 9f       	mul	r25, r18
     3b2:	30 19       	sub	r19, r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2d ec       	ldi	r18, 0xCD	; 205
     3b8:	32 9f       	mul	r19, r18
     3ba:	91 2d       	mov	r25, r1
     3bc:	11 24       	eor	r1, r1
     3be:	96 95       	lsr	r25
     3c0:	96 95       	lsr	r25
     3c2:	96 95       	lsr	r25
     3c4:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3ca:	77 9b       	sbis	0x0e, 7	; 14
     3cc:	fe cf       	rjmp	.-4      	; 0x3ca <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     3ce:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3d0:	77 9b       	sbis	0x0e, 7	; 14
     3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3d4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3d8:	98 60       	ori	r25, 0x08	; 8
     3da:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3de:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3e2:	97 7f       	andi	r25, 0xF7	; 247
     3e4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3e8:	af cf       	rjmp	.-162    	; 0x348 <uint2lcd+0x32>

000003ea <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     3ea:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     3ec:	0c 94 8b 01 	jmp	0x316	; 0x316 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3f4:	77 9b       	sbis	0x0e, 7	; 14
     3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     3f8:	9d e2       	ldi	r25, 0x2D	; 45
     3fa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3fc:	77 9b       	sbis	0x0e, 7	; 14
     3fe:	fe cf       	rjmp	.-4      	; 0x3fc <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     400:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     404:	98 60       	ori	r25, 0x08	; 8
     406:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     40a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     40e:	97 7f       	andi	r25, 0xF7	; 247
     410:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     414:	95 ed       	ldi	r25, 0xD5	; 213
     416:	9a 95       	dec	r25
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     41c:	81 95       	neg	r24
     41e:	0c 94 8b 01 	jmp	0x316	; 0x316 <uint2lcd>

00000422 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     422:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     424:	77 9b       	sbis	0x0e, 7	; 14
     426:	fe cf       	rjmp	.-4      	; 0x424 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     428:	8e e0       	ldi	r24, 0x0E	; 14
     42a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     42c:	77 9b       	sbis	0x0e, 7	; 14
     42e:	fe cf       	rjmp	.-4      	; 0x42c <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     430:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     434:	88 60       	ori	r24, 0x08	; 8
     436:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     43a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     43e:	87 7f       	andi	r24, 0xF7	; 247
     440:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     444:	08 95       	ret

00000446 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     446:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     448:	77 9b       	sbis	0x0e, 7	; 14
     44a:	fe cf       	rjmp	.-4      	; 0x448 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     44c:	8c e0       	ldi	r24, 0x0C	; 12
     44e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     450:	77 9b       	sbis	0x0e, 7	; 14
     452:	fe cf       	rjmp	.-4      	; 0x450 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     454:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     45e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     468:	08 95       	ret

0000046a <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     46a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     46c:	77 9b       	sbis	0x0e, 7	; 14
     46e:	fe cf       	rjmp	.-4      	; 0x46c <shift_right+0x2>
  SPDR = byte;                        //send payload
     470:	8e e1       	ldi	r24, 0x1E	; 30
     472:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     474:	77 9b       	sbis	0x0e, 7	; 14
     476:	fe cf       	rjmp	.-4      	; 0x474 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     478:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     47c:	88 60       	ori	r24, 0x08	; 8
     47e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     482:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     486:	87 7f       	andi	r24, 0xF7	; 247
     488:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     48c:	08 95       	ret

0000048e <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     48e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     490:	77 9b       	sbis	0x0e, 7	; 14
     492:	fe cf       	rjmp	.-4      	; 0x490 <shift_left+0x2>
  SPDR = byte;                        //send payload
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     498:	77 9b       	sbis	0x0e, 7	; 14
     49a:	fe cf       	rjmp	.-4      	; 0x498 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     49c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4a0:	88 60       	ori	r24, 0x08	; 8
     4a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4aa:	87 7f       	andi	r24, 0xF7	; 247
     4ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b0:	08 95       	ret

000004b2 <strobe_lcd>:
     4b2:	e2 e6       	ldi	r30, 0x62	; 98
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	88 60       	ori	r24, 0x08	; 8
     4ba:	80 83       	st	Z, r24
     4bc:	80 81       	ld	r24, Z
     4be:	87 7f       	andi	r24, 0xF7	; 247
     4c0:	80 83       	st	Z, r24
     4c2:	08 95       	ret

000004c4 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4c6:	77 9b       	sbis	0x0e, 7	; 14
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <clear_display+0x2>
  SPDR = byte;                        //send payload
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4ce:	77 9b       	sbis	0x0e, 7	; 14
     4d0:	fe cf       	rjmp	.-4      	; 0x4ce <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4d6:	88 60       	ori	r24, 0x08	; 8
     4d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e0:	87 7f       	andi	r24, 0xF7	; 247
     4e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e6:	8f e1       	ldi	r24, 0x1F	; 31
     4e8:	9c e1       	ldi	r25, 0x1C	; 28
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <clear_display+0x26>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <clear_display+0x2c>
     4f0:	00 00       	nop
     4f2:	08 95       	ret

000004f4 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4f6:	77 9b       	sbis	0x0e, 7	; 14
     4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     502:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     506:	88 60       	ori	r24, 0x08	; 8
     508:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     50c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     516:	8f e6       	ldi	r24, 0x6F	; 111
     518:	97 e1       	ldi	r25, 0x17	; 23
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <cursor_home+0x26>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <cursor_home+0x2c>
     520:	00 00       	nop
     522:	08 95       	ret

00000524 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     524:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     526:	77 9b       	sbis	0x0e, 7	; 14
     528:	fe cf       	rjmp	.-4      	; 0x526 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     52a:	80 ec       	ldi	r24, 0xC0	; 192
     52c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     52e:	77 9b       	sbis	0x0e, 7	; 14
     530:	fe cf       	rjmp	.-4      	; 0x52e <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     532:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     536:	88 60       	ori	r24, 0x08	; 8
     538:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     53c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     540:	87 7f       	andi	r24, 0xF7	; 247
     542:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     546:	08 95       	ret

00000548 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     548:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     54a:	77 9b       	sbis	0x0e, 7	; 14
     54c:	fe cf       	rjmp	.-4      	; 0x54a <line1_col1+0x2>
  SPDR = byte;                        //send payload
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     552:	77 9b       	sbis	0x0e, 7	; 14
     554:	fe cf       	rjmp	.-4      	; 0x552 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     556:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     55a:	88 60       	ori	r24, 0x08	; 8
     55c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     560:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     564:	87 7f       	andi	r24, 0xF7	; 247
     566:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     56a:	08 95       	ret

0000056c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     56c:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     56e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     570:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     572:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     574:	77 9b       	sbis	0x0e, 7	; 14
     576:	fe cf       	rjmp	.-4      	; 0x574 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     578:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     57a:	77 9b       	sbis	0x0e, 7	; 14
     57c:	fe cf       	rjmp	.-4      	; 0x57a <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     57e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     582:	88 60       	ori	r24, 0x08	; 8
     584:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     588:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     58c:	87 7f       	andi	r24, 0xF7	; 247
     58e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     592:	85 ed       	ldi	r24, 0xD5	; 213
     594:	8a 95       	dec	r24
     596:	f1 f7       	brne	.-4      	; 0x594 <fill_spaces+0x28>
     598:	00 00       	nop
     59a:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     59c:	51 f7       	brne	.-44     	; 0x572 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     59e:	08 95       	ret

000005a0 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     5a8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b2:	88 60       	ori	r24, 0x08	; 8
     5b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5bc:	87 7f       	andi	r24, 0xF7	; 247
     5be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5c2:	08 95       	ret

000005c4 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     5c4:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5cc:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5ce:	df 01       	movw	r26, r30
     5d0:	a4 0f       	add	r26, r20
     5d2:	b5 1f       	adc	r27, r21
     5d4:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5d6:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5d8:	77 9b       	sbis	0x0e, 7	; 14
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     5dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5de:	77 9b       	sbis	0x0e, 7	; 14
     5e0:	fe cf       	rjmp	.-4      	; 0x5de <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5e2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e6:	98 60       	ori	r25, 0x08	; 8
     5e8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ec:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f0:	97 7f       	andi	r25, 0xF7	; 247
     5f2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f6:	85 ed       	ldi	r24, 0xD5	; 213
     5f8:	8a 95       	dec	r24
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <string2lcd+0x34>
     5fc:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	46 2f       	mov	r20, r22
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	df 01       	movw	r26, r30
     606:	0d 90       	ld	r0, X+
     608:	00 20       	and	r0, r0
     60a:	e9 f7       	brne	.-6      	; 0x606 <string2lcd+0x42>
     60c:	9d 01       	movw	r18, r26
     60e:	2e 1b       	sub	r18, r30
     610:	3f 0b       	sbc	r19, r31
     612:	22 50       	subi	r18, 0x02	; 2
     614:	31 09       	sbc	r19, r1
     616:	24 17       	cp	r18, r20
     618:	35 07       	cpc	r19, r21
     61a:	c8 f6       	brcc	.-78     	; 0x5ce <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     61c:	08 95       	ret

0000061e <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	99 ef       	ldi	r25, 0xF9	; 249
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <lcd_init+0x4>
     626:	00 c0       	rjmp	.+0      	; 0x628 <lcd_init+0xa>
     628:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     630:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     632:	77 9b       	sbis	0x0e, 7	; 14
     634:	fe cf       	rjmp	.-4      	; 0x632 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     636:	80 e3       	ldi	r24, 0x30	; 48
     638:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     63a:	77 9b       	sbis	0x0e, 7	; 14
     63c:	fe cf       	rjmp	.-4      	; 0x63a <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     63e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     642:	88 60       	ori	r24, 0x08	; 8
     644:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     648:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     64c:	87 7f       	andi	r24, 0xF7	; 247
     64e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     652:	8f e5       	ldi	r24, 0x5F	; 95
     654:	9d e6       	ldi	r25, 0x6D	; 109
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <lcd_init+0x38>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <lcd_init+0x3e>
     65c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     65e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     660:	77 9b       	sbis	0x0e, 7	; 14
     662:	fe cf       	rjmp	.-4      	; 0x660 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     664:	80 e3       	ldi	r24, 0x30	; 48
     666:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     668:	77 9b       	sbis	0x0e, 7	; 14
     66a:	fe cf       	rjmp	.-4      	; 0x668 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     66c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     670:	88 60       	ori	r24, 0x08	; 8
     672:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     676:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     67a:	87 7f       	andi	r24, 0xF7	; 247
     67c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     680:	8f e5       	ldi	r24, 0x5F	; 95
     682:	9d e6       	ldi	r25, 0x6D	; 109
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <lcd_init+0x66>
     688:	00 c0       	rjmp	.+0      	; 0x68a <lcd_init+0x6c>
     68a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     68c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     68e:	77 9b       	sbis	0x0e, 7	; 14
     690:	fe cf       	rjmp	.-4      	; 0x68e <lcd_init+0x70>
  SPDR = byte;                        //send payload
     692:	80 e3       	ldi	r24, 0x30	; 48
     694:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     696:	77 9b       	sbis	0x0e, 7	; 14
     698:	fe cf       	rjmp	.-4      	; 0x696 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     69a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     69e:	88 60       	ori	r24, 0x08	; 8
     6a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a8:	87 7f       	andi	r24, 0xF7	; 247
     6aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ae:	8f e5       	ldi	r24, 0x5F	; 95
     6b0:	9d e6       	ldi	r25, 0x6D	; 109
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_init+0x94>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <lcd_init+0x9a>
     6b8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6ba:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6bc:	77 9b       	sbis	0x0e, 7	; 14
     6be:	fe cf       	rjmp	.-4      	; 0x6bc <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     6c0:	88 e3       	ldi	r24, 0x38	; 56
     6c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6c4:	77 9b       	sbis	0x0e, 7	; 14
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6cc:	88 60       	ori	r24, 0x08	; 8
     6ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6d6:	87 7f       	andi	r24, 0xF7	; 247
     6d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6dc:	8f e1       	ldi	r24, 0x1F	; 31
     6de:	9e e4       	ldi	r25, 0x4E	; 78
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <lcd_init+0xc2>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <lcd_init+0xc8>
     6e6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6e8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ea:	77 9b       	sbis	0x0e, 7	; 14
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     6ee:	88 e0       	ldi	r24, 0x08	; 8
     6f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6f2:	77 9b       	sbis	0x0e, 7	; 14
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6fa:	88 60       	ori	r24, 0x08	; 8
     6fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     700:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     704:	87 7f       	andi	r24, 0xF7	; 247
     706:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     70a:	8f e1       	ldi	r24, 0x1F	; 31
     70c:	9e e4       	ldi	r25, 0x4E	; 78
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <lcd_init+0xf0>
     712:	00 c0       	rjmp	.+0      	; 0x714 <lcd_init+0xf6>
     714:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     716:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     718:	77 9b       	sbis	0x0e, 7	; 14
     71a:	fe cf       	rjmp	.-4      	; 0x718 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     720:	77 9b       	sbis	0x0e, 7	; 14
     722:	fe cf       	rjmp	.-4      	; 0x720 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     724:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     728:	88 60       	ori	r24, 0x08	; 8
     72a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     72e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     732:	87 7f       	andi	r24, 0xF7	; 247
     734:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     738:	8f e1       	ldi	r24, 0x1F	; 31
     73a:	9e e4       	ldi	r25, 0x4E	; 78
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <lcd_init+0x11e>
     740:	00 c0       	rjmp	.+0      	; 0x742 <lcd_init+0x124>
     742:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     744:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     746:	77 9b       	sbis	0x0e, 7	; 14
     748:	fe cf       	rjmp	.-4      	; 0x746 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     74a:	86 e0       	ldi	r24, 0x06	; 6
     74c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     74e:	77 9b       	sbis	0x0e, 7	; 14
     750:	fe cf       	rjmp	.-4      	; 0x74e <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     752:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     756:	88 60       	ori	r24, 0x08	; 8
     758:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     75c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     760:	87 7f       	andi	r24, 0xF7	; 247
     762:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     766:	8f e1       	ldi	r24, 0x1F	; 31
     768:	9e e4       	ldi	r25, 0x4E	; 78
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <lcd_init+0x14c>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <lcd_init+0x152>
     770:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     772:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     774:	77 9b       	sbis	0x0e, 7	; 14
     776:	fe cf       	rjmp	.-4      	; 0x774 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     778:	8c e0       	ldi	r24, 0x0C	; 12
     77a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     77c:	77 9b       	sbis	0x0e, 7	; 14
     77e:	fe cf       	rjmp	.-4      	; 0x77c <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     780:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     784:	88 60       	ori	r24, 0x08	; 8
     786:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     78a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     78e:	87 7f       	andi	r24, 0xF7	; 247
     790:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     794:	8f e1       	ldi	r24, 0x1F	; 31
     796:	9e e4       	ldi	r25, 0x4E	; 78
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <lcd_init+0x17a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <lcd_init+0x180>
     79e:	00 00       	nop
     7a0:	08 95       	ret

000007a2 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	69 97       	sbiw	r28, 0x19	; 25
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	14 2f       	mov	r17, r20
     7d4:	42 2e       	mov	r4, r18
     7d6:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     7d8:	00 23       	and	r16, r16
     7da:	79 f0       	breq	.+30     	; 0x7fa <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     7dc:	6b 01       	movw	r12, r22
     7de:	7c 01       	movw	r14, r24
     7e0:	cc 24       	eor	r12, r12
     7e2:	f7 fc       	sbrc	r15, 7
     7e4:	c3 94       	inc	r12
     7e6:	dd 24       	eor	r13, r13
     7e8:	ee 24       	eor	r14, r14
     7ea:	ff 24       	eor	r15, r15
     7ec:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     7ee:	6b 01       	movw	r12, r22
     7f0:	7c 01       	movw	r14, r24
     7f2:	97 fd       	sbrc	r25, 7
     7f4:	a3 c0       	rjmp	.+326    	; 0x93c <lcd_int32+0x19a>
     7f6:	c7 01       	movw	r24, r14
     7f8:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     7fa:	44 20       	and	r4, r4
     7fc:	09 f4       	brne	.+2      	; 0x800 <lcd_int32+0x5e>
     7fe:	96 c0       	rjmp	.+300    	; 0x92c <lcd_int32+0x18a>
     800:	9e 01       	movw	r18, r28
     802:	2f 5f       	subi	r18, 0xFF	; 255
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	59 01       	movw	r10, r18
     808:	49 01       	movw	r8, r18
     80a:	66 24       	eor	r6, r6
     80c:	6a 94       	dec	r6
     80e:	64 0c       	add	r6, r4
     810:	71 2c       	mov	r7, r1
     812:	3f ef       	ldi	r19, 0xFF	; 255
     814:	63 1a       	sub	r6, r19
     816:	73 0a       	sbc	r7, r19
     818:	6a 0c       	add	r6, r10
     81a:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     81c:	2a e0       	ldi	r18, 0x0A	; 10
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	0e 94 a4 08 	call	0x1148	; 0x1148 <__divmodsi4>
     828:	e6 2f       	mov	r30, r22
     82a:	2a 8b       	std	Y+18, r18	; 0x12
     82c:	3b 8b       	std	Y+19, r19	; 0x13
     82e:	4c 8b       	std	Y+20, r20	; 0x14
     830:	5d 8b       	std	Y+21, r21	; 0x15
     832:	6a 89       	ldd	r22, Y+18	; 0x12
     834:	7b 89       	ldd	r23, Y+19	; 0x13
     836:	8c 89       	ldd	r24, Y+20	; 0x14
     838:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     83a:	20 e3       	ldi	r18, 0x30	; 48
     83c:	2e 0f       	add	r18, r30
     83e:	f4 01       	movw	r30, r8
     840:	21 93       	st	Z+, r18
     842:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     844:	6e 16       	cp	r6, r30
     846:	7f 06       	cpc	r7, r31
     848:	49 f7       	brne	.-46     	; 0x81c <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     84a:	99 24       	eor	r9, r9
     84c:	93 94       	inc	r9
     84e:	94 0c       	add	r9, r4
     850:	f5 01       	movw	r30, r10
     852:	e4 0d       	add	r30, r4
     854:	f1 1d       	adc	r31, r1
     856:	2e e2       	ldi	r18, 0x2E	; 46
     858:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     85a:	2a e0       	ldi	r18, 0x0A	; 10
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 a4 08 	call	0x1148	; 0x1148 <__divmodsi4>
     866:	e6 2f       	mov	r30, r22
     868:	2a 8b       	std	Y+18, r18	; 0x12
     86a:	3b 8b       	std	Y+19, r19	; 0x13
     86c:	4c 8b       	std	Y+20, r20	; 0x14
     86e:	5d 8b       	std	Y+21, r21	; 0x15
     870:	6e 8b       	std	Y+22, r22	; 0x16
     872:	7f 8b       	std	Y+23, r23	; 0x17
     874:	88 8f       	std	Y+24, r24	; 0x18
     876:	99 8f       	std	Y+25, r25	; 0x19
     878:	6a 89       	ldd	r22, Y+18	; 0x12
     87a:	7b 89       	ldd	r23, Y+19	; 0x13
     87c:	8c 89       	ldd	r24, Y+20	; 0x14
     87e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     880:	31 e0       	ldi	r19, 0x01	; 1
     882:	39 0d       	add	r19, r9
     884:	d5 01       	movw	r26, r10
     886:	a9 0d       	add	r26, r9
     888:	b1 1d       	adc	r27, r1
     88a:	e0 5d       	subi	r30, 0xD0	; 208
     88c:	ec 93       	st	X, r30
     88e:	93 2e       	mov	r9, r19
        }while(qr.quot);
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	81 05       	cpc	r24, r1
     896:	91 05       	cpc	r25, r1
     898:	01 f7       	brne	.-64     	; 0x85a <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     89a:	11 23       	and	r17, r17
     89c:	61 f0       	breq	.+24     	; 0x8b6 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     89e:	51 10       	cpse	r5, r1
     8a0:	4b c0       	rjmp	.+150    	; 0x938 <lcd_int32+0x196>
     8a2:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     8a4:	31 17       	cp	r19, r17
     8a6:	38 f4       	brcc	.+14     	; 0x8b6 <lcd_int32+0x114>
     8a8:	f5 01       	movw	r30, r10
     8aa:	e3 0f       	add	r30, r19
     8ac:	f1 1d       	adc	r31, r1
     8ae:	90 83       	st	Z, r25
     8b0:	3f 5f       	subi	r19, 0xFF	; 255
     8b2:	13 13       	cpse	r17, r19
     8b4:	f9 cf       	rjmp	.-14     	; 0x8a8 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     8b6:	00 23       	and	r16, r16
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <lcd_int32+0x124>
     8ba:	f5 01       	movw	r30, r10
     8bc:	e3 0f       	add	r30, r19
     8be:	f1 1d       	adc	r31, r1
     8c0:	9d e2       	ldi	r25, 0x2D	; 45
     8c2:	90 83       	st	Z, r25
     8c4:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8c6:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     8c8:	31 50       	subi	r19, 0x01	; 1
     8ca:	f5 01       	movw	r30, r10
     8cc:	e3 0f       	add	r30, r19
     8ce:	f1 1d       	adc	r31, r1
     8d0:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8d2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8d4:	77 9b       	sbis	0x0e, 7	; 14
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     8d8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8da:	77 9b       	sbis	0x0e, 7	; 14
     8dc:	fe cf       	rjmp	.-4      	; 0x8da <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8de:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e2:	98 60       	ori	r25, 0x08	; 8
     8e4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ec:	97 7f       	andi	r25, 0xF7	; 247
     8ee:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	85 ed       	ldi	r24, 0xD5	; 213
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <lcd_int32+0x152>
     8f8:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     8fa:	31 11       	cpse	r19, r1
     8fc:	e5 cf       	rjmp	.-54     	; 0x8c8 <lcd_int32+0x126>

}
     8fe:	69 96       	adiw	r28, 0x19	; 25
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     92c:	91 2c       	mov	r9, r1
     92e:	9e 01       	movw	r18, r28
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	59 01       	movw	r10, r18
     936:	91 cf       	rjmp	.-222    	; 0x85a <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     938:	90 e3       	ldi	r25, 0x30	; 48
     93a:	b4 cf       	rjmp	.-152    	; 0x8a4 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     93c:	f0 94       	com	r15
     93e:	e0 94       	com	r14
     940:	d0 94       	com	r13
     942:	c0 94       	com	r12
     944:	c1 1c       	adc	r12, r1
     946:	d1 1c       	adc	r13, r1
     948:	e1 1c       	adc	r14, r1
     94a:	f1 1c       	adc	r15, r1
     94c:	54 cf       	rjmp	.-344    	; 0x7f6 <lcd_int32+0x54>

0000094e <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
     94e:	5f 92       	push	r5
     950:	6f 92       	push	r6
     952:	7f 92       	push	r7
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	61 97       	sbiw	r28, 0x11	; 17
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	5c 01       	movw	r10, r24
     97e:	96 2e       	mov	r9, r22
     980:	54 2e       	mov	r5, r20
     982:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     984:	8b 2c       	mov	r8, r11
     986:	88 1c       	adc	r8, r8
     988:	88 24       	eor	r8, r8
     98a:	88 1c       	adc	r8, r8
     98c:	78 2c       	mov	r7, r8
     98e:	9c 01       	movw	r18, r24
     990:	97 fd       	sbrc	r25, 7
     992:	9d c0       	rjmp	.+314    	; 0xace <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
     994:	55 20       	and	r5, r5
     996:	09 f4       	brne	.+2      	; 0x99a <lcd_int16+0x4c>
     998:	8e c0       	rjmp	.+284    	; 0xab6 <lcd_int16+0x168>
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5f       	subi	r16, 0xFF	; 255
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	78 01       	movw	r14, r16
     9a2:	cc 24       	eor	r12, r12
     9a4:	ca 94       	dec	r12
     9a6:	c5 0c       	add	r12, r5
     9a8:	d1 2c       	mov	r13, r1
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d8 0a       	sbc	r13, r24
     9b0:	c0 0e       	add	r12, r16
     9b2:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     9b4:	6a e0       	ldi	r22, 0x0A	; 10
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	c9 01       	movw	r24, r18
     9ba:	0e 94 90 08 	call	0x1120	; 0x1120 <__divmodhi4>
     9be:	46 2f       	mov	r20, r22
     9c0:	24 2f       	mov	r18, r20
     9c2:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     9c4:	80 5d       	subi	r24, 0xD0	; 208
     9c6:	f7 01       	movw	r30, r14
     9c8:	81 93       	st	Z+, r24
     9ca:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
     9cc:	ec 15       	cp	r30, r12
     9ce:	fd 05       	cpc	r31, r13
     9d0:	89 f7       	brne	.-30     	; 0x9b4 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     9d2:	ff 24       	eor	r15, r15
     9d4:	f3 94       	inc	r15
     9d6:	f5 0c       	add	r15, r5
     9d8:	f8 01       	movw	r30, r16
     9da:	e5 0d       	add	r30, r5
     9dc:	f1 1d       	adc	r31, r1
     9de:	8e e2       	ldi	r24, 0x2E	; 46
     9e0:	80 83       	st	Z, r24
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     9e4:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
     9e6:	6a e0       	ldi	r22, 0x0A	; 10
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	c9 01       	movw	r24, r18
     9ec:	0e 94 90 08 	call	0x1120	; 0x1120 <__divmodhi4>
     9f0:	46 2f       	mov	r20, r22
     9f2:	24 2f       	mov	r18, r20
     9f4:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	9f 0d       	add	r25, r15
     9fa:	f8 01       	movw	r30, r16
     9fc:	ef 0d       	add	r30, r15
     9fe:	f1 1d       	adc	r31, r1
     a00:	80 5d       	subi	r24, 0xD0	; 208
     a02:	80 83       	st	Z, r24
        }
        while(qr.quot);
     a04:	21 15       	cp	r18, r1
     a06:	31 05       	cpc	r19, r1
     a08:	69 f7       	brne	.-38     	; 0x9e4 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
     a0a:	61 10       	cpse	r6, r1
     a0c:	59 c0       	rjmp	.+178    	; 0xac0 <lcd_int16+0x172>
     a0e:	b7 fc       	sbrc	r11, 7
     a10:	63 c0       	rjmp	.+198    	; 0xad8 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     a12:	99 20       	and	r9, r9
     a14:	b1 f0       	breq	.+44     	; 0xa42 <lcd_int16+0xf4>
     a16:	68 2d       	mov	r22, r8
     a18:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     a1a:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     a1c:	29 2f       	mov	r18, r25
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	49 2d       	mov	r20, r9
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	46 1b       	sub	r20, r22
     a26:	57 0b       	sbc	r21, r23
     a28:	24 17       	cp	r18, r20
     a2a:	35 07       	cpc	r19, r21
     a2c:	54 f4       	brge	.+20     	; 0xa42 <lcd_int16+0xf4>
     a2e:	9f 5f       	subi	r25, 0xFF	; 255
     a30:	f8 01       	movw	r30, r16
     a32:	e2 0f       	add	r30, r18
     a34:	f3 1f       	adc	r31, r19
     a36:	80 83       	st	Z, r24
     a38:	29 2f       	mov	r18, r25
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	24 17       	cp	r18, r20
     a3e:	35 07       	cpc	r19, r21
     a40:	b4 f3       	brlt	.-20     	; 0xa2e <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
     a42:	77 20       	and	r7, r7
     a44:	31 f0       	breq	.+12     	; 0xa52 <lcd_int16+0x104>
     a46:	f8 01       	movw	r30, r16
     a48:	e9 0f       	add	r30, r25
     a4a:	f1 1d       	adc	r31, r1
     a4c:	8d e2       	ldi	r24, 0x2D	; 45
     a4e:	80 83       	st	Z, r24
     a50:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a52:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     a54:	91 50       	subi	r25, 0x01	; 1
     a56:	f8 01       	movw	r30, r16
     a58:	e9 0f       	add	r30, r25
     a5a:	f1 1d       	adc	r31, r1
     a5c:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a5e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a60:	77 9b       	sbis	0x0e, 7	; 14
     a62:	fe cf       	rjmp	.-4      	; 0xa60 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     a64:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a66:	77 9b       	sbis	0x0e, 7	; 14
     a68:	fe cf       	rjmp	.-4      	; 0xa66 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a6e:	88 60       	ori	r24, 0x08	; 8
     a70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a78:	87 7f       	andi	r24, 0xF7	; 247
     a7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7e:	f5 ed       	ldi	r31, 0xD5	; 213
     a80:	fa 95       	dec	r31
     a82:	f1 f7       	brne	.-4      	; 0xa80 <lcd_int16+0x132>
     a84:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     a86:	91 11       	cpse	r25, r1
     a88:	e5 cf       	rjmp	.-54     	; 0xa54 <lcd_int16+0x106>
}
     a8a:	61 96       	adiw	r28, 0x11	; 17
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	6f 90       	pop	r6
     ab2:	5f 90       	pop	r5
     ab4:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     ab6:	f1 2c       	mov	r15, r1
     ab8:	8e 01       	movw	r16, r28
     aba:	0f 5f       	subi	r16, 0xFF	; 255
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	93 cf       	rjmp	.-218    	; 0x9e6 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     ac0:	99 20       	and	r9, r9
     ac2:	09 f4       	brne	.+2      	; 0xac6 <lcd_int16+0x178>
     ac4:	be cf       	rjmp	.-132    	; 0xa42 <lcd_int16+0xf4>
     ac6:	68 2d       	mov	r22, r8
     ac8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     aca:	80 e3       	ldi	r24, 0x30	; 48
     acc:	a7 cf       	rjmp	.-178    	; 0xa1c <lcd_int16+0xce>
     ace:	22 27       	eor	r18, r18
     ad0:	33 27       	eor	r19, r19
     ad2:	28 1b       	sub	r18, r24
     ad4:	39 0b       	sbc	r19, r25
     ad6:	5e cf       	rjmp	.-324    	; 0x994 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     ad8:	f3 94       	inc	r15
     ada:	f3 94       	inc	r15
     adc:	f8 01       	movw	r30, r16
     ade:	e9 0f       	add	r30, r25
     ae0:	f1 1d       	adc	r31, r1
     ae2:	8d e2       	ldi	r24, 0x2D	; 45
     ae4:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     ae6:	99 20       	and	r9, r9
     ae8:	59 f0       	breq	.+22     	; 0xb00 <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     aea:	2f 2d       	mov	r18, r15
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	49 2d       	mov	r20, r9
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	24 17       	cp	r18, r20
     af4:	35 07       	cpc	r19, r21
     af6:	24 f4       	brge	.+8      	; 0xb00 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     af8:	9f 2d       	mov	r25, r15
                bSigned = 0;
     afa:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     afc:	80 e2       	ldi	r24, 0x20	; 32
     afe:	97 cf       	rjmp	.-210    	; 0xa2e <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b00:	9f 2d       	mov	r25, r15
     b02:	a7 cf       	rjmp	.-178    	; 0xa52 <lcd_int16+0x104>

00000b04 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	0b b6       	in	r0, 0x3b	; 59
     b10:	0f 92       	push	r0
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     b22:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b26:	8e 2f       	mov	r24, r30
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	38 97       	sbiw	r30, 0x08	; 8
     b2e:	e1 35       	cpi	r30, 0x51	; 81
     b30:	f1 05       	cpc	r31, r1
     b32:	b0 f0       	brcs	.+44     	; 0xb60 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     b34:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b38:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	0b be       	out	0x3b, r0	; 59
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     b60:	ea 5b       	subi	r30, 0xBA	; 186
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     b68:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     b6c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <twi_buf>
     b70:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <twi_buf+0x1>
     b74:	e8 0f       	add	r30, r24
     b76:	f1 1d       	adc	r31, r1
     b78:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     b7c:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     b7e:	84 e9       	ldi	r24, 0x94	; 148
     b80:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
     b84:	de cf       	rjmp	.-68     	; 0xb42 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     b86:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <twi_bus_addr>
     b8a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
     b8e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
     b92:	85 e8       	ldi	r24, 0x85	; 133
     b94:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     b98:	d4 cf       	rjmp	.-88     	; 0xb42 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     b9a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     b9e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <twi_msg_size>
     ba2:	89 17       	cp	r24, r25
     ba4:	60 f7       	brcc	.-40     	; 0xb7e <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     ba6:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <twi_buf>
     baa:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <twi_buf+0x1>
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	98 0f       	add	r25, r24
     bb2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <twi_buf_ptr.1780>
     bb6:	e8 0f       	add	r30, r24
     bb8:	f1 1d       	adc	r31, r1
     bba:	80 81       	ld	r24, Z
     bbc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
     bc0:	85 e8       	ldi	r24, 0x85	; 133
     bc2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     bc6:	bd cf       	rjmp	.-134    	; 0xb42 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     bc8:	85 ea       	ldi	r24, 0xA5	; 165
     bca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     bce:	b9 cf       	rjmp	.-142    	; 0xb42 <__vector_33+0x3e>
     bd0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     bd4:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <twi_msg_size>
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	28 17       	cp	r18, r24
     be0:	39 07       	cpc	r19, r25
     be2:	dc f4       	brge	.+54     	; 0xc1a <__vector_33+0x116>
     be4:	85 ec       	ldi	r24, 0xC5	; 197
     be6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     bea:	ab cf       	rjmp	.-170    	; 0xb42 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     bec:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <twi_buf>
     bf0:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <twi_buf+0x1>
     bf4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	28 0f       	add	r18, r24
     bfc:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <twi_buf_ptr.1780>
     c00:	e8 0f       	add	r30, r24
     c02:	f1 1d       	adc	r31, r1
     c04:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     c08:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     c0a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <twi_msg_size>
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	2c f3       	brlt	.-54     	; 0xbe4 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     c1a:	85 e8       	ldi	r24, 0x85	; 133
     c1c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c20:	90 cf       	rjmp	.-224    	; 0xb42 <__vector_33+0x3e>

00000c22 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c22:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
     c26:	81 70       	andi	r24, 0x01	; 1
     c28:	08 95       	ret

00000c2a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c2a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     c2e:	90 fd       	sbrc	r25, 0
     c30:	fc cf       	rjmp	.-8      	; 0xc2a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
     c38:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <twi_buf+0x1>
     c3c:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
     c40:	40 93 97 01 	sts	0x0197, r20	; 0x800197 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
     c44:	85 ea       	ldi	r24, 0xA5	; 165
     c46:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c4a:	08 95       	ret

00000c4c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c4c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     c50:	90 fd       	sbrc	r25, 0
     c52:	fc cf       	rjmp	.-8      	; 0xc4c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     c54:	81 60       	ori	r24, 0x01	; 1
     c56:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
     c5a:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <twi_buf+0x1>
     c5e:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
     c62:	40 93 97 01 	sts	0x0197, r20	; 0x800197 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
     c66:	85 ea       	ldi	r24, 0xA5	; 165
     c68:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c6c:	08 95       	ret

00000c6e <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
     c74:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
     c78:	8c e0       	ldi	r24, 0x0C	; 12
     c7a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c7e:	08 95       	ret

00000c80 <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
     c80:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
     c82:	cb 01       	movw	r24, r22
     c84:	88 0f       	add	r24, r24
     c86:	89 2f       	mov	r24, r25
     c88:	88 1f       	adc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	91 95       	neg	r25

	if(f_not_c == 0x01){
     c8e:	41 30       	cpi	r20, 0x01	; 1
     c90:	91 f4       	brne	.+36     	; 0xcb6 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
     c92:	9c 01       	movw	r18, r24
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	28 0f       	add	r18, r24
     ca2:	39 1f       	adc	r19, r25
     ca4:	ad ec       	ldi	r26, 0xCD	; 205
     ca6:	bc ec       	ldi	r27, 0xCC	; 204
     ca8:	0e 94 cc 08 	call	0x1198	; 0x1198 <__umulhisi3>
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	bf 01       	movw	r22, r30
     cba:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__itoa_ncheck>

00000cbe <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cbe:	5d 9b       	sbis	0x0b, 5	; 11
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <uart_putc>
    UDR0 = data;    // Send data byte
     cc2:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cc4:	5d 9b       	sbis	0x0b, 5	; 11
     cc6:	fe cf       	rjmp	.-4      	; 0xcc4 <uart_putc+0x6>
}
     cc8:	08 95       	ret

00000cca <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
     cca:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
     ccc:	90 81       	ld	r25, Z
     cce:	99 23       	and	r25, r25
     cd0:	49 f0       	breq	.+18     	; 0xce4 <uart_puts+0x1a>
     cd2:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cd4:	5d 9b       	sbis	0x0b, 5	; 11
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
     cd8:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cda:	5d 9b       	sbis	0x0b, 5	; 11
     cdc:	fe cf       	rjmp	.-4      	; 0xcda <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
     cde:	91 91       	ld	r25, Z+
     ce0:	91 11       	cpse	r25, r1
     ce2:	f8 cf       	rjmp	.-16     	; 0xcd4 <uart_puts+0xa>
     ce4:	08 95       	ret

00000ce6 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
     ce6:	9c 01       	movw	r18, r24
     ce8:	fc 01       	movw	r30, r24
     cea:	44 91       	lpm	r20, Z
     cec:	44 23       	and	r20, r20
     cee:	69 f0       	breq	.+26     	; 0xd0a <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	f9 01       	movw	r30, r18
     cf4:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cf6:	5d 9b       	sbis	0x0b, 5	; 11
     cf8:	fe cf       	rjmp	.-4      	; 0xcf6 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
     cfa:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cfc:	5d 9b       	sbis	0x0b, 5	; 11
     cfe:	fe cf       	rjmp	.-4      	; 0xcfc <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
     d00:	9c 01       	movw	r18, r24
     d02:	fc 01       	movw	r30, r24
     d04:	44 91       	lpm	r20, Z
     d06:	41 11       	cpse	r20, r1
     d08:	f3 cf       	rjmp	.-26     	; 0xcf0 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
     d0a:	08 95       	ret

00000d0c <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
     d0c:	8a b1       	in	r24, 0x0a	; 10
     d0e:	88 61       	ori	r24, 0x18	; 24
     d10:	8a b9       	out	0x0a, r24	; 10

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     d12:	e5 e9       	ldi	r30, 0x95	; 149
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	86 60       	ori	r24, 0x06	; 6
     d1a:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     d1c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     d20:	80 e1       	ldi	r24, 0x10	; 16
     d22:	89 b9       	out	0x09, r24	; 9
     d24:	08 95       	ret

00000d26 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	9e e3       	ldi	r25, 0x3E	; 62
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <uart_getc+0xa>
     d2c:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     d2e:	21 f0       	breq	.+8      	; 0xd38 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     d30:	5f 9b       	sbis	0x0b, 7	; 11
     d32:	fc cf       	rjmp	.-8      	; 0xd2c <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
     d34:	8c b1       	in	r24, 0x0c	; 12
     d36:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
     d38:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
     d3a:	08 95       	ret

00000d3c <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     d3c:	84 e1       	ldi	r24, 0x14	; 20
     d3e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	6c ee       	ldi	r22, 0xEC	; 236
     d46:	71 e0       	ldi	r23, 0x01	; 1
     d48:	82 e2       	ldi	r24, 0x22	; 34
     d4a:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     d4e:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     d52:	81 11       	cpse	r24, r1
     d54:	fc cf       	rjmp	.-8      	; 0xd4e <get_int_status+0x12>
     d56:	8f ea       	ldi	r24, 0xAF	; 175
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <get_int_status+0x1e>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <get_int_status+0x24>
     d60:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	6e e0       	ldi	r22, 0x0E	; 14
     d66:	72 e0       	ldi	r23, 0x02	; 2
     d68:	82 e2       	ldi	r24, 0x22	; 34
     d6a:	0e 94 26 06 	call	0xc4c	; 0xc4c <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     d6e:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     d72:	81 11       	cpse	r24, r1
     d74:	fc cf       	rjmp	.-8      	; 0xd6e <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
     d76:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <si4734_rd_buf>
     d7a:	08 95       	ret

00000d7c <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
     d82:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     d86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d8e:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     d92:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
     d96:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
     d9a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     d9e:	45 e0       	ldi	r20, 0x05	; 5
     da0:	6c ee       	ldi	r22, 0xEC	; 236
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	82 e2       	ldi	r24, 0x22	; 34
     da6:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     daa:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <STC_interrupt>
     dae:	88 23       	and	r24, r24
     db0:	e1 f3       	breq	.-8      	; 0xdaa <fm_tune_freq+0x2e>
}
     db2:	08 95       	ret

00000db4 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
     db4:	80 e4       	ldi	r24, 0x40	; 64
     db6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
     dba:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     dbe:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_am_freq>
     dc2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <current_am_freq+0x1>
     dc6:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     dca:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     dce:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
     dd2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
     dd6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     dda:	46 e0       	ldi	r20, 0x06	; 6
     ddc:	6c ee       	ldi	r22, 0xEC	; 236
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	82 e2       	ldi	r24, 0x22	; 34
     de2:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     de6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <STC_interrupt>
     dea:	88 23       	and	r24, r24
     dec:	e1 f3       	breq	.-8      	; 0xde6 <am_tune_freq+0x32>
}
     dee:	08 95       	ret

00000df0 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
     df0:	ec ee       	ldi	r30, 0xEC	; 236
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 e4       	ldi	r24, 0x40	; 64
     df6:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
     df8:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     dfa:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <current_sw_freq>
     dfe:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <current_sw_freq+0x1>
     e02:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     e04:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     e06:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     e0c:	46 e0       	ldi	r20, 0x06	; 6
     e0e:	bf 01       	movw	r22, r30
     e10:	82 e2       	ldi	r24, 0x22	; 34
     e12:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e16:	2f ef       	ldi	r18, 0xFF	; 255
     e18:	87 ee       	ldi	r24, 0xE7	; 231
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	80 40       	sbci	r24, 0x00	; 0
     e20:	90 40       	sbci	r25, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <sw_tune_freq+0x2c>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <sw_tune_freq+0x36>
     e26:	00 00       	nop
     e28:	08 95       	ret

00000e2a <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
     e2a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     e2e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	91 05       	cpc	r25, r1
     e36:	51 f1       	breq	.+84     	; 0xe8c <radio_pwr_dwn+0x62>
     e38:	00 f1       	brcs	.+64     	; 0xe7a <radio_pwr_dwn+0x50>
     e3a:	02 97       	sbiw	r24, 0x02	; 2
     e3c:	41 f4       	brne	.+16     	; 0xe4e <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
     e3e:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <current_sw_freq>
     e42:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <current_sw_freq+0x1>
     e46:	81 e6       	ldi	r24, 0x61	; 97
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
     e4e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <current_volume>
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 54 09 	call	0x12a8	; 0x12a8 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
     e5a:	81 e1       	ldi	r24, 0x11	; 17
     e5c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	6c ee       	ldi	r22, 0xEC	; 236
     e64:	71 e0       	ldi	r23, 0x01	; 1
     e66:	82 e2       	ldi	r24, 0x22	; 34
     e68:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6c:	87 ed       	ldi	r24, 0xD7	; 215
     e6e:	94 e0       	ldi	r25, 0x04	; 4
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <radio_pwr_dwn+0x46>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <radio_pwr_dwn+0x4c>
     e76:	00 00       	nop
     e78:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
     e7a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     e7e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 61 09 	call	0x12c2	; 0x12c2 <eeprom_write_word>
     e8a:	e1 cf       	rjmp	.-62     	; 0xe4e <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
     e8c:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <current_am_freq>
     e90:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <current_am_freq+0x1>
     e94:	82 e3       	ldi	r24, 0x32	; 50
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 61 09 	call	0x12c2	; 0x12c2 <eeprom_write_word>
     e9c:	d8 cf       	rjmp	.-80     	; 0xe4e <radio_pwr_dwn+0x24>

00000e9e <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
     e9e:	83 e2       	ldi	r24, 0x23	; 35
     ea0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     eaa:	42 e0       	ldi	r20, 0x02	; 2
     eac:	6c ee       	ldi	r22, 0xEC	; 236
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	82 e2       	ldi	r24, 0x22	; 34
     eb2:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     eb6:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     eba:	81 11       	cpse	r24, r1
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <fm_rsq_status+0x18>
     ebe:	8f ea       	ldi	r24, 0xAF	; 175
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <fm_rsq_status+0x24>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <fm_rsq_status+0x2a>
     ec8:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     eca:	48 e0       	ldi	r20, 0x08	; 8
     ecc:	65 ef       	ldi	r22, 0xF5	; 245
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	82 e2       	ldi	r24, 0x22	; 34
     ed2:	0e 94 26 06 	call	0xc4c	; 0xc4c <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     ed6:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     eda:	81 11       	cpse	r24, r1
     edc:	fc cf       	rjmp	.-8      	; 0xed6 <fm_rsq_status+0x38>
}
     ede:	08 95       	ret

00000ee0 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
     ee0:	82 e2       	ldi	r24, 0x22	; 34
     ee2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     eec:	42 e0       	ldi	r20, 0x02	; 2
     eee:	6c ee       	ldi	r22, 0xEC	; 236
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	82 e2       	ldi	r24, 0x22	; 34
     ef4:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     ef8:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     efc:	81 11       	cpse	r24, r1
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <fm_tune_status+0x18>
     f00:	8f ea       	ldi	r24, 0xAF	; 175
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <fm_tune_status+0x24>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <fm_tune_status+0x2a>
     f0a:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f0c:	48 e0       	ldi	r20, 0x08	; 8
     f0e:	65 ef       	ldi	r22, 0xF5	; 245
     f10:	71 e0       	ldi	r23, 0x01	; 1
     f12:	82 e2       	ldi	r24, 0x22	; 34
     f14:	0e 94 26 06 	call	0xc4c	; 0xc4c <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
     f18:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     f1c:	81 11       	cpse	r24, r1
     f1e:	fc cf       	rjmp	.-8      	; 0xf18 <fm_tune_status+0x38>
}
     f20:	08 95       	ret

00000f22 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
     f22:	82 e4       	ldi	r24, 0x42	; 66
     f24:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f2e:	42 e0       	ldi	r20, 0x02	; 2
     f30:	6c ee       	ldi	r22, 0xEC	; 236
     f32:	71 e0       	ldi	r23, 0x01	; 1
     f34:	82 e2       	ldi	r24, 0x22	; 34
     f36:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f3a:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     f3e:	81 11       	cpse	r24, r1
     f40:	fc cf       	rjmp	.-8      	; 0xf3a <am_tune_status+0x18>
     f42:	8f ea       	ldi	r24, 0xAF	; 175
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <am_tune_status+0x24>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <am_tune_status+0x2a>
     f4c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f4e:	48 e0       	ldi	r20, 0x08	; 8
     f50:	65 ef       	ldi	r22, 0xF5	; 245
     f52:	71 e0       	ldi	r23, 0x01	; 1
     f54:	82 e2       	ldi	r24, 0x22	; 34
     f56:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <twi_start_rd>

00000f5a <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
     f5a:	83 e4       	ldi	r24, 0x43	; 67
     f5c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f66:	42 e0       	ldi	r20, 0x02	; 2
     f68:	6c ee       	ldi	r22, 0xEC	; 236
     f6a:	71 e0       	ldi	r23, 0x01	; 1
     f6c:	82 e2       	ldi	r24, 0x22	; 34
     f6e:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f72:	0e 94 11 06 	call	0xc22	; 0xc22 <twi_busy>
     f76:	81 11       	cpse	r24, r1
     f78:	fc cf       	rjmp	.-8      	; 0xf72 <am_rsq_status+0x18>
     f7a:	8f ea       	ldi	r24, 0xAF	; 175
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <am_rsq_status+0x24>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <am_rsq_status+0x2a>
     f84:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f86:	48 e0       	ldi	r20, 0x08	; 8
     f88:	65 ef       	ldi	r22, 0xF5	; 245
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	82 e2       	ldi	r24, 0x22	; 34
     f8e:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <twi_start_rd>

00000f92 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
     f92:	ec ee       	ldi	r30, 0xEC	; 236
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	22 e1       	ldi	r18, 0x12	; 18
     f98:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
     f9a:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
     f9c:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
     f9e:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
     fa0:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
     fa2:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     fa4:	46 e0       	ldi	r20, 0x06	; 6
     fa6:	bf 01       	movw	r22, r30
     fa8:	82 e2       	ldi	r24, 0x22	; 34
     faa:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fae:	8f e3       	ldi	r24, 0x3F	; 63
     fb0:	9c e9       	ldi	r25, 0x9C	; 156
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <set_property+0x20>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <set_property+0x26>
     fb8:	00 00       	nop
     fba:	08 95       	ret

00000fbc <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 4e 09 	call	0x129c	; 0x129c <eeprom_read_word>
     fc4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     fc8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
     fcc:	87 e0       	ldi	r24, 0x07	; 7
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 46 09 	call	0x128c	; 0x128c <eeprom_read_byte>
     fd4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
     fd8:	ec ee       	ldi	r30, 0xEC	; 236
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
     fe0:	80 e5       	ldi	r24, 0x50	; 80
     fe2:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
     fe8:	43 e0       	ldi	r20, 0x03	; 3
     fea:	bf 01       	movw	r22, r30
     fec:	82 e2       	ldi	r24, 0x22	; 34
     fee:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	8b ed       	ldi	r24, 0xDB	; 219
     ff6:	95 e0       	ldi	r25, 0x05	; 5
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	80 40       	sbci	r24, 0x00	; 0
     ffc:	90 40       	sbci	r25, 0x00	; 0
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <fm_pwr_up+0x3c>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <fm_pwr_up+0x46>
    1002:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <set_property>

00001010 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1010:	82 e3       	ldi	r24, 0x32	; 50
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 4e 09 	call	0x129c	; 0x129c <eeprom_read_word>
    1018:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <current_am_freq+0x1>
    101c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 46 09 	call	0x128c	; 0x128c <eeprom_read_byte>
    1028:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    102c:	ec ee       	ldi	r30, 0xEC	; 236
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1034:	81 e5       	ldi	r24, 0x51	; 81
    1036:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    1038:	85 e0       	ldi	r24, 0x05	; 5
    103a:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    103c:	43 e0       	ldi	r20, 0x03	; 3
    103e:	bf 01       	movw	r22, r30
    1040:	82 e2       	ldi	r24, 0x22	; 34
    1042:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    1046:	2f ef       	ldi	r18, 0xFF	; 255
    1048:	8b ed       	ldi	r24, 0xDB	; 219
    104a:	95 e0       	ldi	r25, 0x05	; 5
    104c:	21 50       	subi	r18, 0x01	; 1
    104e:	80 40       	sbci	r24, 0x00	; 0
    1050:	90 40       	sbci	r25, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <am_pwr_up+0x3c>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <am_pwr_up+0x46>
    1056:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <set_property>

00001064 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1064:	81 e6       	ldi	r24, 0x61	; 97
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 4e 09 	call	0x129c	; 0x129c <eeprom_read_word>
    106c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <current_sw_freq+0x1>
    1070:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1074:	87 e0       	ldi	r24, 0x07	; 7
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 46 09 	call	0x128c	; 0x128c <eeprom_read_byte>
    107c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1080:	ec ee       	ldi	r30, 0xEC	; 236
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1088:	81 e5       	ldi	r24, 0x51	; 81
    108a:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    108c:	85 e0       	ldi	r24, 0x05	; 5
    108e:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1090:	43 e0       	ldi	r20, 0x03	; 3
    1092:	bf 01       	movw	r22, r30
    1094:	82 e2       	ldi	r24, 0x22	; 34
    1096:	0e 94 15 06 	call	0xc2a	; 0xc2a <twi_start_wr>
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	8b ed       	ldi	r24, 0xDB	; 219
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	21 50       	subi	r18, 0x01	; 1
    10a2:	80 40       	sbci	r24, 0x00	; 0
    10a4:	90 40       	sbci	r25, 0x00	; 0
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <sw_pwr_up+0x3c>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <sw_pwr_up+0x46>
    10aa:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	93 e3       	ldi	r25, 0x33	; 51
    10b4:	0e 94 c9 07 	call	0xf92	; 0xf92 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	71 e0       	ldi	r23, 0x01	; 1
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	91 e3       	ldi	r25, 0x31	; 49
    10c0:	0e 94 c9 07 	call	0xf92	; 0xf92 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <set_property>

000010d0 <main>:
/***********************************************************************/


int main(){
        init_twi();
    10d0:	0e 94 37 06 	call	0xc6e	; 0xc6e <init_twi>

        //Setup audio output (max)
        PORTE |= 0x08;
    10d4:	1b 9a       	sbi	0x03, 3	; 3
	DDRE  |= 0x08;
    10d6:	13 9a       	sbi	0x02, 3	; 2

	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
    10d8:	12 9a       	sbi	0x02, 2	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
    10da:	1a 9a       	sbi	0x03, 2	; 3

        EICRB |= (1<<ISC71) | (1<ISC70);
    10dc:	8a b7       	in	r24, 0x3a	; 58
    10de:	81 68       	ori	r24, 0x81	; 129
    10e0:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT7);
    10e2:	89 b7       	in	r24, 0x39	; 57
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	89 bf       	out	0x39, r24	; 57

	//hardware reset of Si4734
	PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
    10e8:	1f 98       	cbi	0x03, 7	; 3
	DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
    10ea:	17 9a       	sbi	0x02, 7	; 2
	PORTE |=  (1<<PE2); //hardware reset Si4734 
    10ec:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ee:	8f e1       	ldi	r24, 0x1F	; 31
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <main+0x22>
    10f6:	00 c0       	rjmp	.+0      	; 0x10f8 <main+0x28>
    10f8:	00 00       	nop
	_delay_us(200);     //hold for 200us, 100us by spec         
	PORTE &= ~(1<<PE2); //release reset 
    10fa:	1a 98       	cbi	0x03, 2	; 3
    10fc:	90 ea       	ldi	r25, 0xA0	; 160
    10fe:	9a 95       	dec	r25
    1100:	f1 f7       	brne	.-4      	; 0x10fe <main+0x2e>
	_delay_us(30);      //5us required because of my slow I2C translators I suspect
	//Si code in "low" has 30us delay...no explaination
	DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
    1102:	17 98       	cbi	0x02, 7	; 2

        sei();
    1104:	78 94       	sei

	fm_pwr_up(); //powerup the radio as appropriate
    1106:	0e 94 de 07 	call	0xfbc	; 0xfbc <fm_pwr_up>
	current_fm_freq = 10630; //arg2, arg3: 99.9Mhz, 200khz steps
    110a:	86 e8       	ldi	r24, 0x86	; 134
    110c:	99 e2       	ldi	r25, 0x29	; 41
    110e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	fm_tune_freq(); //tune radio to frequency in current_fm_freq
    1116:	0e 94 be 06 	call	0xd7c	; 0xd7c <fm_tune_freq>

	/*
	   while(1){
	   }
	 */
}
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	08 95       	ret

00001120 <__divmodhi4>:
    1120:	97 fb       	bst	r25, 7
    1122:	07 2e       	mov	r0, r23
    1124:	16 f4       	brtc	.+4      	; 0x112a <__divmodhi4+0xa>
    1126:	00 94       	com	r0
    1128:	07 d0       	rcall	.+14     	; 0x1138 <__divmodhi4_neg1>
    112a:	77 fd       	sbrc	r23, 7
    112c:	09 d0       	rcall	.+18     	; 0x1140 <__divmodhi4_neg2>
    112e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__udivmodhi4>
    1132:	07 fc       	sbrc	r0, 7
    1134:	05 d0       	rcall	.+10     	; 0x1140 <__divmodhi4_neg2>
    1136:	3e f4       	brtc	.+14     	; 0x1146 <__divmodhi4_exit>

00001138 <__divmodhi4_neg1>:
    1138:	90 95       	com	r25
    113a:	81 95       	neg	r24
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__divmodhi4_neg2>:
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255

00001146 <__divmodhi4_exit>:
    1146:	08 95       	ret

00001148 <__divmodsi4>:
    1148:	05 2e       	mov	r0, r21
    114a:	97 fb       	bst	r25, 7
    114c:	1e f4       	brtc	.+6      	; 0x1154 <__divmodsi4+0xc>
    114e:	00 94       	com	r0
    1150:	0e 94 bb 08 	call	0x1176	; 0x1176 <__negsi2>
    1154:	57 fd       	sbrc	r21, 7
    1156:	07 d0       	rcall	.+14     	; 0x1166 <__divmodsi4_neg2>
    1158:	0e 94 ef 08 	call	0x11de	; 0x11de <__udivmodsi4>
    115c:	07 fc       	sbrc	r0, 7
    115e:	03 d0       	rcall	.+6      	; 0x1166 <__divmodsi4_neg2>
    1160:	4e f4       	brtc	.+18     	; 0x1174 <__divmodsi4_exit>
    1162:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__negsi2>

00001166 <__divmodsi4_neg2>:
    1166:	50 95       	com	r21
    1168:	40 95       	com	r20
    116a:	30 95       	com	r19
    116c:	21 95       	neg	r18
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	4f 4f       	sbci	r20, 0xFF	; 255
    1172:	5f 4f       	sbci	r21, 0xFF	; 255

00001174 <__divmodsi4_exit>:
    1174:	08 95       	ret

00001176 <__negsi2>:
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__tablejump2__>:
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	00 24       	eor	r0, r0
    118c:	00 1c       	adc	r0, r0
    118e:	0b be       	out	0x3b, r0	; 59
    1190:	07 90       	elpm	r0, Z+
    1192:	f6 91       	elpm	r31, Z
    1194:	e0 2d       	mov	r30, r0
    1196:	09 94       	ijmp

00001198 <__umulhisi3>:
    1198:	a2 9f       	mul	r26, r18
    119a:	b0 01       	movw	r22, r0
    119c:	b3 9f       	mul	r27, r19
    119e:	c0 01       	movw	r24, r0
    11a0:	a3 9f       	mul	r26, r19
    11a2:	70 0d       	add	r23, r0
    11a4:	81 1d       	adc	r24, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	91 1d       	adc	r25, r1
    11aa:	b2 9f       	mul	r27, r18
    11ac:	70 0d       	add	r23, r0
    11ae:	81 1d       	adc	r24, r1
    11b0:	11 24       	eor	r1, r1
    11b2:	91 1d       	adc	r25, r1
    11b4:	08 95       	ret

000011b6 <__udivmodhi4>:
    11b6:	aa 1b       	sub	r26, r26
    11b8:	bb 1b       	sub	r27, r27
    11ba:	51 e1       	ldi	r21, 0x11	; 17
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <__udivmodhi4_ep>

000011be <__udivmodhi4_loop>:
    11be:	aa 1f       	adc	r26, r26
    11c0:	bb 1f       	adc	r27, r27
    11c2:	a6 17       	cp	r26, r22
    11c4:	b7 07       	cpc	r27, r23
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <__udivmodhi4_ep>
    11c8:	a6 1b       	sub	r26, r22
    11ca:	b7 0b       	sbc	r27, r23

000011cc <__udivmodhi4_ep>:
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	5a 95       	dec	r21
    11d2:	a9 f7       	brne	.-22     	; 0x11be <__udivmodhi4_loop>
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	08 95       	ret

000011de <__udivmodsi4>:
    11de:	a1 e2       	ldi	r26, 0x21	; 33
    11e0:	1a 2e       	mov	r1, r26
    11e2:	aa 1b       	sub	r26, r26
    11e4:	bb 1b       	sub	r27, r27
    11e6:	fd 01       	movw	r30, r26
    11e8:	0d c0       	rjmp	.+26     	; 0x1204 <__udivmodsi4_ep>

000011ea <__udivmodsi4_loop>:
    11ea:	aa 1f       	adc	r26, r26
    11ec:	bb 1f       	adc	r27, r27
    11ee:	ee 1f       	adc	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	a2 17       	cp	r26, r18
    11f4:	b3 07       	cpc	r27, r19
    11f6:	e4 07       	cpc	r30, r20
    11f8:	f5 07       	cpc	r31, r21
    11fa:	20 f0       	brcs	.+8      	; 0x1204 <__udivmodsi4_ep>
    11fc:	a2 1b       	sub	r26, r18
    11fe:	b3 0b       	sbc	r27, r19
    1200:	e4 0b       	sbc	r30, r20
    1202:	f5 0b       	sbc	r31, r21

00001204 <__udivmodsi4_ep>:
    1204:	66 1f       	adc	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	1a 94       	dec	r1
    120e:	69 f7       	brne	.-38     	; 0x11ea <__udivmodsi4_loop>
    1210:	60 95       	com	r22
    1212:	70 95       	com	r23
    1214:	80 95       	com	r24
    1216:	90 95       	com	r25
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	bd 01       	movw	r22, r26
    121e:	cf 01       	movw	r24, r30
    1220:	08 95       	ret

00001222 <__itoa_ncheck>:
    1222:	bb 27       	eor	r27, r27
    1224:	4a 30       	cpi	r20, 0x0A	; 10
    1226:	31 f4       	brne	.+12     	; 0x1234 <__itoa_ncheck+0x12>
    1228:	99 23       	and	r25, r25
    122a:	22 f4       	brpl	.+8      	; 0x1234 <__itoa_ncheck+0x12>
    122c:	bd e2       	ldi	r27, 0x2D	; 45
    122e:	90 95       	com	r25
    1230:	81 95       	neg	r24
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__utoa_common>

00001238 <__utoa_ncheck>:
    1238:	bb 27       	eor	r27, r27

0000123a <__utoa_common>:
    123a:	fb 01       	movw	r30, r22
    123c:	55 27       	eor	r21, r21
    123e:	aa 27       	eor	r26, r26
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	aa 1f       	adc	r26, r26
    1246:	a4 17       	cp	r26, r20
    1248:	10 f0       	brcs	.+4      	; 0x124e <__utoa_common+0x14>
    124a:	a4 1b       	sub	r26, r20
    124c:	83 95       	inc	r24
    124e:	50 51       	subi	r21, 0x10	; 16
    1250:	b9 f7       	brne	.-18     	; 0x1240 <__utoa_common+0x6>
    1252:	a0 5d       	subi	r26, 0xD0	; 208
    1254:	aa 33       	cpi	r26, 0x3A	; 58
    1256:	08 f0       	brcs	.+2      	; 0x125a <__utoa_common+0x20>
    1258:	a9 5d       	subi	r26, 0xD9	; 217
    125a:	a1 93       	st	Z+, r26
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	79 f7       	brne	.-34     	; 0x123e <__utoa_common+0x4>
    1260:	b1 11       	cpse	r27, r1
    1262:	b1 93       	st	Z+, r27
    1264:	11 92       	st	Z+, r1
    1266:	cb 01       	movw	r24, r22
    1268:	0c 94 36 09 	jmp	0x126c	; 0x126c <strrev>

0000126c <strrev>:
    126c:	dc 01       	movw	r26, r24
    126e:	fc 01       	movw	r30, r24
    1270:	67 2f       	mov	r22, r23
    1272:	71 91       	ld	r23, Z+
    1274:	77 23       	and	r23, r23
    1276:	e1 f7       	brne	.-8      	; 0x1270 <strrev+0x4>
    1278:	32 97       	sbiw	r30, 0x02	; 2
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <strrev+0x18>
    127c:	7c 91       	ld	r23, X
    127e:	6d 93       	st	X+, r22
    1280:	70 83       	st	Z, r23
    1282:	62 91       	ld	r22, -Z
    1284:	ae 17       	cp	r26, r30
    1286:	bf 07       	cpc	r27, r31
    1288:	c8 f3       	brcs	.-14     	; 0x127c <strrev+0x10>
    128a:	08 95       	ret

0000128c <eeprom_read_byte>:
    128c:	e1 99       	sbic	0x1c, 1	; 28
    128e:	fe cf       	rjmp	.-4      	; 0x128c <eeprom_read_byte>
    1290:	9f bb       	out	0x1f, r25	; 31
    1292:	8e bb       	out	0x1e, r24	; 30
    1294:	e0 9a       	sbi	0x1c, 0	; 28
    1296:	99 27       	eor	r25, r25
    1298:	8d b3       	in	r24, 0x1d	; 29
    129a:	08 95       	ret

0000129c <eeprom_read_word>:
    129c:	a8 e1       	ldi	r26, 0x18	; 24
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	42 e0       	ldi	r20, 0x02	; 2
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <eeprom_read_blraw>

000012a8 <eeprom_write_byte>:
    12a8:	26 2f       	mov	r18, r22

000012aa <eeprom_write_r18>:
    12aa:	e1 99       	sbic	0x1c, 1	; 28
    12ac:	fe cf       	rjmp	.-4      	; 0x12aa <eeprom_write_r18>
    12ae:	9f bb       	out	0x1f, r25	; 31
    12b0:	8e bb       	out	0x1e, r24	; 30
    12b2:	2d bb       	out	0x1d, r18	; 29
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	e2 9a       	sbi	0x1c, 2	; 28
    12ba:	e1 9a       	sbi	0x1c, 1	; 28
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	08 95       	ret

000012c2 <eeprom_write_word>:
    12c2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <eeprom_write_byte>
    12c6:	27 2f       	mov	r18, r23
    12c8:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <eeprom_write_r18>

000012cc <eeprom_read_block>:
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22

000012d0 <eeprom_read_blraw>:
    12d0:	fc 01       	movw	r30, r24
    12d2:	e1 99       	sbic	0x1c, 1	; 28
    12d4:	fe cf       	rjmp	.-4      	; 0x12d2 <eeprom_read_blraw+0x2>
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <eeprom_read_blraw+0x14>
    12d8:	ff bb       	out	0x1f, r31	; 31
    12da:	ee bb       	out	0x1e, r30	; 30
    12dc:	e0 9a       	sbi	0x1c, 0	; 28
    12de:	31 96       	adiw	r30, 0x01	; 1
    12e0:	0d b2       	in	r0, 0x1d	; 29
    12e2:	0d 92       	st	X+, r0
    12e4:	41 50       	subi	r20, 0x01	; 1
    12e6:	50 40       	sbci	r21, 0x00	; 0
    12e8:	b8 f7       	brcc	.-18     	; 0x12d8 <eeprom_read_blraw+0x8>
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
