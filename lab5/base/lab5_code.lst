
lab5_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000019ec  00001a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  0080014c  0080014c  00001acc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b83  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f4  00000000  00000000  00004763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bf  00000000  00000000  00005857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00006f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e50  00000000  00000000  00007d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00009ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__vector_14>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_21>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	42 0a       	sbc	r4, r18
      8e:	19 0a       	sbc	r1, r25
      90:	19 0a       	sbc	r1, r25
      92:	19 0a       	sbc	r1, r25
      94:	19 0a       	sbc	r1, r25
      96:	19 0a       	sbc	r1, r25
      98:	19 0a       	sbc	r1, r25
      9a:	19 0a       	sbc	r1, r25
      9c:	42 0a       	sbc	r4, r18
      9e:	19 0a       	sbc	r1, r25
      a0:	19 0a       	sbc	r1, r25
      a2:	19 0a       	sbc	r1, r25
      a4:	19 0a       	sbc	r1, r25
      a6:	19 0a       	sbc	r1, r25
      a8:	19 0a       	sbc	r1, r25
      aa:	19 0a       	sbc	r1, r25
      ac:	4c 0a       	sbc	r4, r28
      ae:	19 0a       	sbc	r1, r25
      b0:	19 0a       	sbc	r1, r25
      b2:	19 0a       	sbc	r1, r25
      b4:	19 0a       	sbc	r1, r25
      b6:	19 0a       	sbc	r1, r25
      b8:	19 0a       	sbc	r1, r25
      ba:	19 0a       	sbc	r1, r25
      bc:	19 0a       	sbc	r1, r25
      be:	19 0a       	sbc	r1, r25
      c0:	19 0a       	sbc	r1, r25
      c2:	19 0a       	sbc	r1, r25
      c4:	19 0a       	sbc	r1, r25
      c6:	19 0a       	sbc	r1, r25
      c8:	19 0a       	sbc	r1, r25
      ca:	19 0a       	sbc	r1, r25
      cc:	4c 0a       	sbc	r4, r28
      ce:	19 0a       	sbc	r1, r25
      d0:	19 0a       	sbc	r1, r25
      d2:	19 0a       	sbc	r1, r25
      d4:	19 0a       	sbc	r1, r25
      d6:	19 0a       	sbc	r1, r25
      d8:	19 0a       	sbc	r1, r25
      da:	19 0a       	sbc	r1, r25
      dc:	19 0a       	sbc	r1, r25
      de:	19 0a       	sbc	r1, r25
      e0:	19 0a       	sbc	r1, r25
      e2:	19 0a       	sbc	r1, r25
      e4:	19 0a       	sbc	r1, r25
      e6:	19 0a       	sbc	r1, r25
      e8:	19 0a       	sbc	r1, r25
      ea:	19 0a       	sbc	r1, r25
      ec:	63 0a       	sbc	r6, r19
      ee:	19 0a       	sbc	r1, r25
      f0:	19 0a       	sbc	r1, r25
      f2:	19 0a       	sbc	r1, r25
      f4:	19 0a       	sbc	r1, r25
      f6:	19 0a       	sbc	r1, r25
      f8:	19 0a       	sbc	r1, r25
      fa:	19 0a       	sbc	r1, r25
      fc:	67 0a       	sbc	r6, r23
      fe:	19 0a       	sbc	r1, r25
     100:	19 0a       	sbc	r1, r25
     102:	19 0a       	sbc	r1, r25
     104:	19 0a       	sbc	r1, r25
     106:	19 0a       	sbc	r1, r25
     108:	19 0a       	sbc	r1, r25
     10a:	19 0a       	sbc	r1, r25
     10c:	19 0a       	sbc	r1, r25
     10e:	19 0a       	sbc	r1, r25
     110:	19 0a       	sbc	r1, r25
     112:	19 0a       	sbc	r1, r25
     114:	19 0a       	sbc	r1, r25
     116:	19 0a       	sbc	r1, r25
     118:	19 0a       	sbc	r1, r25
     11a:	19 0a       	sbc	r1, r25
     11c:	75 0a       	sbc	r7, r21
     11e:	19 0a       	sbc	r1, r25
     120:	19 0a       	sbc	r1, r25
     122:	19 0a       	sbc	r1, r25
     124:	19 0a       	sbc	r1, r25
     126:	19 0a       	sbc	r1, r25
     128:	19 0a       	sbc	r1, r25
     12a:	19 0a       	sbc	r1, r25
     12c:	33 0a       	sbc	r3, r19

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ec ee       	ldi	r30, 0xEC	; 236
     142:	f9 e1       	ldi	r31, 0x19	; 25
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ac 34       	cpi	r26, 0x4C	; 76
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	ac e4       	ldi	r26, 0x4C	; 76
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	aa 31       	cpi	r26, 0x1A	; 26
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
     168:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
     170:	86 e2       	ldi	r24, 0x26	; 38
     172:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
     176:	8b e1       	ldi	r24, 0x1B	; 27
     178:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
     17c:	81 e1       	ldi	r24, 0x11	; 17
     17e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
     182:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     186:	8d 30       	cpi	r24, 0x0D	; 13
     188:	18 f0       	brcs	.+6      	; 0x190 <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pm_flag>
     190:	08 95       	ret

00000192 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
     192:	87 b3       	in	r24, 0x17	; 23
     194:	87 60       	ori	r24, 0x07	; 7
     196:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
     19c:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
     19e:	80 e5       	ldi	r24, 0x50	; 80
     1a0:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     1a6:	80 b7       	in	r24, 0x30	; 48
     1a8:	88 60       	ori	r24, 0x08	; 8
     1aa:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     1ac:	87 b7       	in	r24, 0x37	; 55
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     1b2:	83 b7       	in	r24, 0x33	; 51
     1b4:	81 60       	ori	r24, 0x01	; 1
     1b6:	83 bf       	out	0x33, r24	; 51

	//enable fast PWM mode for TC2 for the seven segment adjust
	//prescale of 8
	//clear bit during output compare
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << CS20) | (0 << CS21) | (0 << CS22);
     1b8:	85 b5       	in	r24, 0x25	; 37
     1ba:	89 66       	ori	r24, 0x69	; 105
     1bc:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;				//set TCNT1 to obtain approximately 300Hz for beep
     1be:	80 e4       	ldi	r24, 0x40	; 64
     1c0:	9c e9       	ldi	r25, 0x9C	; 156
     1c2:	9d bd       	out	0x2d, r25	; 45
     1c4:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     1c6:	87 b7       	in	r24, 0x37	; 55
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     1cc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     1ce:	8e b5       	in	r24, 0x2e	; 46
     1d0:	81 60       	ori	r24, 0x01	; 1
     1d2:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     1d4:	eb e8       	ldi	r30, 0x8B	; 139
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 68       	ori	r24, 0x81	; 129
     1dc:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     1de:	ea e8       	ldi	r30, 0x8A	; 138
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8a 60       	ori	r24, 0x0A	; 10
     1e6:	80 83       	st	Z, r24
	
	ADMUX = 0x67; //single-ended, input PORTF bit 7, left adjusted, 10 bits
     1e8:	87 e6       	ldi	r24, 0x67	; 103
     1ea:	87 b9       	out	0x07, r24	; 7
	//ADC enabled, start the conversion, single shot mode, interrupts enabled 
	ADCSRA = (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); 
     1ec:	8f e8       	ldi	r24, 0x8F	; 143
     1ee:	86 b9       	out	0x06, r24	; 6
     1f0:	08 95       	ret

000001f2 <init_lm73_sensor>:
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
     1f2:	41 e0       	ldi	r20, 0x01	; 1
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 e9       	ldi	r24, 0x90	; 144
     1fa:	0e 94 94 0a 	call	0x1528	; 0x1528 <twi_start_wr>
	asm volatile("nop");	
     1fe:	00 00       	nop
     200:	08 95       	ret

00000202 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     202:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     204:	e8 2f       	mov	r30, r24
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	99 b3       	in	r25, 0x19	; 25
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	e8 59       	subi	r30, 0x98	; 152
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	20 81       	ld	r18, Z
     214:	31 81       	ldd	r19, Z+1	; 0x01
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	30 6e       	ori	r19, 0xE0	; 224
     21c:	89 2f       	mov	r24, r25
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	02 c0       	rjmp	.+4      	; 0x226 <chk_buttons+0x24>
     222:	95 95       	asr	r25
     224:	87 95       	ror	r24
     226:	4a 95       	dec	r20
     228:	e2 f7       	brpl	.-8      	; 0x222 <chk_buttons+0x20>
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	99 27       	eor	r25, r25
     22e:	41 e0       	ldi	r20, 0x01	; 1
     230:	84 27       	eor	r24, r20
     232:	28 2b       	or	r18, r24
     234:	39 2b       	or	r19, r25
     236:	31 83       	std	Z+1, r19	; 0x01
     238:	20 83       	st	Z, r18
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	21 15       	cp	r18, r1
     23e:	30 4f       	sbci	r19, 0xF0	; 240
     240:	09 f0       	breq	.+2      	; 0x244 <chk_buttons+0x42>
     242:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     244:	08 95       	ret

00000246 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  
	//parse out the two digits for the minutes
	ones = minute % 10;
     246:	9d ec       	ldi	r25, 0xCD	; 205
     248:	69 9f       	mul	r22, r25
     24a:	21 2d       	mov	r18, r1
     24c:	11 24       	eor	r1, r1
     24e:	32 2f       	mov	r19, r18
     250:	36 95       	lsr	r19
     252:	36 95       	lsr	r19
     254:	36 95       	lsr	r19
     256:	4a e0       	ldi	r20, 0x0A	; 10
     258:	34 9f       	mul	r19, r20
     25a:	60 19       	sub	r22, r0
     25c:	11 24       	eor	r1, r1
     25e:	36 2f       	mov	r19, r22
	tens = minute / 10;
     260:	26 95       	lsr	r18
     262:	26 95       	lsr	r18
     264:	26 95       	lsr	r18

	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
     266:	89 9f       	mul	r24, r25
     268:	91 2d       	mov	r25, r1
     26a:	11 24       	eor	r1, r1
     26c:	96 95       	lsr	r25
     26e:	96 95       	lsr	r25
     270:	96 95       	lsr	r25
     272:	48 2f       	mov	r20, r24
     274:	5a e0       	ldi	r21, 0x0A	; 10
     276:	95 9f       	mul	r25, r21
     278:	40 19       	sub	r20, r0
     27a:	11 24       	eor	r1, r1
	if(hour > 9)
     27c:	8a 30       	cpi	r24, 0x0A	; 10
     27e:	30 f4       	brcc	.+12     	; 0x28c <segsum+0x46>
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	a9 f0       	breq	.+42     	; 0x2b4 <segsum+0x6e>
     28a:	91 95       	neg	r25
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
     28c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sec_count>
     290:	80 ff       	sbrs	r24, 0
     292:	0c c0       	rjmp	.+24     	; 0x2ac <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     29a:	30 93 8c 01 	sts	0x018C, r19	; 0x80018c <segment_data>
	segment_data[1] = tens;
     29e:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <segment_data+0x1>
	
	segment_data[3] = hundreds;
     2a2:	40 93 8f 01 	sts	0x018F, r20	; 0x80018f <segment_data+0x3>
	segment_data[4] = thousands;
     2a6:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <segment_data+0x4>
     2aa:	08 95       	ret
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     2ac:	80 e1       	ldi	r24, 0x10	; 16
     2ae:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <segment_data+0x2>
     2b2:	f3 cf       	rjmp	.-26     	; 0x29a <segsum+0x54>
	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	e9 cf       	rjmp	.-46     	; 0x28a <segsum+0x44>

000002b8 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     2b8:	81 31       	cpi	r24, 0x11	; 17
     2ba:	30 f4       	brcc	.+12     	; 0x2c8 <seven_seg_encoding+0x10>
     2bc:	e8 2f       	mov	r30, r24
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ec 5f       	subi	r30, 0xFC	; 252
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	80 81       	ld	r24, Z
     2c6:	08 95       	ret
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     2ca:	08 95       	ret

000002cc <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	int8_t encoder_left_prev = encoder_left;
     2cc:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     2d0:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     2d4:	28 2f       	mov	r18, r24
     2d6:	23 70       	andi	r18, 0x03	; 3
     2d8:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     2dc:	8c 70       	andi	r24, 0x0C	; 12
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	95 95       	asr	r25
     2e2:	87 95       	ror	r24
     2e4:	95 95       	asr	r25
     2e6:	87 95       	ror	r24
     2e8:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	e9 f1       	breq	.+122    	; 0x36a <encoder_process+0x9e>
     2f0:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <adjust_flag>
     2f4:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adjust_alarm>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     2f8:	23 30       	cpi	r18, 0x03	; 3
     2fa:	d9 f0       	breq	.+54     	; 0x332 <encoder_process+0x66>
		}
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
     2fc:	31 30       	cpi	r19, 0x01	; 1
     2fe:	81 f0       	breq	.+32     	; 0x320 <encoder_process+0x54>
		min_count = temp_min;
	}

	//if the alarm adjustment flag is set, set the alarm time
	//to the temporary variables used to increment/decrement
	if(adjust_alarm == 0x01){
     300:	41 30       	cpi	r20, 0x01	; 1
     302:	09 f0       	breq	.+2      	; 0x306 <encoder_process+0x3a>
     304:	08 95       	ret
		alarm_time_min = temp_min;
     306:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp_min>
     30a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <alarm_time_min>
		alarm_time_hour = temp_hour;
     30e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     312:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <alarm_time_hour>
		temp_pm_flag = pm_flag;			//also save the pm_flag
     316:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <pm_flag>
     31a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     31e:	08 95       	ret
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     320:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     324:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour_count>
		min_count = temp_min;
     328:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp_min>
     32c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <min_count>
     330:	e7 cf       	rjmp	.-50     	; 0x300 <encoder_process+0x34>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     332:	51 30       	cpi	r21, 0x01	; 1
     334:	09 f4       	brne	.+2      	; 0x338 <encoder_process+0x6c>
     336:	60 c0       	rjmp	.+192    	; 0x3f8 <encoder_process+0x12c>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     338:	52 30       	cpi	r21, 0x02	; 2
     33a:	01 f7       	brne	.-64     	; 0x2fc <encoder_process+0x30>
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     33c:	31 30       	cpi	r19, 0x01	; 1
     33e:	09 f4       	brne	.+2      	; 0x342 <encoder_process+0x76>
     340:	b1 c0       	rjmp	.+354    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     342:	41 30       	cpi	r20, 0x01	; 1
     344:	09 f4       	brne	.+2      	; 0x348 <encoder_process+0x7c>
     346:	8e c0       	rjmp	.+284    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			else
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
     348:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     34c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     350:	0a 97       	sbiw	r24, 0x0a	; 10
     352:	09 f4       	brne	.+2      	; 0x356 <encoder_process+0x8a>
     354:	ba c0       	rjmp	.+372    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				OCR3A = 0;
			else
				OCR3A -= 10;			//decrement resolution by 10s to avoid spinning a lot
     356:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     35a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     35e:	0a 97       	sbiw	r24, 0x0a	; 10
     360:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     364:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     368:	c9 cf       	rjmp	.-110    	; 0x2fc <encoder_process+0x30>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     36a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     36e:	41 30       	cpi	r20, 0x01	; 1
     370:	01 f1       	breq	.+64     	; 0x3b2 <encoder_process+0xe6>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     372:	42 30       	cpi	r20, 0x02	; 2
     374:	09 f0       	breq	.+2      	; 0x378 <encoder_process+0xac>
     376:	be cf       	rjmp	.-132    	; 0x2f4 <encoder_process+0x28>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     378:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adjust_alarm>
     37c:	31 11       	cpse	r19, r1
     37e:	10 c0       	rjmp	.+32     	; 0x3a0 <encoder_process+0xd4>
     380:	41 11       	cpse	r20, r1
     382:	0e c0       	rjmp	.+28     	; 0x3a0 <encoder_process+0xd4>
     384:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <manual_brightness>
     388:	61 30       	cpi	r22, 0x01	; 1
     38a:	51 f4       	brne	.+20     	; 0x3a0 <encoder_process+0xd4>
			if((OCR2 - 5) <= 0)
     38c:	23 b5       	in	r18, 0x23	; 35
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	26 30       	cpi	r18, 0x06	; 6
     392:	31 05       	cpc	r19, r1
     394:	0c f0       	brlt	.+2      	; 0x398 <encoder_process+0xcc>
     396:	a8 c0       	rjmp	.+336    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
				OCR2 = 3;
     398:	83 bd       	out	0x23, r24	; 35
     39a:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <encoder_left>
     39e:	a8 cf       	rjmp	.-176    	; 0x2f0 <encoder_process+0x24>
			else
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
     3a0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp_min>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <encoder_process+0xde>
     3a8:	4a c0       	rjmp	.+148    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				temp_min = 59;			
			}
			else
				temp_min--;				//decrement minute when right encoder turned to left
     3aa:	81 50       	subi	r24, 0x01	; 1
     3ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp_min>
     3b0:	a3 cf       	rjmp	.-186    	; 0x2f8 <encoder_process+0x2c>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     3b2:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adjust_alarm>
     3b6:	31 11       	cpse	r19, r1
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <encoder_process+0x118>
     3ba:	41 11       	cpse	r20, r1
     3bc:	13 c0       	rjmp	.+38     	; 0x3e4 <encoder_process+0x118>
     3be:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <manual_brightness>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	79 f4       	brne	.+30     	; 0x3e4 <encoder_process+0x118>
			if((OCR2 + 5) >= 254)
     3c6:	83 b5       	in	r24, 0x23	; 35
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	89 3f       	cpi	r24, 0xF9	; 249
     3cc:	91 05       	cpc	r25, r1
     3ce:	0c f4       	brge	.+2      	; 0x3d2 <encoder_process+0x106>
     3d0:	85 c0       	rjmp	.+266    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				OCR2 = 250;
     3d2:	8a ef       	ldi	r24, 0xFA	; 250
     3d4:	83 bd       	out	0x23, r24	; 35
     3d6:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <encoder_left>
     3da:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <adjust_flag>
     3de:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adjust_alarm>
     3e2:	8a cf       	rjmp	.-236    	; 0x2f8 <encoder_process+0x2c>
				OCR2 += 5;

		}
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
     3e4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp_min>
     3e8:	68 2f       	mov	r22, r24
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	6b 33       	cpi	r22, 0x3B	; 59
     3ee:	71 05       	cpc	r23, r1
     3f0:	c4 f0       	brlt	.+48     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				temp_min = 0;
     3f2:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <temp_min>
     3f6:	80 cf       	rjmp	.-256    	; 0x2f8 <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3f8:	31 30       	cpi	r19, 0x01	; 1
     3fa:	09 f4       	brne	.+2      	; 0x3fe <encoder_process+0x132>
     3fc:	42 c0       	rjmp	.+132    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     3fe:	41 30       	cpi	r20, 0x01	; 1
     400:	11 f1       	breq	.+68     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				temp_hour++;			//increment hour when left encoder turned right

		}
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
     402:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     406:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     40a:	0a 96       	adiw	r24, 0x0a	; 10
     40c:	8f 3f       	cpi	r24, 0xFF	; 255
     40e:	91 05       	cpc	r25, r1
     410:	61 f0       	breq	.+24     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     412:	58 f0       	brcs	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				OCR3A = 255;
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     41c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     420:	6d cf       	rjmp	.-294    	; 0x2fc <encoder_process+0x30>
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
				temp_min = 0;
			else
				temp_min++;				//increment minute when right encoder turned to the right
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp_min>
     428:	67 cf       	rjmp	.-306    	; 0x2f8 <encoder_process+0x2c>
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
				OCR3A = 255;
			else
				OCR3A += 10;			//increment resolution by 10s to avoid spinning a lot
     42a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     42e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     432:	0a 96       	adiw	r24, 0x0a	; 10
     434:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     438:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     43c:	5f cf       	rjmp	.-322    	; 0x2fc <encoder_process+0x30>
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
				temp_min = 59;			
     43e:	8b e3       	ldi	r24, 0x3B	; 59
     440:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp_min>
     444:	59 cf       	rjmp	.-334    	; 0x2f8 <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     446:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
     44a:	81 11       	cpse	r24, r1
     44c:	1e c0       	rjmp	.+60     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
     44e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     452:	68 2f       	mov	r22, r24
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	6c 30       	cpi	r22, 0x0C	; 12
     458:	71 05       	cpc	r23, r1
     45a:	9c f1       	brlt	.+102    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				temp_hour = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
     462:	4c cf       	rjmp	.-360    	; 0x2fc <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     464:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
     468:	81 11       	cpse	r24, r1
     46a:	20 c0       	rjmp	.+64     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
     46c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     470:	68 2f       	mov	r22, r24
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	62 30       	cpi	r22, 0x02	; 2
     476:	71 05       	cpc	r23, r1
     478:	6c f1       	brlt	.+90     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
				temp_hour = 23;
			else
				temp_hour--;			//decrement hour when left encoder turned left
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
     480:	3d cf       	rjmp	.-390    	; 0x2fc <encoder_process+0x30>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     482:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
     486:	88 23       	and	r24, r24
     488:	11 f3       	breq	.-60     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	b9 cf       	rjmp	.-142    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
     490:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     494:	68 2f       	mov	r22, r24
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	67 31       	cpi	r22, 0x17	; 23
     49a:	71 05       	cpc	r23, r1
     49c:	94 f0       	brlt	.+36     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				temp_hour = 0;
     49e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <temp_hour>
     4a2:	2c cf       	rjmp	.-424    	; 0x2fc <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     4a4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
     4a8:	88 23       	and	r24, r24
     4aa:	01 f3       	breq	.-64     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	4b cf       	rjmp	.-362    	; 0x348 <encoder_process+0x7c>
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
     4b2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     4b6:	81 11       	cpse	r24, r1
     4b8:	e0 cf       	rjmp	.-64     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				temp_hour = 23;
     4ba:	87 e1       	ldi	r24, 0x17	; 23
     4bc:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
     4c0:	1d cf       	rjmp	.-454    	; 0x2fc <encoder_process+0x30>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
				temp_hour = 0;
			else
				temp_hour++;			//increment hour when left encoder turned right
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
     4c8:	19 cf       	rjmp	.-462    	; 0x2fc <encoder_process+0x30>
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
				OCR3A = 0;
     4ca:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4ce:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4d2:	14 cf       	rjmp	.-472    	; 0x2fc <encoder_process+0x30>
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 12;
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
     4da:	10 cf       	rjmp	.-480    	; 0x2fc <encoder_process+0x30>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 + 5) >= 254)
				OCR2 = 250;
			else	
				OCR2 += 5;
     4dc:	83 b5       	in	r24, 0x23	; 35
     4de:	8b 5f       	subi	r24, 0xFB	; 251
     4e0:	83 bd       	out	0x23, r24	; 35
     4e2:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <encoder_left>
     4e6:	04 cf       	rjmp	.-504    	; 0x2f0 <encoder_process+0x24>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 - 5) <= 0)
				OCR2 = 3;
			else
				OCR2 -= 5;
     4e8:	83 b5       	in	r24, 0x23	; 35
     4ea:	85 50       	subi	r24, 0x05	; 5
     4ec:	83 bd       	out	0x23, r24	; 35
     4ee:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <encoder_left>
     4f2:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <adjust_flag>
     4f6:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adjust_alarm>
     4fa:	fe ce       	rjmp	.-516    	; 0x2f8 <encoder_process+0x2c>

000004fc <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     50c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     512:	80 e7       	ldi	r24, 0x70	; 112
     514:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	2a e1       	ldi	r18, 0x1A	; 26
     518:	2a 95       	dec	r18
     51a:	f1 f7       	brne	.-4      	; 0x518 <button_encoder_read+0x1c>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <button_encoder_read+0x22>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     51e:	99 b3       	in	r25, 0x19	; 25
     520:	e0 90 76 01 	lds	r14, 0x0176	; 0x800176 <state.1866+0xe>
     524:	f0 90 77 01 	lds	r15, 0x0177	; 0x800177 <state.1866+0xf>
     528:	ee 0c       	add	r14, r14
     52a:	ff 1c       	adc	r15, r15
     52c:	30 ee       	ldi	r19, 0xE0	; 224
     52e:	f3 2a       	or	r15, r19
     530:	89 2f       	mov	r24, r25
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	9c 01       	movw	r18, r24
     536:	22 0f       	add	r18, r18
     538:	23 2f       	mov	r18, r19
     53a:	22 1f       	adc	r18, r18
     53c:	33 0b       	sbc	r19, r19
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	28 27       	eor	r18, r24
     542:	c9 01       	movw	r24, r18
     544:	8e 29       	or	r24, r14
     546:	9f 29       	or	r25, r15
     548:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <state.1866+0xf>
     54c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <state.1866+0xe>
	if(state[button] == 0xF000) return 1;
     550:	81 15       	cp	r24, r1
     552:	90 4f       	sbci	r25, 0xF0	; 240
     554:	31 f4       	brne	.+12     	; 0x562 <button_encoder_read+0x66>
	_delay_us(5);

	//poll if button 7 is pressed
	//this toggles if the time adjustment flag is set or not
	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     556:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <adjust_flag>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	89 27       	eor	r24, r25
     55e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     562:	89 b3       	in	r24, 0x19	; 25
     564:	86 fb       	bst	r24, 6
     566:	88 27       	eor	r24, r24
     568:	80 f9       	bld	r24, 0
     56a:	c8 2f       	mov	r28, r24
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	d3 2f       	mov	r29, r19
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	c8 27       	eor	r28, r24
     574:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <state.1866+0xc>
     578:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <state.1866+0xd>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	90 6e       	ori	r25, 0xE0	; 224
     582:	c8 2b       	or	r28, r24
     584:	d9 2b       	or	r29, r25
     586:	d0 93 75 01 	sts	0x0175, r29	; 0x800175 <state.1866+0xd>
     58a:	c0 93 74 01 	sts	0x0174, r28	; 0x800174 <state.1866+0xc>
	if(state[button] == 0xF000) return 1;
     58e:	c1 15       	cp	r28, r1
     590:	d0 4f       	sbci	r29, 0xF0	; 240
     592:	09 f4       	brne	.+2      	; 0x596 <button_encoder_read+0x9a>
     594:	f9 c0       	rjmp	.+498    	; 0x788 <button_encoder_read+0x28c>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     596:	89 b3       	in	r24, 0x19	; 25
     598:	85 fb       	bst	r24, 5
     59a:	aa 27       	eor	r26, r26
     59c:	a0 f9       	bld	r26, 0
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	31 e0       	ldi	r19, 0x01	; 1
     5a2:	a3 27       	eor	r26, r19
     5a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <state.1866+0xa>
     5a8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <state.1866+0xb>
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	90 6e       	ori	r25, 0xE0	; 224
     5b2:	a8 2b       	or	r26, r24
     5b4:	b9 2b       	or	r27, r25
     5b6:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <state.1866+0xb>
     5ba:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <state.1866+0xa>
	if(state[button] == 0xF000) return 1;
     5be:	a1 15       	cp	r26, r1
     5c0:	b0 4f       	sbci	r27, 0xF0	; 240
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <button_encoder_read+0xca>
     5c4:	d2 c0       	rjmp	.+420    	; 0x76a <button_encoder_read+0x26e>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     5c6:	89 b3       	in	r24, 0x19	; 25
     5c8:	84 fb       	bst	r24, 4
     5ca:	ee 27       	eor	r30, r30
     5cc:	e0 f9       	bld	r30, 0
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	e2 27       	eor	r30, r18
     5d4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <state.1866+0x8>
     5d8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <state.1866+0x9>
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	90 6e       	ori	r25, 0xE0	; 224
     5e2:	e8 2b       	or	r30, r24
     5e4:	f9 2b       	or	r31, r25
     5e6:	f0 93 71 01 	sts	0x0171, r31	; 0x800171 <state.1866+0x9>
     5ea:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <state.1866+0x8>
	if(state[button] == 0xF000) return 1;
     5ee:	e1 15       	cp	r30, r1
     5f0:	f0 4f       	sbci	r31, 0xF0	; 240
     5f2:	31 f4       	brne	.+12     	; 0x600 <button_encoder_read+0x104>
		pm_flag ^= 0x01;
	
	//poll if button 4 is pressed
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     5f4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <adjust_alarm>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	89 27       	eor	r24, r25
     5fc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     600:	89 b3       	in	r24, 0x19	; 25
     602:	83 fb       	bst	r24, 3
     604:	66 27       	eor	r22, r22
     606:	60 f9       	bld	r22, 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	68 27       	eor	r22, r24
     60e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <state.1866+0x6>
     612:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <state.1866+0x7>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	90 6e       	ori	r25, 0xE0	; 224
     61c:	68 2b       	or	r22, r24
     61e:	79 2b       	or	r23, r25
     620:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <state.1866+0x7>
     624:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <state.1866+0x6>
	if(state[button] == 0xF000) return 1;
     628:	61 15       	cp	r22, r1
     62a:	70 4f       	sbci	r23, 0xF0	; 240
     62c:	41 f4       	brne	.+16     	; 0x63e <button_encoder_read+0x142>
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
	
	if(chk_buttons(3)){
		alarm_is_set ^= 0x01;
     62e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <alarm_is_set>
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	89 27       	eor	r24, r25
     636:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <alarm_is_set>
		lcd_flag = 0x01;
     63a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <lcd_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     63e:	89 b3       	in	r24, 0x19	; 25
     640:	82 fb       	bst	r24, 2
     642:	44 27       	eor	r20, r20
     644:	40 f9       	bld	r20, 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	31 e0       	ldi	r19, 0x01	; 1
     64a:	43 27       	eor	r20, r19
     64c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <state.1866+0x4>
     650:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <state.1866+0x5>
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	90 6e       	ori	r25, 0xE0	; 224
     65a:	48 2b       	or	r20, r24
     65c:	59 2b       	or	r21, r25
     65e:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <state.1866+0x5>
     662:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <state.1866+0x4>
	if(state[button] == 0xF000) return 1;
     666:	41 15       	cp	r20, r1
     668:	50 4f       	sbci	r21, 0xF0	; 240
     66a:	31 f4       	brne	.+12     	; 0x678 <button_encoder_read+0x17c>
		alarm_is_set ^= 0x01;
		lcd_flag = 0x01;
	}

	if(chk_buttons(2))
		manual_brightness ^= 0x01;
     66c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <manual_brightness>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	89 27       	eor	r24, r25
     674:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <manual_brightness>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     678:	89 b3       	in	r24, 0x19	; 25
     67a:	81 fb       	bst	r24, 1
     67c:	cc 24       	eor	r12, r12
     67e:	c0 f8       	bld	r12, 0
     680:	d1 2c       	mov	r13, r1
     682:	96 01       	movw	r18, r12
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	24 27       	eor	r18, r20
     688:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <state.1866+0x2>
     68c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <state.1866+0x3>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	90 6e       	ori	r25, 0xE0	; 224
     696:	28 2b       	or	r18, r24
     698:	39 2b       	or	r19, r25
     69a:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <state.1866+0x3>
     69e:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <state.1866+0x2>
	if(state[button] == 0xF000) return 1;
     6a2:	21 15       	cp	r18, r1
     6a4:	30 4f       	sbci	r19, 0xF0	; 240
     6a6:	09 f4       	brne	.+2      	; 0x6aa <button_encoder_read+0x1ae>
     6a8:	52 c0       	rjmp	.+164    	; 0x74e <button_encoder_read+0x252>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     6aa:	29 b3       	in	r18, 0x19	; 25
     6ac:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <state.1866>
     6b0:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <state.1866+0x1>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	90 6e       	ori	r25, 0xE0	; 224
     6ba:	20 95       	com	r18
     6bc:	02 2f       	mov	r16, r18
     6be:	01 70       	andi	r16, 0x01	; 1
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	08 2b       	or	r16, r24
     6c4:	19 2b       	or	r17, r25
     6c6:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <state.1866+0x1>
     6ca:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <state.1866>
	if(state[button] == 0xF000) return 1;
     6ce:	01 15       	cp	r16, r1
     6d0:	10 4f       	sbci	r17, 0xF0	; 240
     6d2:	a1 f1       	breq	.+104    	; 0x73c <button_encoder_read+0x240>
		trigger_alarm = 0;			//alarm turns off
		lcd_flag = 0x01;			//update lcd
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     6d4:	80 e6       	ldi	r24, 0x60	; 96
     6d6:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     6d8:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     6da:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     6dc:	80 e4       	ldi	r24, 0x40	; 64
     6de:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     6e0:	00 00       	nop

	//send out state of flags to the bar graph display
	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5) | (manual_brightness << 2);
     6e2:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <adjust_flag>
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	24 9f       	mul	r18, r20
     6ea:	90 01       	movw	r18, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     6f2:	40 e4       	ldi	r20, 0x40	; 64
     6f4:	94 9f       	mul	r25, r20
     6f6:	c0 01       	movw	r24, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	28 2b       	or	r18, r24
     6fc:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <adjust_alarm>
     700:	30 e2       	ldi	r19, 0x20	; 32
     702:	93 9f       	mul	r25, r19
     704:	c0 01       	movw	r24, r0
     706:	11 24       	eor	r1, r1
     708:	82 2b       	or	r24, r18
     70a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <manual_brightness>
     70e:	99 0f       	add	r25, r25
     710:	99 0f       	add	r25, r25
     712:	89 2b       	or	r24, r25
     714:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <button_encoder_read+0x21a>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     71a:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     71c:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     71e:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     720:	0e 94 66 01 	call	0x2cc	; 0x2cc <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     728:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret
		
	}

	//poll if button 0 is pressed
	//this silences all alarms, no snooze
	if(chk_buttons(0) && trigger_alarm == 0x01){
     73c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <trigger_alarm>
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	41 f6       	brne	.-112    	; 0x6d4 <button_encoder_read+0x1d8>
		trigger_alarm = 0;			//alarm turns off
     744:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <trigger_alarm>
		lcd_flag = 0x01;			//update lcd
     748:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lcd_flag>
     74c:	c3 cf       	rjmp	.-122    	; 0x6d4 <button_encoder_read+0x1d8>
	if(chk_buttons(2))
		manual_brightness ^= 0x01;

	//poll if button 1 is pressed
	//this activates the snooze feature
	if(chk_buttons(1) && trigger_alarm == 0x01){
     74e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <trigger_alarm>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f0       	breq	.+2      	; 0x758 <button_encoder_read+0x25c>
     756:	a9 cf       	rjmp	.-174    	; 0x6aa <button_encoder_read+0x1ae>
		trigger_alarm = 0;			//if pressed, alarm should turn off
     758:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <trigger_alarm>
		ten_sec_start = 0x01;		//start the count for 10 second delay
     75c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <ten_sec_start>
		ten_sec_count = 0;			//the count variable starts at 0
     760:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ten_sec_count>
		lcd_flag = 0x01;			//tell lcd to update
     764:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lcd_flag>
     768:	a0 cf       	rjmp	.-192    	; 0x6aa <button_encoder_read+0x1ae>
	}

	//poll if button 5 is pressed
	//this toggles the pm_flag for adjustment
	//this only works when in time set mode
	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     76a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <adjust_flag>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	09 f0       	breq	.+2      	; 0x774 <button_encoder_read+0x278>
     772:	29 cf       	rjmp	.-430    	; 0x5c6 <button_encoder_read+0xca>
     774:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     778:	91 11       	cpse	r25, r1
     77a:	25 cf       	rjmp	.-438    	; 0x5c6 <button_encoder_read+0xca>
		pm_flag ^= 0x01;
     77c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pm_flag>
     780:	89 27       	eor	r24, r25
     782:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pm_flag>
     786:	1f cf       	rjmp	.-450    	; 0x5c6 <button_encoder_read+0xca>
		adjust_flag ^= 0x01;

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     788:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	89 27       	eor	r24, r25
     790:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     794:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pm_flag>
     798:	91 30       	cpi	r25, 0x01	; 1
     79a:	a9 f0       	breq	.+42     	; 0x7c6 <button_encoder_read+0x2ca>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     79c:	81 11       	cpse	r24, r1
     79e:	fb ce       	rjmp	.-522    	; 0x596 <button_encoder_read+0x9a>
     7a0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     7a4:	8c 30       	cpi	r24, 0x0C	; 12
     7a6:	08 f4       	brcc	.+2      	; 0x7aa <button_encoder_read+0x2ae>
     7a8:	f6 ce       	rjmp	.-532    	; 0x596 <button_encoder_read+0x9a>
			pm_flag = 0x01;			//set the pm_flag when coming from 24 hours and time is in afternoon
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pm_flag>
			if(hour_count != 12)	//edge case of when the time is 12 for 24 hour time
     7b0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     7b4:	8c 30       	cpi	r24, 0x0C	; 12
     7b6:	09 f4       	brne	.+2      	; 0x7ba <button_encoder_read+0x2be>
     7b8:	ee ce       	rjmp	.-548    	; 0x596 <button_encoder_read+0x9a>
				hour_count -= 12;
     7ba:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     7be:	8c 50       	subi	r24, 0x0C	; 12
     7c0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour_count>
     7c4:	e8 ce       	rjmp	.-560    	; 0x596 <button_encoder_read+0x9a>

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	49 f7       	brne	.-46     	; 0x79c <button_encoder_read+0x2a0>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
     7ca:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pm_flag>
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
     7ce:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     7d2:	8c 30       	cpi	r24, 0x0C	; 12
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <button_encoder_read+0x2dc>
     7d6:	df ce       	rjmp	.-578    	; 0x596 <button_encoder_read+0x9a>
				hour_count += 12;
     7d8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
     7dc:	84 5f       	subi	r24, 0xF4	; 244
     7de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour_count>
     7e2:	d9 ce       	rjmp	.-590    	; 0x596 <button_encoder_read+0x9a>

000007e4 <clock_count>:
 * mode.
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
     7e4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <isr_count>
     7e8:	80 38       	cpi	r24, 0x80	; 128
     7ea:	09 f4       	brne	.+2      	; 0x7ee <clock_count+0xa>
     7ec:	82 c0       	rjmp	.+260    	; 0x8f2 <clock_count+0x10e>
     7ee:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ten_sec_count>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
     7f2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sec_count>
     7f6:	9c 33       	cpi	r25, 0x3C	; 60
     7f8:	09 f4       	brne	.+2      	; 0x7fc <clock_count+0x18>
     7fa:	6f c0       	rjmp	.+222    	; 0x8da <clock_count+0xf6>
		}
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
     7fc:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <min_count>
     800:	9c 33       	cpi	r25, 0x3C	; 60
     802:	09 f4       	brne	.+2      	; 0x806 <clock_count+0x22>
     804:	5e c0       	rjmp	.+188    	; 0x8c2 <clock_count+0xde>
		}

		min_count = 0;
  	}
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
     806:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     80a:	9d 30       	cpi	r25, 0x0D	; 13
     80c:	b0 f0       	brcs	.+44     	; 0x83a <clock_count+0x56>
     80e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     812:	91 11       	cpse	r25, r1
     814:	12 c0       	rjmp	.+36     	; 0x83a <clock_count+0x56>
		hour_count -= 12;	
     816:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     81a:	9c 50       	subi	r25, 0x0C	; 12
     81c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <hour_count>
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     820:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <min_count>
     824:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <alarm_time_min>
     828:	29 17       	cp	r18, r25
     82a:	d1 f0       	breq	.+52     	; 0x860 <clock_count+0x7c>
			lcd_flag = 0x01;				//update lcd
		}
	}
	//else meaning that the actual time does not equal saved alarm time
	else{
		trigger_alarm = 0;
     82c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <trigger_alarm>
		alarm_match_count = 0;
     830:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <alarm_match_count>
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
     834:	8a 30       	cpi	r24, 0x0A	; 10
     836:	99 f1       	breq	.+102    	; 0x89e <clock_count+0xba>
     838:	08 95       	ret
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	//bind the hour to 0 and 24 if 24 hour flag is set
	else if(hour_count >= 24 && hour24_flag == 0x01){
     83a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     83e:	98 31       	cpi	r25, 0x18	; 24
     840:	78 f3       	brcs	.-34     	; 0x820 <clock_count+0x3c>
     842:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     846:	91 30       	cpi	r25, 0x01	; 1
     848:	59 f7       	brne	.-42     	; 0x820 <clock_count+0x3c>
		hour_count -= 24;
     84a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     84e:	98 51       	subi	r25, 0x18	; 24
     850:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <hour_count>
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     854:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <min_count>
     858:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <alarm_time_min>
     85c:	29 13       	cpse	r18, r25
     85e:	e6 cf       	rjmp	.-52     	; 0x82c <clock_count+0x48>
     860:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <hour_count>
     864:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <alarm_time_hour>
     868:	29 13       	cpse	r18, r25
     86a:	e0 cf       	rjmp	.-64     	; 0x82c <clock_count+0x48>
     86c:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <temp_pm_flag>
     870:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <pm_flag>
     874:	29 13       	cpse	r18, r25
     876:	da cf       	rjmp	.-76     	; 0x82c <clock_count+0x48>
     878:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <adjust_alarm>
     87c:	91 11       	cpse	r25, r1
     87e:	d6 cf       	rjmp	.-84     	; 0x82c <clock_count+0x48>
		if(alarm_match_count == 0 && alarm_is_set == 0x01){			//a check so that this only goes in once
     880:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <alarm_match_count>
     884:	91 11       	cpse	r25, r1
     886:	d6 cf       	rjmp	.-84     	; 0x834 <clock_count+0x50>
     888:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <alarm_is_set>
     88c:	91 30       	cpi	r25, 0x01	; 1
     88e:	91 f6       	brne	.-92     	; 0x834 <clock_count+0x50>
			trigger_alarm = 0x01;			//start the beeping
     890:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <trigger_alarm>
			alarm_match_count = 0x01;
     894:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <alarm_match_count>
			lcd_flag = 0x01;				//update lcd
     898:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <lcd_flag>
     89c:	cb cf       	rjmp	.-106    	; 0x834 <clock_count+0x50>
		alarm_match_count = 0;
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
		trigger_alarm = 0x01;			//initiate beep again after 10 second snooze
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <trigger_alarm>
		ten_sec_start = 0;				//reset the start variable
     8a4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ten_sec_start>
		ten_sec_count = 0;				//reset the count variable
     8a8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ten_sec_count>
		lcd_flag = 0x01;				//update lcd
     8ac:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lcd_flag>
		alarm_time_min = temp_min;		//beep for 1 minute
     8b0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp_min>
     8b4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <alarm_time_min>
		alarm_time_hour = temp_hour;		
     8b8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_hour>
     8bc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <alarm_time_hour>
     8c0:	08 95       	ret
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
     8c2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     8c6:	9f 5f       	subi	r25, 0xFF	; 255
     8c8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <hour_count>
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     8cc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour_count>
     8d0:	9c 30       	cpi	r25, 0x0C	; 12
     8d2:	79 f1       	breq	.+94     	; 0x932 <clock_count+0x14e>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     8d4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <min_count>
     8d8:	96 cf       	rjmp	.-212    	; 0x806 <clock_count+0x22>
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
     8da:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <trigger_alarm>
     8de:	91 30       	cpi	r25, 0x01	; 1
     8e0:	29 f1       	breq	.+74     	; 0x92c <clock_count+0x148>
			lcd_flag = 0x01;
		}
	  	min_count++;
     8e2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <min_count>
     8e6:	9f 5f       	subi	r25, 0xFF	; 255
     8e8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <min_count>
		sec_count = 0;
     8ec:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <sec_count>
     8f0:	85 cf       	rjmp	.-246    	; 0x7fc <clock_count+0x18>
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
	  	sec_count++;				//increment 1 second
     8f2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sec_count>
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sec_count>
		isr_count = 0;				//reset isr_count
     8fc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <isr_count>
		uart_send_flag ^= 0x01;
     900:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <__data_end>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	98 27       	eor	r25, r24
     908:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__data_end>
		temp_read_flag ^= 0x01;
     90c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_read_flag>
     910:	89 27       	eor	r24, r25
     912:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_read_flag>
	//	set_LCD();
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
     916:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ten_sec_start>
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	09 f0       	breq	.+2      	; 0x920 <clock_count+0x13c>
     91e:	67 cf       	rjmp	.-306    	; 0x7ee <clock_count+0xa>
			ten_sec_count++;
     920:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ten_sec_count>
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ten_sec_count>
     92a:	63 cf       	rjmp	.-314    	; 0x7f2 <clock_count+0xe>
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
			lcd_flag = 0x01;
     92c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <lcd_flag>
     930:	d8 cf       	rjmp	.-80     	; 0x8e2 <clock_count+0xfe>
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     932:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <hour24_flag>
     936:	91 11       	cpse	r25, r1
     938:	cd cf       	rjmp	.-102    	; 0x8d4 <clock_count+0xf0>
			pm_flag ^= 0x01;
     93a:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <pm_flag>
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	92 27       	eor	r25, r18
     942:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <pm_flag>
     946:	c6 cf       	rjmp	.-116    	; 0x8d4 <clock_count+0xf0>

00000948 <set_LCD>:
*************************************************************************/
void set_LCD(){
	//clear current contents in display
  // clear_display();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
     948:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <trigger_alarm>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	c1 f0       	breq	.+48     	; 0x980 <set_LCD+0x38>
	  //	line2_col1();
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
     950:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <ten_sec_start>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	c9 f0       	breq	.+50     	; 0x98a <set_LCD+0x42>
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
     958:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <alarm_is_set>
     95c:	88 23       	and	r24, r24
     95e:	21 f0       	breq	.+8      	; 0x968 <set_LCD+0x20>
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	41 f0       	breq	.+16     	; 0x974 <set_LCD+0x2c>
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     964:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <cursor_home>
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
     968:	86 e2       	ldi	r24, 0x26	; 38
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 61 07 	call	0xec2	; 0xec2 <string2lcd>
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     970:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <cursor_home>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
     974:	84 e3       	ldi	r24, 0x34	; 52
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 61 07 	call	0xec2	; 0xec2 <string2lcd>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     97c:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <cursor_home>
void set_LCD(){
	//clear current contents in display
  // clear_display();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");			//tell lcd to show "ALARM" message
     980:	85 e1       	ldi	r24, 0x15	; 21
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 61 07 	call	0xec2	; 0xec2 <string2lcd>
     988:	ed cf       	rjmp	.-38     	; 0x964 <set_LCD+0x1c>
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 61 07 	call	0xec2	; 0xec2 <string2lcd>
     992:	e8 cf       	rjmp	.-48     	; 0x964 <set_LCD+0x1c>

00000994 <set_LCD_temp>:
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
     994:	0e 94 11 07 	call	0xe22	; 0xe22 <line2_col1>
	string2lcd(temp_string);
     998:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp_string>
     99c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <temp_string+0x1>
     9a0:	0c 94 61 07 	jmp	0xec2	; 0xec2 <string2lcd>

000009a4 <read_lm73_sensor>:

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
     9a4:	42 e0       	ldi	r20, 0x02	; 2
     9a6:	6a e8       	ldi	r22, 0x8A	; 138
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	80 e9       	ldi	r24, 0x90	; 144
     9ac:	0e 94 a5 0a 	call	0x154a	; 0x154a <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
     9b0:	ea e8       	ldi	r30, 0x8A	; 138
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	80 81       	ld	r24, Z
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	98 2f       	mov	r25, r24
     9ba:	88 27       	eor	r24, r24
	temp_reading |= read_i2c_buffer[1];

	//returns temp_reading
	return temp_reading;
     9bc:	21 81       	ldd	r18, Z+1	; 0x01

}//temp_reading
     9be:	82 2b       	or	r24, r18
     9c0:	08 95       	ret

000009c2 <uart_send_read>:

void uart_send_read(){
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
	
	if(f_not_c == 0x01)
     9c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	d9 f0       	breq	.+54     	; 0xa04 <uart_send_read+0x42>
		uart_putc('G');
	else
		uart_putc('C');
     9ce:	83 e4       	ldi	r24, 0x43	; 67
     9d0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <uart_putc>
	if(f_not_c == 0x01)
		UDR0 = 'F';
	else
		UDR0 = 'C';
	*/
	temp_string[9] = uart_getc();
     9d4:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <temp_string>
     9d8:	d0 91 02 01 	lds	r29, 0x0102	; 0x800102 <temp_string+0x1>
     9dc:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getc>
     9e0:	89 87       	std	Y+9, r24	; 0x09
	temp_string[10] = uart_getc();
     9e2:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <temp_string>
     9e6:	d0 91 02 01 	lds	r29, 0x0102	; 0x800102 <temp_string+0x1>
     9ea:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getc>
     9ee:	8a 87       	std	Y+10, r24	; 0x0a
	temp_string[11] = uart_getc();
     9f0:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <temp_string>
     9f4:	d0 91 02 01 	lds	r29, 0x0102	; 0x800102 <temp_string+0x1>
     9f8:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getc>
     9fc:	8b 87       	std	Y+11, r24	; 0x0b

}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret
}//temp_reading

void uart_send_read(){
	
	if(f_not_c == 0x01)
		uart_putc('G');
     a04:	87 e4       	ldi	r24, 0x47	; 71
     a06:	0e 94 de 0a 	call	0x15bc	; 0x15bc <uart_putc>
     a0a:	e4 cf       	rjmp	.-56     	; 0x9d4 <uart_send_read+0x12>

00000a0c <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <input_flag>

	isr_count++;
     a1e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <isr_count>
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <isr_count>

}//ISR
     a28:	8f 91       	pop	r24
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_14>:
* If it is, then toggle the PORTC bit 3 pin to drive the annoying beeping
* for the speakers.
*
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25

	//check if trigger alarm is set
	if(trigger_alarm == 0x01){
     a42:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <trigger_alarm>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	41 f4       	brne	.+16     	; 0xa5a <__vector_14+0x26>
		
		PORTC ^= (1 << PC3);		//start toggling PC3
     a4a:	95 b3       	in	r25, 0x15	; 21
     a4c:	88 e0       	ldi	r24, 0x08	; 8
     a4e:	89 27       	eor	r24, r25
     a50:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	9c e9       	ldi	r25, 0x9C	; 156
     a56:	9d bd       	out	0x2d, r25	; 45
     a58:	8c bd       	out	0x2c, r24	; 44

	}

}//ISR
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	0f 90       	pop	r0
     a64:	1f 90       	pop	r1
     a66:	18 95       	reti

00000a68 <__vector_21>:
* With a defined prescale value of 128, this triggers approximately every 
* 125kHz. It reads the voltage value of the Cds and outputs the 8 bit reading
* to the OCR2 for brightness adjust.
*************************************************************************/

ISR(ADC_vect){
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	8f 93       	push	r24

	//checks to see if the manual_brightness flag is cleared
	if(manual_brightness == 0)
     a74:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <manual_brightness>
     a78:	81 11       	cpse	r24, r1
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__vector_21+0x18>
		OCR2 = ADCH;		//if cleared, store the 8 bit number to OCR2
     a7c:	85 b1       	in	r24, 0x05	; 5
     a7e:	83 bd       	out	0x23, r24	; 35

}//ISR
     a80:	8f 91       	pop	r24
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	81 11       	cpse	r24, r1
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <send_lcd+0x8>
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a96:	77 9b       	sbis	0x0e, 7	; 14
     a98:	fe cf       	rjmp	.-4      	; 0xa96 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     a9a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     aa0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aaa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab4:	08 95       	ret

00000ab6 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     ab6:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <i.2094>
     aba:	82 0f       	add	r24, r18
     abc:	91 1d       	adc	r25, r1
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	81 11       	cpse	r24, r1
     ac4:	1f c0       	rjmp	.+62     	; 0xb04 <refresh_lcd+0x4e>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad0:	77 9b       	sbis	0x0e, 7	; 14
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad8:	77 9b       	sbis	0x0e, 7	; 14
     ada:	fe cf       	rjmp	.-4      	; 0xad8 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     adc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	87 7f       	andi	r24, 0xF7	; 247
     aec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     af0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <i.2094>
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     afa:	80 31       	cpi	r24, 0x10	; 16
     afc:	49 f1       	breq	.+82     	; 0xb50 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     afe:	80 32       	cpi	r24, 0x20	; 32
     b00:	69 f0       	breq	.+26     	; 0xb1c <refresh_lcd+0x66>
     b02:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     b04:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <null_flag.2095>
     b08:	91 11       	cpse	r25, r1
     b0a:	e0 cf       	rjmp	.-64     	; 0xacc <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     b14:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b16:	77 9b       	sbis	0x0e, 7	; 14
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <refresh_lcd+0x60>
     b1a:	e0 cf       	rjmp	.-64     	; 0xadc <refresh_lcd+0x26>
     b1c:	85 ed       	ldi	r24, 0xD5	; 213
     b1e:	8a 95       	dec	r24
     b20:	f1 f7       	brne	.-4      	; 0xb1e <refresh_lcd+0x68>
     b22:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b24:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b26:	77 9b       	sbis	0x0e, 7	; 14
     b28:	fe cf       	rjmp	.-4      	; 0xb26 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b2e:	77 9b       	sbis	0x0e, 7	; 14
     b30:	fe cf       	rjmp	.-4      	; 0xb2e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b36:	88 60       	ori	r24, 0x08	; 8
     b38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b40:	87 7f       	andi	r24, 0xF7	; 247
     b42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     b46:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <null_flag.2095>
      i=0;
     b4a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <i.2094>
     b4e:	08 95       	ret
     b50:	f5 ed       	ldi	r31, 0xD5	; 213
     b52:	fa 95       	dec	r31
     b54:	f1 f7       	brne	.-4      	; 0xb52 <refresh_lcd+0x9c>
     b56:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b58:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b5a:	77 9b       	sbis	0x0e, 7	; 14
     b5c:	fe cf       	rjmp	.-4      	; 0xb5a <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     b5e:	80 ec       	ldi	r24, 0xC0	; 192
     b60:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b62:	77 9b       	sbis	0x0e, 7	; 14
     b64:	fe cf       	rjmp	.-4      	; 0xb62 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b66:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b6a:	88 60       	ori	r24, 0x08	; 8
     b6c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b70:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b74:	87 7f       	andi	r24, 0xF7	; 247
     b76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7a:	08 95       	ret

00000b7c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     b7c:	66 0f       	add	r22, r22
     b7e:	66 0f       	add	r22, r22
     b80:	66 0f       	add	r22, r22
     b82:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b84:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b86:	77 9b       	sbis	0x0e, 7	; 14
     b88:	fe cf       	rjmp	.-4      	; 0xb86 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     b8a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b8c:	77 9b       	sbis	0x0e, 7	; 14
     b8e:	fe cf       	rjmp	.-4      	; 0xb8c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b90:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b94:	28 60       	ori	r18, 0x08	; 8
     b96:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b9e:	27 7f       	andi	r18, 0xF7	; 247
     ba0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba4:	25 ed       	ldi	r18, 0xD5	; 213
     ba6:	2a 95       	dec	r18
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <set_custom_character+0x2a>
     baa:	00 00       	nop
     bac:	fc 01       	movw	r30, r24
     bae:	9c 01       	movw	r18, r24
     bb0:	28 5f       	subi	r18, 0xF8	; 248
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bb4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     bb6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bb8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bba:	77 9b       	sbis	0x0e, 7	; 14
     bbc:	fe cf       	rjmp	.-4      	; 0xbba <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     bbe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc0:	77 9b       	sbis	0x0e, 7	; 14
     bc2:	fe cf       	rjmp	.-4      	; 0xbc0 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bc4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd8:	85 ed       	ldi	r24, 0xD5	; 213
     bda:	8a 95       	dec	r24
     bdc:	f1 f7       	brne	.-4      	; 0xbda <set_custom_character+0x5e>
     bde:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     be0:	e2 17       	cp	r30, r18
     be2:	f3 07       	cpc	r31, r19
     be4:	41 f7       	brne	.-48     	; 0xbb6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     be6:	08 95       	ret

00000be8 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     be8:	90 e4       	ldi	r25, 0x40	; 64
     bea:	89 9f       	mul	r24, r25
     bec:	60 0d       	add	r22, r0
     bee:	11 24       	eor	r1, r1
     bf0:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bf2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bf4:	77 9b       	sbis	0x0e, 7	; 14
     bf6:	fe cf       	rjmp	.-4      	; 0xbf4 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     bf8:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bfa:	77 9b       	sbis	0x0e, 7	; 14
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bfe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c02:	88 60       	ori	r24, 0x08	; 8
     c04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c08:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c0c:	87 7f       	andi	r24, 0xF7	; 247
     c0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c12:	08 95       	ret

00000c14 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     c14:	81 11       	cpse	r24, r1
     c16:	13 c0       	rjmp	.+38     	; 0xc3e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c1c:	77 9b       	sbis	0x0e, 7	; 14
     c1e:	fe cf       	rjmp	.-4      	; 0xc1c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     c20:	80 e3       	ldi	r24, 0x30	; 48
     c22:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c24:	77 9b       	sbis	0x0e, 7	; 14
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c3c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     c3e:	84 36       	cpi	r24, 0x64	; 100
     c40:	b0 f4       	brcc	.+44     	; 0xc6e <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     c42:	8a 30       	cpi	r24, 0x0A	; 10
     c44:	60 f5       	brcc	.+88     	; 0xc9e <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c4a:	77 9b       	sbis	0x0e, 7	; 14
     c4c:	fe cf       	rjmp	.-4      	; 0xc4a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c4e:	9d ec       	ldi	r25, 0xCD	; 205
     c50:	89 9f       	mul	r24, r25
     c52:	91 2d       	mov	r25, r1
     c54:	11 24       	eor	r1, r1
     c56:	96 95       	lsr	r25
     c58:	96 95       	lsr	r25
     c5a:	96 95       	lsr	r25
     c5c:	2a e0       	ldi	r18, 0x0A	; 10
     c5e:	92 9f       	mul	r25, r18
     c60:	80 19       	sub	r24, r0
     c62:	11 24       	eor	r1, r1
     c64:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     c66:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c68:	77 9b       	sbis	0x0e, 7	; 14
     c6a:	fe cf       	rjmp	.-4      	; 0xc68 <uint2lcd+0x54>
     c6c:	dd cf       	rjmp	.-70     	; 0xc28 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     c6e:	99 e2       	ldi	r25, 0x29	; 41
     c70:	89 9f       	mul	r24, r25
     c72:	91 2d       	mov	r25, r1
     c74:	11 24       	eor	r1, r1
     c76:	92 95       	swap	r25
     c78:	9f 70       	andi	r25, 0x0F	; 15
     c7a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c80:	77 9b       	sbis	0x0e, 7	; 14
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     c84:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c86:	77 9b       	sbis	0x0e, 7	; 14
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c8a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c8e:	98 60       	ori	r25, 0x08	; 8
     c90:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c94:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c98:	97 7f       	andi	r25, 0xF7	; 247
     c9a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     c9e:	99 e2       	ldi	r25, 0x29	; 41
     ca0:	89 9f       	mul	r24, r25
     ca2:	91 2d       	mov	r25, r1
     ca4:	11 24       	eor	r1, r1
     ca6:	92 95       	swap	r25
     ca8:	9f 70       	andi	r25, 0x0F	; 15
     caa:	38 2f       	mov	r19, r24
     cac:	24 e6       	ldi	r18, 0x64	; 100
     cae:	92 9f       	mul	r25, r18
     cb0:	30 19       	sub	r19, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2d ec       	ldi	r18, 0xCD	; 205
     cb6:	32 9f       	mul	r19, r18
     cb8:	91 2d       	mov	r25, r1
     cba:	11 24       	eor	r1, r1
     cbc:	96 95       	lsr	r25
     cbe:	96 95       	lsr	r25
     cc0:	96 95       	lsr	r25
     cc2:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cc8:	77 9b       	sbis	0x0e, 7	; 14
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     ccc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cce:	77 9b       	sbis	0x0e, 7	; 14
     cd0:	fe cf       	rjmp	.-4      	; 0xcce <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cd2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd6:	98 60       	ori	r25, 0x08	; 8
     cd8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cdc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ce0:	97 7f       	andi	r25, 0xF7	; 247
     ce2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ce6:	af cf       	rjmp	.-162    	; 0xc46 <uint2lcd+0x32>

00000ce8 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     ce8:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     cea:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf2:	77 9b       	sbis	0x0e, 7	; 14
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     cf6:	9d e2       	ldi	r25, 0x2D	; 45
     cf8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cfa:	77 9b       	sbis	0x0e, 7	; 14
     cfc:	fe cf       	rjmp	.-4      	; 0xcfa <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cfe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d02:	98 60       	ori	r25, 0x08	; 8
     d04:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d08:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d0c:	97 7f       	andi	r25, 0xF7	; 247
     d0e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d12:	95 ed       	ldi	r25, 0xD5	; 213
     d14:	9a 95       	dec	r25
     d16:	f1 f7       	brne	.-4      	; 0xd14 <int2lcd+0x2c>
     d18:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     d1a:	81 95       	neg	r24
     d1c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <uint2lcd>

00000d20 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d20:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d22:	77 9b       	sbis	0x0e, 7	; 14
     d24:	fe cf       	rjmp	.-4      	; 0xd22 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     d26:	8e e0       	ldi	r24, 0x0E	; 14
     d28:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d2a:	77 9b       	sbis	0x0e, 7	; 14
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d32:	88 60       	ori	r24, 0x08	; 8
     d34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d38:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d42:	08 95       	ret

00000d44 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d44:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d46:	77 9b       	sbis	0x0e, 7	; 14
     d48:	fe cf       	rjmp	.-4      	; 0xd46 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     d4a:	8c e0       	ldi	r24, 0x0C	; 12
     d4c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d4e:	77 9b       	sbis	0x0e, 7	; 14
     d50:	fe cf       	rjmp	.-4      	; 0xd4e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d56:	88 60       	ori	r24, 0x08	; 8
     d58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d66:	08 95       	ret

00000d68 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d6a:	77 9b       	sbis	0x0e, 7	; 14
     d6c:	fe cf       	rjmp	.-4      	; 0xd6a <shift_right+0x2>
  SPDR = byte;                        //send payload
     d6e:	8e e1       	ldi	r24, 0x1E	; 30
     d70:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d72:	77 9b       	sbis	0x0e, 7	; 14
     d74:	fe cf       	rjmp	.-4      	; 0xd72 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7a:	88 60       	ori	r24, 0x08	; 8
     d7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d84:	87 7f       	andi	r24, 0xF7	; 247
     d86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d8a:	08 95       	ret

00000d8c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d8c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d8e:	77 9b       	sbis	0x0e, 7	; 14
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <shift_left+0x2>
  SPDR = byte;                        //send payload
     d92:	88 e1       	ldi	r24, 0x18	; 24
     d94:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d96:	77 9b       	sbis	0x0e, 7	; 14
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d9e:	88 60       	ori	r24, 0x08	; 8
     da0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     da4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     da8:	87 7f       	andi	r24, 0xF7	; 247
     daa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dae:	08 95       	ret

00000db0 <strobe_lcd>:
     db0:	e2 e6       	ldi	r30, 0x62	; 98
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 83       	st	Z, r24
     dba:	80 81       	ld	r24, Z
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret

00000dc2 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dc2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dc4:	77 9b       	sbis	0x0e, 7	; 14
     dc6:	fe cf       	rjmp	.-4      	; 0xdc4 <clear_display+0x2>
  SPDR = byte;                        //send payload
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dcc:	77 9b       	sbis	0x0e, 7	; 14
     dce:	fe cf       	rjmp	.-4      	; 0xdcc <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dd0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dda:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de4:	8f e1       	ldi	r24, 0x1F	; 31
     de6:	9c e1       	ldi	r25, 0x1C	; 28
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <clear_display+0x26>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <clear_display+0x2c>
     dee:	00 00       	nop
     df0:	08 95       	ret

00000df2 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     df2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     df4:	77 9b       	sbis	0x0e, 7	; 14
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dfc:	77 9b       	sbis	0x0e, 7	; 14
     dfe:	fe cf       	rjmp	.-4      	; 0xdfc <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e04:	88 60       	ori	r24, 0x08	; 8
     e06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e0a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e14:	8f e6       	ldi	r24, 0x6F	; 111
     e16:	97 e1       	ldi	r25, 0x17	; 23
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <cursor_home+0x26>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <cursor_home+0x2c>
     e1e:	00 00       	nop
     e20:	08 95       	ret

00000e22 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e22:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e24:	77 9b       	sbis	0x0e, 7	; 14
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     e28:	80 ec       	ldi	r24, 0xC0	; 192
     e2a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e2c:	77 9b       	sbis	0x0e, 7	; 14
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e34:	88 60       	ori	r24, 0x08	; 8
     e36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e44:	08 95       	ret

00000e46 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e46:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e48:	77 9b       	sbis	0x0e, 7	; 14
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     e4c:	80 e8       	ldi	r24, 0x80	; 128
     e4e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e50:	77 9b       	sbis	0x0e, 7	; 14
     e52:	fe cf       	rjmp	.-4      	; 0xe50 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e58:	88 60       	ori	r24, 0x08	; 8
     e5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e62:	87 7f       	andi	r24, 0xF7	; 247
     e64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e68:	08 95       	ret

00000e6a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     e6a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e6c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     e6e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e70:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e72:	77 9b       	sbis	0x0e, 7	; 14
     e74:	fe cf       	rjmp	.-4      	; 0xe72 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     e76:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e78:	77 9b       	sbis	0x0e, 7	; 14
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e90:	85 ed       	ldi	r24, 0xD5	; 213
     e92:	8a 95       	dec	r24
     e94:	f1 f7       	brne	.-4      	; 0xe92 <fill_spaces+0x28>
     e96:	00 00       	nop
     e98:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     e9a:	51 f7       	brne	.-44     	; 0xe70 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     e9c:	08 95       	ret

00000e9e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ea2:	77 9b       	sbis	0x0e, 7	; 14
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     ea6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ea8:	77 9b       	sbis	0x0e, 7	; 14
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     eac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eb6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eba:	87 7f       	andi	r24, 0xF7	; 247
     ebc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec0:	08 95       	ret

00000ec2 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     ec2:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eca:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ecc:	df 01       	movw	r26, r30
     ece:	a4 0f       	add	r26, r20
     ed0:	b5 1f       	adc	r27, r21
     ed2:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ed4:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ed6:	77 9b       	sbis	0x0e, 7	; 14
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     eda:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     edc:	77 9b       	sbis	0x0e, 7	; 14
     ede:	fe cf       	rjmp	.-4      	; 0xedc <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ee0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ee4:	98 60       	ori	r25, 0x08	; 8
     ee6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eee:	97 7f       	andi	r25, 0xF7	; 247
     ef0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef4:	85 ed       	ldi	r24, 0xD5	; 213
     ef6:	8a 95       	dec	r24
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <string2lcd+0x34>
     efa:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     efc:	6f 5f       	subi	r22, 0xFF	; 255
     efe:	46 2f       	mov	r20, r22
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	df 01       	movw	r26, r30
     f04:	0d 90       	ld	r0, X+
     f06:	00 20       	and	r0, r0
     f08:	e9 f7       	brne	.-6      	; 0xf04 <string2lcd+0x42>
     f0a:	9d 01       	movw	r18, r26
     f0c:	2e 1b       	sub	r18, r30
     f0e:	3f 0b       	sbc	r19, r31
     f10:	22 50       	subi	r18, 0x02	; 2
     f12:	31 09       	sbc	r19, r1
     f14:	24 17       	cp	r18, r20
     f16:	35 07       	cpc	r19, r21
     f18:	c8 f6       	brcc	.-78     	; 0xecc <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     f1a:	08 95       	ret

00000f1c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	99 ef       	ldi	r25, 0xF9	; 249
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <lcd_init+0x4>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <lcd_init+0xa>
     f26:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f2e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f30:	77 9b       	sbis	0x0e, 7	; 14
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     f34:	80 e3       	ldi	r24, 0x30	; 48
     f36:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f38:	77 9b       	sbis	0x0e, 7	; 14
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f50:	8f e5       	ldi	r24, 0x5F	; 95
     f52:	9d e6       	ldi	r25, 0x6D	; 109
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <lcd_init+0x38>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <lcd_init+0x3e>
     f5a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f5c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f5e:	77 9b       	sbis	0x0e, 7	; 14
     f60:	fe cf       	rjmp	.-4      	; 0xf5e <lcd_init+0x42>
  SPDR = byte;                        //send payload
     f62:	80 e3       	ldi	r24, 0x30	; 48
     f64:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f66:	77 9b       	sbis	0x0e, 7	; 14
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f7e:	8f e5       	ldi	r24, 0x5F	; 95
     f80:	9d e6       	ldi	r25, 0x6D	; 109
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <lcd_init+0x66>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <lcd_init+0x6c>
     f88:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f8a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f8c:	77 9b       	sbis	0x0e, 7	; 14
     f8e:	fe cf       	rjmp	.-4      	; 0xf8c <lcd_init+0x70>
  SPDR = byte;                        //send payload
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f94:	77 9b       	sbis	0x0e, 7	; 14
     f96:	fe cf       	rjmp	.-4      	; 0xf94 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa6:	87 7f       	andi	r24, 0xF7	; 247
     fa8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fac:	8f e5       	ldi	r24, 0x5F	; 95
     fae:	9d e6       	ldi	r25, 0x6D	; 109
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <lcd_init+0x94>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <lcd_init+0x9a>
     fb6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fb8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fba:	77 9b       	sbis	0x0e, 7	; 14
     fbc:	fe cf       	rjmp	.-4      	; 0xfba <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     fbe:	88 e3       	ldi	r24, 0x38	; 56
     fc0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fc2:	77 9b       	sbis	0x0e, 7	; 14
     fc4:	fe cf       	rjmp	.-4      	; 0xfc2 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fc6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fca:	88 60       	ori	r24, 0x08	; 8
     fcc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fda:	8f e1       	ldi	r24, 0x1F	; 31
     fdc:	9e e4       	ldi	r25, 0x4E	; 78
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <lcd_init+0xc2>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <lcd_init+0xc8>
     fe4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fe6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fe8:	77 9b       	sbis	0x0e, 7	; 14
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     fec:	88 e0       	ldi	r24, 0x08	; 8
     fee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ff0:	77 9b       	sbis	0x0e, 7	; 14
     ff2:	fe cf       	rjmp	.-4      	; 0xff0 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ff4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ffe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1002:	87 7f       	andi	r24, 0xF7	; 247
    1004:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1008:	8f e1       	ldi	r24, 0x1F	; 31
    100a:	9e e4       	ldi	r25, 0x4E	; 78
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_init+0xf0>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <lcd_init+0xf6>
    1012:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1014:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1016:	77 9b       	sbis	0x0e, 7	; 14
    1018:	fe cf       	rjmp	.-4      	; 0x1016 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    101e:	77 9b       	sbis	0x0e, 7	; 14
    1020:	fe cf       	rjmp	.-4      	; 0x101e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1022:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    102c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1030:	87 7f       	andi	r24, 0xF7	; 247
    1032:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1036:	8f e1       	ldi	r24, 0x1F	; 31
    1038:	9e e4       	ldi	r25, 0x4E	; 78
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <lcd_init+0x11e>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <lcd_init+0x124>
    1040:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1042:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1044:	77 9b       	sbis	0x0e, 7	; 14
    1046:	fe cf       	rjmp	.-4      	; 0x1044 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1048:	86 e0       	ldi	r24, 0x06	; 6
    104a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    104c:	77 9b       	sbis	0x0e, 7	; 14
    104e:	fe cf       	rjmp	.-4      	; 0x104c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1050:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1064:	8f e1       	ldi	r24, 0x1F	; 31
    1066:	9e e4       	ldi	r25, 0x4E	; 78
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <lcd_init+0x14c>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <lcd_init+0x152>
    106e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1070:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1072:	77 9b       	sbis	0x0e, 7	; 14
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1076:	8c e0       	ldi	r24, 0x0C	; 12
    1078:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    107a:	77 9b       	sbis	0x0e, 7	; 14
    107c:	fe cf       	rjmp	.-4      	; 0x107a <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    107e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1088:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    108c:	87 7f       	andi	r24, 0xF7	; 247
    108e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1092:	8f e1       	ldi	r24, 0x1F	; 31
    1094:	9e e4       	ldi	r25, 0x4E	; 78
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <lcd_init+0x17a>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <lcd_init+0x180>
    109c:	00 00       	nop
    109e:	08 95       	ret

000010a0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    10a0:	4f 92       	push	r4
    10a2:	5f 92       	push	r5
    10a4:	6f 92       	push	r6
    10a6:	7f 92       	push	r7
    10a8:	8f 92       	push	r8
    10aa:	9f 92       	push	r9
    10ac:	af 92       	push	r10
    10ae:	bf 92       	push	r11
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	69 97       	sbiw	r28, 0x19	; 25
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	14 2f       	mov	r17, r20
    10d2:	42 2e       	mov	r4, r18
    10d4:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    10d6:	00 23       	and	r16, r16
    10d8:	79 f0       	breq	.+30     	; 0x10f8 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    10da:	6b 01       	movw	r12, r22
    10dc:	7c 01       	movw	r14, r24
    10de:	cc 24       	eor	r12, r12
    10e0:	f7 fc       	sbrc	r15, 7
    10e2:	c3 94       	inc	r12
    10e4:	dd 24       	eor	r13, r13
    10e6:	ee 24       	eor	r14, r14
    10e8:	ff 24       	eor	r15, r15
    10ea:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    10ec:	6b 01       	movw	r12, r22
    10ee:	7c 01       	movw	r14, r24
    10f0:	97 fd       	sbrc	r25, 7
    10f2:	a3 c0       	rjmp	.+326    	; 0x123a <__stack+0x13b>
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    10f8:	44 20       	and	r4, r4
    10fa:	09 f4       	brne	.+2      	; 0x10fe <lcd_int32+0x5e>
    10fc:	96 c0       	rjmp	.+300    	; 0x122a <__stack+0x12b>
    10fe:	9e 01       	movw	r18, r28
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	59 01       	movw	r10, r18
    1106:	49 01       	movw	r8, r18
    1108:	66 24       	eor	r6, r6
    110a:	6a 94       	dec	r6
    110c:	64 0c       	add	r6, r4
    110e:	71 2c       	mov	r7, r1
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	63 1a       	sub	r6, r19
    1114:	73 0a       	sbc	r7, r19
    1116:	6a 0c       	add	r6, r10
    1118:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    111a:	2a e0       	ldi	r18, 0x0A	; 10
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__divmodsi4>
    1126:	e6 2f       	mov	r30, r22
    1128:	2a 8b       	std	Y+18, r18	; 0x12
    112a:	3b 8b       	std	Y+19, r19	; 0x13
    112c:	4c 8b       	std	Y+20, r20	; 0x14
    112e:	5d 8b       	std	Y+21, r21	; 0x15
    1130:	6a 89       	ldd	r22, Y+18	; 0x12
    1132:	7b 89       	ldd	r23, Y+19	; 0x13
    1134:	8c 89       	ldd	r24, Y+20	; 0x14
    1136:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1138:	20 e3       	ldi	r18, 0x30	; 48
    113a:	2e 0f       	add	r18, r30
    113c:	f4 01       	movw	r30, r8
    113e:	21 93       	st	Z+, r18
    1140:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1142:	6e 16       	cp	r6, r30
    1144:	7f 06       	cpc	r7, r31
    1146:	49 f7       	brne	.-46     	; 0x111a <__stack+0x1b>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1148:	99 24       	eor	r9, r9
    114a:	93 94       	inc	r9
    114c:	94 0c       	add	r9, r4
    114e:	f5 01       	movw	r30, r10
    1150:	e4 0d       	add	r30, r4
    1152:	f1 1d       	adc	r31, r1
    1154:	2e e2       	ldi	r18, 0x2E	; 46
    1156:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__divmodsi4>
    1164:	e6 2f       	mov	r30, r22
    1166:	2a 8b       	std	Y+18, r18	; 0x12
    1168:	3b 8b       	std	Y+19, r19	; 0x13
    116a:	4c 8b       	std	Y+20, r20	; 0x14
    116c:	5d 8b       	std	Y+21, r21	; 0x15
    116e:	6e 8b       	std	Y+22, r22	; 0x16
    1170:	7f 8b       	std	Y+23, r23	; 0x17
    1172:	88 8f       	std	Y+24, r24	; 0x18
    1174:	99 8f       	std	Y+25, r25	; 0x19
    1176:	6a 89       	ldd	r22, Y+18	; 0x12
    1178:	7b 89       	ldd	r23, Y+19	; 0x13
    117a:	8c 89       	ldd	r24, Y+20	; 0x14
    117c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    117e:	31 e0       	ldi	r19, 0x01	; 1
    1180:	39 0d       	add	r19, r9
    1182:	d5 01       	movw	r26, r10
    1184:	a9 0d       	add	r26, r9
    1186:	b1 1d       	adc	r27, r1
    1188:	e0 5d       	subi	r30, 0xD0	; 208
    118a:	ec 93       	st	X, r30
    118c:	93 2e       	mov	r9, r19
        }while(qr.quot);
    118e:	61 15       	cp	r22, r1
    1190:	71 05       	cpc	r23, r1
    1192:	81 05       	cpc	r24, r1
    1194:	91 05       	cpc	r25, r1
    1196:	01 f7       	brne	.-64     	; 0x1158 <__stack+0x59>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1198:	11 23       	and	r17, r17
    119a:	61 f0       	breq	.+24     	; 0x11b4 <__stack+0xb5>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    119c:	51 10       	cpse	r5, r1
    119e:	4b c0       	rjmp	.+150    	; 0x1236 <__stack+0x137>
    11a0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    11a2:	31 17       	cp	r19, r17
    11a4:	38 f4       	brcc	.+14     	; 0x11b4 <__stack+0xb5>
    11a6:	f5 01       	movw	r30, r10
    11a8:	e3 0f       	add	r30, r19
    11aa:	f1 1d       	adc	r31, r1
    11ac:	90 83       	st	Z, r25
    11ae:	3f 5f       	subi	r19, 0xFF	; 255
    11b0:	13 13       	cpse	r17, r19
    11b2:	f9 cf       	rjmp	.-14     	; 0x11a6 <__stack+0xa7>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    11b4:	00 23       	and	r16, r16
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <__stack+0xc5>
    11b8:	f5 01       	movw	r30, r10
    11ba:	e3 0f       	add	r30, r19
    11bc:	f1 1d       	adc	r31, r1
    11be:	9d e2       	ldi	r25, 0x2D	; 45
    11c0:	90 83       	st	Z, r25
    11c2:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11c4:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    11c6:	31 50       	subi	r19, 0x01	; 1
    11c8:	f5 01       	movw	r30, r10
    11ca:	e3 0f       	add	r30, r19
    11cc:	f1 1d       	adc	r31, r1
    11ce:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11d0:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11d2:	77 9b       	sbis	0x0e, 7	; 14
    11d4:	fe cf       	rjmp	.-4      	; 0x11d2 <__stack+0xd3>
  SPDR = byte;                        //send payload
    11d6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11d8:	77 9b       	sbis	0x0e, 7	; 14
    11da:	fe cf       	rjmp	.-4      	; 0x11d8 <__stack+0xd9>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e0:	98 60       	ori	r25, 0x08	; 8
    11e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ea:	97 7f       	andi	r25, 0xF7	; 247
    11ec:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11f0:	85 ed       	ldi	r24, 0xD5	; 213
    11f2:	8a 95       	dec	r24
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <__stack+0xf3>
    11f6:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    11f8:	31 11       	cpse	r19, r1
    11fa:	e5 cf       	rjmp	.-54     	; 0x11c6 <__stack+0xc7>

}
    11fc:	69 96       	adiw	r28, 0x19	; 25
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	7f 90       	pop	r7
    1222:	6f 90       	pop	r6
    1224:	5f 90       	pop	r5
    1226:	4f 90       	pop	r4
    1228:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    122a:	91 2c       	mov	r9, r1
    122c:	9e 01       	movw	r18, r28
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	59 01       	movw	r10, r18
    1234:	91 cf       	rjmp	.-222    	; 0x1158 <__stack+0x59>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1236:	90 e3       	ldi	r25, 0x30	; 48
    1238:	b4 cf       	rjmp	.-152    	; 0x11a2 <__stack+0xa3>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    123a:	f0 94       	com	r15
    123c:	e0 94       	com	r14
    123e:	d0 94       	com	r13
    1240:	c0 94       	com	r12
    1242:	c1 1c       	adc	r12, r1
    1244:	d1 1c       	adc	r13, r1
    1246:	e1 1c       	adc	r14, r1
    1248:	f1 1c       	adc	r15, r1
    124a:	54 cf       	rjmp	.-344    	; 0x10f4 <lcd_int32+0x54>

0000124c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    124c:	5f 92       	push	r5
    124e:	6f 92       	push	r6
    1250:	7f 92       	push	r7
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	61 97       	sbiw	r28, 0x11	; 17
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	5c 01       	movw	r10, r24
    127c:	96 2e       	mov	r9, r22
    127e:	54 2e       	mov	r5, r20
    1280:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1282:	8b 2c       	mov	r8, r11
    1284:	88 1c       	adc	r8, r8
    1286:	88 24       	eor	r8, r8
    1288:	88 1c       	adc	r8, r8
    128a:	78 2c       	mov	r7, r8
    128c:	9c 01       	movw	r18, r24
    128e:	97 fd       	sbrc	r25, 7
    1290:	9d c0       	rjmp	.+314    	; 0x13cc <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1292:	55 20       	and	r5, r5
    1294:	09 f4       	brne	.+2      	; 0x1298 <lcd_int16+0x4c>
    1296:	8e c0       	rjmp	.+284    	; 0x13b4 <lcd_int16+0x168>
    1298:	8e 01       	movw	r16, r28
    129a:	0f 5f       	subi	r16, 0xFF	; 255
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
    129e:	78 01       	movw	r14, r16
    12a0:	cc 24       	eor	r12, r12
    12a2:	ca 94       	dec	r12
    12a4:	c5 0c       	add	r12, r5
    12a6:	d1 2c       	mov	r13, r1
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	c8 1a       	sub	r12, r24
    12ac:	d8 0a       	sbc	r13, r24
    12ae:	c0 0e       	add	r12, r16
    12b0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    12b2:	6a e0       	ldi	r22, 0x0A	; 10
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	c9 01       	movw	r24, r18
    12b8:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodhi4>
    12bc:	46 2f       	mov	r20, r22
    12be:	24 2f       	mov	r18, r20
    12c0:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    12c2:	80 5d       	subi	r24, 0xD0	; 208
    12c4:	f7 01       	movw	r30, r14
    12c6:	81 93       	st	Z+, r24
    12c8:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    12ca:	ec 15       	cp	r30, r12
    12cc:	fd 05       	cpc	r31, r13
    12ce:	89 f7       	brne	.-30     	; 0x12b2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    12d0:	ff 24       	eor	r15, r15
    12d2:	f3 94       	inc	r15
    12d4:	f5 0c       	add	r15, r5
    12d6:	f8 01       	movw	r30, r16
    12d8:	e5 0d       	add	r30, r5
    12da:	f1 1d       	adc	r31, r1
    12dc:	8e e2       	ldi	r24, 0x2E	; 46
    12de:	80 83       	st	Z, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    12e2:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    12e4:	6a e0       	ldi	r22, 0x0A	; 10
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	c9 01       	movw	r24, r18
    12ea:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodhi4>
    12ee:	46 2f       	mov	r20, r22
    12f0:	24 2f       	mov	r18, r20
    12f2:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	9f 0d       	add	r25, r15
    12f8:	f8 01       	movw	r30, r16
    12fa:	ef 0d       	add	r30, r15
    12fc:	f1 1d       	adc	r31, r1
    12fe:	80 5d       	subi	r24, 0xD0	; 208
    1300:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	69 f7       	brne	.-38     	; 0x12e2 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    1308:	61 10       	cpse	r6, r1
    130a:	59 c0       	rjmp	.+178    	; 0x13be <lcd_int16+0x172>
    130c:	b7 fc       	sbrc	r11, 7
    130e:	63 c0       	rjmp	.+198    	; 0x13d6 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1310:	99 20       	and	r9, r9
    1312:	b1 f0       	breq	.+44     	; 0x1340 <lcd_int16+0xf4>
    1314:	68 2d       	mov	r22, r8
    1316:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1318:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    131a:	29 2f       	mov	r18, r25
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	49 2d       	mov	r20, r9
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	46 1b       	sub	r20, r22
    1324:	57 0b       	sbc	r21, r23
    1326:	24 17       	cp	r18, r20
    1328:	35 07       	cpc	r19, r21
    132a:	54 f4       	brge	.+20     	; 0x1340 <lcd_int16+0xf4>
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	f8 01       	movw	r30, r16
    1330:	e2 0f       	add	r30, r18
    1332:	f3 1f       	adc	r31, r19
    1334:	80 83       	st	Z, r24
    1336:	29 2f       	mov	r18, r25
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	24 17       	cp	r18, r20
    133c:	35 07       	cpc	r19, r21
    133e:	b4 f3       	brlt	.-20     	; 0x132c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1340:	77 20       	and	r7, r7
    1342:	31 f0       	breq	.+12     	; 0x1350 <lcd_int16+0x104>
    1344:	f8 01       	movw	r30, r16
    1346:	e9 0f       	add	r30, r25
    1348:	f1 1d       	adc	r31, r1
    134a:	8d e2       	ldi	r24, 0x2D	; 45
    134c:	80 83       	st	Z, r24
    134e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1350:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	f8 01       	movw	r30, r16
    1356:	e9 0f       	add	r30, r25
    1358:	f1 1d       	adc	r31, r1
    135a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    135c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    135e:	77 9b       	sbis	0x0e, 7	; 14
    1360:	fe cf       	rjmp	.-4      	; 0x135e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1362:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1364:	77 9b       	sbis	0x0e, 7	; 14
    1366:	fe cf       	rjmp	.-4      	; 0x1364 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1368:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136c:	88 60       	ori	r24, 0x08	; 8
    136e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1372:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1376:	87 7f       	andi	r24, 0xF7	; 247
    1378:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    137c:	f5 ed       	ldi	r31, 0xD5	; 213
    137e:	fa 95       	dec	r31
    1380:	f1 f7       	brne	.-4      	; 0x137e <lcd_int16+0x132>
    1382:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1384:	91 11       	cpse	r25, r1
    1386:	e5 cf       	rjmp	.-54     	; 0x1352 <lcd_int16+0x106>
}
    1388:	61 96       	adiw	r28, 0x11	; 17
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	bf 90       	pop	r11
    13a6:	af 90       	pop	r10
    13a8:	9f 90       	pop	r9
    13aa:	8f 90       	pop	r8
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
    13b0:	5f 90       	pop	r5
    13b2:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    13b4:	f1 2c       	mov	r15, r1
    13b6:	8e 01       	movw	r16, r28
    13b8:	0f 5f       	subi	r16, 0xFF	; 255
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	93 cf       	rjmp	.-218    	; 0x12e4 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    13be:	99 20       	and	r9, r9
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <lcd_int16+0x178>
    13c2:	be cf       	rjmp	.-132    	; 0x1340 <lcd_int16+0xf4>
    13c4:	68 2d       	mov	r22, r8
    13c6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    13c8:	80 e3       	ldi	r24, 0x30	; 48
    13ca:	a7 cf       	rjmp	.-178    	; 0x131a <lcd_int16+0xce>
    13cc:	22 27       	eor	r18, r18
    13ce:	33 27       	eor	r19, r19
    13d0:	28 1b       	sub	r18, r24
    13d2:	39 0b       	sbc	r19, r25
    13d4:	5e cf       	rjmp	.-324    	; 0x1292 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    13d6:	f3 94       	inc	r15
    13d8:	f3 94       	inc	r15
    13da:	f8 01       	movw	r30, r16
    13dc:	e9 0f       	add	r30, r25
    13de:	f1 1d       	adc	r31, r1
    13e0:	8d e2       	ldi	r24, 0x2D	; 45
    13e2:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    13e4:	99 20       	and	r9, r9
    13e6:	59 f0       	breq	.+22     	; 0x13fe <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    13e8:	2f 2d       	mov	r18, r15
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	49 2d       	mov	r20, r9
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	24 17       	cp	r18, r20
    13f2:	35 07       	cpc	r19, r21
    13f4:	24 f4       	brge	.+8      	; 0x13fe <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    13f6:	9f 2d       	mov	r25, r15
                bSigned = 0;
    13f8:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    13fa:	80 e2       	ldi	r24, 0x20	; 32
    13fc:	97 cf       	rjmp	.-210    	; 0x132c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    13fe:	9f 2d       	mov	r25, r15
    1400:	a7 cf       	rjmp	.-178    	; 0x1350 <lcd_int16+0x104>

00001402 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	0b b6       	in	r0, 0x3b	; 59
    140e:	0f 92       	push	r0
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1420:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1424:	8e 2f       	mov	r24, r30
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	38 97       	sbiw	r30, 0x08	; 8
    142c:	e1 35       	cpi	r30, 0x51	; 81
    142e:	f1 05       	cpc	r31, r1
    1430:	b0 f0       	brcs	.+44     	; 0x145e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1432:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1436:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    143a:	84 e0       	ldi	r24, 0x04	; 4
    143c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0b be       	out	0x3b, r0	; 59
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    145e:	ea 5b       	subi	r30, 0xBA	; 186
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1466:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_buf_ptr.1780>
    146a:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_buf>
    146e:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <twi_buf+0x1>
    1472:	e8 0f       	add	r30, r24
    1474:	f1 1d       	adc	r31, r1
    1476:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    147a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    147c:	84 e9       	ldi	r24, 0x94	; 148
    147e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    1482:	de cf       	rjmp	.-68     	; 0x1440 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1484:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <twi_bus_addr>
    1488:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    148c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    1490:	85 e8       	ldi	r24, 0x85	; 133
    1492:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1496:	d4 cf       	rjmp	.-88     	; 0x1440 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1498:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_buf_ptr.1780>
    149c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <twi_msg_size>
    14a0:	89 17       	cp	r24, r25
    14a2:	60 f7       	brcc	.-40     	; 0x147c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    14a4:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_buf>
    14a8:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <twi_buf+0x1>
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	98 0f       	add	r25, r24
    14b0:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <twi_buf_ptr.1780>
    14b4:	e8 0f       	add	r30, r24
    14b6:	f1 1d       	adc	r31, r1
    14b8:	80 81       	ld	r24, Z
    14ba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    14be:	85 e8       	ldi	r24, 0x85	; 133
    14c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14c4:	bd cf       	rjmp	.-134    	; 0x1440 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    14c6:	85 ea       	ldi	r24, 0xA5	; 165
    14c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    14cc:	b9 cf       	rjmp	.-142    	; 0x1440 <__vector_33+0x3e>
    14ce:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    14d2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <twi_msg_size>
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	dc f4       	brge	.+54     	; 0x1518 <__vector_33+0x116>
    14e2:	85 ec       	ldi	r24, 0xC5	; 197
    14e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14e8:	ab cf       	rjmp	.-170    	; 0x1440 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    14ea:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_buf>
    14ee:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <twi_buf+0x1>
    14f2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_buf_ptr.1780>
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	28 0f       	add	r18, r24
    14fa:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <twi_buf_ptr.1780>
    14fe:	e8 0f       	add	r30, r24
    1500:	f1 1d       	adc	r31, r1
    1502:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1506:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1508:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <twi_msg_size>
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	2c f3       	brlt	.-54     	; 0x14e2 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1518:	85 e8       	ldi	r24, 0x85	; 133
    151a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    151e:	90 cf       	rjmp	.-224    	; 0x1440 <__vector_33+0x3e>

00001520 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1520:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1524:	81 70       	andi	r24, 0x01	; 1
    1526:	08 95       	ret

00001528 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1528:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    152c:	90 fd       	sbrc	r25, 0
    152e:	fc cf       	rjmp	.-8      	; 0x1528 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1536:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <twi_buf+0x1>
    153a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    153e:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1542:	85 ea       	ldi	r24, 0xA5	; 165
    1544:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1548:	08 95       	ret

0000154a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    154a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    154e:	90 fd       	sbrc	r25, 0
    1550:	fc cf       	rjmp	.-8      	; 0x154a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    1558:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <twi_buf+0x1>
    155c:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    1560:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1564:	85 ea       	ldi	r24, 0xA5	; 165
    1566:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    156a:	08 95       	ret

0000156c <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    1572:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1576:	8c e0       	ldi	r24, 0x0C	; 12
    1578:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    157c:	08 95       	ret

0000157e <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
    157e:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
    1580:	cb 01       	movw	r24, r22
    1582:	88 0f       	add	r24, r24
    1584:	89 2f       	mov	r24, r25
    1586:	88 1f       	adc	r24, r24
    1588:	99 0b       	sbc	r25, r25
    158a:	91 95       	neg	r25

	if(f_not_c == 0x01){
    158c:	41 30       	cpi	r20, 0x01	; 1
    158e:	91 f4       	brne	.+36     	; 0x15b4 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
    1590:	9c 01       	movw	r18, r24
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	28 0f       	add	r18, r24
    15a0:	39 1f       	adc	r19, r25
    15a2:	ad ec       	ldi	r26, 0xCD	; 205
    15a4:	bc ec       	ldi	r27, 0xCC	; 204
    15a6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    15b4:	4a e0       	ldi	r20, 0x0A	; 10
    15b6:	bf 01       	movw	r22, r30
    15b8:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__itoa_ncheck>

000015bc <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15bc:	5d 9b       	sbis	0x0b, 5	; 11
    15be:	fe cf       	rjmp	.-4      	; 0x15bc <uart_putc>
    UDR0 = data;    // Send data byte
    15c0:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15c2:	5d 9b       	sbis	0x0b, 5	; 11
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <uart_putc+0x6>
}
    15c6:	08 95       	ret

000015c8 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    15c8:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    15ca:	90 81       	ld	r25, Z
    15cc:	99 23       	and	r25, r25
    15ce:	49 f0       	breq	.+18     	; 0x15e2 <uart_puts+0x1a>
    15d0:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15d2:	5d 9b       	sbis	0x0b, 5	; 11
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    15d6:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15d8:	5d 9b       	sbis	0x0b, 5	; 11
    15da:	fe cf       	rjmp	.-4      	; 0x15d8 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    15dc:	91 91       	ld	r25, Z+
    15de:	91 11       	cpse	r25, r1
    15e0:	f8 cf       	rjmp	.-16     	; 0x15d2 <uart_puts+0xa>
    15e2:	08 95       	ret

000015e4 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    15e4:	9c 01       	movw	r18, r24
    15e6:	fc 01       	movw	r30, r24
    15e8:	44 91       	lpm	r20, Z
    15ea:	44 23       	and	r20, r20
    15ec:	69 f0       	breq	.+26     	; 0x1608 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	f9 01       	movw	r30, r18
    15f2:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15f4:	5d 9b       	sbis	0x0b, 5	; 11
    15f6:	fe cf       	rjmp	.-4      	; 0x15f4 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    15f8:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    15fa:	5d 9b       	sbis	0x0b, 5	; 11
    15fc:	fe cf       	rjmp	.-4      	; 0x15fa <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    15fe:	9c 01       	movw	r18, r24
    1600:	fc 01       	movw	r30, r24
    1602:	44 91       	lpm	r20, Z
    1604:	41 11       	cpse	r20, r1
    1606:	f3 cf       	rjmp	.-26     	; 0x15ee <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1608:	08 95       	ret

0000160a <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
    160a:	8a b1       	in	r24, 0x0a	; 10
    160c:	88 61       	ori	r24, 0x18	; 24
    160e:	8a b9       	out	0x0a, r24	; 10

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1610:	e5 e9       	ldi	r30, 0x95	; 149
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	86 60       	ori	r24, 0x06	; 6
    1618:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    161a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    161e:	87 e6       	ldi	r24, 0x67	; 103
    1620:	89 b9       	out	0x09, r24	; 9
    1622:	08 95       	ret

00001624 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	9e e3       	ldi	r25, 0x3E	; 62
    1628:	02 c0       	rjmp	.+4      	; 0x162e <uart_getc+0xa>
    162a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    162c:	21 f0       	breq	.+8      	; 0x1636 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    162e:	5f 9b       	sbis	0x0b, 7	; 11
    1630:	fc cf       	rjmp	.-8      	; 0x162a <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1632:	8c b1       	in	r24, 0x0c	; 12
    1634:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1636:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1638:	08 95       	ret

0000163a <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    163a:	80 ef       	ldi	r24, 0xF0	; 240
    163c:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    163e:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    1640:	85 b3       	in	r24, 0x15	; 21
    1642:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    1644:	86 e2       	ldi	r24, 0x26	; 38
    1646:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    164a:	8b e1       	ldi	r24, 0x1B	; 27
    164c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    1650:	81 e1       	ldi	r24, 0x11	; 17
    1652:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1656:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
    165a:	8d 30       	cpi	r24, 0x0D	; 13
    165c:	18 f0       	brcs	.+6      	; 0x1664 <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    1664:	0e 94 c9 00 	call	0x192	; 0x192 <initialization>

//initialize I2C
init_twi(); //called from twi_master.c
    1668:	0e 94 b6 0a 	call	0x156c	; 0x156c <init_twi>
uart_init();
    166c:	0e 94 05 0b 	call	0x160a	; 0x160a <uart_init>
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	80 e9       	ldi	r24, 0x90	; 144
    1678:	0e 94 94 0a 	call	0x1528	; 0x1528 <twi_start_wr>
	asm volatile("nop");	
    167c:	00 00       	nop
init_twi(); //called from twi_master.c
uart_init();
init_lm73_sensor();

//enable global interrupts
sei();
    167e:	78 94       	sei

//initially set output compare register for TC2 to 0 (brightness control)
OCR2 = 0;
    1680:	13 bc       	out	0x23, r1	; 35
//initially set output compare register for TC3 to 200 (volume control)
OCR3A = 100;
    1682:	84 e6       	ldi	r24, 0x64	; 100
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    168a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

//initialize LCD
lcd_init();
    168e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <lcd_init>
set_LCD();
    1692:	0e 94 a4 04 	call	0x948	; 0x948 <set_LCD>
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    1696:	13 e4       	ldi	r17, 0x43	; 67
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    1698:	06 e4       	ldi	r16, 0x46	; 70
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    169a:	cf ef       	ldi	r28, 0xFF	; 255
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    169c:	90 e2       	ldi	r25, 0x20	; 32
    169e:	d9 2e       	mov	r13, r25
    16a0:	20 e4       	ldi	r18, 0x40	; 64
    16a2:	e2 2e       	mov	r14, r18
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    16a4:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    16a6:	36 9a       	sbi	0x06, 6	; 6

	
	if(temp_read_flag == 0x01){
    16a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_read_flag>
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <main+0x78>
    16b0:	71 c0       	rjmp	.+226    	; 0x1794 <main+0x15a>
		else
			temp_string[5] = 'C';		
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    16b2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <main+0x82>
    16ba:	97 c0       	rjmp	.+302    	; 0x17ea <main+0x1b0>
		uart_send_flag = 0x00;
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    16bc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <input_flag>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <main+0x8c>
    16c4:	a3 c0       	rjmp	.+326    	; 0x180c <main+0x1d2>
	  	button_encoder_read();		//if so, read the encoders/buttons
	  	input_flag = FALSE;
  	}
	
	//update the clock counters
	clock_count();
    16c6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    16ca:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <lcd_flag>
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <main+0x9a>
    16d2:	a7 c0       	rjmp	.+334    	; 0x1822 <main+0x1e8>
		set_LCD();
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    16d4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adjust_alarm>
    16d8:	81 11       	cpse	r24, r1
    16da:	ac c0       	rjmp	.+344    	; 0x1834 <main+0x1fa>
		temp_min = min_count;
    16dc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <min_count>
    16e0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp_min>
		temp_hour = hour_count;
    16e4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
    16e8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
    16ec:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <min_count>
    16f0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour_count>
    16f4:	0e 94 23 01 	call	0x246	; 0x246 <segsum>
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    16f8:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    16fa:	00 00       	nop
    16fc:	ac e8       	ldi	r26, 0x8C	; 140
    16fe:	b1 e0       	ldi	r27, 0x01	; 1
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1708:	ed 91       	ld	r30, X+
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	e1 31       	cpi	r30, 0x11	; 17
    1710:	10 f5       	brcc	.+68     	; 0x1756 <main+0x11c>
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	ec 5f       	subi	r30, 0xFC	; 252
    1716:	fe 4f       	sbci	r31, 0xFE	; 254
    1718:	40 81       	ld	r20, Z
		if(i_seg == 0 && alarm_is_set == 0x01)
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	f9 f0       	breq	.+62     	; 0x175c <main+0x122>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	91 05       	cpc	r25, r1
    1722:	11 f1       	breq	.+68     	; 0x1768 <main+0x12e>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <main+0xf2>
    172a:	91 c0       	rjmp	.+290    	; 0x184e <main+0x214>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    172c:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    172e:	58 2f       	mov	r21, r24
    1730:	52 95       	swap	r21
    1732:	50 7f       	andi	r21, 0xF0	; 240
    1734:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1736:	4b bb       	out	0x1b, r20	; 27
    1738:	ef e3       	ldi	r30, 0x3F	; 63
    173a:	f1 e0       	ldi	r31, 0x01	; 1
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <main+0x102>
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <main+0x108>
    1742:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    1744:	25 30       	cpi	r18, 0x05	; 5
    1746:	31 05       	cpc	r19, r1
    1748:	e9 f0       	breq	.+58     	; 0x1784 <main+0x14a>
    174a:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    174c:	ed 91       	ld	r30, X+
    174e:	2f 5f       	subi	r18, 0xFF	; 255
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	e1 31       	cpi	r30, 0x11	; 17
    1754:	f0 f2       	brcs	.-68     	; 0x1712 <main+0xd8>
    1756:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 0 && alarm_is_set == 0x01)
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	09 f7       	brne	.-62     	; 0x171e <main+0xe4>
    175c:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <alarm_is_set>
    1760:	51 30       	cpi	r21, 0x01	; 1
    1762:	21 f7       	brne	.-56     	; 0x172c <main+0xf2>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
    1764:	4f 77       	andi	r20, 0x7F	; 127
    1766:	e2 cf       	rjmp	.-60     	; 0x172c <main+0xf2>
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1768:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <pm_flag>
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	09 f4       	brne	.+2      	; 0x1772 <main+0x138>
    1770:	7f c0       	rjmp	.+254    	; 0x1870 <main+0x236>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1772:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1774:	e8 ba       	out	0x18, r14	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1776:	4b bb       	out	0x1b, r20	; 27
    1778:	8f e3       	ldi	r24, 0x3F	; 63
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <main+0x142>
    1780:	00 c0       	rjmp	.+0      	; 0x1782 <main+0x148>
    1782:	00 00       	nop
		//asm volatile ("nop");
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    1784:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1786:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1788:	36 9a       	sbi	0x06, 6	; 6

	
	if(temp_read_flag == 0x01){
    178a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_read_flag>
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	09 f0       	breq	.+2      	; 0x1794 <main+0x15a>
    1792:	8f cf       	rjmp	.-226    	; 0x16b2 <main+0x78>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    1794:	f0 90 00 01 	lds	r15, 0x0100	; 0x800100 <__data_start>

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
    1798:	42 e0       	ldi	r20, 0x02	; 2
    179a:	6a e8       	ldi	r22, 0x8A	; 138
    179c:	71 e0       	ldi	r23, 0x01	; 1
    179e:	80 e9       	ldi	r24, 0x90	; 144
    17a0:	0e 94 a5 0a 	call	0x154a	; 0x154a <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
    17a4:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <read_i2c_buffer>
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	76 2f       	mov	r23, r22
    17ac:	66 27       	eor	r22, r22
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion

	
	if(temp_read_flag == 0x01){
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    17ae:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <read_i2c_buffer+0x1>
    17b2:	68 2b       	or	r22, r24
    17b4:	4f 2d       	mov	r20, r15
    17b6:	87 e8       	ldi	r24, 0x87	; 135
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 bf 0a 	call	0x157e	; 0x157e <lm73_temp_convert>
		temp_string[3] = temp_digits[0];
    17be:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <temp_string>
    17c2:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <temp_string+0x1>
    17c6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <temp_digits>
    17ca:	83 83       	std	Z+3, r24	; 0x03
		temp_string[4] = temp_digits[1];
    17cc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <temp_digits+0x1>
    17d0:	84 83       	std	Z+4, r24	; 0x04
		temp_read_flag = 0x00;
    17d2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_read_flag>
		if(f_not_c == 0x01)
    17d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	b1 f1       	breq	.+108    	; 0x184a <main+0x210>
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    17de:	15 83       	std	Z+5, r17	; 0x05
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    17e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <main+0x1b0>
    17e8:	69 cf       	rjmp	.-302    	; 0x16bc <main+0x82>
		uart_send_read();
    17ea:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <uart_send_read>
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
    17ee:	0e 94 11 07 	call	0xe22	; 0xe22 <line2_col1>
	string2lcd(temp_string);
    17f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp_string>
    17f6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <temp_string+0x1>
    17fa:	0e 94 61 07 	call	0xec2	; 0xec2 <string2lcd>
	}
	
	if(uart_send_flag == 0x01){
		uart_send_read();
		set_LCD_temp();
		uart_send_flag = 0x00;
    17fe:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1802:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <input_flag>
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	09 f0       	breq	.+2      	; 0x180c <main+0x1d2>
    180a:	5d cf       	rjmp	.-326    	; 0x16c6 <main+0x8c>
	  	button_encoder_read();		//if so, read the encoders/buttons
    180c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <button_encoder_read>
	  	input_flag = FALSE;
    1810:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <input_flag>
  	}
	
	//update the clock counters
	clock_count();
    1814:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1818:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <lcd_flag>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	09 f0       	breq	.+2      	; 0x1822 <main+0x1e8>
    1820:	59 cf       	rjmp	.-334    	; 0x16d4 <main+0x9a>
		lcd_flag = 0;
    1822:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <lcd_flag>
		set_LCD();
    1826:	0e 94 a4 04 	call	0x948	; 0x948 <set_LCD>
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    182a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adjust_alarm>
    182e:	88 23       	and	r24, r24
    1830:	09 f4       	brne	.+2      	; 0x1834 <main+0x1fa>
    1832:	54 cf       	rjmp	.-344    	; 0x16dc <main+0xa2>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    1834:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <alarm_time_min>
    1838:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <temp_min>
		temp_hour = alarm_time_hour;
    183c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <alarm_time_hour>
    1840:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_hour>
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
    1844:	0e 94 23 01 	call	0x246	; 0x246 <segsum>
    1848:	57 cf       	rjmp	.-338    	; 0x16f8 <main+0xbe>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    184a:	05 83       	std	Z+5, r16	; 0x05
    184c:	32 cf       	rjmp	.-412    	; 0x16b2 <main+0x78>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    184e:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <trigger_alarm>
    1852:	51 30       	cpi	r21, 0x01	; 1
    1854:	59 f0       	breq	.+22     	; 0x186c <main+0x232>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1856:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1858:	d8 ba       	out	0x18, r13	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    185a:	4b bb       	out	0x1b, r20	; 27
    185c:	ef e3       	ldi	r30, 0x3F	; 63
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	31 97       	sbiw	r30, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <main+0x226>
    1864:	00 c0       	rjmp	.+0      	; 0x1866 <main+0x22c>
    1866:	00 00       	nop
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	70 cf       	rjmp	.-288    	; 0x174c <main+0x112>
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
    186c:	4b 7f       	andi	r20, 0xFB	; 251
    186e:	f3 cf       	rjmp	.-26     	; 0x1856 <main+0x21c>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1870:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <hour24_flag>
    1874:	81 11       	cpse	r24, r1
    1876:	7d cf       	rjmp	.-262    	; 0x1772 <main+0x138>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
    1878:	4f 77       	andi	r20, 0x7F	; 127
    187a:	7b cf       	rjmp	.-266    	; 0x1772 <main+0x138>

0000187c <__divmodhi4>:
    187c:	97 fb       	bst	r25, 7
    187e:	07 2e       	mov	r0, r23
    1880:	16 f4       	brtc	.+4      	; 0x1886 <__divmodhi4+0xa>
    1882:	00 94       	com	r0
    1884:	07 d0       	rcall	.+14     	; 0x1894 <__divmodhi4_neg1>
    1886:	77 fd       	sbrc	r23, 7
    1888:	09 d0       	rcall	.+18     	; 0x189c <__divmodhi4_neg2>
    188a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__udivmodhi4>
    188e:	07 fc       	sbrc	r0, 7
    1890:	05 d0       	rcall	.+10     	; 0x189c <__divmodhi4_neg2>
    1892:	3e f4       	brtc	.+14     	; 0x18a2 <__divmodhi4_exit>

00001894 <__divmodhi4_neg1>:
    1894:	90 95       	com	r25
    1896:	81 95       	neg	r24
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	08 95       	ret

0000189c <__divmodhi4_neg2>:
    189c:	70 95       	com	r23
    189e:	61 95       	neg	r22
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255

000018a2 <__divmodhi4_exit>:
    18a2:	08 95       	ret

000018a4 <__divmodsi4>:
    18a4:	05 2e       	mov	r0, r21
    18a6:	97 fb       	bst	r25, 7
    18a8:	1e f4       	brtc	.+6      	; 0x18b0 <__divmodsi4+0xc>
    18aa:	00 94       	com	r0
    18ac:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__negsi2>
    18b0:	57 fd       	sbrc	r21, 7
    18b2:	07 d0       	rcall	.+14     	; 0x18c2 <__divmodsi4_neg2>
    18b4:	0e 94 9d 0c 	call	0x193a	; 0x193a <__udivmodsi4>
    18b8:	07 fc       	sbrc	r0, 7
    18ba:	03 d0       	rcall	.+6      	; 0x18c2 <__divmodsi4_neg2>
    18bc:	4e f4       	brtc	.+18     	; 0x18d0 <__divmodsi4_exit>
    18be:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__negsi2>

000018c2 <__divmodsi4_neg2>:
    18c2:	50 95       	com	r21
    18c4:	40 95       	com	r20
    18c6:	30 95       	com	r19
    18c8:	21 95       	neg	r18
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	4f 4f       	sbci	r20, 0xFF	; 255
    18ce:	5f 4f       	sbci	r21, 0xFF	; 255

000018d0 <__divmodsi4_exit>:
    18d0:	08 95       	ret

000018d2 <__negsi2>:
    18d2:	90 95       	com	r25
    18d4:	80 95       	com	r24
    18d6:	70 95       	com	r23
    18d8:	61 95       	neg	r22
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	8f 4f       	sbci	r24, 0xFF	; 255
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	08 95       	ret

000018e2 <__tablejump2__>:
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	00 24       	eor	r0, r0
    18e8:	00 1c       	adc	r0, r0
    18ea:	0b be       	out	0x3b, r0	; 59
    18ec:	07 90       	elpm	r0, Z+
    18ee:	f6 91       	elpm	r31, Z
    18f0:	e0 2d       	mov	r30, r0
    18f2:	09 94       	ijmp

000018f4 <__umulhisi3>:
    18f4:	a2 9f       	mul	r26, r18
    18f6:	b0 01       	movw	r22, r0
    18f8:	b3 9f       	mul	r27, r19
    18fa:	c0 01       	movw	r24, r0
    18fc:	a3 9f       	mul	r26, r19
    18fe:	70 0d       	add	r23, r0
    1900:	81 1d       	adc	r24, r1
    1902:	11 24       	eor	r1, r1
    1904:	91 1d       	adc	r25, r1
    1906:	b2 9f       	mul	r27, r18
    1908:	70 0d       	add	r23, r0
    190a:	81 1d       	adc	r24, r1
    190c:	11 24       	eor	r1, r1
    190e:	91 1d       	adc	r25, r1
    1910:	08 95       	ret

00001912 <__udivmodhi4>:
    1912:	aa 1b       	sub	r26, r26
    1914:	bb 1b       	sub	r27, r27
    1916:	51 e1       	ldi	r21, 0x11	; 17
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <__udivmodhi4_ep>

0000191a <__udivmodhi4_loop>:
    191a:	aa 1f       	adc	r26, r26
    191c:	bb 1f       	adc	r27, r27
    191e:	a6 17       	cp	r26, r22
    1920:	b7 07       	cpc	r27, r23
    1922:	10 f0       	brcs	.+4      	; 0x1928 <__udivmodhi4_ep>
    1924:	a6 1b       	sub	r26, r22
    1926:	b7 0b       	sbc	r27, r23

00001928 <__udivmodhi4_ep>:
    1928:	88 1f       	adc	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	5a 95       	dec	r21
    192e:	a9 f7       	brne	.-22     	; 0x191a <__udivmodhi4_loop>
    1930:	80 95       	com	r24
    1932:	90 95       	com	r25
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	08 95       	ret

0000193a <__udivmodsi4>:
    193a:	a1 e2       	ldi	r26, 0x21	; 33
    193c:	1a 2e       	mov	r1, r26
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	fd 01       	movw	r30, r26
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <__udivmodsi4_ep>

00001946 <__udivmodsi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	ee 1f       	adc	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	a2 17       	cp	r26, r18
    1950:	b3 07       	cpc	r27, r19
    1952:	e4 07       	cpc	r30, r20
    1954:	f5 07       	cpc	r31, r21
    1956:	20 f0       	brcs	.+8      	; 0x1960 <__udivmodsi4_ep>
    1958:	a2 1b       	sub	r26, r18
    195a:	b3 0b       	sbc	r27, r19
    195c:	e4 0b       	sbc	r30, r20
    195e:	f5 0b       	sbc	r31, r21

00001960 <__udivmodsi4_ep>:
    1960:	66 1f       	adc	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	1a 94       	dec	r1
    196a:	69 f7       	brne	.-38     	; 0x1946 <__udivmodsi4_loop>
    196c:	60 95       	com	r22
    196e:	70 95       	com	r23
    1970:	80 95       	com	r24
    1972:	90 95       	com	r25
    1974:	9b 01       	movw	r18, r22
    1976:	ac 01       	movw	r20, r24
    1978:	bd 01       	movw	r22, r26
    197a:	cf 01       	movw	r24, r30
    197c:	08 95       	ret

0000197e <__itoa_ncheck>:
    197e:	bb 27       	eor	r27, r27
    1980:	4a 30       	cpi	r20, 0x0A	; 10
    1982:	31 f4       	brne	.+12     	; 0x1990 <__itoa_ncheck+0x12>
    1984:	99 23       	and	r25, r25
    1986:	22 f4       	brpl	.+8      	; 0x1990 <__itoa_ncheck+0x12>
    1988:	bd e2       	ldi	r27, 0x2D	; 45
    198a:	90 95       	com	r25
    198c:	81 95       	neg	r24
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__utoa_common>

00001994 <__utoa_ncheck>:
    1994:	bb 27       	eor	r27, r27

00001996 <__utoa_common>:
    1996:	fb 01       	movw	r30, r22
    1998:	55 27       	eor	r21, r21
    199a:	aa 27       	eor	r26, r26
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	aa 1f       	adc	r26, r26
    19a2:	a4 17       	cp	r26, r20
    19a4:	10 f0       	brcs	.+4      	; 0x19aa <__utoa_common+0x14>
    19a6:	a4 1b       	sub	r26, r20
    19a8:	83 95       	inc	r24
    19aa:	50 51       	subi	r21, 0x10	; 16
    19ac:	b9 f7       	brne	.-18     	; 0x199c <__utoa_common+0x6>
    19ae:	a0 5d       	subi	r26, 0xD0	; 208
    19b0:	aa 33       	cpi	r26, 0x3A	; 58
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <__utoa_common+0x20>
    19b4:	a9 5d       	subi	r26, 0xD9	; 217
    19b6:	a1 93       	st	Z+, r26
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	79 f7       	brne	.-34     	; 0x199a <__utoa_common+0x4>
    19bc:	b1 11       	cpse	r27, r1
    19be:	b1 93       	st	Z+, r27
    19c0:	11 92       	st	Z+, r1
    19c2:	cb 01       	movw	r24, r22
    19c4:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <strrev>

000019c8 <strrev>:
    19c8:	dc 01       	movw	r26, r24
    19ca:	fc 01       	movw	r30, r24
    19cc:	67 2f       	mov	r22, r23
    19ce:	71 91       	ld	r23, Z+
    19d0:	77 23       	and	r23, r23
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <strrev+0x4>
    19d4:	32 97       	sbiw	r30, 0x02	; 2
    19d6:	04 c0       	rjmp	.+8      	; 0x19e0 <strrev+0x18>
    19d8:	7c 91       	ld	r23, X
    19da:	6d 93       	st	X+, r22
    19dc:	70 83       	st	Z, r23
    19de:	62 91       	ld	r22, -Z
    19e0:	ae 17       	cp	r26, r30
    19e2:	bf 07       	cpc	r27, r31
    19e4:	c8 f3       	brcs	.-14     	; 0x19d8 <strrev+0x10>
    19e6:	08 95       	ret

000019e8 <_exit>:
    19e8:	f8 94       	cli

000019ea <__stop_program>:
    19ea:	ff cf       	rjmp	.-2      	; 0x19ea <__stop_program>
