
lab5_168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000053c  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800104  00800104  000005d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f43  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa6  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  000020b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a7  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002ffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	09 01       	movw	r0, r18
  6a:	e2 00       	.word	0x00e2	; ????
  6c:	e2 00       	.word	0x00e2	; ????
  6e:	e2 00       	.word	0x00e2	; ????
  70:	e2 00       	.word	0x00e2	; ????
  72:	e2 00       	.word	0x00e2	; ????
  74:	e2 00       	.word	0x00e2	; ????
  76:	e2 00       	.word	0x00e2	; ????
  78:	09 01       	movw	r0, r18
  7a:	e2 00       	.word	0x00e2	; ????
  7c:	e2 00       	.word	0x00e2	; ????
  7e:	e2 00       	.word	0x00e2	; ????
  80:	e2 00       	.word	0x00e2	; ????
  82:	e2 00       	.word	0x00e2	; ????
  84:	e2 00       	.word	0x00e2	; ????
  86:	e2 00       	.word	0x00e2	; ????
  88:	13 01       	movw	r2, r6
  8a:	e2 00       	.word	0x00e2	; ????
  8c:	e2 00       	.word	0x00e2	; ????
  8e:	e2 00       	.word	0x00e2	; ????
  90:	e2 00       	.word	0x00e2	; ????
  92:	e2 00       	.word	0x00e2	; ????
  94:	e2 00       	.word	0x00e2	; ????
  96:	e2 00       	.word	0x00e2	; ????
  98:	e2 00       	.word	0x00e2	; ????
  9a:	e2 00       	.word	0x00e2	; ????
  9c:	e2 00       	.word	0x00e2	; ????
  9e:	e2 00       	.word	0x00e2	; ????
  a0:	e2 00       	.word	0x00e2	; ????
  a2:	e2 00       	.word	0x00e2	; ????
  a4:	e2 00       	.word	0x00e2	; ????
  a6:	e2 00       	.word	0x00e2	; ????
  a8:	13 01       	movw	r2, r6
  aa:	e2 00       	.word	0x00e2	; ????
  ac:	e2 00       	.word	0x00e2	; ????
  ae:	e2 00       	.word	0x00e2	; ????
  b0:	e2 00       	.word	0x00e2	; ????
  b2:	e2 00       	.word	0x00e2	; ????
  b4:	e2 00       	.word	0x00e2	; ????
  b6:	e2 00       	.word	0x00e2	; ????
  b8:	e2 00       	.word	0x00e2	; ????
  ba:	e2 00       	.word	0x00e2	; ????
  bc:	e2 00       	.word	0x00e2	; ????
  be:	e2 00       	.word	0x00e2	; ????
  c0:	e2 00       	.word	0x00e2	; ????
  c2:	e2 00       	.word	0x00e2	; ????
  c4:	e2 00       	.word	0x00e2	; ????
  c6:	e2 00       	.word	0x00e2	; ????
  c8:	2a 01       	movw	r4, r20
  ca:	e2 00       	.word	0x00e2	; ????
  cc:	e2 00       	.word	0x00e2	; ????
  ce:	e2 00       	.word	0x00e2	; ????
  d0:	e2 00       	.word	0x00e2	; ????
  d2:	e2 00       	.word	0x00e2	; ????
  d4:	e2 00       	.word	0x00e2	; ????
  d6:	e2 00       	.word	0x00e2	; ????
  d8:	2e 01       	movw	r4, r28
  da:	e2 00       	.word	0x00e2	; ????
  dc:	e2 00       	.word	0x00e2	; ????
  de:	e2 00       	.word	0x00e2	; ????
  e0:	e2 00       	.word	0x00e2	; ????
  e2:	e2 00       	.word	0x00e2	; ????
  e4:	e2 00       	.word	0x00e2	; ????
  e6:	e2 00       	.word	0x00e2	; ????
  e8:	e2 00       	.word	0x00e2	; ????
  ea:	e2 00       	.word	0x00e2	; ????
  ec:	e2 00       	.word	0x00e2	; ????
  ee:	e2 00       	.word	0x00e2	; ????
  f0:	e2 00       	.word	0x00e2	; ????
  f2:	e2 00       	.word	0x00e2	; ????
  f4:	e2 00       	.word	0x00e2	; ????
  f6:	e2 00       	.word	0x00e2	; ????
  f8:	3c 01       	movw	r6, r24
  fa:	e2 00       	.word	0x00e2	; ????
  fc:	e2 00       	.word	0x00e2	; ????
  fe:	e2 00       	.word	0x00e2	; ????
 100:	e2 00       	.word	0x00e2	; ????
 102:	e2 00       	.word	0x00e2	; ????
 104:	e2 00       	.word	0x00e2	; ????
 106:	e2 00       	.word	0x00e2	; ????
 108:	fa 00       	.word	0x00fa	; ????

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d4 e0       	ldi	r29, 0x04	; 4
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	ec e3       	ldi	r30, 0x3C	; 60
 11e:	f5 e0       	ldi	r31, 0x05	; 5
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a4 30       	cpi	r26, 0x04	; 4
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a4 e0       	ldi	r26, 0x04	; 4
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a3 36       	cpi	r26, 0x63	; 99
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
 140:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <init_lm73_sensor>:
uint8_t f_not_c = 0x01;


void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, write_i2c_buffer[0], 1);		//called from twi_master.c
 148:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <write_i2c_buffer>
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <twi_start_wr>
	asm volatile("nop");	
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <read_lm73_sensor>:

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
 15a:	42 e0       	ldi	r20, 0x02	; 2
 15c:	68 e0       	ldi	r22, 0x08	; 8
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
 166:	e8 e0       	ldi	r30, 0x08	; 8
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	98 2f       	mov	r25, r24
 170:	88 27       	eor	r24, r24
	temp_reading |= read_i2c_buffer[1];

	//returns temp_reading
	return temp_reading;
 172:	21 81       	ldd	r18, Z+1	; 0x01

}//temp_reading
 174:	82 2b       	or	r24, r18
 176:	08 95       	ret

00000178 <USART0_RX_vect>:

ISR(USART0_RX_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
	temp[0] = UDR0;
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 188:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp>
}
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1b2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b6:	8e 2f       	mov	r24, r30
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	38 97       	sbiw	r30, 0x08	; 8
 1be:	e1 35       	cpi	r30, 0x51	; 81
 1c0:	f1 05       	cpc	r31, r1
 1c2:	a0 f0       	brcs	.+40     	; 0x1ec <__vector_24+0x54>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 1c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  }//switch
}//TWI_isr
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1ec:	ec 5c       	subi	r30, 0xCC	; 204
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 1f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f8:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <twi_buf>
 1fc:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <twi_buf+0x1>
 200:	e8 0f       	add	r30, r24
 202:	f1 1d       	adc	r31, r1
 204:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 208:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;      
 210:	e0 cf       	rjmp	.-64     	; 0x1d2 <__vector_24+0x3a>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 212:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <twi_bus_addr>
 216:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      twi_buf_ptr = 0;      //initalize buffer pointer 
 21a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
      TWCR = TWCR_SEND;     //send SLA+RW
 21e:	85 e8       	ldi	r24, 0x85	; 133
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 224:	d6 cf       	rjmp	.-84     	; 0x1d2 <__vector_24+0x3a>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 226:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 22a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <twi_msg_size>
 22e:	89 17       	cp	r24, r25
 230:	60 f7       	brcc	.-40     	; 0x20a <__vector_24+0x72>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 232:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <twi_buf>
 236:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <twi_buf+0x1>
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	98 0f       	add	r25, r24
 23e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__data_end>
 242:	e8 0f       	add	r30, r24
 244:	f1 1d       	adc	r31, r1
 246:	80 81       	ld	r24, Z
 248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_SEND;               //send next byte 
 24c:	85 e8       	ldi	r24, 0x85	; 133
 24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 252:	bf cf       	rjmp	.-130    	; 0x1d2 <__vector_24+0x3a>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 254:	85 ea       	ldi	r24, 0xA5	; 165
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 25a:	bb cf       	rjmp	.-138    	; 0x1d2 <__vector_24+0x3a>
 25c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 260:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <twi_msg_size>
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	28 17       	cp	r18, r24
 26c:	39 07       	cpc	r19, r25
 26e:	dc f4       	brge	.+54     	; 0x2a6 <__vector_24+0x10e>
 270:	85 ec       	ldi	r24, 0xC5	; 197
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 276:	ad cf       	rjmp	.-166    	; 0x1d2 <__vector_24+0x3a>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 278:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <twi_buf>
 27c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <twi_buf+0x1>
 280:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	28 0f       	add	r18, r24
 288:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 28c:	e8 0f       	add	r30, r24
 28e:	f1 1d       	adc	r31, r1
 290:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 294:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 296:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <twi_msg_size>
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	28 17       	cp	r18, r24
 2a2:	39 07       	cpc	r19, r25
 2a4:	2c f3       	brlt	.-54     	; 0x270 <__vector_24+0xd8>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 2a6:	85 e8       	ldi	r24, 0x85	; 133
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ac:	92 cf       	rjmp	.-220    	; 0x1d2 <__vector_24+0x3a>

000002ae <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
 2b2:	81 70       	andi	r24, 0x01	; 1
 2b4:	08 95       	ret

000002b6 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2b6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 2ba:	90 fd       	sbrc	r25, 0
 2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
 2c4:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <twi_buf+0x1>
 2c8:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
 2cc:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
 2d0:	85 ea       	ldi	r24, 0xA5	; 165
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2d6:	08 95       	ret

000002d8 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2d8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 2dc:	90 fd       	sbrc	r25, 0
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
 2e6:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <twi_buf+0x1>
 2ea:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
 2ee:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
 2f2:	85 ea       	ldi	r24, 0xA5	; 165
 2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2f8:	08 95       	ret

000002fa <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWSR = 0x00;     //prescaler value = 1
 300:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = TWI_TWBR; //defined in twi_master.h 
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 30a:	08 95       	ret

0000030c <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
 30c:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
 30e:	cb 01       	movw	r24, r22
 310:	88 0f       	add	r24, r24
 312:	89 2f       	mov	r24, r25
 314:	88 1f       	adc	r24, r24
 316:	99 0b       	sbc	r25, r25
 318:	91 95       	neg	r25

	if(f_not_c == 0x01){
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	91 f4       	brne	.+36     	; 0x342 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
 31e:	9c 01       	movw	r18, r24
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	28 0f       	add	r18, r24
 32e:	39 1f       	adc	r19, r25
 330:	ad ec       	ldi	r26, 0xCD	; 205
 332:	bc ec       	ldi	r27, 0xCC	; 204
 334:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__umulhisi3>
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	bf 01       	movw	r22, r30
 346:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__itoa_ncheck>

0000034a <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 34a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 34e:	95 ff       	sbrs	r25, 5
 350:	fc cf       	rjmp	.-8      	; 0x34a <uart_putc>
    UDR0 = data;    // Send data byte
 352:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 356:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 35a:	85 ff       	sbrs	r24, 5
 35c:	fc cf       	rjmp	.-8      	; 0x356 <uart_putc+0xc>
}
 35e:	08 95       	ret

00000360 <uart_puts>:
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 360:	fc 01       	movw	r30, r24
 362:	20 81       	ld	r18, Z
 364:	22 23       	and	r18, r18
 366:	71 f0       	breq	.+28     	; 0x384 <uart_puts+0x24>
 368:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 36a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 36e:	95 ff       	sbrs	r25, 5
 370:	fc cf       	rjmp	.-8      	; 0x36a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 372:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 376:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 37a:	95 ff       	sbrs	r25, 5
 37c:	fc cf       	rjmp	.-8      	; 0x376 <uart_puts+0x16>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 37e:	21 91       	ld	r18, Z+
 380:	21 11       	cpse	r18, r1
 382:	f3 cf       	rjmp	.-26     	; 0x36a <uart_puts+0xa>
 384:	08 95       	ret

00000386 <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
 386:	9c 01       	movw	r18, r24
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 388:	c9 01       	movw	r24, r18
 38a:	f9 01       	movw	r30, r18
 38c:	44 91       	lpm	r20, Z
 38e:	44 23       	and	r20, r20
 390:	99 f0       	breq	.+38     	; 0x3b8 <uart_puts_p+0x32>
        uart_putc(pgm_read_byte(str++));
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	fc 01       	movw	r30, r24
 398:	84 91       	lpm	r24, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 39a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 39e:	95 ff       	sbrs	r25, 5
 3a0:	fc cf       	rjmp	.-8      	; 0x39a <uart_puts_p+0x14>
    UDR0 = data;    // Send data byte
 3a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 3a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3aa:	95 ff       	sbrs	r25, 5
 3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <uart_puts_p+0x20>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 3ae:	c9 01       	movw	r24, r18
 3b0:	f9 01       	movw	r30, r18
 3b2:	44 91       	lpm	r20, Z
 3b4:	41 11       	cpse	r20, r1
 3b6:	ed cf       	rjmp	.-38     	; 0x392 <uart_puts_p+0xc>
        uart_putc(pgm_read_byte(str++));
    }
}
 3b8:	08 95       	ret

000003ba <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 3ba:	e1 ec       	ldi	r30, 0xC1	; 193
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 69       	ori	r24, 0x98	; 152
 3c2:	80 83       	st	Z, r24
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 3c4:	e2 ec       	ldi	r30, 0xC2	; 194
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	86 60       	ori	r24, 0x06	; 6
 3cc:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 3ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 3d2:	80 e1       	ldi	r24, 0x10	; 16
 3d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3d8:	08 95       	ret

000003da <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	9e e3       	ldi	r25, 0x3E	; 62
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <uart_getc+0xa>
 3e0:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <uart_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 3e4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3e8:	27 ff       	sbrs	r18, 7
 3ea:	fa cf       	rjmp	.-12     	; 0x3e0 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 3ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3f0:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 3f2:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 3f4:	08 95       	ret

000003f6 <main>:


int main()
{
	init_twi();
 3f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_twi>
uint8_t f_not_c = 0x01;


void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, write_i2c_buffer[0], 1);		//called from twi_master.c
 3fa:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <write_i2c_buffer>
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	80 e8       	ldi	r24, 0x80	; 128
 404:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <twi_start_wr>
	asm volatile("nop");	
 408:	00 00       	nop

int main()
{
	init_twi();
	init_lm73_sensor();
	uart_init();
 40a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <uart_init>

	sei();
 40e:	78 94       	sei

	DDRB |= (1 << PB5);
 410:	25 9a       	sbi	0x04, 5	; 4
			read_temp_flag = 0x01;
			PORTB |= (1 << PB5);
			f_not_c = 0;
		}
		else if(temp[0] == 'F'){
			read_temp_flag = 0x01;
 412:	c1 e0       	ldi	r28, 0x01	; 1
 414:	0b c0       	rjmp	.+22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		if(temp[0] == 'C'){
			read_temp_flag = 0x01;
			PORTB |= (1 << PB5);
			f_not_c = 0;
		}
		else if(temp[0] == 'F'){
 416:	86 34       	cpi	r24, 0x46	; 70
 418:	99 f0       	breq	.+38     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			read_temp_flag = 0x01;
			PORTB |= (1 << PB5);
			f_not_c = 0x01;
		}
		
		if(UDR0 == 0)
 41a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 41e:	81 11       	cpse	r24, r1
 420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			PORTB |= (1 << PB5);
 422:	2d 9a       	sbi	0x05, 5	; 5

		if(read_temp_flag == 0x01){
 424:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <read_temp_flag>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	81 f0       	breq	.+32     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>

	while(1)
	{


		if(temp[0] == 'C'){
 42c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp>
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	89 f7       	brne	.-30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			read_temp_flag = 0x01;
 434:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <read_temp_flag>
			PORTB |= (1 << PB5);
 438:	2d 9a       	sbi	0x05, 5	; 5
			f_not_c = 0;
 43a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 43e:	ed cf       	rjmp	.-38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		else if(temp[0] == 'F'){
			read_temp_flag = 0x01;
 440:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <read_temp_flag>
			PORTB |= (1 << PB5);
 444:	2d 9a       	sbi	0x05, 5	; 5
			f_not_c = 0x01;
 446:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 44a:	e7 cf       	rjmp	.-50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
uint8_t f_not_c = 0x01;


void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, write_i2c_buffer[0], 1);		//called from twi_master.c
 44c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <write_i2c_buffer>
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <twi_start_wr>
	asm volatile("nop");	
 45a:	00 00       	nop
		if(UDR0 == 0)
			PORTB |= (1 << PB5);

		if(read_temp_flag == 0x01){
			init_lm73_sensor();
			lm73_temp_convert(uart_buf, read_lm73_sensor(), f_not_c);
 45c:	d0 91 00 01 	lds	r29, 0x0100	; 0x800100 <__data_start>

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
 460:	42 e0       	ldi	r20, 0x02	; 2
 462:	68 e0       	ldi	r22, 0x08	; 8
 464:	71 e0       	ldi	r23, 0x01	; 1
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
 46c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <read_i2c_buffer>
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	76 2f       	mov	r23, r22
 474:	66 27       	eor	r22, r22
		if(UDR0 == 0)
			PORTB |= (1 << PB5);

		if(read_temp_flag == 0x01){
			init_lm73_sensor();
			lm73_temp_convert(uart_buf, read_lm73_sensor(), f_not_c);
 476:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <read_i2c_buffer+0x1>
 47a:	68 2b       	or	r22, r24
 47c:	4d 2f       	mov	r20, r29
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 86 01 	call	0x30c	; 0x30c <lm73_temp_convert>
				UDR0 = 'C';
				while(!(UCSR0A & (1 << UDRE0)));
			}
			//read_temp_flag = 0x00;
			*/
			uart_putc('5');
 486:	85 e3       	ldi	r24, 0x35	; 53
 488:	0e 94 a5 01 	call	0x34a	; 0x34a <uart_putc>
			if(f_not_c == 0x01)
 48c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	21 f0       	breq	.+8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				uart_putc('F');
			else
				uart_putc('C');
 494:	83 e4       	ldi	r24, 0x43	; 67
 496:	0e 94 a5 01 	call	0x34a	; 0x34a <uart_putc>
 49a:	c8 cf       	rjmp	.-112    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}
			//read_temp_flag = 0x00;
			*/
			uart_putc('5');
			if(f_not_c == 0x01)
				uart_putc('F');
 49c:	86 e4       	ldi	r24, 0x46	; 70
 49e:	0e 94 a5 01 	call	0x34a	; 0x34a <uart_putc>
 4a2:	c4 cf       	rjmp	.-120    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

000004a4 <__tablejump2__>:
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	05 90       	lpm	r0, Z+
 4aa:	f4 91       	lpm	r31, Z
 4ac:	e0 2d       	mov	r30, r0
 4ae:	09 94       	ijmp

000004b0 <__umulhisi3>:
 4b0:	a2 9f       	mul	r26, r18
 4b2:	b0 01       	movw	r22, r0
 4b4:	b3 9f       	mul	r27, r19
 4b6:	c0 01       	movw	r24, r0
 4b8:	a3 9f       	mul	r26, r19
 4ba:	70 0d       	add	r23, r0
 4bc:	81 1d       	adc	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	91 1d       	adc	r25, r1
 4c2:	b2 9f       	mul	r27, r18
 4c4:	70 0d       	add	r23, r0
 4c6:	81 1d       	adc	r24, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	91 1d       	adc	r25, r1
 4cc:	08 95       	ret

000004ce <__itoa_ncheck>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	4a 30       	cpi	r20, 0x0A	; 10
 4d2:	31 f4       	brne	.+12     	; 0x4e0 <__itoa_ncheck+0x12>
 4d4:	99 23       	and	r25, r25
 4d6:	22 f4       	brpl	.+8      	; 0x4e0 <__itoa_ncheck+0x12>
 4d8:	bd e2       	ldi	r27, 0x2D	; 45
 4da:	90 95       	com	r25
 4dc:	81 95       	neg	r24
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__utoa_common>

000004e4 <__utoa_ncheck>:
 4e4:	bb 27       	eor	r27, r27

000004e6 <__utoa_common>:
 4e6:	fb 01       	movw	r30, r22
 4e8:	55 27       	eor	r21, r21
 4ea:	aa 27       	eor	r26, r26
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	aa 1f       	adc	r26, r26
 4f2:	a4 17       	cp	r26, r20
 4f4:	10 f0       	brcs	.+4      	; 0x4fa <__utoa_common+0x14>
 4f6:	a4 1b       	sub	r26, r20
 4f8:	83 95       	inc	r24
 4fa:	50 51       	subi	r21, 0x10	; 16
 4fc:	b9 f7       	brne	.-18     	; 0x4ec <__utoa_common+0x6>
 4fe:	a0 5d       	subi	r26, 0xD0	; 208
 500:	aa 33       	cpi	r26, 0x3A	; 58
 502:	08 f0       	brcs	.+2      	; 0x506 <__stack+0x7>
 504:	a9 5d       	subi	r26, 0xD9	; 217
 506:	a1 93       	st	Z+, r26
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	79 f7       	brne	.-34     	; 0x4ea <__utoa_common+0x4>
 50c:	b1 11       	cpse	r27, r1
 50e:	b1 93       	st	Z+, r27
 510:	11 92       	st	Z+, r1
 512:	cb 01       	movw	r24, r22
 514:	0c 94 8c 02 	jmp	0x518	; 0x518 <strrev>

00000518 <strrev>:
 518:	dc 01       	movw	r26, r24
 51a:	fc 01       	movw	r30, r24
 51c:	67 2f       	mov	r22, r23
 51e:	71 91       	ld	r23, Z+
 520:	77 23       	and	r23, r23
 522:	e1 f7       	brne	.-8      	; 0x51c <strrev+0x4>
 524:	32 97       	sbiw	r30, 0x02	; 2
 526:	04 c0       	rjmp	.+8      	; 0x530 <strrev+0x18>
 528:	7c 91       	ld	r23, X
 52a:	6d 93       	st	X+, r22
 52c:	70 83       	st	Z, r23
 52e:	62 91       	ld	r22, -Z
 530:	ae 17       	cp	r26, r30
 532:	bf 07       	cpc	r27, r31
 534:	c8 f3       	brcs	.-14     	; 0x528 <strrev+0x10>
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
