
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000014d4  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800144  00800144  000015ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002292  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce4  00000000  00000000  000038f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b5  00000000  00000000  000045d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  0000578c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000748  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a82  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ed       	ldi	r30, 0xD4	; 212
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3b       	cpi	r26, 0xB0	; 176
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 3c 09 	call	0x1278	; 0x1278 <main>
      c6:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
      ce:	8e e2       	ldi	r24, 0x2E	; 46
      d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
      d4:	8d e2       	ldi	r24, 0x2D	; 45
      d6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
      da:	85 e1       	ldi	r24, 0x15	; 21
      dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
      e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
      e4:	8d 30       	cpi	r24, 0x0D	; 13
      e6:	18 f0       	brcs	.+6      	; 0xee <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <pm_flag>
      ee:	08 95       	ret

000000f0 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
      f0:	87 b3       	in	r24, 0x17	; 23
      f2:	87 60       	ori	r24, 0x07	; 7
      f4:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
      fa:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
      fc:	80 e5       	ldi	r24, 0x50	; 80
      fe:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     104:	80 b7       	in	r24, 0x30	; 48
     106:	88 60       	ori	r24, 0x08	; 8
     108:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     10a:	87 b7       	in	r24, 0x37	; 55
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     110:	83 b7       	in	r24, 0x33	; 51
     112:	81 60       	ori	r24, 0x01	; 1
     114:	83 bf       	out	0x33, r24	; 51

	//enable fast PWM mode for TC2 for the seven segment adjust
	//prescale of 8
	//clear bit during output compare
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (0 << CS20) | (1 << CS21) | (0 << CS22);
     116:	85 b5       	in	r24, 0x25	; 37
     118:	8a 66       	ori	r24, 0x6A	; 106
     11a:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;				//set TCNT1 to obtain approximately 300Hz for beep
     11c:	80 e4       	ldi	r24, 0x40	; 64
     11e:	9c e9       	ldi	r25, 0x9C	; 156
     120:	9d bd       	out	0x2d, r25	; 45
     122:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     124:	87 b7       	in	r24, 0x37	; 55
     126:	84 60       	ori	r24, 0x04	; 4
     128:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     12a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     12c:	8e b5       	in	r24, 0x2e	; 46
     12e:	81 60       	ori	r24, 0x01	; 1
     130:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     132:	eb e8       	ldi	r30, 0x8B	; 139
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	81 68       	ori	r24, 0x81	; 129
     13a:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     13c:	ea e8       	ldi	r30, 0x8A	; 138
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	8a 60       	ori	r24, 0x0A	; 10
     144:	80 83       	st	Z, r24
	
	ADMUX = 0x67; //single-ended, input PORTF bit 7, left adjusted, 10 bits
     146:	87 e6       	ldi	r24, 0x67	; 103
     148:	87 b9       	out	0x07, r24	; 7
	//ADC enabled, start the conversion, single shot mode, interrupts enabled 
	ADCSRA = (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); 
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	86 b9       	out	0x06, r24	; 6
     14e:	08 95       	ret

00000150 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     150:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     152:	e8 2f       	mov	r30, r24
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	99 b3       	in	r25, 0x19	; 25
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	e3 5a       	subi	r30, 0xA3	; 163
     15e:	fe 4f       	sbci	r31, 0xFE	; 254
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	30 6e       	ori	r19, 0xE0	; 224
     16a:	89 2f       	mov	r24, r25
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <chk_buttons+0x24>
     170:	95 95       	asr	r25
     172:	87 95       	ror	r24
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <chk_buttons+0x20>
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	99 27       	eor	r25, r25
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	84 27       	eor	r24, r20
     180:	28 2b       	or	r18, r24
     182:	39 2b       	or	r19, r25
     184:	31 83       	std	Z+1, r19	; 0x01
     186:	20 83       	st	Z, r18
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	21 15       	cp	r18, r1
     18c:	30 4f       	sbci	r19, 0xF0	; 240
     18e:	09 f0       	breq	.+2      	; 0x192 <chk_buttons+0x42>
     190:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     192:	08 95       	ret

00000194 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  
	//parse out the two digits for the minutes
	ones = minute % 10;
     194:	9d ec       	ldi	r25, 0xCD	; 205
     196:	69 9f       	mul	r22, r25
     198:	21 2d       	mov	r18, r1
     19a:	11 24       	eor	r1, r1
     19c:	32 2f       	mov	r19, r18
     19e:	36 95       	lsr	r19
     1a0:	36 95       	lsr	r19
     1a2:	36 95       	lsr	r19
     1a4:	4a e0       	ldi	r20, 0x0A	; 10
     1a6:	34 9f       	mul	r19, r20
     1a8:	60 19       	sub	r22, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	36 2f       	mov	r19, r22
	tens = minute / 10;
     1ae:	26 95       	lsr	r18
     1b0:	26 95       	lsr	r18
     1b2:	26 95       	lsr	r18

	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
     1b4:	89 9f       	mul	r24, r25
     1b6:	91 2d       	mov	r25, r1
     1b8:	11 24       	eor	r1, r1
     1ba:	96 95       	lsr	r25
     1bc:	96 95       	lsr	r25
     1be:	96 95       	lsr	r25
     1c0:	48 2f       	mov	r20, r24
     1c2:	5a e0       	ldi	r21, 0x0A	; 10
     1c4:	95 9f       	mul	r25, r21
     1c6:	40 19       	sub	r20, r0
     1c8:	11 24       	eor	r1, r1
	if(hour > 9)
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	30 f4       	brcc	.+12     	; 0x1da <segsum+0x46>
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour24_flag>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	a9 f0       	breq	.+42     	; 0x202 <segsum+0x6e>
     1d8:	91 95       	neg	r25
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
     1da:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count>
     1de:	80 ff       	sbrs	r24, 0
     1e0:	0c c0       	rjmp	.+24     	; 0x1fa <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     1e8:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <segment_data>
	segment_data[1] = tens;
     1ec:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <segment_data+0x1>
	
	segment_data[3] = hundreds;
     1f0:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <segment_data+0x3>
	segment_data[4] = thousands;
     1f4:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <segment_data+0x4>
     1f8:	08 95       	ret
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <segment_data+0x2>
     200:	f3 cf       	rjmp	.-26     	; 0x1e8 <segsum+0x54>
	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <segsum+0x44>

00000206 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     206:	81 31       	cpi	r24, 0x11	; 17
     208:	30 f4       	brcc	.+12     	; 0x216 <seven_seg_encoding+0x10>
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e0 50       	subi	r30, 0x00	; 0
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 81       	ld	r24, Z
     214:	08 95       	ret
     216:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     218:	08 95       	ret

0000021a <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
     21a:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     21e:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     222:	28 2f       	mov	r18, r24
     224:	23 70       	andi	r18, 0x03	; 3
     226:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     22a:	8c 70       	andi	r24, 0x0C	; 12
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	95 95       	asr	r25
     230:	87 95       	ror	r24
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     23a:	83 30       	cpi	r24, 0x03	; 3
     23c:	09 f4       	brne	.+2      	; 0x240 <encoder_process+0x26>
     23e:	3f c0       	rjmp	.+126    	; 0x2be <encoder_process+0xa4>
     240:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <adjust_flag>
     244:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     248:	23 30       	cpi	r18, 0x03	; 3
     24a:	d9 f0       	breq	.+54     	; 0x282 <encoder_process+0x68>
		}
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	81 f0       	breq	.+32     	; 0x270 <encoder_process+0x56>
		min_count = temp_min;
	}

	//if the alarm adjustment flag is set, set the alarm time
	//to the temporary variables used to increment/decrement
	if(adjust_alarm == 0x01){
     250:	91 30       	cpi	r25, 0x01	; 1
     252:	09 f0       	breq	.+2      	; 0x256 <encoder_process+0x3c>
     254:	08 95       	ret
		alarm_time_min = temp_min;
     256:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     25a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <alarm_time_min>
		alarm_time_hour = temp_hour;
     25e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     262:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <alarm_time_hour>
		temp_pm_flag = pm_flag;			//also save the pm_flag
     266:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <pm_flag>
     26a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     26e:	08 95       	ret
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     270:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     274:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
		min_count = temp_min;
     278:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     27c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
     280:	e7 cf       	rjmp	.-50     	; 0x250 <encoder_process+0x36>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     282:	31 30       	cpi	r19, 0x01	; 1
     284:	09 f4       	brne	.+2      	; 0x288 <encoder_process+0x6e>
     286:	61 c0       	rjmp	.+194    	; 0x34a <encoder_process+0x130>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     288:	32 30       	cpi	r19, 0x02	; 2
     28a:	01 f7       	brne	.-64     	; 0x24c <encoder_process+0x32>
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	09 f4       	brne	.+2      	; 0x292 <encoder_process+0x78>
     290:	b4 c0       	rjmp	.+360    	; 0x3fa <encoder_process+0x1e0>
     292:	91 30       	cpi	r25, 0x01	; 1
     294:	09 f4       	brne	.+2      	; 0x298 <encoder_process+0x7e>
     296:	91 c0       	rjmp	.+290    	; 0x3ba <encoder_process+0x1a0>
			else
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
     298:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     29c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2a0:	2a 30       	cpi	r18, 0x0A	; 10
     2a2:	31 05       	cpc	r19, r1
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <encoder_process+0x8e>
     2a6:	bc c0       	rjmp	.+376    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				OCR3A = 0;
			else
				OCR3A -= 10;			//decrement resolution by 10s to avoid spinning a lot
     2a8:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2ac:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2b0:	2a 50       	subi	r18, 0x0A	; 10
     2b2:	31 09       	sbc	r19, r1
     2b4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2b8:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2bc:	c7 cf       	rjmp	.-114    	; 0x24c <encoder_process+0x32>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     2be:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     2c2:	41 30       	cpi	r20, 0x01	; 1
     2c4:	f9 f0       	breq	.+62     	; 0x304 <encoder_process+0xea>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     2c6:	42 30       	cpi	r20, 0x02	; 2
     2c8:	09 f0       	breq	.+2      	; 0x2cc <encoder_process+0xb2>
     2ca:	bc cf       	rjmp	.-136    	; 0x244 <encoder_process+0x2a>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     2cc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     2d0:	81 11       	cpse	r24, r1
     2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <encoder_process+0xd8>
     2d4:	91 11       	cpse	r25, r1
     2d6:	0d c0       	rjmp	.+26     	; 0x2f2 <encoder_process+0xd8>
     2d8:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <manual_brightness>
     2dc:	41 30       	cpi	r20, 0x01	; 1
     2de:	49 f4       	brne	.+18     	; 0x2f2 <encoder_process+0xd8>
			if((OCR2 - 10) <= 0)
     2e0:	83 b5       	in	r24, 0x23	; 35
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0b 97       	sbiw	r24, 0x0b	; 11
     2e6:	0c f0       	brlt	.+2      	; 0x2ea <encoder_process+0xd0>
     2e8:	aa c0       	rjmp	.+340    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				OCR2 = 0;
     2ea:	13 bc       	out	0x23, r1	; 35
     2ec:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <encoder_left>
     2f0:	a7 cf       	rjmp	.-178    	; 0x240 <encoder_process+0x26>
			else
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
     2f2:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <temp_min>
     2f6:	44 23       	and	r20, r20
     2f8:	09 f4       	brne	.+2      	; 0x2fc <encoder_process+0xe2>
     2fa:	4c c0       	rjmp	.+152    	; 0x394 <encoder_process+0x17a>
				temp_min = 59;			
			}
			else
				temp_min--;				//decrement minute when right encoder turned to left
     2fc:	41 50       	subi	r20, 0x01	; 1
     2fe:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     302:	a2 cf       	rjmp	.-188    	; 0x248 <encoder_process+0x2e>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     304:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     308:	81 11       	cpse	r24, r1
     30a:	15 c0       	rjmp	.+42     	; 0x336 <encoder_process+0x11c>
     30c:	91 11       	cpse	r25, r1
     30e:	13 c0       	rjmp	.+38     	; 0x336 <encoder_process+0x11c>
     310:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <manual_brightness>
     314:	41 30       	cpi	r20, 0x01	; 1
     316:	79 f4       	brne	.+30     	; 0x336 <encoder_process+0x11c>
			if((OCR2 + 10) >= 254)
     318:	83 b5       	in	r24, 0x23	; 35
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	84 3f       	cpi	r24, 0xF4	; 244
     31e:	91 05       	cpc	r25, r1
     320:	0c f4       	brge	.+2      	; 0x324 <encoder_process+0x10a>
     322:	87 c0       	rjmp	.+270    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				OCR2 = 254;
     324:	8e ef       	ldi	r24, 0xFE	; 254
     326:	83 bd       	out	0x23, r24	; 35
     328:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <encoder_left>
     32c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <adjust_flag>
     330:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     334:	89 cf       	rjmp	.-238    	; 0x248 <encoder_process+0x2e>
				OCR2 += 10;

		}
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
     336:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <temp_min>
     33a:	64 2f       	mov	r22, r20
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	6b 33       	cpi	r22, 0x3B	; 59
     340:	71 05       	cpc	r23, r1
     342:	cc f0       	brlt	.+50     	; 0x376 <encoder_process+0x15c>
				temp_min = 0;
     344:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <temp_min>
     348:	7f cf       	rjmp	.-258    	; 0x248 <encoder_process+0x2e>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	09 f4       	brne	.+2      	; 0x350 <encoder_process+0x136>
     34e:	44 c0       	rjmp	.+136    	; 0x3d8 <encoder_process+0x1be>
     350:	91 30       	cpi	r25, 0x01	; 1
     352:	21 f1       	breq	.+72     	; 0x39c <encoder_process+0x182>
				temp_hour++;			//increment hour when left encoder turned right

		}
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
     354:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     358:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     35c:	26 5f       	subi	r18, 0xF6	; 246
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
     360:	2f 3f       	cpi	r18, 0xFF	; 255
     362:	31 05       	cpc	r19, r1
     364:	61 f0       	breq	.+24     	; 0x37e <encoder_process+0x164>
     366:	58 f0       	brcs	.+22     	; 0x37e <encoder_process+0x164>
				OCR3A = 255;
     368:	2f ef       	ldi	r18, 0xFF	; 255
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     370:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     374:	6b cf       	rjmp	.-298    	; 0x24c <encoder_process+0x32>
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
				temp_min = 0;
			else
				temp_min++;				//increment minute when right encoder turned to the right
     376:	4f 5f       	subi	r20, 0xFF	; 255
     378:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     37c:	65 cf       	rjmp	.-310    	; 0x248 <encoder_process+0x2e>
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
				OCR3A = 255;
			else
				OCR3A += 10;			//increment resolution by 10s to avoid spinning a lot
     37e:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     382:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     386:	26 5f       	subi	r18, 0xF6	; 246
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     38e:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     392:	5c cf       	rjmp	.-328    	; 0x24c <encoder_process+0x32>
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
				temp_min = 59;			
     394:	4b e3       	ldi	r20, 0x3B	; 59
     396:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     39a:	56 cf       	rjmp	.-340    	; 0x248 <encoder_process+0x2e>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     39c:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <hour24_flag>
     3a0:	21 11       	cpse	r18, r1
     3a2:	1e c0       	rjmp	.+60     	; 0x3e0 <encoder_process+0x1c6>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
     3a4:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3a8:	42 2f       	mov	r20, r18
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	4c 30       	cpi	r20, 0x0C	; 12
     3ae:	51 05       	cpc	r21, r1
     3b0:	9c f1       	brlt	.+102    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				temp_hour = 1;
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     3b8:	49 cf       	rjmp	.-366    	; 0x24c <encoder_process+0x32>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3ba:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <hour24_flag>
     3be:	21 11       	cpse	r18, r1
     3c0:	20 c0       	rjmp	.+64     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
     3c2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3c6:	42 2f       	mov	r20, r18
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	42 30       	cpi	r20, 0x02	; 2
     3cc:	51 05       	cpc	r21, r1
     3ce:	6c f1       	brlt	.+90     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
				temp_hour = 23;
			else
				temp_hour--;			//decrement hour when left encoder turned left
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     3d6:	3a cf       	rjmp	.-396    	; 0x24c <encoder_process+0x32>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3d8:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <hour24_flag>
     3dc:	22 23       	and	r18, r18
     3de:	11 f3       	breq	.-60     	; 0x3a4 <encoder_process+0x18a>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     3e0:	21 30       	cpi	r18, 0x01	; 1
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <encoder_process+0x1cc>
     3e4:	b7 cf       	rjmp	.-146    	; 0x354 <encoder_process+0x13a>
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
     3e6:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3ea:	42 2f       	mov	r20, r18
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	47 31       	cpi	r20, 0x17	; 23
     3f0:	51 05       	cpc	r21, r1
     3f2:	94 f0       	brlt	.+36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				temp_hour = 0;
     3f4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <temp_hour>
     3f8:	29 cf       	rjmp	.-430    	; 0x24c <encoder_process+0x32>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3fa:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <hour24_flag>
     3fe:	22 23       	and	r18, r18
     400:	01 f3       	breq	.-64     	; 0x3c2 <encoder_process+0x1a8>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     402:	21 30       	cpi	r18, 0x01	; 1
     404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	48 cf       	rjmp	.-368    	; 0x298 <encoder_process+0x7e>
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
     408:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     40c:	21 11       	cpse	r18, r1
     40e:	e0 cf       	rjmp	.-64     	; 0x3d0 <encoder_process+0x1b6>
				temp_hour = 23;
     410:	27 e1       	ldi	r18, 0x17	; 23
     412:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     416:	1a cf       	rjmp	.-460    	; 0x24c <encoder_process+0x32>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
				temp_hour = 0;
			else
				temp_hour++;			//increment hour when left encoder turned right
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     41e:	16 cf       	rjmp	.-468    	; 0x24c <encoder_process+0x32>
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
				OCR3A = 0;
     420:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     424:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     428:	11 cf       	rjmp	.-478    	; 0x24c <encoder_process+0x32>
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 12;
     42a:	2c e0       	ldi	r18, 0x0C	; 12
     42c:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     430:	0d cf       	rjmp	.-486    	; 0x24c <encoder_process+0x32>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 + 10) >= 254)
				OCR2 = 254;
			else	
				OCR2 += 10;
     432:	83 b5       	in	r24, 0x23	; 35
     434:	86 5f       	subi	r24, 0xF6	; 246
     436:	83 bd       	out	0x23, r24	; 35
     438:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <encoder_left>
     43c:	01 cf       	rjmp	.-510    	; 0x240 <encoder_process+0x26>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 - 10) <= 0)
				OCR2 = 0;
			else
				OCR2 -= 10;
     43e:	83 b5       	in	r24, 0x23	; 35
     440:	8a 50       	subi	r24, 0x0A	; 10
     442:	83 bd       	out	0x23, r24	; 35
     444:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <encoder_left>
     448:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <adjust_flag>
     44c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     450:	fb ce       	rjmp	.-522    	; 0x248 <encoder_process+0x2e>

00000452 <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     45e:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     464:	80 e7       	ldi	r24, 0x70	; 112
     466:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	1a e1       	ldi	r17, 0x1A	; 26
     46a:	1a 95       	dec	r17
     46c:	f1 f7       	brne	.-4      	; 0x46a <button_encoder_read+0x18>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <button_encoder_read+0x1e>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     470:	99 b3       	in	r25, 0x19	; 25
     472:	00 91 6b 01 	lds	r16, 0x016B	; 0x80016b <state.1821+0xe>
     476:	10 91 6c 01 	lds	r17, 0x016C	; 0x80016c <state.1821+0xf>
     47a:	00 0f       	add	r16, r16
     47c:	11 1f       	adc	r17, r17
     47e:	10 6e       	ori	r17, 0xE0	; 224
     480:	89 2f       	mov	r24, r25
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	7c 01       	movw	r14, r24
     486:	ee 0c       	add	r14, r14
     488:	ef 2c       	mov	r14, r15
     48a:	ee 1c       	adc	r14, r14
     48c:	ff 08       	sbc	r15, r15
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	e8 26       	eor	r14, r24
     492:	c7 01       	movw	r24, r14
     494:	80 2b       	or	r24, r16
     496:	91 2b       	or	r25, r17
     498:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <state.1821+0xf>
     49c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <state.1821+0xe>
	if(state[button] == 0xF000) return 1;
     4a0:	81 15       	cp	r24, r1
     4a2:	90 4f       	sbci	r25, 0xF0	; 240
     4a4:	31 f4       	brne	.+12     	; 0x4b2 <button_encoder_read+0x60>
	_delay_us(5);

	//poll if button 7 is pressed
	//this toggles if the time adjustment flag is set or not
	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     4a6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <adjust_flag>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	89 27       	eor	r24, r25
     4ae:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4b2:	89 b3       	in	r24, 0x19	; 25
     4b4:	86 fb       	bst	r24, 6
     4b6:	aa 27       	eor	r26, r26
     4b8:	a0 f9       	bld	r26, 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	a8 27       	eor	r26, r24
     4c0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <state.1821+0xc>
     4c4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <state.1821+0xd>
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	90 6e       	ori	r25, 0xE0	; 224
     4ce:	a8 2b       	or	r26, r24
     4d0:	b9 2b       	or	r27, r25
     4d2:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <state.1821+0xd>
     4d6:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <state.1821+0xc>
	if(state[button] == 0xF000) return 1;
     4da:	a1 15       	cp	r26, r1
     4dc:	b0 4f       	sbci	r27, 0xF0	; 240
     4de:	09 f4       	brne	.+2      	; 0x4e2 <button_encoder_read+0x90>
     4e0:	d8 c0       	rjmp	.+432    	; 0x692 <button_encoder_read+0x240>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4e2:	89 b3       	in	r24, 0x19	; 25
     4e4:	85 fb       	bst	r24, 5
     4e6:	ee 27       	eor	r30, r30
     4e8:	e0 f9       	bld	r30, 0
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	e8 27       	eor	r30, r24
     4f0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <state.1821+0xa>
     4f4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <state.1821+0xb>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	90 6e       	ori	r25, 0xE0	; 224
     4fe:	e8 2b       	or	r30, r24
     500:	f9 2b       	or	r31, r25
     502:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <state.1821+0xb>
     506:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <state.1821+0xa>
	if(state[button] == 0xF000) return 1;
     50a:	e1 15       	cp	r30, r1
     50c:	f0 4f       	sbci	r31, 0xF0	; 240
     50e:	09 f4       	brne	.+2      	; 0x512 <button_encoder_read+0xc0>
     510:	b1 c0       	rjmp	.+354    	; 0x674 <button_encoder_read+0x222>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     512:	89 b3       	in	r24, 0x19	; 25
     514:	84 fb       	bst	r24, 4
     516:	66 27       	eor	r22, r22
     518:	60 f9       	bld	r22, 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	68 27       	eor	r22, r24
     520:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <state.1821+0x8>
     524:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <state.1821+0x9>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	90 6e       	ori	r25, 0xE0	; 224
     52e:	68 2b       	or	r22, r24
     530:	79 2b       	or	r23, r25
     532:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <state.1821+0x9>
     536:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <state.1821+0x8>
	if(state[button] == 0xF000) return 1;
     53a:	61 15       	cp	r22, r1
     53c:	70 4f       	sbci	r23, 0xF0	; 240
     53e:	31 f4       	brne	.+12     	; 0x54c <button_encoder_read+0xfa>
		pm_flag ^= 0x01;
	
	//poll if button 4 is pressed
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     540:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	89 27       	eor	r24, r25
     548:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     54c:	89 b3       	in	r24, 0x19	; 25
     54e:	82 fb       	bst	r24, 2
     550:	44 27       	eor	r20, r20
     552:	40 f9       	bld	r20, 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	48 27       	eor	r20, r24
     55a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <state.1821+0x4>
     55e:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <state.1821+0x5>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	90 6e       	ori	r25, 0xE0	; 224
     568:	48 2b       	or	r20, r24
     56a:	59 2b       	or	r21, r25
     56c:	50 93 62 01 	sts	0x0162, r21	; 0x800162 <state.1821+0x5>
     570:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <state.1821+0x4>
	if(state[button] == 0xF000) return 1;
     574:	41 15       	cp	r20, r1
     576:	50 4f       	sbci	r21, 0xF0	; 240
     578:	31 f4       	brne	.+12     	; 0x586 <button_encoder_read+0x134>
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;

	if(chk_buttons(2))
		manual_brightness ^= 0x01;
     57a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <manual_brightness>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	89 27       	eor	r24, r25
     582:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <manual_brightness>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     586:	89 b3       	in	r24, 0x19	; 25
     588:	81 fb       	bst	r24, 1
     58a:	22 27       	eor	r18, r18
     58c:	20 f9       	bld	r18, 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	24 27       	eor	r18, r20
     594:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <state.1821+0x2>
     598:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <state.1821+0x3>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	90 6e       	ori	r25, 0xE0	; 224
     5a2:	28 2b       	or	r18, r24
     5a4:	39 2b       	or	r19, r25
     5a6:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <state.1821+0x3>
     5aa:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <state.1821+0x2>
	if(state[button] == 0xF000) return 1;
     5ae:	21 15       	cp	r18, r1
     5b0:	30 4f       	sbci	r19, 0xF0	; 240
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <button_encoder_read+0x164>
     5b4:	51 c0       	rjmp	.+162    	; 0x658 <button_encoder_read+0x206>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     5b6:	29 b3       	in	r18, 0x19	; 25
     5b8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <state.1821>
     5bc:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <state.1821+0x1>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	90 6e       	ori	r25, 0xE0	; 224
     5c6:	20 95       	com	r18
     5c8:	21 70       	andi	r18, 0x01	; 1
     5ca:	c2 2f       	mov	r28, r18
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	d1 2f       	mov	r29, r17
     5d0:	c8 2b       	or	r28, r24
     5d2:	d9 2b       	or	r29, r25
     5d4:	d0 93 5e 01 	sts	0x015E, r29	; 0x80015e <state.1821+0x1>
     5d8:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <state.1821>
	if(state[button] == 0xF000) return 1;
     5dc:	c1 15       	cp	r28, r1
     5de:	d0 4f       	sbci	r29, 0xF0	; 240
     5e0:	91 f1       	breq	.+100    	; 0x646 <button_encoder_read+0x1f4>
		lcd_flag = 0x01;			//update lcd
	
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     5e2:	80 e6       	ldi	r24, 0x60	; 96
     5e4:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     5e6:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     5e8:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     5ee:	00 00       	nop

	//send out state of flags to the bar graph display
	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5) | (manual_brightness << 2);
     5f0:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <adjust_flag>
     5f4:	40 e8       	ldi	r20, 0x80	; 128
     5f6:	24 9f       	mul	r18, r20
     5f8:	90 01       	movw	r18, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     600:	10 e4       	ldi	r17, 0x40	; 64
     602:	91 9f       	mul	r25, r17
     604:	c0 01       	movw	r24, r0
     606:	11 24       	eor	r1, r1
     608:	28 2b       	or	r18, r24
     60a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     60e:	30 e2       	ldi	r19, 0x20	; 32
     610:	93 9f       	mul	r25, r19
     612:	c0 01       	movw	r24, r0
     614:	11 24       	eor	r1, r1
     616:	82 2b       	or	r24, r18
     618:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <manual_brightness>
     61c:	99 0f       	add	r25, r25
     61e:	99 0f       	add	r25, r25
     620:	89 2b       	or	r24, r25
     622:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     624:	77 9b       	sbis	0x0e, 7	; 14
     626:	fe cf       	rjmp	.-4      	; 0x624 <button_encoder_read+0x1d2>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     628:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     62a:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     62c:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     62e:	0e 94 0d 01 	call	0x21a	; 0x21a <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     636:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	08 95       	ret
		lcd_flag = 0x01;			//tell lcd to update
	}

	//poll if button 0 is pressed
	//this silences all alarms, no snooze
	if(chk_buttons(0) && trigger_alarm == 0x01){
     646:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	51 f6       	brne	.-108    	; 0x5e2 <button_encoder_read+0x190>
		trigger_alarm = 0;			//alarm turns off
     64e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		lcd_flag = 0x01;			//update lcd
     652:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <lcd_flag>
     656:	c5 cf       	rjmp	.-118    	; 0x5e2 <button_encoder_read+0x190>
	if(chk_buttons(2))
		manual_brightness ^= 0x01;

	//poll if button 1 is pressed
	//this activates the snooze feature
	if(chk_buttons(1) && trigger_alarm == 0x01){
     658:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <button_encoder_read+0x210>
     660:	aa cf       	rjmp	.-172    	; 0x5b6 <button_encoder_read+0x164>
		trigger_alarm = 0;			//if pressed, alarm should turn off
     662:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		ten_sec_start = 0x01;		//start the count for 10 second delay
     666:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ten_sec_start>
		ten_sec_count = 0;			//the count variable starts at 0
     66a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		lcd_flag = 0x01;			//tell lcd to update
     66e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <lcd_flag>
     672:	a1 cf       	rjmp	.-190    	; 0x5b6 <button_encoder_read+0x164>
	}

	//poll if button 5 is pressed
	//this toggles the pm_flag for adjustment
	//this only works when in time set mode
	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     674:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <adjust_flag>
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	09 f0       	breq	.+2      	; 0x67e <button_encoder_read+0x22c>
     67c:	4a cf       	rjmp	.-364    	; 0x512 <button_encoder_read+0xc0>
     67e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     682:	91 11       	cpse	r25, r1
     684:	46 cf       	rjmp	.-372    	; 0x512 <button_encoder_read+0xc0>
		pm_flag ^= 0x01;
     686:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <pm_flag>
     68a:	89 27       	eor	r24, r25
     68c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <pm_flag>
     690:	40 cf       	rjmp	.-384    	; 0x512 <button_encoder_read+0xc0>
		adjust_flag ^= 0x01;

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     692:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 27       	eor	r24, r25
     69a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     69e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <pm_flag>
     6a2:	91 30       	cpi	r25, 0x01	; 1
     6a4:	a9 f0       	breq	.+42     	; 0x6d0 <button_encoder_read+0x27e>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     6a6:	81 11       	cpse	r24, r1
     6a8:	1c cf       	rjmp	.-456    	; 0x4e2 <button_encoder_read+0x90>
     6aa:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     6ae:	8c 30       	cpi	r24, 0x0C	; 12
     6b0:	08 f4       	brcc	.+2      	; 0x6b4 <button_encoder_read+0x262>
     6b2:	17 cf       	rjmp	.-466    	; 0x4e2 <button_encoder_read+0x90>
			pm_flag = 0x01;			//set the pm_flag when coming from 24 hours and time is in afternoon
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <pm_flag>
			if(hour_count != 12)	//edge case of when the time is 12 for 24 hour time
     6ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     6be:	8c 30       	cpi	r24, 0x0C	; 12
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <button_encoder_read+0x272>
     6c2:	0f cf       	rjmp	.-482    	; 0x4e2 <button_encoder_read+0x90>
				hour_count -= 12;
     6c4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     6c8:	8c 50       	subi	r24, 0x0C	; 12
     6ca:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
     6ce:	09 cf       	rjmp	.-494    	; 0x4e2 <button_encoder_read+0x90>

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	49 f7       	brne	.-46     	; 0x6a6 <button_encoder_read+0x254>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
     6d4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <pm_flag>
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
     6d8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     6dc:	8c 30       	cpi	r24, 0x0C	; 12
     6de:	09 f4       	brne	.+2      	; 0x6e2 <button_encoder_read+0x290>
     6e0:	00 cf       	rjmp	.-512    	; 0x4e2 <button_encoder_read+0x90>
				hour_count += 12;
     6e2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     6e6:	84 5f       	subi	r24, 0xF4	; 244
     6e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
     6ec:	fa ce       	rjmp	.-524    	; 0x4e2 <button_encoder_read+0x90>

000006ee <clock_count>:
 * mode.
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
     6ee:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <isr_count>
     6f2:	80 38       	cpi	r24, 0x80	; 128
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <clock_count+0xa>
     6f6:	7b c0       	rjmp	.+246    	; 0x7ee <clock_count+0x100>
     6f8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
     6fc:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sec_count>
     700:	9c 33       	cpi	r25, 0x3C	; 60
     702:	09 f4       	brne	.+2      	; 0x706 <clock_count+0x18>
     704:	6c c0       	rjmp	.+216    	; 0x7de <clock_count+0xf0>
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
     706:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <min_count>
     70a:	9c 33       	cpi	r25, 0x3C	; 60
     70c:	09 f4       	brne	.+2      	; 0x710 <clock_count+0x22>
     70e:	5b c0       	rjmp	.+182    	; 0x7c6 <clock_count+0xd8>
		}

		min_count = 0;
  	}
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
     710:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     714:	9d 30       	cpi	r25, 0x0D	; 13
     716:	b0 f0       	brcs	.+44     	; 0x744 <clock_count+0x56>
     718:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     71c:	91 11       	cpse	r25, r1
     71e:	12 c0       	rjmp	.+36     	; 0x744 <clock_count+0x56>
		hour_count -= 12;	
     720:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     724:	9c 50       	subi	r25, 0x0C	; 12
     726:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     72a:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <min_count>
     72e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <alarm_time_min>
     732:	29 17       	cp	r18, r25
     734:	d1 f0       	breq	.+52     	; 0x76a <clock_count+0x7c>
			lcd_flag = 0x01;				//update lcd
		}
	}
	//else meaning that the actual time does not equal saved alarm time
	else{
		trigger_alarm = 0;
     736:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		alarm_match_count = 0;
     73a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <alarm_match_count>
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
     73e:	8a 30       	cpi	r24, 0x0A	; 10
     740:	81 f1       	breq	.+96     	; 0x7a2 <clock_count+0xb4>
     742:	08 95       	ret
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	//bind the hour to 0 and 24 if 24 hour flag is set
	else if(hour_count >= 24 && hour24_flag == 0x01){
     744:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     748:	98 31       	cpi	r25, 0x18	; 24
     74a:	78 f3       	brcs	.-34     	; 0x72a <clock_count+0x3c>
     74c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     750:	91 30       	cpi	r25, 0x01	; 1
     752:	59 f7       	brne	.-42     	; 0x72a <clock_count+0x3c>
		hour_count -= 24;
     754:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     758:	98 51       	subi	r25, 0x18	; 24
     75a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     75e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <min_count>
     762:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <alarm_time_min>
     766:	29 13       	cpse	r18, r25
     768:	e6 cf       	rjmp	.-52     	; 0x736 <clock_count+0x48>
     76a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <hour_count>
     76e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <alarm_time_hour>
     772:	29 13       	cpse	r18, r25
     774:	e0 cf       	rjmp	.-64     	; 0x736 <clock_count+0x48>
     776:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <temp_pm_flag>
     77a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <pm_flag>
     77e:	29 13       	cpse	r18, r25
     780:	da cf       	rjmp	.-76     	; 0x736 <clock_count+0x48>
     782:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     786:	91 11       	cpse	r25, r1
     788:	d6 cf       	rjmp	.-84     	; 0x736 <clock_count+0x48>
		if(alarm_match_count == 0){			//a check so that this only goes in once
     78a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <alarm_match_count>
     78e:	91 11       	cpse	r25, r1
     790:	d6 cf       	rjmp	.-84     	; 0x73e <clock_count+0x50>
			trigger_alarm = 0x01;			//start the beeping
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <trigger_alarm>
			alarm_match_count = 0x01;
     798:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <alarm_match_count>
			lcd_flag = 0x01;				//update lcd
     79c:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <lcd_flag>
     7a0:	ce cf       	rjmp	.-100    	; 0x73e <clock_count+0x50>
		alarm_match_count = 0;
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
		trigger_alarm = 0x01;			//initiate beep again after 10 second snooze
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <trigger_alarm>
		ten_sec_start = 0;				//reset the start variable
     7a8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ten_sec_start>
		ten_sec_count = 0;				//reset the count variable
     7ac:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		lcd_flag = 0x01;				//update lcd
     7b0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <lcd_flag>
		alarm_time_min = temp_min;		//beep for 1 minute
     7b4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     7b8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <alarm_time_min>
		alarm_time_hour = temp_hour;		
     7bc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     7c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <alarm_time_hour>
     7c4:	08 95       	ret
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
     7c6:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     7ca:	9f 5f       	subi	r25, 0xFF	; 255
     7cc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     7d0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     7d4:	9c 30       	cpi	r25, 0x0C	; 12
     7d6:	e9 f0       	breq	.+58     	; 0x812 <clock_count+0x124>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     7d8:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <min_count>
     7dc:	99 cf       	rjmp	.-206    	; 0x710 <clock_count+0x22>
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
	  	min_count++;
     7de:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <min_count>
     7e2:	9f 5f       	subi	r25, 0xFF	; 255
     7e4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <min_count>
		sec_count = 0;
     7e8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count>
     7ec:	8c cf       	rjmp	.-232    	; 0x706 <clock_count+0x18>
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
	  	sec_count++;				//increment 1 second
     7ee:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count>
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
		isr_count = 0;				//reset isr_count
     7f8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <isr_count>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
     7fc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ten_sec_start>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	09 f0       	breq	.+2      	; 0x806 <clock_count+0x118>
     804:	79 cf       	rjmp	.-270    	; 0x6f8 <clock_count+0xa>
			ten_sec_count++;
     806:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     810:	75 cf       	rjmp	.-278    	; 0x6fc <clock_count+0xe>
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     812:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <hour24_flag>
     816:	91 11       	cpse	r25, r1
     818:	df cf       	rjmp	.-66     	; 0x7d8 <clock_count+0xea>
			pm_flag ^= 0x01;
     81a:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <pm_flag>
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	92 27       	eor	r25, r18
     822:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <pm_flag>
     826:	d8 cf       	rjmp	.-80     	; 0x7d8 <clock_count+0xea>

00000828 <set_LCD>:
* Description: Update the LCD display to show the current state of the alarm
* clock, such as buzzing an alarm, snoozed, or the alarm is not buzzing.
*************************************************************************/
void set_LCD(){
	//clear current contents in display
   clear_display();
     828:	0e 94 1c 06 	call	0xc38	; 0xc38 <clear_display>
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
     82c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	e1 f0       	breq	.+56     	; 0x86c <set_LCD+0x44>
	  	line2_col1();
		string2lcd("            ");

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
     834:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ten_sec_start>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	61 f0       	breq	.+24     	; 0x854 <set_LCD+0x2c>
      	line2_col1();
      	string2lcd("            ");
   }
	//check to see if alarm clock is not in snooze or currently buzzing state
   else{
		string2lcd("ALARM NOT TRIGGERED");	//tell lcd to show "not triggered" message
     83c:	8f e2       	ldi	r24, 0x2F	; 47
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
		line2_col1();
     844:	0e 94 4c 06 	call	0xc98	; 0xc98 <line2_col1>
		string2lcd("            ");
     848:	8a e1       	ldi	r24, 0x1A	; 26
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
	}
   cursor_home();
     850:	0c 94 34 06 	jmp	0xc68	; 0xc68 <cursor_home>
		string2lcd("            ");

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
     854:	87 e2       	ldi	r24, 0x27	; 39
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
      	line2_col1();
     85c:	0e 94 4c 06 	call	0xc98	; 0xc98 <line2_col1>
      	string2lcd("            ");
     860:	8a e1       	ldi	r24, 0x1A	; 26
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
   else{
		string2lcd("ALARM NOT TRIGGERED");	//tell lcd to show "not triggered" message
		line2_col1();
		string2lcd("            ");
	}
   cursor_home();
     868:	0c 94 34 06 	jmp	0xc68	; 0xc68 <cursor_home>
void set_LCD(){
	//clear current contents in display
   clear_display();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");			//tell lcd to show "ALARM" message
     86c:	81 e1       	ldi	r24, 0x11	; 17
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
	  	line2_col1();
     874:	0e 94 4c 06 	call	0xc98	; 0xc98 <line2_col1>
		string2lcd("            ");
     878:	8a e1       	ldi	r24, 0x1A	; 26
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 9c 06 	call	0xd38	; 0xd38 <string2lcd>
     880:	e7 cf       	rjmp	.-50     	; 0x850 <set_LCD+0x28>

00000882 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <input_flag>

	isr_count++;
     894:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <isr_count>
     898:	8f 5f       	subi	r24, 0xFF	; 255
     89a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <isr_count>

}//ISR
     89e:	8f 91       	pop	r24
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <__vector_14>:
* If it is, then toggle the PORTC bit 3 pin to drive the annoying beeping
* for the speakers.
*
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){
     8aa:	1f 92       	push	r1
     8ac:	0f 92       	push	r0
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	0f 92       	push	r0
     8b2:	11 24       	eor	r1, r1
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25

	//check if trigger alarm is set
	if(trigger_alarm == 0x01){
     8b8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	41 f4       	brne	.+16     	; 0x8d0 <__vector_14+0x26>
		
		PORTC ^= (1 << PC3);		//start toggling PC3
     8c0:	95 b3       	in	r25, 0x15	; 21
     8c2:	88 e0       	ldi	r24, 0x08	; 8
     8c4:	89 27       	eor	r24, r25
     8c6:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz
     8c8:	80 e4       	ldi	r24, 0x40	; 64
     8ca:	9c e9       	ldi	r25, 0x9C	; 156
     8cc:	9d bd       	out	0x2d, r25	; 45
     8ce:	8c bd       	out	0x2c, r24	; 44

	}

}//ISR
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <__vector_21>:

ISR(ADC_vect){
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	8f 93       	push	r24

	if(manual_brightness == 0)
     8ea:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <manual_brightness>
     8ee:	81 11       	cpse	r24, r1
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__vector_21+0x18>
		OCR2 = ADCH;
     8f2:	85 b1       	in	r24, 0x05	; 5
     8f4:	83 bd       	out	0x23, r24	; 35

}
     8f6:	8f 91       	pop	r24
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	81 11       	cpse	r24, r1
     906:	01 c0       	rjmp	.+2      	; 0x90a <send_lcd+0x8>
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     90c:	77 9b       	sbis	0x0e, 7	; 14
     90e:	fe cf       	rjmp	.-4      	; 0x90c <send_lcd+0xa>
  SPDR = byte;                        //send payload
     910:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     912:	77 9b       	sbis	0x0e, 7	; 14
     914:	fe cf       	rjmp	.-4      	; 0x912 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     916:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91a:	88 60       	ori	r24, 0x08	; 8
     91c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     920:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     924:	87 7f       	andi	r24, 0xF7	; 247
     926:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     92a:	08 95       	ret

0000092c <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     92c:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <i.2094>
     930:	82 0f       	add	r24, r18
     932:	91 1d       	adc	r25, r1
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	81 11       	cpse	r24, r1
     93a:	1f c0       	rjmp	.+62     	; 0x97a <refresh_lcd+0x4e>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     946:	77 9b       	sbis	0x0e, 7	; 14
     948:	fe cf       	rjmp	.-4      	; 0x946 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     94e:	77 9b       	sbis	0x0e, 7	; 14
     950:	fe cf       	rjmp	.-4      	; 0x94e <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     952:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     956:	88 60       	ori	r24, 0x08	; 8
     958:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     960:	87 7f       	andi	r24, 0xF7	; 247
     962:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     966:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <i.2094>
     96a:	8f 5f       	subi	r24, 0xFF	; 255
     96c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     970:	80 31       	cpi	r24, 0x10	; 16
     972:	49 f1       	breq	.+82     	; 0x9c6 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     974:	80 32       	cpi	r24, 0x20	; 32
     976:	69 f0       	breq	.+26     	; 0x992 <refresh_lcd+0x66>
     978:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     97a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <null_flag.2095>
     97e:	91 11       	cpse	r25, r1
     980:	e0 cf       	rjmp	.-64     	; 0x942 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     986:	77 9b       	sbis	0x0e, 7	; 14
     988:	fe cf       	rjmp	.-4      	; 0x986 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     98a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     98c:	77 9b       	sbis	0x0e, 7	; 14
     98e:	fe cf       	rjmp	.-4      	; 0x98c <refresh_lcd+0x60>
     990:	e0 cf       	rjmp	.-64     	; 0x952 <refresh_lcd+0x26>
     992:	85 ed       	ldi	r24, 0xD5	; 213
     994:	8a 95       	dec	r24
     996:	f1 f7       	brne	.-4      	; 0x994 <refresh_lcd+0x68>
     998:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     99a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     99c:	77 9b       	sbis	0x0e, 7	; 14
     99e:	fe cf       	rjmp	.-4      	; 0x99c <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9a4:	77 9b       	sbis	0x0e, 7	; 14
     9a6:	fe cf       	rjmp	.-4      	; 0x9a4 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ac:	88 60       	ori	r24, 0x08	; 8
     9ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b6:	87 7f       	andi	r24, 0xF7	; 247
     9b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     9bc:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <null_flag.2095>
      i=0;
     9c0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <i.2094>
     9c4:	08 95       	ret
     9c6:	f5 ed       	ldi	r31, 0xD5	; 213
     9c8:	fa 95       	dec	r31
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <refresh_lcd+0x9c>
     9cc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9ce:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d0:	77 9b       	sbis	0x0e, 7	; 14
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     9d4:	80 ec       	ldi	r24, 0xC0	; 192
     9d6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d8:	77 9b       	sbis	0x0e, 7	; 14
     9da:	fe cf       	rjmp	.-4      	; 0x9d8 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e0:	88 60       	ori	r24, 0x08	; 8
     9e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ea:	87 7f       	andi	r24, 0xF7	; 247
     9ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9f0:	08 95       	ret

000009f2 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     9f2:	66 0f       	add	r22, r22
     9f4:	66 0f       	add	r22, r22
     9f6:	66 0f       	add	r22, r22
     9f8:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9fa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9fc:	77 9b       	sbis	0x0e, 7	; 14
     9fe:	fe cf       	rjmp	.-4      	; 0x9fc <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     a00:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a02:	77 9b       	sbis	0x0e, 7	; 14
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a06:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0a:	28 60       	ori	r18, 0x08	; 8
     a0c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a10:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a14:	27 7f       	andi	r18, 0xF7	; 247
     a16:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a1a:	25 ed       	ldi	r18, 0xD5	; 213
     a1c:	2a 95       	dec	r18
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <set_custom_character+0x2a>
     a20:	00 00       	nop
     a22:	fc 01       	movw	r30, r24
     a24:	9c 01       	movw	r18, r24
     a26:	28 5f       	subi	r18, 0xF8	; 248
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a2a:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     a2c:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a2e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a30:	77 9b       	sbis	0x0e, 7	; 14
     a32:	fe cf       	rjmp	.-4      	; 0xa30 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     a34:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a36:	77 9b       	sbis	0x0e, 7	; 14
     a38:	fe cf       	rjmp	.-4      	; 0xa36 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a44:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a48:	87 7f       	andi	r24, 0xF7	; 247
     a4a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a4e:	85 ed       	ldi	r24, 0xD5	; 213
     a50:	8a 95       	dec	r24
     a52:	f1 f7       	brne	.-4      	; 0xa50 <set_custom_character+0x5e>
     a54:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     a56:	e2 17       	cp	r30, r18
     a58:	f3 07       	cpc	r31, r19
     a5a:	41 f7       	brne	.-48     	; 0xa2c <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     a5c:	08 95       	ret

00000a5e <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     a5e:	90 e4       	ldi	r25, 0x40	; 64
     a60:	89 9f       	mul	r24, r25
     a62:	60 0d       	add	r22, r0
     a64:	11 24       	eor	r1, r1
     a66:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a6a:	77 9b       	sbis	0x0e, 7	; 14
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <set_cursor+0xc>
  SPDR = byte;                        //send payload
     a6e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a70:	77 9b       	sbis	0x0e, 7	; 14
     a72:	fe cf       	rjmp	.-4      	; 0xa70 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a78:	88 60       	ori	r24, 0x08	; 8
     a7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a88:	08 95       	ret

00000a8a <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     a8a:	81 11       	cpse	r24, r1
     a8c:	13 c0       	rjmp	.+38     	; 0xab4 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a92:	77 9b       	sbis	0x0e, 7	; 14
     a94:	fe cf       	rjmp	.-4      	; 0xa92 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     a96:	80 e3       	ldi	r24, 0x30	; 48
     a98:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a9a:	77 9b       	sbis	0x0e, 7	; 14
     a9c:	fe cf       	rjmp	.-4      	; 0xa9a <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aa2:	88 60       	ori	r24, 0x08	; 8
     aa4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aa8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab2:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     ab4:	84 36       	cpi	r24, 0x64	; 100
     ab6:	b0 f4       	brcc	.+44     	; 0xae4 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     ab8:	8a 30       	cpi	r24, 0x0A	; 10
     aba:	60 f5       	brcc	.+88     	; 0xb14 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ac0:	77 9b       	sbis	0x0e, 7	; 14
     ac2:	fe cf       	rjmp	.-4      	; 0xac0 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     ac4:	9d ec       	ldi	r25, 0xCD	; 205
     ac6:	89 9f       	mul	r24, r25
     ac8:	91 2d       	mov	r25, r1
     aca:	11 24       	eor	r1, r1
     acc:	96 95       	lsr	r25
     ace:	96 95       	lsr	r25
     ad0:	96 95       	lsr	r25
     ad2:	2a e0       	ldi	r18, 0x0A	; 10
     ad4:	92 9f       	mul	r25, r18
     ad6:	80 19       	sub	r24, r0
     ad8:	11 24       	eor	r1, r1
     ada:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     adc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ade:	77 9b       	sbis	0x0e, 7	; 14
     ae0:	fe cf       	rjmp	.-4      	; 0xade <uint2lcd+0x54>
     ae2:	dd cf       	rjmp	.-70     	; 0xa9e <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     ae4:	99 e2       	ldi	r25, 0x29	; 41
     ae6:	89 9f       	mul	r24, r25
     ae8:	91 2d       	mov	r25, r1
     aea:	11 24       	eor	r1, r1
     aec:	92 95       	swap	r25
     aee:	9f 70       	andi	r25, 0x0F	; 15
     af0:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     af6:	77 9b       	sbis	0x0e, 7	; 14
     af8:	fe cf       	rjmp	.-4      	; 0xaf6 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     afa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     afc:	77 9b       	sbis	0x0e, 7	; 14
     afe:	fe cf       	rjmp	.-4      	; 0xafc <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b00:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b04:	98 60       	ori	r25, 0x08	; 8
     b06:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b0a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b0e:	97 7f       	andi	r25, 0xF7	; 247
     b10:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     b14:	99 e2       	ldi	r25, 0x29	; 41
     b16:	89 9f       	mul	r24, r25
     b18:	91 2d       	mov	r25, r1
     b1a:	11 24       	eor	r1, r1
     b1c:	92 95       	swap	r25
     b1e:	9f 70       	andi	r25, 0x0F	; 15
     b20:	38 2f       	mov	r19, r24
     b22:	24 e6       	ldi	r18, 0x64	; 100
     b24:	92 9f       	mul	r25, r18
     b26:	30 19       	sub	r19, r0
     b28:	11 24       	eor	r1, r1
     b2a:	2d ec       	ldi	r18, 0xCD	; 205
     b2c:	32 9f       	mul	r19, r18
     b2e:	91 2d       	mov	r25, r1
     b30:	11 24       	eor	r1, r1
     b32:	96 95       	lsr	r25
     b34:	96 95       	lsr	r25
     b36:	96 95       	lsr	r25
     b38:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b3e:	77 9b       	sbis	0x0e, 7	; 14
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     b42:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b44:	77 9b       	sbis	0x0e, 7	; 14
     b46:	fe cf       	rjmp	.-4      	; 0xb44 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b48:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b4c:	98 60       	ori	r25, 0x08	; 8
     b4e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b52:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b56:	97 7f       	andi	r25, 0xF7	; 247
     b58:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b5c:	af cf       	rjmp	.-162    	; 0xabc <uint2lcd+0x32>

00000b5e <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     b5e:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     b60:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b68:	77 9b       	sbis	0x0e, 7	; 14
     b6a:	fe cf       	rjmp	.-4      	; 0xb68 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     b6c:	9d e2       	ldi	r25, 0x2D	; 45
     b6e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b70:	77 9b       	sbis	0x0e, 7	; 14
     b72:	fe cf       	rjmp	.-4      	; 0xb70 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b74:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b78:	98 60       	ori	r25, 0x08	; 8
     b7a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b82:	97 7f       	andi	r25, 0xF7	; 247
     b84:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b88:	95 ed       	ldi	r25, 0xD5	; 213
     b8a:	9a 95       	dec	r25
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <int2lcd+0x2c>
     b8e:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     b90:	81 95       	neg	r24
     b92:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <uint2lcd>

00000b96 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b96:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b98:	77 9b       	sbis	0x0e, 7	; 14
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     b9c:	8e e0       	ldi	r24, 0x0E	; 14
     b9e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ba0:	77 9b       	sbis	0x0e, 7	; 14
     ba2:	fe cf       	rjmp	.-4      	; 0xba0 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ba4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb2:	87 7f       	andi	r24, 0xF7	; 247
     bb4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb8:	08 95       	ret

00000bba <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bba:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bbc:	77 9b       	sbis	0x0e, 7	; 14
     bbe:	fe cf       	rjmp	.-4      	; 0xbbc <cursor_off+0x2>
  SPDR = byte;                        //send payload
     bc0:	8c e0       	ldi	r24, 0x0C	; 12
     bc2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc4:	77 9b       	sbis	0x0e, 7	; 14
     bc6:	fe cf       	rjmp	.-4      	; 0xbc4 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bc8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bcc:	88 60       	ori	r24, 0x08	; 8
     bce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bdc:	08 95       	ret

00000bde <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bde:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     be0:	77 9b       	sbis	0x0e, 7	; 14
     be2:	fe cf       	rjmp	.-4      	; 0xbe0 <shift_right+0x2>
  SPDR = byte;                        //send payload
     be4:	8e e1       	ldi	r24, 0x1E	; 30
     be6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     be8:	77 9b       	sbis	0x0e, 7	; 14
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c00:	08 95       	ret

00000c02 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c02:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c04:	77 9b       	sbis	0x0e, 7	; 14
     c06:	fe cf       	rjmp	.-4      	; 0xc04 <shift_left+0x2>
  SPDR = byte;                        //send payload
     c08:	88 e1       	ldi	r24, 0x18	; 24
     c0a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c0c:	77 9b       	sbis	0x0e, 7	; 14
     c0e:	fe cf       	rjmp	.-4      	; 0xc0c <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c24:	08 95       	ret

00000c26 <strobe_lcd>:
     c26:	e2 e6       	ldi	r30, 0x62	; 98
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	80 83       	st	Z, r24
     c30:	80 81       	ld	r24, Z
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	80 83       	st	Z, r24
     c36:	08 95       	ret

00000c38 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c38:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c3a:	77 9b       	sbis	0x0e, 7	; 14
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <clear_display+0x2>
  SPDR = byte;                        //send payload
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c42:	77 9b       	sbis	0x0e, 7	; 14
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5a:	8f e1       	ldi	r24, 0x1F	; 31
     c5c:	9c e1       	ldi	r25, 0x1C	; 28
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <clear_display+0x26>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <clear_display+0x2c>
     c64:	00 00       	nop
     c66:	08 95       	ret

00000c68 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c6a:	77 9b       	sbis	0x0e, 7	; 14
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <cursor_home+0x2>
  SPDR = byte;                        //send payload
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c72:	77 9b       	sbis	0x0e, 7	; 14
     c74:	fe cf       	rjmp	.-4      	; 0xc72 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c84:	87 7f       	andi	r24, 0xF7	; 247
     c86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c8a:	8f e6       	ldi	r24, 0x6F	; 111
     c8c:	97 e1       	ldi	r25, 0x17	; 23
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <cursor_home+0x26>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <cursor_home+0x2c>
     c94:	00 00       	nop
     c96:	08 95       	ret

00000c98 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c98:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c9a:	77 9b       	sbis	0x0e, 7	; 14
     c9c:	fe cf       	rjmp	.-4      	; 0xc9a <line2_col1+0x2>
  SPDR = byte;                        //send payload
     c9e:	80 ec       	ldi	r24, 0xC0	; 192
     ca0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ca2:	77 9b       	sbis	0x0e, 7	; 14
     ca4:	fe cf       	rjmp	.-4      	; 0xca2 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ca6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cb0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cba:	08 95       	ret

00000cbc <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cbc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cbe:	77 9b       	sbis	0x0e, 7	; 14
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <line1_col1+0x2>
  SPDR = byte;                        //send payload
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cc6:	77 9b       	sbis	0x0e, 7	; 14
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd8:	87 7f       	andi	r24, 0xF7	; 247
     cda:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cde:	08 95       	ret

00000ce0 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     ce0:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce2:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     ce4:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce6:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce8:	77 9b       	sbis	0x0e, 7	; 14
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     cec:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cee:	77 9b       	sbis	0x0e, 7	; 14
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d00:	87 7f       	andi	r24, 0xF7	; 247
     d02:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d06:	85 ed       	ldi	r24, 0xD5	; 213
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <fill_spaces+0x28>
     d0c:	00 00       	nop
     d0e:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     d10:	51 f7       	brne	.-44     	; 0xce6 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     d12:	08 95       	ret

00000d14 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d18:	77 9b       	sbis	0x0e, 7	; 14
     d1a:	fe cf       	rjmp	.-4      	; 0xd18 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     d1c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d1e:	77 9b       	sbis	0x0e, 7	; 14
     d20:	fe cf       	rjmp	.-4      	; 0xd1e <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d30:	87 7f       	andi	r24, 0xF7	; 247
     d32:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d36:	08 95       	ret

00000d38 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     d38:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d40:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     d42:	df 01       	movw	r26, r30
     d44:	a4 0f       	add	r26, r20
     d46:	b5 1f       	adc	r27, r21
     d48:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d4a:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d4c:	77 9b       	sbis	0x0e, 7	; 14
     d4e:	fe cf       	rjmp	.-4      	; 0xd4c <string2lcd+0x14>
  SPDR = byte;                        //send payload
     d50:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d52:	77 9b       	sbis	0x0e, 7	; 14
     d54:	fe cf       	rjmp	.-4      	; 0xd52 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d56:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d5a:	98 60       	ori	r25, 0x08	; 8
     d5c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d60:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d64:	97 7f       	andi	r25, 0xF7	; 247
     d66:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d6a:	85 ed       	ldi	r24, 0xD5	; 213
     d6c:	8a 95       	dec	r24
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <string2lcd+0x34>
     d70:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     d72:	6f 5f       	subi	r22, 0xFF	; 255
     d74:	46 2f       	mov	r20, r22
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	df 01       	movw	r26, r30
     d7a:	0d 90       	ld	r0, X+
     d7c:	00 20       	and	r0, r0
     d7e:	e9 f7       	brne	.-6      	; 0xd7a <string2lcd+0x42>
     d80:	9d 01       	movw	r18, r26
     d82:	2e 1b       	sub	r18, r30
     d84:	3f 0b       	sbc	r19, r31
     d86:	22 50       	subi	r18, 0x02	; 2
     d88:	31 09       	sbc	r19, r1
     d8a:	24 17       	cp	r18, r20
     d8c:	35 07       	cpc	r19, r21
     d8e:	c8 f6       	brcc	.-78     	; 0xd42 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     d90:	08 95       	ret

00000d92 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	99 ef       	ldi	r25, 0xF9	; 249
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <lcd_init+0x4>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <lcd_init+0xa>
     d9c:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     d9e:	88 e0       	ldi	r24, 0x08	; 8
     da0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     da4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     da6:	77 9b       	sbis	0x0e, 7	; 14
     da8:	fe cf       	rjmp	.-4      	; 0xda6 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dae:	77 9b       	sbis	0x0e, 7	; 14
     db0:	fe cf       	rjmp	.-4      	; 0xdae <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     db2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dbc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc6:	8f e5       	ldi	r24, 0x5F	; 95
     dc8:	9d e6       	ldi	r25, 0x6D	; 109
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <lcd_init+0x38>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <lcd_init+0x3e>
     dd0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dd2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dd4:	77 9b       	sbis	0x0e, 7	; 14
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     dd8:	80 e3       	ldi	r24, 0x30	; 48
     dda:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ddc:	77 9b       	sbis	0x0e, 7	; 14
     dde:	fe cf       	rjmp	.-4      	; 0xddc <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     de0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df4:	8f e5       	ldi	r24, 0x5F	; 95
     df6:	9d e6       	ldi	r25, 0x6D	; 109
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <lcd_init+0x66>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <lcd_init+0x6c>
     dfe:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e00:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e02:	77 9b       	sbis	0x0e, 7	; 14
     e04:	fe cf       	rjmp	.-4      	; 0xe02 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e0a:	77 9b       	sbis	0x0e, 7	; 14
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e18:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e22:	8f e5       	ldi	r24, 0x5F	; 95
     e24:	9d e6       	ldi	r25, 0x6D	; 109
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <lcd_init+0x94>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <lcd_init+0x9a>
     e2c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e2e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e30:	77 9b       	sbis	0x0e, 7	; 14
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     e34:	88 e3       	ldi	r24, 0x38	; 56
     e36:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e38:	77 9b       	sbis	0x0e, 7	; 14
     e3a:	fe cf       	rjmp	.-4      	; 0xe38 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e4a:	87 7f       	andi	r24, 0xF7	; 247
     e4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e50:	8f e1       	ldi	r24, 0x1F	; 31
     e52:	9e e4       	ldi	r25, 0x4E	; 78
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <lcd_init+0xc2>
     e58:	00 c0       	rjmp	.+0      	; 0xe5a <lcd_init+0xc8>
     e5a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e5c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e5e:	77 9b       	sbis	0x0e, 7	; 14
     e60:	fe cf       	rjmp	.-4      	; 0xe5e <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e66:	77 9b       	sbis	0x0e, 7	; 14
     e68:	fe cf       	rjmp	.-4      	; 0xe66 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e7e:	8f e1       	ldi	r24, 0x1F	; 31
     e80:	9e e4       	ldi	r25, 0x4E	; 78
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <lcd_init+0xf0>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <lcd_init+0xf6>
     e88:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e8a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e8c:	77 9b       	sbis	0x0e, 7	; 14
     e8e:	fe cf       	rjmp	.-4      	; 0xe8c <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e94:	77 9b       	sbis	0x0e, 7	; 14
     e96:	fe cf       	rjmp	.-4      	; 0xe94 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eac:	8f e1       	ldi	r24, 0x1F	; 31
     eae:	9e e4       	ldi	r25, 0x4E	; 78
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <lcd_init+0x11e>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <lcd_init+0x124>
     eb6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eb8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eba:	77 9b       	sbis	0x0e, 7	; 14
     ebc:	fe cf       	rjmp	.-4      	; 0xeba <lcd_init+0x128>
  SPDR = byte;                        //send payload
     ebe:	86 e0       	ldi	r24, 0x06	; 6
     ec0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ec2:	77 9b       	sbis	0x0e, 7	; 14
     ec4:	fe cf       	rjmp	.-4      	; 0xec2 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ec6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eca:	88 60       	ori	r24, 0x08	; 8
     ecc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eda:	8f e1       	ldi	r24, 0x1F	; 31
     edc:	9e e4       	ldi	r25, 0x4E	; 78
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_init+0x14c>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <lcd_init+0x152>
     ee4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ee6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ee8:	77 9b       	sbis	0x0e, 7	; 14
     eea:	fe cf       	rjmp	.-4      	; 0xee8 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ef0:	77 9b       	sbis	0x0e, 7	; 14
     ef2:	fe cf       	rjmp	.-4      	; 0xef0 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ef4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f08:	8f e1       	ldi	r24, 0x1F	; 31
     f0a:	9e e4       	ldi	r25, 0x4E	; 78
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <lcd_init+0x17a>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <lcd_init+0x180>
     f12:	00 00       	nop
     f14:	08 95       	ret

00000f16 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     f16:	4f 92       	push	r4
     f18:	5f 92       	push	r5
     f1a:	6f 92       	push	r6
     f1c:	7f 92       	push	r7
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	14 2f       	mov	r17, r20
     f48:	42 2e       	mov	r4, r18
     f4a:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     f4c:	00 23       	and	r16, r16
     f4e:	79 f0       	breq	.+30     	; 0xf6e <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
     f54:	cc 24       	eor	r12, r12
     f56:	f7 fc       	sbrc	r15, 7
     f58:	c3 94       	inc	r12
     f5a:	dd 24       	eor	r13, r13
     f5c:	ee 24       	eor	r14, r14
     f5e:	ff 24       	eor	r15, r15
     f60:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     f62:	6b 01       	movw	r12, r22
     f64:	7c 01       	movw	r14, r24
     f66:	97 fd       	sbrc	r25, 7
     f68:	a3 c0       	rjmp	.+326    	; 0x10b0 <lcd_int32+0x19a>
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     f6e:	44 20       	and	r4, r4
     f70:	09 f4       	brne	.+2      	; 0xf74 <lcd_int32+0x5e>
     f72:	96 c0       	rjmp	.+300    	; 0x10a0 <lcd_int32+0x18a>
     f74:	9e 01       	movw	r18, r28
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	59 01       	movw	r10, r18
     f7c:	49 01       	movw	r8, r18
     f7e:	66 24       	eor	r6, r6
     f80:	6a 94       	dec	r6
     f82:	64 0c       	add	r6, r4
     f84:	71 2c       	mov	r7, r1
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	63 1a       	sub	r6, r19
     f8a:	73 0a       	sbc	r7, r19
     f8c:	6a 0c       	add	r6, r10
     f8e:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divmodsi4>
     f9c:	e6 2f       	mov	r30, r22
     f9e:	2a 8b       	std	Y+18, r18	; 0x12
     fa0:	3b 8b       	std	Y+19, r19	; 0x13
     fa2:	4c 8b       	std	Y+20, r20	; 0x14
     fa4:	5d 8b       	std	Y+21, r21	; 0x15
     fa6:	6a 89       	ldd	r22, Y+18	; 0x12
     fa8:	7b 89       	ldd	r23, Y+19	; 0x13
     faa:	8c 89       	ldd	r24, Y+20	; 0x14
     fac:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     fae:	20 e3       	ldi	r18, 0x30	; 48
     fb0:	2e 0f       	add	r18, r30
     fb2:	f4 01       	movw	r30, r8
     fb4:	21 93       	st	Z+, r18
     fb6:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     fb8:	6e 16       	cp	r6, r30
     fba:	7f 06       	cpc	r7, r31
     fbc:	49 f7       	brne	.-46     	; 0xf90 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     fbe:	99 24       	eor	r9, r9
     fc0:	93 94       	inc	r9
     fc2:	94 0c       	add	r9, r4
     fc4:	f5 01       	movw	r30, r10
     fc6:	e4 0d       	add	r30, r4
     fc8:	f1 1d       	adc	r31, r1
     fca:	2e e2       	ldi	r18, 0x2E	; 46
     fcc:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     fce:	2a e0       	ldi	r18, 0x0A	; 10
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divmodsi4>
     fda:	e6 2f       	mov	r30, r22
     fdc:	2a 8b       	std	Y+18, r18	; 0x12
     fde:	3b 8b       	std	Y+19, r19	; 0x13
     fe0:	4c 8b       	std	Y+20, r20	; 0x14
     fe2:	5d 8b       	std	Y+21, r21	; 0x15
     fe4:	6e 8b       	std	Y+22, r22	; 0x16
     fe6:	7f 8b       	std	Y+23, r23	; 0x17
     fe8:	88 8f       	std	Y+24, r24	; 0x18
     fea:	99 8f       	std	Y+25, r25	; 0x19
     fec:	6a 89       	ldd	r22, Y+18	; 0x12
     fee:	7b 89       	ldd	r23, Y+19	; 0x13
     ff0:	8c 89       	ldd	r24, Y+20	; 0x14
     ff2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	39 0d       	add	r19, r9
     ff8:	d5 01       	movw	r26, r10
     ffa:	a9 0d       	add	r26, r9
     ffc:	b1 1d       	adc	r27, r1
     ffe:	e0 5d       	subi	r30, 0xD0	; 208
    1000:	ec 93       	st	X, r30
    1002:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1004:	61 15       	cp	r22, r1
    1006:	71 05       	cpc	r23, r1
    1008:	81 05       	cpc	r24, r1
    100a:	91 05       	cpc	r25, r1
    100c:	01 f7       	brne	.-64     	; 0xfce <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    100e:	11 23       	and	r17, r17
    1010:	61 f0       	breq	.+24     	; 0x102a <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1012:	51 10       	cpse	r5, r1
    1014:	4b c0       	rjmp	.+150    	; 0x10ac <lcd_int32+0x196>
    1016:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1018:	31 17       	cp	r19, r17
    101a:	38 f4       	brcc	.+14     	; 0x102a <lcd_int32+0x114>
    101c:	f5 01       	movw	r30, r10
    101e:	e3 0f       	add	r30, r19
    1020:	f1 1d       	adc	r31, r1
    1022:	90 83       	st	Z, r25
    1024:	3f 5f       	subi	r19, 0xFF	; 255
    1026:	13 13       	cpse	r17, r19
    1028:	f9 cf       	rjmp	.-14     	; 0x101c <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    102a:	00 23       	and	r16, r16
    102c:	31 f0       	breq	.+12     	; 0x103a <lcd_int32+0x124>
    102e:	f5 01       	movw	r30, r10
    1030:	e3 0f       	add	r30, r19
    1032:	f1 1d       	adc	r31, r1
    1034:	9d e2       	ldi	r25, 0x2D	; 45
    1036:	90 83       	st	Z, r25
    1038:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    103a:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    103c:	31 50       	subi	r19, 0x01	; 1
    103e:	f5 01       	movw	r30, r10
    1040:	e3 0f       	add	r30, r19
    1042:	f1 1d       	adc	r31, r1
    1044:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1046:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1048:	77 9b       	sbis	0x0e, 7	; 14
    104a:	fe cf       	rjmp	.-4      	; 0x1048 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    104c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    104e:	77 9b       	sbis	0x0e, 7	; 14
    1050:	fe cf       	rjmp	.-4      	; 0x104e <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1052:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1056:	98 60       	ori	r25, 0x08	; 8
    1058:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1060:	97 7f       	andi	r25, 0xF7	; 247
    1062:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1066:	85 ed       	ldi	r24, 0xD5	; 213
    1068:	8a 95       	dec	r24
    106a:	f1 f7       	brne	.-4      	; 0x1068 <lcd_int32+0x152>
    106c:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    106e:	31 11       	cpse	r19, r1
    1070:	e5 cf       	rjmp	.-54     	; 0x103c <lcd_int32+0x126>

}
    1072:	69 96       	adiw	r28, 0x19	; 25
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	7f 90       	pop	r7
    1098:	6f 90       	pop	r6
    109a:	5f 90       	pop	r5
    109c:	4f 90       	pop	r4
    109e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    10a0:	91 2c       	mov	r9, r1
    10a2:	9e 01       	movw	r18, r28
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	59 01       	movw	r10, r18
    10aa:	91 cf       	rjmp	.-222    	; 0xfce <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    10ac:	90 e3       	ldi	r25, 0x30	; 48
    10ae:	b4 cf       	rjmp	.-152    	; 0x1018 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    10b0:	f0 94       	com	r15
    10b2:	e0 94       	com	r14
    10b4:	d0 94       	com	r13
    10b6:	c0 94       	com	r12
    10b8:	c1 1c       	adc	r12, r1
    10ba:	d1 1c       	adc	r13, r1
    10bc:	e1 1c       	adc	r14, r1
    10be:	f1 1c       	adc	r15, r1
    10c0:	54 cf       	rjmp	.-344    	; 0xf6a <lcd_int32+0x54>

000010c2 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    10c2:	5f 92       	push	r5
    10c4:	6f 92       	push	r6
    10c6:	7f 92       	push	r7
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	61 97       	sbiw	r28, 0x11	; 17
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	5c 01       	movw	r10, r24
    10f2:	96 2e       	mov	r9, r22
    10f4:	54 2e       	mov	r5, r20
    10f6:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    10f8:	8b 2c       	mov	r8, r11
    10fa:	88 1c       	adc	r8, r8
    10fc:	88 24       	eor	r8, r8
    10fe:	88 1c       	adc	r8, r8
    1100:	78 2c       	mov	r7, r8
    1102:	9c 01       	movw	r18, r24
    1104:	97 fd       	sbrc	r25, 7
    1106:	9d c0       	rjmp	.+314    	; 0x1242 <__stack+0x143>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1108:	55 20       	and	r5, r5
    110a:	09 f4       	brne	.+2      	; 0x110e <__stack+0xf>
    110c:	8e c0       	rjmp	.+284    	; 0x122a <__stack+0x12b>
    110e:	8e 01       	movw	r16, r28
    1110:	0f 5f       	subi	r16, 0xFF	; 255
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	78 01       	movw	r14, r16
    1116:	cc 24       	eor	r12, r12
    1118:	ca 94       	dec	r12
    111a:	c5 0c       	add	r12, r5
    111c:	d1 2c       	mov	r13, r1
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	c8 1a       	sub	r12, r24
    1122:	d8 0a       	sbc	r13, r24
    1124:	c0 0e       	add	r12, r16
    1126:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1128:	6a e0       	ldi	r22, 0x0A	; 10
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	c9 01       	movw	r24, r18
    112e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodhi4>
    1132:	46 2f       	mov	r20, r22
    1134:	24 2f       	mov	r18, r20
    1136:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    1138:	80 5d       	subi	r24, 0xD0	; 208
    113a:	f7 01       	movw	r30, r14
    113c:	81 93       	st	Z+, r24
    113e:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    1140:	ec 15       	cp	r30, r12
    1142:	fd 05       	cpc	r31, r13
    1144:	89 f7       	brne	.-30     	; 0x1128 <__stack+0x29>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1146:	ff 24       	eor	r15, r15
    1148:	f3 94       	inc	r15
    114a:	f5 0c       	add	r15, r5
    114c:	f8 01       	movw	r30, r16
    114e:	e5 0d       	add	r30, r5
    1150:	f1 1d       	adc	r31, r1
    1152:	8e e2       	ldi	r24, 0x2E	; 46
    1154:	80 83       	st	Z, r24
    1156:	01 c0       	rjmp	.+2      	; 0x115a <__stack+0x5b>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1158:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    115a:	6a e0       	ldi	r22, 0x0A	; 10
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	c9 01       	movw	r24, r18
    1160:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodhi4>
    1164:	46 2f       	mov	r20, r22
    1166:	24 2f       	mov	r18, r20
    1168:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	9f 0d       	add	r25, r15
    116e:	f8 01       	movw	r30, r16
    1170:	ef 0d       	add	r30, r15
    1172:	f1 1d       	adc	r31, r1
    1174:	80 5d       	subi	r24, 0xD0	; 208
    1176:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	69 f7       	brne	.-38     	; 0x1158 <__stack+0x59>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    117e:	61 10       	cpse	r6, r1
    1180:	59 c0       	rjmp	.+178    	; 0x1234 <__stack+0x135>
    1182:	b7 fc       	sbrc	r11, 7
    1184:	63 c0       	rjmp	.+198    	; 0x124c <__stack+0x14d>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1186:	99 20       	and	r9, r9
    1188:	b1 f0       	breq	.+44     	; 0x11b6 <__stack+0xb7>
    118a:	68 2d       	mov	r22, r8
    118c:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    118e:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1190:	29 2f       	mov	r18, r25
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	49 2d       	mov	r20, r9
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	46 1b       	sub	r20, r22
    119a:	57 0b       	sbc	r21, r23
    119c:	24 17       	cp	r18, r20
    119e:	35 07       	cpc	r19, r21
    11a0:	54 f4       	brge	.+20     	; 0x11b6 <__stack+0xb7>
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	f8 01       	movw	r30, r16
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	80 83       	st	Z, r24
    11ac:	29 2f       	mov	r18, r25
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	24 17       	cp	r18, r20
    11b2:	35 07       	cpc	r19, r21
    11b4:	b4 f3       	brlt	.-20     	; 0x11a2 <__stack+0xa3>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    11b6:	77 20       	and	r7, r7
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <__stack+0xc7>
    11ba:	f8 01       	movw	r30, r16
    11bc:	e9 0f       	add	r30, r25
    11be:	f1 1d       	adc	r31, r1
    11c0:	8d e2       	ldi	r24, 0x2D	; 45
    11c2:	80 83       	st	Z, r24
    11c4:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11c6:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	f8 01       	movw	r30, r16
    11cc:	e9 0f       	add	r30, r25
    11ce:	f1 1d       	adc	r31, r1
    11d0:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11d2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11d4:	77 9b       	sbis	0x0e, 7	; 14
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <__stack+0xd5>
  SPDR = byte;                        //send payload
    11d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11da:	77 9b       	sbis	0x0e, 7	; 14
    11dc:	fe cf       	rjmp	.-4      	; 0x11da <__stack+0xdb>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e2:	88 60       	ori	r24, 0x08	; 8
    11e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11f2:	f5 ed       	ldi	r31, 0xD5	; 213
    11f4:	fa 95       	dec	r31
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <__stack+0xf5>
    11f8:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    11fa:	91 11       	cpse	r25, r1
    11fc:	e5 cf       	rjmp	.-54     	; 0x11c8 <__stack+0xc9>
}
    11fe:	61 96       	adiw	r28, 0x11	; 17
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	cf 90       	pop	r12
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	9f 90       	pop	r9
    1220:	8f 90       	pop	r8
    1222:	7f 90       	pop	r7
    1224:	6f 90       	pop	r6
    1226:	5f 90       	pop	r5
    1228:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    122a:	f1 2c       	mov	r15, r1
    122c:	8e 01       	movw	r16, r28
    122e:	0f 5f       	subi	r16, 0xFF	; 255
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	93 cf       	rjmp	.-218    	; 0x115a <__stack+0x5b>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1234:	99 20       	and	r9, r9
    1236:	09 f4       	brne	.+2      	; 0x123a <__stack+0x13b>
    1238:	be cf       	rjmp	.-132    	; 0x11b6 <__stack+0xb7>
    123a:	68 2d       	mov	r22, r8
    123c:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	a7 cf       	rjmp	.-178    	; 0x1190 <__stack+0x91>
    1242:	22 27       	eor	r18, r18
    1244:	33 27       	eor	r19, r19
    1246:	28 1b       	sub	r18, r24
    1248:	39 0b       	sbc	r19, r25
    124a:	5e cf       	rjmp	.-324    	; 0x1108 <__stack+0x9>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    124c:	f3 94       	inc	r15
    124e:	f3 94       	inc	r15
    1250:	f8 01       	movw	r30, r16
    1252:	e9 0f       	add	r30, r25
    1254:	f1 1d       	adc	r31, r1
    1256:	8d e2       	ldi	r24, 0x2D	; 45
    1258:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    125a:	99 20       	and	r9, r9
    125c:	59 f0       	breq	.+22     	; 0x1274 <__stack+0x175>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    125e:	2f 2d       	mov	r18, r15
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	49 2d       	mov	r20, r9
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	24 17       	cp	r18, r20
    1268:	35 07       	cpc	r19, r21
    126a:	24 f4       	brge	.+8      	; 0x1274 <__stack+0x175>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    126c:	9f 2d       	mov	r25, r15
                bSigned = 0;
    126e:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	97 cf       	rjmp	.-210    	; 0x11a2 <__stack+0xa3>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1274:	9f 2d       	mov	r25, r15
    1276:	a7 cf       	rjmp	.-178    	; 0x11c6 <__stack+0xc7>

00001278 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    1278:	80 ef       	ldi	r24, 0xF0	; 240
    127a:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    127c:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    127e:	85 b3       	in	r24, 0x15	; 21
    1280:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    1282:	8e e2       	ldi	r24, 0x2E	; 46
    1284:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    1288:	8d e2       	ldi	r24, 0x2D	; 45
    128a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    128e:	85 e1       	ldi	r24, 0x15	; 21
    1290:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1294:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    1298:	8d 30       	cpi	r24, 0x0D	; 13
    129a:	18 f0       	brcs	.+6      	; 0x12a2 <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    12a2:	0e 94 78 00 	call	0xf0	; 0xf0 <initialization>

//enable global interrupts
sei();
    12a6:	78 94       	sei

//initially set output compare register for TC2 to 0 (brightness control)
OCR2 = 0;
    12a8:	13 bc       	out	0x23, r1	; 35
//initially set output compare register for TC3 to 200 (volume control)
OCR3A = 200;
    12aa:	88 ec       	ldi	r24, 0xC8	; 200
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    12b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

//initialize LCD
lcd_init();
    12b6:	0e 94 c9 06 	call	0xd92	; 0xd92 <lcd_init>
set_LCD();
    12ba:	0e 94 14 04 	call	0x828	; 0x828 <set_LCD>
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    12be:	cf ef       	ldi	r28, 0xFF	; 255
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    12c0:	00 e2       	ldi	r16, 0x20	; 32
    12c2:	10 e4       	ldi	r17, 0x40	; 64
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    12c4:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    12c6:	36 9a       	sbi	0x06, 6	; 6
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    12c8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <input_flag>
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <main+0x5a>
    12d0:	60 c0       	rjmp	.+192    	; 0x1392 <main+0x11a>
	  	button_encoder_read();		//if so, read the encoders/buttons
	  	input_flag = FALSE;
  	}
	
	//update the clock counters
	clock_count();
    12d2:	0e 94 77 03 	call	0x6ee	; 0x6ee <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    12d6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <lcd_flag>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <main+0x68>
    12de:	64 c0       	rjmp	.+200    	; 0x13a8 <main+0x130>
		set_LCD();
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    12e0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <adjust_alarm>
    12e4:	81 11       	cpse	r24, r1
    12e6:	69 c0       	rjmp	.+210    	; 0x13ba <main+0x142>
		temp_min = min_count;
    12e8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <min_count>
    12ec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <temp_min>
		temp_hour = hour_count;
    12f0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    12f4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <temp_hour>
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
    12f8:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <min_count>
    12fc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    1300:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    1304:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1306:	00 00       	nop
    1308:	ab e7       	ldi	r26, 0x7B	; 123
    130a:	b1 e0       	ldi	r27, 0x01	; 1
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1314:	ed 91       	ld	r30, X+
    1316:	2f 5f       	subi	r18, 0xFF	; 255
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	e1 31       	cpi	r30, 0x11	; 17
    131c:	00 f5       	brcc	.+64     	; 0x135e <main+0xe6>
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	e0 50       	subi	r30, 0x00	; 0
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	40 81       	ld	r20, Z
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	91 05       	cpc	r25, r1
    132a:	e9 f0       	breq	.+58     	; 0x1366 <main+0xee>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	91 05       	cpc	r25, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <main+0xbc>
    1332:	4e c0       	rjmp	.+156    	; 0x13d0 <main+0x158>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1334:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1336:	58 2f       	mov	r21, r24
    1338:	52 95       	swap	r21
    133a:	50 7f       	andi	r21, 0xF0	; 240
    133c:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    133e:	4b bb       	out	0x1b, r20	; 27
    1340:	ef e3       	ldi	r30, 0x3F	; 63
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	31 97       	sbiw	r30, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <main+0xcc>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0xd2>
    134a:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    134c:	25 30       	cpi	r18, 0x05	; 5
    134e:	31 05       	cpc	r19, r1
    1350:	c1 f0       	breq	.+48     	; 0x1382 <main+0x10a>
    1352:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1354:	ed 91       	ld	r30, X+
    1356:	2f 5f       	subi	r18, 0xFF	; 255
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	e1 31       	cpi	r30, 0x11	; 17
    135c:	00 f3       	brcs	.-64     	; 0x131e <main+0xa6>
    135e:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	91 05       	cpc	r25, r1
    1364:	19 f7       	brne	.-58     	; 0x132c <main+0xb4>
    1366:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <pm_flag>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	09 f4       	brne	.+2      	; 0x1370 <main+0xf8>
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <main+0x176>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1370:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1372:	18 bb       	out	0x18, r17	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1374:	4b bb       	out	0x1b, r20	; 27
    1376:	8f e3       	ldi	r24, 0x3F	; 63
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <main+0x102>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <main+0x108>
    1380:	00 00       	nop
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    1382:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1384:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1386:	36 9a       	sbi	0x06, 6	; 6
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1388:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <input_flag>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	09 f0       	breq	.+2      	; 0x1392 <main+0x11a>
    1390:	a0 cf       	rjmp	.-192    	; 0x12d2 <main+0x5a>
	  	button_encoder_read();		//if so, read the encoders/buttons
    1392:	0e 94 29 02 	call	0x452	; 0x452 <button_encoder_read>
	  	input_flag = FALSE;
    1396:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <input_flag>
  	}
	
	//update the clock counters
	clock_count();
    139a:	0e 94 77 03 	call	0x6ee	; 0x6ee <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    139e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <lcd_flag>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <main+0x130>
    13a6:	9c cf       	rjmp	.-200    	; 0x12e0 <main+0x68>
		lcd_flag = 0;
    13a8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <lcd_flag>
		set_LCD();
    13ac:	0e 94 14 04 	call	0x828	; 0x828 <set_LCD>
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    13b0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <adjust_alarm>
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <main+0x142>
    13b8:	97 cf       	rjmp	.-210    	; 0x12e8 <main+0x70>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    13ba:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <alarm_time_min>
    13be:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <temp_min>
		temp_hour = alarm_time_hour;
    13c2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <alarm_time_hour>
    13c6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <temp_hour>
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
    13ca:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
    13ce:	9a cf       	rjmp	.-204    	; 0x1304 <main+0x8c>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    13d0:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <trigger_alarm>
    13d4:	51 30       	cpi	r21, 0x01	; 1
    13d6:	89 f0       	breq	.+34     	; 0x13fa <main+0x182>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    13d8:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    13da:	08 bb       	out	0x18, r16	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    13dc:	4b bb       	out	0x1b, r20	; 27
    13de:	ef e3       	ldi	r30, 0x3F	; 63
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	31 97       	sbiw	r30, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <main+0x16a>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <main+0x170>
    13e8:	00 00       	nop
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	b3 cf       	rjmp	.-154    	; 0x1354 <main+0xdc>
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    13ee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <hour24_flag>
    13f2:	81 11       	cpse	r24, r1
    13f4:	bd cf       	rjmp	.-134    	; 0x1370 <main+0xf8>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
    13f6:	4f 77       	andi	r20, 0x7F	; 127
    13f8:	bb cf       	rjmp	.-138    	; 0x1370 <main+0xf8>
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
    13fa:	4b 7f       	andi	r20, 0xFB	; 251
    13fc:	ed cf       	rjmp	.-38     	; 0x13d8 <main+0x160>

000013fe <__divmodhi4>:
    13fe:	97 fb       	bst	r25, 7
    1400:	07 2e       	mov	r0, r23
    1402:	16 f4       	brtc	.+4      	; 0x1408 <__divmodhi4+0xa>
    1404:	00 94       	com	r0
    1406:	07 d0       	rcall	.+14     	; 0x1416 <__divmodhi4_neg1>
    1408:	77 fd       	sbrc	r23, 7
    140a:	09 d0       	rcall	.+18     	; 0x141e <__divmodhi4_neg2>
    140c:	0e 94 32 0a 	call	0x1464	; 0x1464 <__udivmodhi4>
    1410:	07 fc       	sbrc	r0, 7
    1412:	05 d0       	rcall	.+10     	; 0x141e <__divmodhi4_neg2>
    1414:	3e f4       	brtc	.+14     	; 0x1424 <__divmodhi4_exit>

00001416 <__divmodhi4_neg1>:
    1416:	90 95       	com	r25
    1418:	81 95       	neg	r24
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	08 95       	ret

0000141e <__divmodhi4_neg2>:
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255

00001424 <__divmodhi4_exit>:
    1424:	08 95       	ret

00001426 <__divmodsi4>:
    1426:	05 2e       	mov	r0, r21
    1428:	97 fb       	bst	r25, 7
    142a:	1e f4       	brtc	.+6      	; 0x1432 <__divmodsi4+0xc>
    142c:	00 94       	com	r0
    142e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__negsi2>
    1432:	57 fd       	sbrc	r21, 7
    1434:	07 d0       	rcall	.+14     	; 0x1444 <__divmodsi4_neg2>
    1436:	0e 94 46 0a 	call	0x148c	; 0x148c <__udivmodsi4>
    143a:	07 fc       	sbrc	r0, 7
    143c:	03 d0       	rcall	.+6      	; 0x1444 <__divmodsi4_neg2>
    143e:	4e f4       	brtc	.+18     	; 0x1452 <__divmodsi4_exit>
    1440:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__negsi2>

00001444 <__divmodsi4_neg2>:
    1444:	50 95       	com	r21
    1446:	40 95       	com	r20
    1448:	30 95       	com	r19
    144a:	21 95       	neg	r18
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	4f 4f       	sbci	r20, 0xFF	; 255
    1450:	5f 4f       	sbci	r21, 0xFF	; 255

00001452 <__divmodsi4_exit>:
    1452:	08 95       	ret

00001454 <__negsi2>:
    1454:	90 95       	com	r25
    1456:	80 95       	com	r24
    1458:	70 95       	com	r23
    145a:	61 95       	neg	r22
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	8f 4f       	sbci	r24, 0xFF	; 255
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	08 95       	ret

00001464 <__udivmodhi4>:
    1464:	aa 1b       	sub	r26, r26
    1466:	bb 1b       	sub	r27, r27
    1468:	51 e1       	ldi	r21, 0x11	; 17
    146a:	07 c0       	rjmp	.+14     	; 0x147a <__udivmodhi4_ep>

0000146c <__udivmodhi4_loop>:
    146c:	aa 1f       	adc	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	a6 17       	cp	r26, r22
    1472:	b7 07       	cpc	r27, r23
    1474:	10 f0       	brcs	.+4      	; 0x147a <__udivmodhi4_ep>
    1476:	a6 1b       	sub	r26, r22
    1478:	b7 0b       	sbc	r27, r23

0000147a <__udivmodhi4_ep>:
    147a:	88 1f       	adc	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	5a 95       	dec	r21
    1480:	a9 f7       	brne	.-22     	; 0x146c <__udivmodhi4_loop>
    1482:	80 95       	com	r24
    1484:	90 95       	com	r25
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	08 95       	ret

0000148c <__udivmodsi4>:
    148c:	a1 e2       	ldi	r26, 0x21	; 33
    148e:	1a 2e       	mov	r1, r26
    1490:	aa 1b       	sub	r26, r26
    1492:	bb 1b       	sub	r27, r27
    1494:	fd 01       	movw	r30, r26
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <__udivmodsi4_ep>

00001498 <__udivmodsi4_loop>:
    1498:	aa 1f       	adc	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	ee 1f       	adc	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	a2 17       	cp	r26, r18
    14a2:	b3 07       	cpc	r27, r19
    14a4:	e4 07       	cpc	r30, r20
    14a6:	f5 07       	cpc	r31, r21
    14a8:	20 f0       	brcs	.+8      	; 0x14b2 <__udivmodsi4_ep>
    14aa:	a2 1b       	sub	r26, r18
    14ac:	b3 0b       	sbc	r27, r19
    14ae:	e4 0b       	sbc	r30, r20
    14b0:	f5 0b       	sbc	r31, r21

000014b2 <__udivmodsi4_ep>:
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	88 1f       	adc	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	1a 94       	dec	r1
    14bc:	69 f7       	brne	.-38     	; 0x1498 <__udivmodsi4_loop>
    14be:	60 95       	com	r22
    14c0:	70 95       	com	r23
    14c2:	80 95       	com	r24
    14c4:	90 95       	com	r25
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	bd 01       	movw	r22, r26
    14cc:	cf 01       	movw	r24, r30
    14ce:	08 95       	ret

000014d0 <_exit>:
    14d0:	f8 94       	cli

000014d2 <__stop_program>:
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <__stop_program>
