
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000143a  000014ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000143a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800144  00800144  00001512  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002236  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce4  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001152  00000000  00000000  000044e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00005634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072a  00000000  00000000  0000594c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a16  00000000  00000000  00006076  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e3       	ldi	r30, 0x3A	; 58
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 3a       	cpi	r26, 0xAF	; 175
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <main>
      c6:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
      ce:	8d e0       	ldi	r24, 0x0D	; 13
      d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
      d4:	80 e2       	ldi	r24, 0x20	; 32
      d6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
      da:	83 e1       	ldi	r24, 0x13	; 19
      dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
      e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
      e4:	8d 30       	cpi	r24, 0x0D	; 13
      e6:	18 f0       	brcs	.+6      	; 0xee <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pm_flag>
      ee:	08 95       	ret

000000f0 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
      f0:	87 b3       	in	r24, 0x17	; 23
      f2:	87 60       	ori	r24, 0x07	; 7
      f4:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
      fa:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
      fc:	80 e5       	ldi	r24, 0x50	; 80
      fe:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     104:	80 b7       	in	r24, 0x30	; 48
     106:	88 60       	ori	r24, 0x08	; 8
     108:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     10a:	87 b7       	in	r24, 0x37	; 55
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     110:	83 b7       	in	r24, 0x33	; 51
     112:	81 60       	ori	r24, 0x01	; 1
     114:	83 bf       	out	0x33, r24	; 51

	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (0 << CS20) | (1 << CS21) | (0 << CS22);
     116:	85 b5       	in	r24, 0x25	; 37
     118:	8a 66       	ori	r24, 0x6A	; 106
     11a:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;
     11c:	80 e4       	ldi	r24, 0x40	; 64
     11e:	9c e9       	ldi	r25, 0x9C	; 156
     120:	9d bd       	out	0x2d, r25	; 45
     122:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     124:	87 b7       	in	r24, 0x37	; 55
     126:	84 60       	ori	r24, 0x04	; 4
     128:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     12a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     12c:	8e b5       	in	r24, 0x2e	; 46
     12e:	81 60       	ori	r24, 0x01	; 1
     130:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     132:	eb e8       	ldi	r30, 0x8B	; 139
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	81 68       	ori	r24, 0x81	; 129
     13a:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     13c:	ea e8       	ldi	r30, 0x8A	; 138
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	8a 60       	ori	r24, 0x0A	; 10
     144:	80 83       	st	Z, r24
     146:	08 95       	ret

00000148 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     148:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     14a:	e8 2f       	mov	r30, r24
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	99 b3       	in	r25, 0x19	; 25
     150:	ee 0f       	add	r30, r30
     152:	ff 1f       	adc	r31, r31
     154:	e4 5a       	subi	r30, 0xA4	; 164
     156:	fe 4f       	sbci	r31, 0xFE	; 254
     158:	20 81       	ld	r18, Z
     15a:	31 81       	ldd	r19, Z+1	; 0x01
     15c:	22 0f       	add	r18, r18
     15e:	33 1f       	adc	r19, r19
     160:	30 6e       	ori	r19, 0xE0	; 224
     162:	89 2f       	mov	r24, r25
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <chk_buttons+0x24>
     168:	95 95       	asr	r25
     16a:	87 95       	ror	r24
     16c:	4a 95       	dec	r20
     16e:	e2 f7       	brpl	.-8      	; 0x168 <chk_buttons+0x20>
     170:	81 70       	andi	r24, 0x01	; 1
     172:	99 27       	eor	r25, r25
     174:	41 e0       	ldi	r20, 0x01	; 1
     176:	84 27       	eor	r24, r20
     178:	28 2b       	or	r18, r24
     17a:	39 2b       	or	r19, r25
     17c:	31 83       	std	Z+1, r19	; 0x01
     17e:	20 83       	st	Z, r18
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	21 15       	cp	r18, r1
     184:	30 4f       	sbci	r19, 0xF0	; 240
     186:	09 f0       	breq	.+2      	; 0x18a <chk_buttons+0x42>
     188:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     18a:	08 95       	ret

0000018c <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
     18c:	9d ec       	ldi	r25, 0xCD	; 205
     18e:	69 9f       	mul	r22, r25
     190:	21 2d       	mov	r18, r1
     192:	11 24       	eor	r1, r1
     194:	32 2f       	mov	r19, r18
     196:	36 95       	lsr	r19
     198:	36 95       	lsr	r19
     19a:	36 95       	lsr	r19
     19c:	4a e0       	ldi	r20, 0x0A	; 10
     19e:	34 9f       	mul	r19, r20
     1a0:	60 19       	sub	r22, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	36 2f       	mov	r19, r22
	tens = minute / 10;
     1a6:	26 95       	lsr	r18
     1a8:	26 95       	lsr	r18
     1aa:	26 95       	lsr	r18

	hundreds = hour % 10;
     1ac:	89 9f       	mul	r24, r25
     1ae:	91 2d       	mov	r25, r1
     1b0:	11 24       	eor	r1, r1
     1b2:	96 95       	lsr	r25
     1b4:	96 95       	lsr	r25
     1b6:	96 95       	lsr	r25
     1b8:	48 2f       	mov	r20, r24
     1ba:	5a e0       	ldi	r21, 0x0A	; 10
     1bc:	95 9f       	mul	r25, r21
     1be:	40 19       	sub	r20, r0
     1c0:	11 24       	eor	r1, r1
	if(hour > 9)
     1c2:	8a 30       	cpi	r24, 0x0A	; 10
     1c4:	30 f4       	brcc	.+12     	; 0x1d2 <segsum+0x46>
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <hour24_flag>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a9 f0       	breq	.+42     	; 0x1fa <segsum+0x6e>
     1d0:	91 95       	neg	r25
		thousands = 0;

	if(sec_count % 2 == 0)
     1d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count>
     1d6:	80 ff       	sbrs	r24, 0
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     1e0:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <segment_data>
	segment_data[1] = tens;
     1e4:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <segment_data+0x1>
	
	segment_data[3] = hundreds;
     1e8:	40 93 7d 01 	sts	0x017D, r20	; 0x80017d <segment_data+0x3>
	segment_data[4] = thousands;
     1ec:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <segment_data+0x4>
     1f0:	08 95       	ret
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
		thousands = 0;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <segment_data+0x2>
     1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <segsum+0x54>
	tens = minute / 10;

	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	e9 cf       	rjmp	.-46     	; 0x1d0 <segsum+0x44>

000001fe <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     1fe:	81 31       	cpi	r24, 0x11	; 17
     200:	30 f4       	brcc	.+12     	; 0x20e <seven_seg_encoding+0x10>
     202:	e8 2f       	mov	r30, r24
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	e0 50       	subi	r30, 0x00	; 0
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	80 81       	ld	r24, Z
     20c:	08 95       	ret
     20e:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     210:	08 95       	ret

00000212 <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
     212:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     216:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     21a:	28 2f       	mov	r18, r24
     21c:	23 70       	andi	r18, 0x03	; 3
     21e:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     222:	8c 70       	andi	r24, 0x0C	; 12
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	95 95       	asr	r25
     228:	87 95       	ror	r24
     22a:	95 95       	asr	r25
     22c:	87 95       	ror	r24
     22e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     232:	83 30       	cpi	r24, 0x03	; 3
     234:	09 f4       	brne	.+2      	; 0x238 <encoder_process+0x26>
     236:	3f c0       	rjmp	.+126    	; 0x2b6 <encoder_process+0xa4>
     238:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_flag>
     23c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     240:	23 30       	cpi	r18, 0x03	; 3
     242:	d9 f0       	breq	.+54     	; 0x27a <encoder_process+0x68>
				OCR3A -= 10;

		}
	}

	if(adjust_flag == 0x01){
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	81 f0       	breq	.+32     	; 0x268 <encoder_process+0x56>
		hour_count = temp_hour;
		min_count = temp_min;
	}

	if(adjust_alarm == 0x01){
     248:	91 30       	cpi	r25, 0x01	; 1
     24a:	09 f0       	breq	.+2      	; 0x24e <encoder_process+0x3c>
     24c:	08 95       	ret
		alarm_time_min = temp_min;
     24e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     252:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <alarm_time_min>
		alarm_time_hour = temp_hour;
     256:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     25a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <alarm_time_hour>
		temp_pm_flag = pm_flag;
     25e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pm_flag>
     262:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     266:	08 95       	ret

		}
	}

	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     268:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     26c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
		min_count = temp_min;
     270:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     274:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
     278:	e7 cf       	rjmp	.-50     	; 0x248 <encoder_process+0x36>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     27a:	31 30       	cpi	r19, 0x01	; 1
     27c:	09 f4       	brne	.+2      	; 0x280 <encoder_process+0x6e>
     27e:	59 c0       	rjmp	.+178    	; 0x332 <encoder_process+0x120>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     280:	32 30       	cpi	r19, 0x02	; 2
     282:	01 f7       	brne	.-64     	; 0x244 <encoder_process+0x32>
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	09 f4       	brne	.+2      	; 0x28a <encoder_process+0x78>
     288:	ad c0       	rjmp	.+346    	; 0x3e4 <encoder_process+0x1d2>
     28a:	91 30       	cpi	r25, 0x01	; 1
     28c:	09 f4       	brne	.+2      	; 0x290 <encoder_process+0x7e>
     28e:	85 c0       	rjmp	.+266    	; 0x39a <encoder_process+0x188>
				temp_hour = 23;
			else
				temp_hour--;
		}
		else{
			if((OCR3A - 10) <= 0)
     290:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     294:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     298:	2a 30       	cpi	r18, 0x0A	; 10
     29a:	31 05       	cpc	r19, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <encoder_process+0x8e>
     29e:	b5 c0       	rjmp	.+362    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				OCR3A = 0;
			else
				OCR3A -= 10;
     2a0:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2a4:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2a8:	2a 50       	subi	r18, 0x0A	; 10
     2aa:	31 09       	sbc	r19, r1
     2ac:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2b0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2b4:	c7 cf       	rjmp	.-114    	; 0x244 <encoder_process+0x32>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2b6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     2ba:	41 30       	cpi	r20, 0x01	; 1
     2bc:	d9 f0       	breq	.+54     	; 0x2f4 <encoder_process+0xe2>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     2be:	42 30       	cpi	r20, 0x02	; 2
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <encoder_process+0xb2>
     2c2:	bc cf       	rjmp	.-136    	; 0x23c <encoder_process+0x2a>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2c4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     2c8:	81 11       	cpse	r24, r1
     2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <encoder_process+0xd0>
     2cc:	91 11       	cpse	r25, r1
     2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <encoder_process+0xd0>
			if((OCR2 - 10) <= 0)
     2d0:	83 b5       	in	r24, 0x23	; 35
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0b 97       	sbiw	r24, 0x0b	; 11
     2d6:	0c f0       	brlt	.+2      	; 0x2da <encoder_process+0xc8>
     2d8:	a3 c0       	rjmp	.+326    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				OCR2 = 0;
     2da:	13 bc       	out	0x23, r1	; 35
     2dc:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <encoder_left>
     2e0:	ab cf       	rjmp	.-170    	; 0x238 <encoder_process+0x26>
			else
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){
     2e2:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <temp_min>
     2e6:	44 23       	and	r20, r20
     2e8:	09 f4       	brne	.+2      	; 0x2ec <encoder_process+0xda>
     2ea:	67 c0       	rjmp	.+206    	; 0x3ba <encoder_process+0x1a8>
				temp_min = 59;
			}
			else
				temp_min--;
     2ec:	41 50       	subi	r20, 0x01	; 1
     2ee:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     2f2:	a6 cf       	rjmp	.-180    	; 0x240 <encoder_process+0x2e>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2f4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     2f8:	81 11       	cpse	r24, r1
     2fa:	11 c0       	rjmp	.+34     	; 0x31e <encoder_process+0x10c>
     2fc:	91 11       	cpse	r25, r1
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <encoder_process+0x10c>
			if((OCR2 + 10) >= 254)
     300:	83 b5       	in	r24, 0x23	; 35
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	84 3f       	cpi	r24, 0xF4	; 244
     306:	91 05       	cpc	r25, r1
     308:	0c f4       	brge	.+2      	; 0x30c <encoder_process+0xfa>
     30a:	84 c0       	rjmp	.+264    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				OCR2 = 254;
     30c:	8e ef       	ldi	r24, 0xFE	; 254
     30e:	83 bd       	out	0x23, r24	; 35
     310:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <encoder_left>
     314:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_flag>
     318:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     31c:	91 cf       	rjmp	.-222    	; 0x240 <encoder_process+0x2e>
				OCR2 += 10;

		}
		else
		{
			if(temp_min + 1 > 59)
     31e:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <temp_min>
     322:	64 2f       	mov	r22, r20
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	6b 33       	cpi	r22, 0x3B	; 59
     328:	71 05       	cpc	r23, r1
     32a:	cc f0       	brlt	.+50     	; 0x35e <encoder_process+0x14c>
				temp_min = 0;
     32c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <temp_min>
     330:	87 cf       	rjmp	.-242    	; 0x240 <encoder_process+0x2e>
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	09 f4       	brne	.+2      	; 0x338 <encoder_process+0x126>
     336:	45 c0       	rjmp	.+138    	; 0x3c2 <encoder_process+0x1b0>
     338:	91 30       	cpi	r25, 0x01	; 1
     33a:	01 f1       	breq	.+64     	; 0x37c <encoder_process+0x16a>
			else
				temp_hour++;

		}		
		else{
			if((OCR3A + 10) > 255)
     33c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     340:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     344:	26 5f       	subi	r18, 0xF6	; 246
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	2f 3f       	cpi	r18, 0xFF	; 255
     34a:	31 05       	cpc	r19, r1
     34c:	61 f0       	breq	.+24     	; 0x366 <encoder_process+0x154>
     34e:	58 f0       	brcs	.+22     	; 0x366 <encoder_process+0x154>
				OCR3A = 255;
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     358:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     35c:	73 cf       	rjmp	.-282    	; 0x244 <encoder_process+0x32>
		else
		{
			if(temp_min + 1 > 59)
				temp_min = 0;
			else
				temp_min++;
     35e:	4f 5f       	subi	r20, 0xFF	; 255
     360:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     364:	6d cf       	rjmp	.-294    	; 0x240 <encoder_process+0x2e>
		}		
		else{
			if((OCR3A + 10) > 255)
				OCR3A = 255;
			else
				OCR3A += 10;
     366:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     36a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     36e:	26 5f       	subi	r18, 0xF6	; 246
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     376:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     37a:	64 cf       	rjmp	.-312    	; 0x244 <encoder_process+0x32>
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     37c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <hour24_flag>
     380:	21 11       	cpse	r18, r1
     382:	23 c0       	rjmp	.+70     	; 0x3ca <encoder_process+0x1b8>
			if(temp_hour + 1 > 12)
     384:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     388:	42 2f       	mov	r20, r18
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	4c 30       	cpi	r20, 0x0C	; 12
     38e:	51 05       	cpc	r21, r1
     390:	c4 f1       	brlt	.+112    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				temp_hour = 1;
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     398:	55 cf       	rjmp	.-342    	; 0x244 <encoder_process+0x32>
		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     39a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <hour24_flag>
     39e:	21 11       	cpse	r18, r1
     3a0:	25 c0       	rjmp	.+74     	; 0x3ec <encoder_process+0x1da>
			if(temp_hour - 1 < 1){
     3a2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3a6:	42 2f       	mov	r20, r18
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	42 30       	cpi	r20, 0x02	; 2
     3ac:	51 05       	cpc	r21, r1
     3ae:	0c f4       	brge	.+2      	; 0x3b2 <encoder_process+0x1a0>
     3b0:	41 c0       	rjmp	.+130    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)
				temp_hour = 23;
			else
				temp_hour--;
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     3b8:	45 cf       	rjmp	.-374    	; 0x244 <encoder_process+0x32>
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){
				temp_min = 59;
     3ba:	4b e3       	ldi	r20, 0x3B	; 59
     3bc:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <temp_min>
     3c0:	3f cf       	rjmp	.-386    	; 0x240 <encoder_process+0x2e>
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3c2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <hour24_flag>
     3c6:	22 23       	and	r18, r18
     3c8:	e9 f2       	breq	.-70     	; 0x384 <encoder_process+0x172>
			if(temp_hour + 1 > 12)
				temp_hour = 1;
			else
				temp_hour++;
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     3ca:	21 30       	cpi	r18, 0x01	; 1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <encoder_process+0x1be>
     3ce:	b6 cf       	rjmp	.-148    	; 0x33c <encoder_process+0x12a>
			if(temp_hour + 1 > 23)
     3d0:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3d4:	42 2f       	mov	r20, r18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	47 31       	cpi	r20, 0x17	; 23
     3da:	51 05       	cpc	r21, r1
     3dc:	94 f0       	brlt	.+36     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				temp_hour = 0;
     3de:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <temp_hour>
     3e2:	30 cf       	rjmp	.-416    	; 0x244 <encoder_process+0x32>
		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3e4:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <hour24_flag>
     3e8:	22 23       	and	r18, r18
     3ea:	d9 f2       	breq	.-74     	; 0x3a2 <encoder_process+0x190>
				temp_hour = 12;
			}
			else
				temp_hour--;
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     3ec:	21 30       	cpi	r18, 0x01	; 1
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <encoder_process+0x1e0>
     3f0:	4f cf       	rjmp	.-354    	; 0x290 <encoder_process+0x7e>
			if(temp_hour - 1 < 0)
     3f2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <temp_hour>
     3f6:	21 11       	cpse	r18, r1
     3f8:	dc cf       	rjmp	.-72     	; 0x3b2 <encoder_process+0x1a0>
				temp_hour = 23;
     3fa:	27 e1       	ldi	r18, 0x17	; 23
     3fc:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     400:	21 cf       	rjmp	.-446    	; 0x244 <encoder_process+0x32>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)
				temp_hour = 0;
			else
				temp_hour++;
     402:	2f 5f       	subi	r18, 0xFF	; 255
     404:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     408:	1d cf       	rjmp	.-454    	; 0x244 <encoder_process+0x32>
			else
				temp_hour--;
		}
		else{
			if((OCR3A - 10) <= 0)
				OCR3A = 0;
     40a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     40e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     412:	18 cf       	rjmp	.-464    	; 0x244 <encoder_process+0x32>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
			if((OCR2 + 10) >= 254)
				OCR2 = 254;
			else	
				OCR2 += 10;
     414:	83 b5       	in	r24, 0x23	; 35
     416:	86 5f       	subi	r24, 0xF6	; 246
     418:	83 bd       	out	0x23, r24	; 35
     41a:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <encoder_left>
     41e:	0c cf       	rjmp	.-488    	; 0x238 <encoder_process+0x26>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
			if((OCR2 - 10) <= 0)
				OCR2 = 0;
			else
				OCR2 -= 10;
     420:	83 b5       	in	r24, 0x23	; 35
     422:	8a 50       	subi	r24, 0x0A	; 10
     424:	83 bd       	out	0x23, r24	; 35
     426:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <encoder_left>
     42a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_flag>
     42e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     432:	06 cf       	rjmp	.-500    	; 0x240 <encoder_process+0x2e>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){
				temp_hour = 12;
     434:	2c e0       	ldi	r18, 0x0C	; 12
     436:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <temp_hour>
     43a:	04 cf       	rjmp	.-504    	; 0x244 <encoder_process+0x32>

0000043c <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     442:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     448:	80 e7       	ldi	r24, 0x70	; 112
     44a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44c:	1a e1       	ldi	r17, 0x1A	; 26
     44e:	1a 95       	dec	r17
     450:	f1 f7       	brne	.-4      	; 0x44e <button_encoder_read+0x12>
     452:	00 c0       	rjmp	.+0      	; 0x454 <button_encoder_read+0x18>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     454:	99 b3       	in	r25, 0x19	; 25
     456:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <state.1820+0xe>
     45a:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <state.1820+0xf>
     45e:	cc 0f       	add	r28, r28
     460:	dd 1f       	adc	r29, r29
     462:	d0 6e       	ori	r29, 0xE0	; 224
     464:	89 2f       	mov	r24, r25
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	88 0f       	add	r24, r24
     46a:	89 2f       	mov	r24, r25
     46c:	88 1f       	adc	r24, r24
     46e:	99 0b       	sbc	r25, r25
     470:	11 e0       	ldi	r17, 0x01	; 1
     472:	81 27       	eor	r24, r17
     474:	8c 2b       	or	r24, r28
     476:	9d 2b       	or	r25, r29
     478:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <state.1820+0xf>
     47c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <state.1820+0xe>
	if(state[button] == 0xF000) return 1;
     480:	81 15       	cp	r24, r1
     482:	90 4f       	sbci	r25, 0xF0	; 240
     484:	31 f4       	brne	.+12     	; 0x492 <button_encoder_read+0x56>
	//asm volatile ("nop");

	_delay_us(5);

	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     486:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <adjust_flag>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	89 27       	eor	r24, r25
     48e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     492:	89 b3       	in	r24, 0x19	; 25
     494:	86 fb       	bst	r24, 6
     496:	aa 27       	eor	r26, r26
     498:	a0 f9       	bld	r26, 0
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	11 e0       	ldi	r17, 0x01	; 1
     49e:	a1 27       	eor	r26, r17
     4a0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <state.1820+0xc>
     4a4:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <state.1820+0xd>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	90 6e       	ori	r25, 0xE0	; 224
     4ae:	8a 2b       	or	r24, r26
     4b0:	9b 2b       	or	r25, r27
     4b2:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <state.1820+0xd>
     4b6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <state.1820+0xc>
	if(state[button] == 0xF000) return 1;
     4ba:	81 15       	cp	r24, r1
     4bc:	90 4f       	sbci	r25, 0xF0	; 240
     4be:	09 f4       	brne	.+2      	; 0x4c2 <button_encoder_read+0x86>
     4c0:	b4 c0       	rjmp	.+360    	; 0x62a <button_encoder_read+0x1ee>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4c2:	89 b3       	in	r24, 0x19	; 25
     4c4:	85 fb       	bst	r24, 5
     4c6:	66 27       	eor	r22, r22
     4c8:	60 f9       	bld	r22, 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	cb 01       	movw	r24, r22
     4ce:	c1 e0       	ldi	r28, 0x01	; 1
     4d0:	8c 27       	eor	r24, r28
     4d2:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <state.1820+0xa>
     4d6:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <state.1820+0xb>
     4da:	66 0f       	add	r22, r22
     4dc:	77 1f       	adc	r23, r23
     4de:	70 6e       	ori	r23, 0xE0	; 224
     4e0:	68 2b       	or	r22, r24
     4e2:	79 2b       	or	r23, r25
     4e4:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <state.1820+0xb>
     4e8:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <state.1820+0xa>
	if(state[button] == 0xF000) return 1;
     4ec:	61 15       	cp	r22, r1
     4ee:	70 4f       	sbci	r23, 0xF0	; 240
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <button_encoder_read+0xb8>
     4f2:	8c c0       	rjmp	.+280    	; 0x60c <button_encoder_read+0x1d0>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4f4:	89 b3       	in	r24, 0x19	; 25
     4f6:	84 fb       	bst	r24, 4
     4f8:	ee 27       	eor	r30, r30
     4fa:	e0 f9       	bld	r30, 0
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	e6 27       	eor	r30, r22
     502:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <state.1820+0x8>
     506:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <state.1820+0x9>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	90 6e       	ori	r25, 0xE0	; 224
     510:	8e 2b       	or	r24, r30
     512:	9f 2b       	or	r25, r31
     514:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <state.1820+0x9>
     518:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <state.1820+0x8>
	if(state[button] == 0xF000) return 1;
     51c:	81 15       	cp	r24, r1
     51e:	90 4f       	sbci	r25, 0xF0	; 240
     520:	31 f4       	brne	.+12     	; 0x52e <button_encoder_read+0xf2>

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
		pm_flag ^= 0x01;
	
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     522:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	89 27       	eor	r24, r25
     52a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     52e:	89 b3       	in	r24, 0x19	; 25
     530:	81 fb       	bst	r24, 1
     532:	22 27       	eor	r18, r18
     534:	20 f9       	bld	r18, 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	c9 01       	movw	r24, r18
     53a:	c1 e0       	ldi	r28, 0x01	; 1
     53c:	8c 27       	eor	r24, r28
     53e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <state.1820+0x2>
     542:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <state.1820+0x3>
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	30 6e       	ori	r19, 0xE0	; 224
     54c:	28 2b       	or	r18, r24
     54e:	39 2b       	or	r19, r25
     550:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <state.1820+0x3>
     554:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <state.1820+0x2>
	if(state[button] == 0xF000) return 1;
     558:	21 15       	cp	r18, r1
     55a:	30 4f       	sbci	r19, 0xF0	; 240
     55c:	09 f4       	brne	.+2      	; 0x560 <button_encoder_read+0x124>
     55e:	48 c0       	rjmp	.+144    	; 0x5f0 <button_encoder_read+0x1b4>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     560:	29 b3       	in	r18, 0x19	; 25
     562:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state.1820>
     566:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <state.1820+0x1>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	90 6e       	ori	r25, 0xE0	; 224
     570:	20 95       	com	r18
     572:	42 2f       	mov	r20, r18
     574:	41 70       	andi	r20, 0x01	; 1
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	84 2b       	or	r24, r20
     57a:	95 2b       	or	r25, r21
     57c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <state.1820+0x1>
     580:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state.1820>
	if(state[button] == 0xF000) return 1;
     584:	81 15       	cp	r24, r1
     586:	90 4f       	sbci	r25, 0xF0	; 240
     588:	51 f1       	breq	.+84     	; 0x5de <button_encoder_read+0x1a2>
		lcd_flag = 0x01;
	
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     58a:	80 e6       	ldi	r24, 0x60	; 96
     58c:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     58e:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     590:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     592:	80 e4       	ldi	r24, 0x40	; 64
     594:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     596:	00 00       	nop

	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5);
     598:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <adjust_flag>
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	24 9f       	mul	r18, r20
     5a0:	90 01       	movw	r18, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <hour24_flag>
     5a8:	60 e4       	ldi	r22, 0x40	; 64
     5aa:	96 9f       	mul	r25, r22
     5ac:	c0 01       	movw	r24, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	28 2b       	or	r18, r24
     5b2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     5b6:	a0 e2       	ldi	r26, 0x20	; 32
     5b8:	9a 9f       	mul	r25, r26
     5ba:	c0 01       	movw	r24, r0
     5bc:	11 24       	eor	r1, r1
     5be:	82 2b       	or	r24, r18
     5c0:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     5c2:	77 9b       	sbis	0x0e, 7	; 14
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <button_encoder_read+0x186>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     5c6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     5c8:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     5ca:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     5cc:	0e 94 09 01 	call	0x212	; 0x212 <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     5d4:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret
		ten_sec_start = 0x01;
		ten_sec_count = 0;
		lcd_flag = 0x01;
	}

	if(chk_buttons(0) && trigger_alarm == 0x01){
     5de:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	91 f6       	brne	.-92     	; 0x58a <button_encoder_read+0x14e>
		trigger_alarm = 0;
     5e6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		lcd_flag = 0x01;
     5ea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <lcd_flag>
     5ee:	cd cf       	rjmp	.-102    	; 0x58a <button_encoder_read+0x14e>
		pm_flag ^= 0x01;
	
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;

	if(chk_buttons(1) && trigger_alarm == 0x01){
     5f0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	09 f0       	breq	.+2      	; 0x5fa <button_encoder_read+0x1be>
     5f8:	b3 cf       	rjmp	.-154    	; 0x560 <button_encoder_read+0x124>
		trigger_alarm = 0;
     5fa:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		ten_sec_start = 0x01;
     5fe:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ten_sec_start>
		ten_sec_count = 0;
     602:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		lcd_flag = 0x01;
     606:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <lcd_flag>
     60a:	aa cf       	rjmp	.-172    	; 0x560 <button_encoder_read+0x124>
			if(hour_count != 12)
				hour_count -= 12;
		}
	}

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     60c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_flag>
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	09 f0       	breq	.+2      	; 0x616 <button_encoder_read+0x1da>
     614:	6f cf       	rjmp	.-290    	; 0x4f4 <button_encoder_read+0xb8>
     616:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <hour24_flag>
     61a:	91 11       	cpse	r25, r1
     61c:	6b cf       	rjmp	.-298    	; 0x4f4 <button_encoder_read+0xb8>
		pm_flag ^= 0x01;
     61e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <pm_flag>
     622:	89 27       	eor	r24, r25
     624:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pm_flag>
     628:	65 cf       	rjmp	.-310    	; 0x4f4 <button_encoder_read+0xb8>

	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     62a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <hour24_flag>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	89 27       	eor	r24, r25
     632:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     636:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <pm_flag>
     63a:	91 30       	cpi	r25, 0x01	; 1
     63c:	a9 f0       	breq	.+42     	; 0x668 <button_encoder_read+0x22c>
			pm_flag = 0;
			if(hour_count != 12)
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     63e:	81 11       	cpse	r24, r1
     640:	40 cf       	rjmp	.-384    	; 0x4c2 <button_encoder_read+0x86>
     642:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     646:	8c 30       	cpi	r24, 0x0C	; 12
     648:	08 f4       	brcc	.+2      	; 0x64c <button_encoder_read+0x210>
     64a:	3b cf       	rjmp	.-394    	; 0x4c2 <button_encoder_read+0x86>
			pm_flag = 0x01;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pm_flag>
			if(hour_count != 12)
     652:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     656:	8c 30       	cpi	r24, 0x0C	; 12
     658:	09 f4       	brne	.+2      	; 0x65c <button_encoder_read+0x220>
     65a:	33 cf       	rjmp	.-410    	; 0x4c2 <button_encoder_read+0x86>
				hour_count -= 12;
     65c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     660:	8c 50       	subi	r24, 0x0C	; 12
     662:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
     666:	2d cf       	rjmp	.-422    	; 0x4c2 <button_encoder_read+0x86>
	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	49 f7       	brne	.-46     	; 0x63e <button_encoder_read+0x202>
			pm_flag = 0;
     66c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <pm_flag>
			if(hour_count != 12)
     670:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     674:	8c 30       	cpi	r24, 0x0C	; 12
     676:	09 f4       	brne	.+2      	; 0x67a <button_encoder_read+0x23e>
     678:	24 cf       	rjmp	.-440    	; 0x4c2 <button_encoder_read+0x86>
				hour_count += 12;
     67a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
     67e:	84 5f       	subi	r24, 0xF4	; 244
     680:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>
     684:	1e cf       	rjmp	.-452    	; 0x4c2 <button_encoder_read+0x86>

00000686 <clock_count>:
 * also looks into the hour24_flag to bound the hour count as necessary depending on the time
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
     686:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <isr_count>
     68a:	80 38       	cpi	r24, 0x80	; 128
     68c:	09 f4       	brne	.+2      	; 0x690 <clock_count+0xa>
     68e:	7b c0       	rjmp	.+246    	; 0x786 <clock_count+0x100>
     690:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
	  	sec_count++;
		isr_count = 0;
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
  	if(sec_count == 60){
     694:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sec_count>
     698:	9c 33       	cpi	r25, 0x3C	; 60
     69a:	09 f4       	brne	.+2      	; 0x69e <clock_count+0x18>
     69c:	6c c0       	rjmp	.+216    	; 0x776 <clock_count+0xf0>
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
     69e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <min_count>
     6a2:	9c 33       	cpi	r25, 0x3C	; 60
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <clock_count+0x22>
     6a6:	5b c0       	rjmp	.+182    	; 0x75e <clock_count+0xd8>
			pm_flag ^= 0x01;
		}

		min_count = 0;
  	}
	if(hour_count >= 13 && hour24_flag == 0){
     6a8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     6ac:	9d 30       	cpi	r25, 0x0D	; 13
     6ae:	b0 f0       	brcs	.+44     	; 0x6dc <clock_count+0x56>
     6b0:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <hour24_flag>
     6b4:	91 11       	cpse	r25, r1
     6b6:	12 c0       	rjmp	.+36     	; 0x6dc <clock_count+0x56>
		hour_count -= 12;	
     6b8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     6bc:	9c 50       	subi	r25, 0x0C	; 12
     6be:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>
	}
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     6c2:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <min_count>
     6c6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <alarm_time_min>
     6ca:	29 17       	cp	r18, r25
     6cc:	d1 f0       	breq	.+52     	; 0x702 <clock_count+0x7c>
			alarm_match_count = 0x01;
			lcd_flag = 0x01;
		}
	}
	else{
		trigger_alarm = 0;
     6ce:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <trigger_alarm>
		alarm_match_count = 0;
     6d2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <alarm_match_count>
	}

	if(ten_sec_count == 10){
     6d6:	8a 30       	cpi	r24, 0x0A	; 10
     6d8:	81 f1       	breq	.+96     	; 0x73a <clock_count+0xb4>
     6da:	08 95       	ret
		min_count = 0;
  	}
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	else if(hour_count >= 24 && hour24_flag == 0x01){
     6dc:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     6e0:	98 31       	cpi	r25, 0x18	; 24
     6e2:	78 f3       	brcs	.-34     	; 0x6c2 <clock_count+0x3c>
     6e4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <hour24_flag>
     6e8:	91 30       	cpi	r25, 0x01	; 1
     6ea:	59 f7       	brne	.-42     	; 0x6c2 <clock_count+0x3c>
		hour_count -= 24;
     6ec:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     6f0:	98 51       	subi	r25, 0x18	; 24
     6f2:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>
	}
	
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     6f6:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <min_count>
     6fa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <alarm_time_min>
     6fe:	29 13       	cpse	r18, r25
     700:	e6 cf       	rjmp	.-52     	; 0x6ce <clock_count+0x48>
     702:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <hour_count>
     706:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <alarm_time_hour>
     70a:	29 13       	cpse	r18, r25
     70c:	e0 cf       	rjmp	.-64     	; 0x6ce <clock_count+0x48>
     70e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <temp_pm_flag>
     712:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <pm_flag>
     716:	29 13       	cpse	r18, r25
     718:	da cf       	rjmp	.-76     	; 0x6ce <clock_count+0x48>
     71a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <adjust_alarm>
     71e:	91 11       	cpse	r25, r1
     720:	d6 cf       	rjmp	.-84     	; 0x6ce <clock_count+0x48>
		if(alarm_match_count == 0){
     722:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <alarm_match_count>
     726:	91 11       	cpse	r25, r1
     728:	d6 cf       	rjmp	.-84     	; 0x6d6 <clock_count+0x50>
			trigger_alarm = 0x01;
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <trigger_alarm>
			alarm_match_count = 0x01;
     730:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <alarm_match_count>
			lcd_flag = 0x01;
     734:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <lcd_flag>
     738:	ce cf       	rjmp	.-100    	; 0x6d6 <clock_count+0x50>
		trigger_alarm = 0;
		alarm_match_count = 0;
	}

	if(ten_sec_count == 10){
		trigger_alarm = 0x01;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <trigger_alarm>
		ten_sec_start = 0;
     740:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ten_sec_start>
		ten_sec_count = 0;
     744:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		lcd_flag = 0x01;
     748:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <lcd_flag>
		alarm_time_min = temp_min;
     74c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <temp_min>
     750:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <alarm_time_min>
		alarm_time_hour = temp_hour;
     754:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <temp_hour>
     758:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <alarm_time_hour>
     75c:	08 95       	ret
  	if(sec_count == 60){
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
	  	hour_count++;
     75e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     762:	9f 5f       	subi	r25, 0xFF	; 255
     764:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <hour_count>

		if(hour_count == 12){
     768:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hour_count>
     76c:	9c 30       	cpi	r25, 0x0C	; 12
     76e:	e9 f0       	breq	.+58     	; 0x7aa <clock_count+0x124>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     770:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <min_count>
     774:	99 cf       	rjmp	.-206    	; 0x6a8 <clock_count+0x22>
		isr_count = 0;
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
  	if(sec_count == 60){
	  	min_count++;
     776:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <min_count>
     77a:	9f 5f       	subi	r25, 0xFF	; 255
     77c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <min_count>
		sec_count = 0;
     780:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count>
     784:	8c cf       	rjmp	.-232    	; 0x69e <clock_count+0x18>
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
	  	sec_count++;
     786:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count>
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
		isr_count = 0;
     790:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <isr_count>
		if(ten_sec_start == 0x01)
     794:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ten_sec_start>
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	09 f0       	breq	.+2      	; 0x79e <clock_count+0x118>
     79c:	79 cf       	rjmp	.-270    	; 0x690 <clock_count+0xa>
			ten_sec_count++;
     79e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     7a8:	75 cf       	rjmp	.-278    	; 0x694 <clock_count+0xe>
  	}
  	if(min_count == 60){
	  	hour_count++;

		if(hour_count == 12){
			pm_flag ^= 0x01;
     7aa:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <pm_flag>
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	92 27       	eor	r25, r18
     7b2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <pm_flag>
     7b6:	dc cf       	rjmp	.-72     	; 0x770 <clock_count+0xea>

000007b8 <set_LCD>:
	}
	
}//clock_count

void set_LCD(){
   clear_display();
     7b8:	0e 94 d2 05 	call	0xba4	; 0xba4 <clear_display>
   if(trigger_alarm == 0x01){
     7bc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	e1 f0       	breq	.+56     	; 0x7fc <set_LCD+0x44>
      	string2lcd("ALARM!!!");
	  	line2_col1();
		string2lcd("            ");

   }
   else if(ten_sec_start == 0x01){
     7c4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ten_sec_start>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	61 f0       	breq	.+24     	; 0x7e4 <set_LCD+0x2c>
      	string2lcd("SNOOZED");
      	line2_col1();
      	string2lcd("            ");
   }
   else{
		string2lcd("ALARM NOT TRIGGERED");
     7cc:	8f e2       	ldi	r24, 0x2F	; 47
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
		line2_col1();
     7d4:	0e 94 02 06 	call	0xc04	; 0xc04 <line2_col1>
		string2lcd("            ");
     7d8:	8a e1       	ldi	r24, 0x1A	; 26
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
	}
   cursor_home();
     7e0:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <cursor_home>
	  	line2_col1();
		string2lcd("            ");

   }
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");
     7e4:	87 e2       	ldi	r24, 0x27	; 39
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
      	line2_col1();
     7ec:	0e 94 02 06 	call	0xc04	; 0xc04 <line2_col1>
      	string2lcd("            ");
     7f0:	8a e1       	ldi	r24, 0x1A	; 26
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
   else{
		string2lcd("ALARM NOT TRIGGERED");
		line2_col1();
		string2lcd("            ");
	}
   cursor_home();
     7f8:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <cursor_home>
}//clock_count

void set_LCD(){
   clear_display();
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");
     7fc:	81 e1       	ldi	r24, 0x11	; 17
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
	  	line2_col1();
     804:	0e 94 02 06 	call	0xc04	; 0xc04 <line2_col1>
		string2lcd("            ");
     808:	8a e1       	ldi	r24, 0x1A	; 26
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 52 06 	call	0xca4	; 0xca4 <string2lcd>
     810:	e7 cf       	rjmp	.-50     	; 0x7e0 <set_LCD+0x28>

00000812 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <input_flag>

	isr_count++;
     824:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <isr_count>
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <isr_count>

}//ISR
     82e:	8f 91       	pop	r24
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	18 95       	reti

0000083a <__vector_14>:


ISR(TIMER1_OVF_vect){
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25

	if(trigger_alarm == 0x01){
     848:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <trigger_alarm>
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	41 f4       	brne	.+16     	; 0x860 <__vector_14+0x26>
		
		PORTC ^= (1 << PC3);
     850:	95 b3       	in	r25, 0x15	; 21
     852:	88 e0       	ldi	r24, 0x08	; 8
     854:	89 27       	eor	r24, r25
     856:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;
     858:	80 e4       	ldi	r24, 0x40	; 64
     85a:	9c e9       	ldi	r25, 0x9C	; 156
     85c:	9d bd       	out	0x2d, r25	; 45
     85e:	8c bd       	out	0x2c, r24	; 44

	}

}
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	81 11       	cpse	r24, r1
     872:	01 c0       	rjmp	.+2      	; 0x876 <send_lcd+0x8>
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     878:	77 9b       	sbis	0x0e, 7	; 14
     87a:	fe cf       	rjmp	.-4      	; 0x878 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     87c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     87e:	77 9b       	sbis	0x0e, 7	; 14
     880:	fe cf       	rjmp	.-4      	; 0x87e <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     882:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     886:	88 60       	ori	r24, 0x08	; 8
     888:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     88c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     890:	87 7f       	andi	r24, 0xF7	; 247
     892:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     896:	08 95       	ret

00000898 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     898:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <i.2094>
     89c:	82 0f       	add	r24, r18
     89e:	91 1d       	adc	r25, r1
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	81 11       	cpse	r24, r1
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <refresh_lcd+0x4e>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8b2:	77 9b       	sbis	0x0e, 7	; 14
     8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     8b6:	80 e2       	ldi	r24, 0x20	; 32
     8b8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8ba:	77 9b       	sbis	0x0e, 7	; 14
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8c2:	88 60       	ori	r24, 0x08	; 8
     8c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8cc:	87 7f       	andi	r24, 0xF7	; 247
     8ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     8d2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <i.2094>
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     8dc:	80 31       	cpi	r24, 0x10	; 16
     8de:	49 f1       	breq	.+82     	; 0x932 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     8e0:	80 32       	cpi	r24, 0x20	; 32
     8e2:	69 f0       	breq	.+26     	; 0x8fe <refresh_lcd+0x66>
     8e4:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     8e6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <null_flag.2095>
     8ea:	91 11       	cpse	r25, r1
     8ec:	e0 cf       	rjmp	.-64     	; 0x8ae <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     8f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f8:	77 9b       	sbis	0x0e, 7	; 14
     8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <refresh_lcd+0x60>
     8fc:	e0 cf       	rjmp	.-64     	; 0x8be <refresh_lcd+0x26>
     8fe:	85 ed       	ldi	r24, 0xD5	; 213
     900:	8a 95       	dec	r24
     902:	f1 f7       	brne	.-4      	; 0x900 <refresh_lcd+0x68>
     904:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     906:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     908:	77 9b       	sbis	0x0e, 7	; 14
     90a:	fe cf       	rjmp	.-4      	; 0x908 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     910:	77 9b       	sbis	0x0e, 7	; 14
     912:	fe cf       	rjmp	.-4      	; 0x910 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     914:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     918:	88 60       	ori	r24, 0x08	; 8
     91a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     922:	87 7f       	andi	r24, 0xF7	; 247
     924:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     928:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <null_flag.2095>
      i=0;
     92c:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <i.2094>
     930:	08 95       	ret
     932:	f5 ed       	ldi	r31, 0xD5	; 213
     934:	fa 95       	dec	r31
     936:	f1 f7       	brne	.-4      	; 0x934 <refresh_lcd+0x9c>
     938:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     93a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     93c:	77 9b       	sbis	0x0e, 7	; 14
     93e:	fe cf       	rjmp	.-4      	; 0x93c <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     940:	80 ec       	ldi	r24, 0xC0	; 192
     942:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     944:	77 9b       	sbis	0x0e, 7	; 14
     946:	fe cf       	rjmp	.-4      	; 0x944 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     948:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     94c:	88 60       	ori	r24, 0x08	; 8
     94e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     952:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95c:	08 95       	ret

0000095e <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     95e:	66 0f       	add	r22, r22
     960:	66 0f       	add	r22, r22
     962:	66 0f       	add	r22, r22
     964:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     966:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     968:	77 9b       	sbis	0x0e, 7	; 14
     96a:	fe cf       	rjmp	.-4      	; 0x968 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     96c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     96e:	77 9b       	sbis	0x0e, 7	; 14
     970:	fe cf       	rjmp	.-4      	; 0x96e <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     972:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     976:	28 60       	ori	r18, 0x08	; 8
     978:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     97c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     980:	27 7f       	andi	r18, 0xF7	; 247
     982:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     986:	25 ed       	ldi	r18, 0xD5	; 213
     988:	2a 95       	dec	r18
     98a:	f1 f7       	brne	.-4      	; 0x988 <set_custom_character+0x2a>
     98c:	00 00       	nop
     98e:	fc 01       	movw	r30, r24
     990:	9c 01       	movw	r18, r24
     992:	28 5f       	subi	r18, 0xF8	; 248
     994:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     996:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     998:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     99a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     99c:	77 9b       	sbis	0x0e, 7	; 14
     99e:	fe cf       	rjmp	.-4      	; 0x99c <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     9a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9a2:	77 9b       	sbis	0x0e, 7	; 14
     9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9aa:	88 60       	ori	r24, 0x08	; 8
     9ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b4:	87 7f       	andi	r24, 0xF7	; 247
     9b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ba:	85 ed       	ldi	r24, 0xD5	; 213
     9bc:	8a 95       	dec	r24
     9be:	f1 f7       	brne	.-4      	; 0x9bc <set_custom_character+0x5e>
     9c0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     9c2:	e2 17       	cp	r30, r18
     9c4:	f3 07       	cpc	r31, r19
     9c6:	41 f7       	brne	.-48     	; 0x998 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     9c8:	08 95       	ret

000009ca <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     9ca:	90 e4       	ldi	r25, 0x40	; 64
     9cc:	89 9f       	mul	r24, r25
     9ce:	60 0d       	add	r22, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d6:	77 9b       	sbis	0x0e, 7	; 14
     9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     9da:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9dc:	77 9b       	sbis	0x0e, 7	; 14
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ee:	87 7f       	andi	r24, 0xF7	; 247
     9f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9f4:	08 95       	ret

000009f6 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     9f6:	81 11       	cpse	r24, r1
     9f8:	13 c0       	rjmp	.+38     	; 0xa20 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9fe:	77 9b       	sbis	0x0e, 7	; 14
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     a02:	80 e3       	ldi	r24, 0x30	; 48
     a04:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a06:	77 9b       	sbis	0x0e, 7	; 14
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a0a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a18:	87 7f       	andi	r24, 0xF7	; 247
     a1a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a1e:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     a20:	84 36       	cpi	r24, 0x64	; 100
     a22:	b0 f4       	brcc	.+44     	; 0xa50 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     a24:	8a 30       	cpi	r24, 0x0A	; 10
     a26:	60 f5       	brcc	.+88     	; 0xa80 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a2c:	77 9b       	sbis	0x0e, 7	; 14
     a2e:	fe cf       	rjmp	.-4      	; 0xa2c <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     a30:	9d ec       	ldi	r25, 0xCD	; 205
     a32:	89 9f       	mul	r24, r25
     a34:	91 2d       	mov	r25, r1
     a36:	11 24       	eor	r1, r1
     a38:	96 95       	lsr	r25
     a3a:	96 95       	lsr	r25
     a3c:	96 95       	lsr	r25
     a3e:	2a e0       	ldi	r18, 0x0A	; 10
     a40:	92 9f       	mul	r25, r18
     a42:	80 19       	sub	r24, r0
     a44:	11 24       	eor	r1, r1
     a46:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     a48:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a4a:	77 9b       	sbis	0x0e, 7	; 14
     a4c:	fe cf       	rjmp	.-4      	; 0xa4a <uint2lcd+0x54>
     a4e:	dd cf       	rjmp	.-70     	; 0xa0a <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     a50:	99 e2       	ldi	r25, 0x29	; 41
     a52:	89 9f       	mul	r24, r25
     a54:	91 2d       	mov	r25, r1
     a56:	11 24       	eor	r1, r1
     a58:	92 95       	swap	r25
     a5a:	9f 70       	andi	r25, 0x0F	; 15
     a5c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a62:	77 9b       	sbis	0x0e, 7	; 14
     a64:	fe cf       	rjmp	.-4      	; 0xa62 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     a66:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a68:	77 9b       	sbis	0x0e, 7	; 14
     a6a:	fe cf       	rjmp	.-4      	; 0xa68 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a6c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a70:	98 60       	ori	r25, 0x08	; 8
     a72:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a76:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7a:	97 7f       	andi	r25, 0xF7	; 247
     a7c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     a80:	99 e2       	ldi	r25, 0x29	; 41
     a82:	89 9f       	mul	r24, r25
     a84:	91 2d       	mov	r25, r1
     a86:	11 24       	eor	r1, r1
     a88:	92 95       	swap	r25
     a8a:	9f 70       	andi	r25, 0x0F	; 15
     a8c:	38 2f       	mov	r19, r24
     a8e:	24 e6       	ldi	r18, 0x64	; 100
     a90:	92 9f       	mul	r25, r18
     a92:	30 19       	sub	r19, r0
     a94:	11 24       	eor	r1, r1
     a96:	2d ec       	ldi	r18, 0xCD	; 205
     a98:	32 9f       	mul	r19, r18
     a9a:	91 2d       	mov	r25, r1
     a9c:	11 24       	eor	r1, r1
     a9e:	96 95       	lsr	r25
     aa0:	96 95       	lsr	r25
     aa2:	96 95       	lsr	r25
     aa4:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aaa:	77 9b       	sbis	0x0e, 7	; 14
     aac:	fe cf       	rjmp	.-4      	; 0xaaa <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     aae:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ab0:	77 9b       	sbis	0x0e, 7	; 14
     ab2:	fe cf       	rjmp	.-4      	; 0xab0 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ab4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab8:	98 60       	ori	r25, 0x08	; 8
     aba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     abe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ac2:	97 7f       	andi	r25, 0xF7	; 247
     ac4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ac8:	af cf       	rjmp	.-162    	; 0xa28 <uint2lcd+0x32>

00000aca <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     aca:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     acc:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad4:	77 9b       	sbis	0x0e, 7	; 14
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     ad8:	9d e2       	ldi	r25, 0x2D	; 45
     ada:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     adc:	77 9b       	sbis	0x0e, 7	; 14
     ade:	fe cf       	rjmp	.-4      	; 0xadc <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ae0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae4:	98 60       	ori	r25, 0x08	; 8
     ae6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aee:	97 7f       	andi	r25, 0xF7	; 247
     af0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	95 ed       	ldi	r25, 0xD5	; 213
     af6:	9a 95       	dec	r25
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <int2lcd+0x2c>
     afa:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     afc:	81 95       	neg	r24
     afe:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <uint2lcd>

00000b02 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b02:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b04:	77 9b       	sbis	0x0e, 7	; 14
     b06:	fe cf       	rjmp	.-4      	; 0xb04 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     b08:	8e e0       	ldi	r24, 0x0E	; 14
     b0a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b0c:	77 9b       	sbis	0x0e, 7	; 14
     b0e:	fe cf       	rjmp	.-4      	; 0xb0c <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b14:	88 60       	ori	r24, 0x08	; 8
     b16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b1e:	87 7f       	andi	r24, 0xF7	; 247
     b20:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b24:	08 95       	ret

00000b26 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b26:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b28:	77 9b       	sbis	0x0e, 7	; 14
     b2a:	fe cf       	rjmp	.-4      	; 0xb28 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     b2c:	8c e0       	ldi	r24, 0x0C	; 12
     b2e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b30:	77 9b       	sbis	0x0e, 7	; 14
     b32:	fe cf       	rjmp	.-4      	; 0xb30 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b34:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b38:	88 60       	ori	r24, 0x08	; 8
     b3a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b3e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b42:	87 7f       	andi	r24, 0xF7	; 247
     b44:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b48:	08 95       	ret

00000b4a <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b4a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b4c:	77 9b       	sbis	0x0e, 7	; 14
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <shift_right+0x2>
  SPDR = byte;                        //send payload
     b50:	8e e1       	ldi	r24, 0x1E	; 30
     b52:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b54:	77 9b       	sbis	0x0e, 7	; 14
     b56:	fe cf       	rjmp	.-4      	; 0xb54 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b58:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b5c:	88 60       	ori	r24, 0x08	; 8
     b5e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b62:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b66:	87 7f       	andi	r24, 0xF7	; 247
     b68:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b6c:	08 95       	ret

00000b6e <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b6e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b70:	77 9b       	sbis	0x0e, 7	; 14
     b72:	fe cf       	rjmp	.-4      	; 0xb70 <shift_left+0x2>
  SPDR = byte;                        //send payload
     b74:	88 e1       	ldi	r24, 0x18	; 24
     b76:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b78:	77 9b       	sbis	0x0e, 7	; 14
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b8a:	87 7f       	andi	r24, 0xF7	; 247
     b8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b90:	08 95       	ret

00000b92 <strobe_lcd>:
     b92:	e2 e6       	ldi	r30, 0x62	; 98
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 60       	ori	r24, 0x08	; 8
     b9a:	80 83       	st	Z, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	87 7f       	andi	r24, 0xF7	; 247
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ba4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ba6:	77 9b       	sbis	0x0e, 7	; 14
     ba8:	fe cf       	rjmp	.-4      	; 0xba6 <clear_display+0x2>
  SPDR = byte;                        //send payload
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bae:	77 9b       	sbis	0x0e, 7	; 14
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bb2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb6:	88 60       	ori	r24, 0x08	; 8
     bb8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bbc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bc0:	87 7f       	andi	r24, 0xF7	; 247
     bc2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bc6:	8f e1       	ldi	r24, 0x1F	; 31
     bc8:	9c e1       	ldi	r25, 0x1C	; 28
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <clear_display+0x26>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <clear_display+0x2c>
     bd0:	00 00       	nop
     bd2:	08 95       	ret

00000bd4 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bd4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd6:	77 9b       	sbis	0x0e, 7	; 14
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bde:	77 9b       	sbis	0x0e, 7	; 14
     be0:	fe cf       	rjmp	.-4      	; 0xbde <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     be2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be6:	88 60       	ori	r24, 0x08	; 8
     be8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf6:	8f e6       	ldi	r24, 0x6F	; 111
     bf8:	97 e1       	ldi	r25, 0x17	; 23
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <cursor_home+0x26>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <cursor_home+0x2c>
     c00:	00 00       	nop
     c02:	08 95       	ret

00000c04 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c04:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c06:	77 9b       	sbis	0x0e, 7	; 14
     c08:	fe cf       	rjmp	.-4      	; 0xc06 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     c0a:	80 ec       	ldi	r24, 0xC0	; 192
     c0c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c0e:	77 9b       	sbis	0x0e, 7	; 14
     c10:	fe cf       	rjmp	.-4      	; 0xc0e <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c26:	08 95       	ret

00000c28 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c28:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c2a:	77 9b       	sbis	0x0e, 7	; 14
     c2c:	fe cf       	rjmp	.-4      	; 0xc2a <line1_col1+0x2>
  SPDR = byte;                        //send payload
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c32:	77 9b       	sbis	0x0e, 7	; 14
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c36:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c3a:	88 60       	ori	r24, 0x08	; 8
     c3c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c44:	87 7f       	andi	r24, 0xF7	; 247
     c46:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4a:	08 95       	ret

00000c4c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     c4c:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c4e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     c50:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c52:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c54:	77 9b       	sbis	0x0e, 7	; 14
     c56:	fe cf       	rjmp	.-4      	; 0xc54 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     c58:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c5a:	77 9b       	sbis	0x0e, 7	; 14
     c5c:	fe cf       	rjmp	.-4      	; 0xc5a <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c6c:	87 7f       	andi	r24, 0xF7	; 247
     c6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c72:	85 ed       	ldi	r24, 0xD5	; 213
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <fill_spaces+0x28>
     c78:	00 00       	nop
     c7a:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     c7c:	51 f7       	brne	.-44     	; 0xc52 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     c7e:	08 95       	ret

00000c80 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c84:	77 9b       	sbis	0x0e, 7	; 14
     c86:	fe cf       	rjmp	.-4      	; 0xc84 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     c88:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c8a:	77 9b       	sbis	0x0e, 7	; 14
     c8c:	fe cf       	rjmp	.-4      	; 0xc8a <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c9c:	87 7f       	andi	r24, 0xF7	; 247
     c9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca2:	08 95       	ret

00000ca4 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     ca4:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cac:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     cae:	df 01       	movw	r26, r30
     cb0:	a4 0f       	add	r26, r20
     cb2:	b5 1f       	adc	r27, r21
     cb4:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cb6:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cb8:	77 9b       	sbis	0x0e, 7	; 14
     cba:	fe cf       	rjmp	.-4      	; 0xcb8 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     cbc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cbe:	77 9b       	sbis	0x0e, 7	; 14
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cc2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cc6:	98 60       	ori	r25, 0x08	; 8
     cc8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ccc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd0:	97 7f       	andi	r25, 0xF7	; 247
     cd2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd6:	85 ed       	ldi	r24, 0xD5	; 213
     cd8:	8a 95       	dec	r24
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <string2lcd+0x34>
     cdc:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	46 2f       	mov	r20, r22
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	df 01       	movw	r26, r30
     ce6:	0d 90       	ld	r0, X+
     ce8:	00 20       	and	r0, r0
     cea:	e9 f7       	brne	.-6      	; 0xce6 <string2lcd+0x42>
     cec:	9d 01       	movw	r18, r26
     cee:	2e 1b       	sub	r18, r30
     cf0:	3f 0b       	sbc	r19, r31
     cf2:	22 50       	subi	r18, 0x02	; 2
     cf4:	31 09       	sbc	r19, r1
     cf6:	24 17       	cp	r18, r20
     cf8:	35 07       	cpc	r19, r21
     cfa:	c8 f6       	brcc	.-78     	; 0xcae <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     cfc:	08 95       	ret

00000cfe <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	99 ef       	ldi	r25, 0xF9	; 249
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <lcd_init+0x4>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <lcd_init+0xa>
     d08:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     d0a:	88 e0       	ldi	r24, 0x08	; 8
     d0c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d10:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d12:	77 9b       	sbis	0x0e, 7	; 14
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     d16:	80 e3       	ldi	r24, 0x30	; 48
     d18:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d1a:	77 9b       	sbis	0x0e, 7	; 14
     d1c:	fe cf       	rjmp	.-4      	; 0xd1a <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d22:	88 60       	ori	r24, 0x08	; 8
     d24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2c:	87 7f       	andi	r24, 0xF7	; 247
     d2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d32:	8f e5       	ldi	r24, 0x5F	; 95
     d34:	9d e6       	ldi	r25, 0x6D	; 109
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <lcd_init+0x38>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <lcd_init+0x3e>
     d3c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d3e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d40:	77 9b       	sbis	0x0e, 7	; 14
     d42:	fe cf       	rjmp	.-4      	; 0xd40 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     d44:	80 e3       	ldi	r24, 0x30	; 48
     d46:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d48:	77 9b       	sbis	0x0e, 7	; 14
     d4a:	fe cf       	rjmp	.-4      	; 0xd48 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d50:	88 60       	ori	r24, 0x08	; 8
     d52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d5a:	87 7f       	andi	r24, 0xF7	; 247
     d5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d60:	8f e5       	ldi	r24, 0x5F	; 95
     d62:	9d e6       	ldi	r25, 0x6D	; 109
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <lcd_init+0x66>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <lcd_init+0x6c>
     d6a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d6c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d6e:	77 9b       	sbis	0x0e, 7	; 14
     d70:	fe cf       	rjmp	.-4      	; 0xd6e <lcd_init+0x70>
  SPDR = byte;                        //send payload
     d72:	80 e3       	ldi	r24, 0x30	; 48
     d74:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d76:	77 9b       	sbis	0x0e, 7	; 14
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d8e:	8f e5       	ldi	r24, 0x5F	; 95
     d90:	9d e6       	ldi	r25, 0x6D	; 109
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <lcd_init+0x94>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <lcd_init+0x9a>
     d98:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d9a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d9c:	77 9b       	sbis	0x0e, 7	; 14
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     da0:	88 e3       	ldi	r24, 0x38	; 56
     da2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     da4:	77 9b       	sbis	0x0e, 7	; 14
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     da8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dac:	88 60       	ori	r24, 0x08	; 8
     dae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     db2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dbc:	8f e1       	ldi	r24, 0x1F	; 31
     dbe:	9e e4       	ldi	r25, 0x4E	; 78
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <lcd_init+0xc2>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <lcd_init+0xc8>
     dc6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dc8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dca:	77 9b       	sbis	0x0e, 7	; 14
     dcc:	fe cf       	rjmp	.-4      	; 0xdca <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dd2:	77 9b       	sbis	0x0e, 7	; 14
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de4:	87 7f       	andi	r24, 0xF7	; 247
     de6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dea:	8f e1       	ldi	r24, 0x1F	; 31
     dec:	9e e4       	ldi	r25, 0x4E	; 78
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <lcd_init+0xf0>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <lcd_init+0xf6>
     df4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     df6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     df8:	77 9b       	sbis	0x0e, 7	; 14
     dfa:	fe cf       	rjmp	.-4      	; 0xdf8 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e00:	77 9b       	sbis	0x0e, 7	; 14
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e18:	8f e1       	ldi	r24, 0x1F	; 31
     e1a:	9e e4       	ldi	r25, 0x4E	; 78
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_init+0x11e>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <lcd_init+0x124>
     e22:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e24:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e26:	77 9b       	sbis	0x0e, 7	; 14
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     e2a:	86 e0       	ldi	r24, 0x06	; 6
     e2c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e2e:	77 9b       	sbis	0x0e, 7	; 14
     e30:	fe cf       	rjmp	.-4      	; 0xe2e <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e36:	88 60       	ori	r24, 0x08	; 8
     e38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e40:	87 7f       	andi	r24, 0xF7	; 247
     e42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e46:	8f e1       	ldi	r24, 0x1F	; 31
     e48:	9e e4       	ldi	r25, 0x4E	; 78
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <lcd_init+0x14c>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <lcd_init+0x152>
     e50:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e52:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e54:	77 9b       	sbis	0x0e, 7	; 14
     e56:	fe cf       	rjmp	.-4      	; 0xe54 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     e58:	8c e0       	ldi	r24, 0x0C	; 12
     e5a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e5c:	77 9b       	sbis	0x0e, 7	; 14
     e5e:	fe cf       	rjmp	.-4      	; 0xe5c <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e74:	8f e1       	ldi	r24, 0x1F	; 31
     e76:	9e e4       	ldi	r25, 0x4E	; 78
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <lcd_init+0x17a>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <lcd_init+0x180>
     e7e:	00 00       	nop
     e80:	08 95       	ret

00000e82 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	69 97       	sbiw	r28, 0x19	; 25
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	14 2f       	mov	r17, r20
     eb4:	42 2e       	mov	r4, r18
     eb6:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     eb8:	00 23       	and	r16, r16
     eba:	79 f0       	breq	.+30     	; 0xeda <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     ebc:	6b 01       	movw	r12, r22
     ebe:	7c 01       	movw	r14, r24
     ec0:	cc 24       	eor	r12, r12
     ec2:	f7 fc       	sbrc	r15, 7
     ec4:	c3 94       	inc	r12
     ec6:	dd 24       	eor	r13, r13
     ec8:	ee 24       	eor	r14, r14
     eca:	ff 24       	eor	r15, r15
     ecc:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     ece:	6b 01       	movw	r12, r22
     ed0:	7c 01       	movw	r14, r24
     ed2:	97 fd       	sbrc	r25, 7
     ed4:	a3 c0       	rjmp	.+326    	; 0x101c <lcd_int32+0x19a>
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     eda:	44 20       	and	r4, r4
     edc:	09 f4       	brne	.+2      	; 0xee0 <lcd_int32+0x5e>
     ede:	96 c0       	rjmp	.+300    	; 0x100c <lcd_int32+0x18a>
     ee0:	9e 01       	movw	r18, r28
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	59 01       	movw	r10, r18
     ee8:	49 01       	movw	r8, r18
     eea:	66 24       	eor	r6, r6
     eec:	6a 94       	dec	r6
     eee:	64 0c       	add	r6, r4
     ef0:	71 2c       	mov	r7, r1
     ef2:	3f ef       	ldi	r19, 0xFF	; 255
     ef4:	63 1a       	sub	r6, r19
     ef6:	73 0a       	sbc	r7, r19
     ef8:	6a 0c       	add	r6, r10
     efa:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     efc:	2a e0       	ldi	r18, 0x0A	; 10
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	0e 94 c6 09 	call	0x138c	; 0x138c <__divmodsi4>
     f08:	e6 2f       	mov	r30, r22
     f0a:	2a 8b       	std	Y+18, r18	; 0x12
     f0c:	3b 8b       	std	Y+19, r19	; 0x13
     f0e:	4c 8b       	std	Y+20, r20	; 0x14
     f10:	5d 8b       	std	Y+21, r21	; 0x15
     f12:	6a 89       	ldd	r22, Y+18	; 0x12
     f14:	7b 89       	ldd	r23, Y+19	; 0x13
     f16:	8c 89       	ldd	r24, Y+20	; 0x14
     f18:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f1a:	20 e3       	ldi	r18, 0x30	; 48
     f1c:	2e 0f       	add	r18, r30
     f1e:	f4 01       	movw	r30, r8
     f20:	21 93       	st	Z+, r18
     f22:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     f24:	6e 16       	cp	r6, r30
     f26:	7f 06       	cpc	r7, r31
     f28:	49 f7       	brne	.-46     	; 0xefc <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     f2a:	99 24       	eor	r9, r9
     f2c:	93 94       	inc	r9
     f2e:	94 0c       	add	r9, r4
     f30:	f5 01       	movw	r30, r10
     f32:	e4 0d       	add	r30, r4
     f34:	f1 1d       	adc	r31, r1
     f36:	2e e2       	ldi	r18, 0x2E	; 46
     f38:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	0e 94 c6 09 	call	0x138c	; 0x138c <__divmodsi4>
     f46:	e6 2f       	mov	r30, r22
     f48:	2a 8b       	std	Y+18, r18	; 0x12
     f4a:	3b 8b       	std	Y+19, r19	; 0x13
     f4c:	4c 8b       	std	Y+20, r20	; 0x14
     f4e:	5d 8b       	std	Y+21, r21	; 0x15
     f50:	6e 8b       	std	Y+22, r22	; 0x16
     f52:	7f 8b       	std	Y+23, r23	; 0x17
     f54:	88 8f       	std	Y+24, r24	; 0x18
     f56:	99 8f       	std	Y+25, r25	; 0x19
     f58:	6a 89       	ldd	r22, Y+18	; 0x12
     f5a:	7b 89       	ldd	r23, Y+19	; 0x13
     f5c:	8c 89       	ldd	r24, Y+20	; 0x14
     f5e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f60:	31 e0       	ldi	r19, 0x01	; 1
     f62:	39 0d       	add	r19, r9
     f64:	d5 01       	movw	r26, r10
     f66:	a9 0d       	add	r26, r9
     f68:	b1 1d       	adc	r27, r1
     f6a:	e0 5d       	subi	r30, 0xD0	; 208
     f6c:	ec 93       	st	X, r30
     f6e:	93 2e       	mov	r9, r19
        }while(qr.quot);
     f70:	61 15       	cp	r22, r1
     f72:	71 05       	cpc	r23, r1
     f74:	81 05       	cpc	r24, r1
     f76:	91 05       	cpc	r25, r1
     f78:	01 f7       	brne	.-64     	; 0xf3a <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     f7a:	11 23       	and	r17, r17
     f7c:	61 f0       	breq	.+24     	; 0xf96 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     f7e:	51 10       	cpse	r5, r1
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <lcd_int32+0x196>
     f82:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     f84:	31 17       	cp	r19, r17
     f86:	38 f4       	brcc	.+14     	; 0xf96 <lcd_int32+0x114>
     f88:	f5 01       	movw	r30, r10
     f8a:	e3 0f       	add	r30, r19
     f8c:	f1 1d       	adc	r31, r1
     f8e:	90 83       	st	Z, r25
     f90:	3f 5f       	subi	r19, 0xFF	; 255
     f92:	13 13       	cpse	r17, r19
     f94:	f9 cf       	rjmp	.-14     	; 0xf88 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     f96:	00 23       	and	r16, r16
     f98:	31 f0       	breq	.+12     	; 0xfa6 <lcd_int32+0x124>
     f9a:	f5 01       	movw	r30, r10
     f9c:	e3 0f       	add	r30, r19
     f9e:	f1 1d       	adc	r31, r1
     fa0:	9d e2       	ldi	r25, 0x2D	; 45
     fa2:	90 83       	st	Z, r25
     fa4:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fa6:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     fa8:	31 50       	subi	r19, 0x01	; 1
     faa:	f5 01       	movw	r30, r10
     fac:	e3 0f       	add	r30, r19
     fae:	f1 1d       	adc	r31, r1
     fb0:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fb2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fb4:	77 9b       	sbis	0x0e, 7	; 14
     fb6:	fe cf       	rjmp	.-4      	; 0xfb4 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     fb8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fba:	77 9b       	sbis	0x0e, 7	; 14
     fbc:	fe cf       	rjmp	.-4      	; 0xfba <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fbe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fc2:	98 60       	ori	r25, 0x08	; 8
     fc4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fc8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fcc:	97 7f       	andi	r25, 0xF7	; 247
     fce:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd2:	85 ed       	ldi	r24, 0xD5	; 213
     fd4:	8a 95       	dec	r24
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <lcd_int32+0x152>
     fd8:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     fda:	31 11       	cpse	r19, r1
     fdc:	e5 cf       	rjmp	.-54     	; 0xfa8 <lcd_int32+0x126>

}
     fde:	69 96       	adiw	r28, 0x19	; 25
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	8f 90       	pop	r8
    1002:	7f 90       	pop	r7
    1004:	6f 90       	pop	r6
    1006:	5f 90       	pop	r5
    1008:	4f 90       	pop	r4
    100a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    100c:	91 2c       	mov	r9, r1
    100e:	9e 01       	movw	r18, r28
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	59 01       	movw	r10, r18
    1016:	91 cf       	rjmp	.-222    	; 0xf3a <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1018:	90 e3       	ldi	r25, 0x30	; 48
    101a:	b4 cf       	rjmp	.-152    	; 0xf84 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    101c:	f0 94       	com	r15
    101e:	e0 94       	com	r14
    1020:	d0 94       	com	r13
    1022:	c0 94       	com	r12
    1024:	c1 1c       	adc	r12, r1
    1026:	d1 1c       	adc	r13, r1
    1028:	e1 1c       	adc	r14, r1
    102a:	f1 1c       	adc	r15, r1
    102c:	54 cf       	rjmp	.-344    	; 0xed6 <lcd_int32+0x54>

0000102e <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    102e:	5f 92       	push	r5
    1030:	6f 92       	push	r6
    1032:	7f 92       	push	r7
    1034:	8f 92       	push	r8
    1036:	9f 92       	push	r9
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	61 97       	sbiw	r28, 0x11	; 17
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	5c 01       	movw	r10, r24
    105e:	96 2e       	mov	r9, r22
    1060:	54 2e       	mov	r5, r20
    1062:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1064:	8b 2c       	mov	r8, r11
    1066:	88 1c       	adc	r8, r8
    1068:	88 24       	eor	r8, r8
    106a:	88 1c       	adc	r8, r8
    106c:	78 2c       	mov	r7, r8
    106e:	9c 01       	movw	r18, r24
    1070:	97 fd       	sbrc	r25, 7
    1072:	9d c0       	rjmp	.+314    	; 0x11ae <__stack+0xaf>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1074:	55 20       	and	r5, r5
    1076:	09 f4       	brne	.+2      	; 0x107a <lcd_int16+0x4c>
    1078:	8e c0       	rjmp	.+284    	; 0x1196 <__stack+0x97>
    107a:	8e 01       	movw	r16, r28
    107c:	0f 5f       	subi	r16, 0xFF	; 255
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	78 01       	movw	r14, r16
    1082:	cc 24       	eor	r12, r12
    1084:	ca 94       	dec	r12
    1086:	c5 0c       	add	r12, r5
    1088:	d1 2c       	mov	r13, r1
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	c8 1a       	sub	r12, r24
    108e:	d8 0a       	sbc	r13, r24
    1090:	c0 0e       	add	r12, r16
    1092:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1094:	6a e0       	ldi	r22, 0x0A	; 10
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	c9 01       	movw	r24, r18
    109a:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
    109e:	46 2f       	mov	r20, r22
    10a0:	24 2f       	mov	r18, r20
    10a2:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    10a4:	80 5d       	subi	r24, 0xD0	; 208
    10a6:	f7 01       	movw	r30, r14
    10a8:	81 93       	st	Z+, r24
    10aa:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    10ac:	ec 15       	cp	r30, r12
    10ae:	fd 05       	cpc	r31, r13
    10b0:	89 f7       	brne	.-30     	; 0x1094 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    10b2:	ff 24       	eor	r15, r15
    10b4:	f3 94       	inc	r15
    10b6:	f5 0c       	add	r15, r5
    10b8:	f8 01       	movw	r30, r16
    10ba:	e5 0d       	add	r30, r5
    10bc:	f1 1d       	adc	r31, r1
    10be:	8e e2       	ldi	r24, 0x2E	; 46
    10c0:	80 83       	st	Z, r24
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    10c4:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    10c6:	6a e0       	ldi	r22, 0x0A	; 10
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	c9 01       	movw	r24, r18
    10cc:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
    10d0:	46 2f       	mov	r20, r22
    10d2:	24 2f       	mov	r18, r20
    10d4:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	9f 0d       	add	r25, r15
    10da:	f8 01       	movw	r30, r16
    10dc:	ef 0d       	add	r30, r15
    10de:	f1 1d       	adc	r31, r1
    10e0:	80 5d       	subi	r24, 0xD0	; 208
    10e2:	80 83       	st	Z, r24
        }
        while(qr.quot);
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    10ea:	61 10       	cpse	r6, r1
    10ec:	59 c0       	rjmp	.+178    	; 0x11a0 <__stack+0xa1>
    10ee:	b7 fc       	sbrc	r11, 7
    10f0:	63 c0       	rjmp	.+198    	; 0x11b8 <__stack+0xb9>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    10f2:	99 20       	and	r9, r9
    10f4:	b1 f0       	breq	.+44     	; 0x1122 <__stack+0x23>
    10f6:	68 2d       	mov	r22, r8
    10f8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    10fa:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10fc:	29 2f       	mov	r18, r25
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	49 2d       	mov	r20, r9
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	46 1b       	sub	r20, r22
    1106:	57 0b       	sbc	r21, r23
    1108:	24 17       	cp	r18, r20
    110a:	35 07       	cpc	r19, r21
    110c:	54 f4       	brge	.+20     	; 0x1122 <__stack+0x23>
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	f8 01       	movw	r30, r16
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	80 83       	st	Z, r24
    1118:	29 2f       	mov	r18, r25
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	24 17       	cp	r18, r20
    111e:	35 07       	cpc	r19, r21
    1120:	b4 f3       	brlt	.-20     	; 0x110e <__stack+0xf>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1122:	77 20       	and	r7, r7
    1124:	31 f0       	breq	.+12     	; 0x1132 <__stack+0x33>
    1126:	f8 01       	movw	r30, r16
    1128:	e9 0f       	add	r30, r25
    112a:	f1 1d       	adc	r31, r1
    112c:	8d e2       	ldi	r24, 0x2D	; 45
    112e:	80 83       	st	Z, r24
    1130:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1132:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	f8 01       	movw	r30, r16
    1138:	e9 0f       	add	r30, r25
    113a:	f1 1d       	adc	r31, r1
    113c:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    113e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1140:	77 9b       	sbis	0x0e, 7	; 14
    1142:	fe cf       	rjmp	.-4      	; 0x1140 <__stack+0x41>
  SPDR = byte;                        //send payload
    1144:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1146:	77 9b       	sbis	0x0e, 7	; 14
    1148:	fe cf       	rjmp	.-4      	; 0x1146 <__stack+0x47>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    114a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1154:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1158:	87 7f       	andi	r24, 0xF7	; 247
    115a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    115e:	f5 ed       	ldi	r31, 0xD5	; 213
    1160:	fa 95       	dec	r31
    1162:	f1 f7       	brne	.-4      	; 0x1160 <__stack+0x61>
    1164:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1166:	91 11       	cpse	r25, r1
    1168:	e5 cf       	rjmp	.-54     	; 0x1134 <__stack+0x35>
}
    116a:	61 96       	adiw	r28, 0x11	; 17
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	bf 90       	pop	r11
    1188:	af 90       	pop	r10
    118a:	9f 90       	pop	r9
    118c:	8f 90       	pop	r8
    118e:	7f 90       	pop	r7
    1190:	6f 90       	pop	r6
    1192:	5f 90       	pop	r5
    1194:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1196:	f1 2c       	mov	r15, r1
    1198:	8e 01       	movw	r16, r28
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	93 cf       	rjmp	.-218    	; 0x10c6 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    11a0:	99 20       	and	r9, r9
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	be cf       	rjmp	.-132    	; 0x1122 <__stack+0x23>
    11a6:	68 2d       	mov	r22, r8
    11a8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	a7 cf       	rjmp	.-178    	; 0x10fc <lcd_int16+0xce>
    11ae:	22 27       	eor	r18, r18
    11b0:	33 27       	eor	r19, r19
    11b2:	28 1b       	sub	r18, r24
    11b4:	39 0b       	sbc	r19, r25
    11b6:	5e cf       	rjmp	.-324    	; 0x1074 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    11b8:	f3 94       	inc	r15
    11ba:	f3 94       	inc	r15
    11bc:	f8 01       	movw	r30, r16
    11be:	e9 0f       	add	r30, r25
    11c0:	f1 1d       	adc	r31, r1
    11c2:	8d e2       	ldi	r24, 0x2D	; 45
    11c4:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    11c6:	99 20       	and	r9, r9
    11c8:	59 f0       	breq	.+22     	; 0x11e0 <__stack+0xe1>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    11ca:	2f 2d       	mov	r18, r15
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	49 2d       	mov	r20, r9
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	24 17       	cp	r18, r20
    11d4:	35 07       	cpc	r19, r21
    11d6:	24 f4       	brge	.+8      	; 0x11e0 <__stack+0xe1>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    11d8:	9f 2d       	mov	r25, r15
                bSigned = 0;
    11da:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    11dc:	80 e2       	ldi	r24, 0x20	; 32
    11de:	97 cf       	rjmp	.-210    	; 0x110e <__stack+0xf>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    11e0:	9f 2d       	mov	r25, r15
    11e2:	a7 cf       	rjmp	.-178    	; 0x1132 <__stack+0x33>

000011e4 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    11e4:	80 ef       	ldi	r24, 0xF0	; 240
    11e6:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    11e8:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    11ea:	85 b3       	in	r24, 0x15	; 21
    11ec:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    11ee:	8d e0       	ldi	r24, 0x0D	; 13
    11f0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    11fa:	83 e1       	ldi	r24, 0x13	; 19
    11fc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1200:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    1204:	8d 30       	cpi	r24, 0x0D	; 13
    1206:	18 f0       	brcs	.+6      	; 0x120e <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    120e:	0e 94 78 00 	call	0xf0	; 0xf0 <initialization>

//enable global interrupts
sei();
    1212:	78 94       	sei

OCR2 = 0;
    1214:	13 bc       	out	0x23, r1	; 35
OCR3A = 200;
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    121e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

lcd_init();
    1222:	0e 94 7f 06 	call	0xcfe	; 0xcfe <lcd_init>
set_LCD();
    1226:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <set_LCD>
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    122a:	cf ef       	ldi	r28, 0xFF	; 255
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    122c:	00 e2       	ldi	r16, 0x20	; 32
    122e:	10 e4       	ldi	r17, 0x40	; 64
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    1230:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
    1232:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <input_flag>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f4       	brne	.+2      	; 0x123c <main+0x58>
    123a:	5e c0       	rjmp	.+188    	; 0x12f8 <main+0x114>
	  	button_encoder_read();
	  	input_flag = FALSE;
  	}

	clock_count();
    123c:	0e 94 43 03 	call	0x686	; 0x686 <clock_count>

	if(lcd_flag == 0x01){
    1240:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <lcd_flag>
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	09 f4       	brne	.+2      	; 0x124a <main+0x66>
    1248:	62 c0       	rjmp	.+196    	; 0x130e <main+0x12a>
		lcd_flag = 0;
		set_LCD();
	}
	
	if(adjust_alarm == 0){
    124a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <adjust_alarm>
    124e:	81 11       	cpse	r24, r1
    1250:	67 c0       	rjmp	.+206    	; 0x1320 <main+0x13c>
		temp_min = min_count;
    1252:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <min_count>
    1256:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <temp_min>
		temp_hour = hour_count;
    125a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    125e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <temp_hour>
		temp_min = alarm_time_min;
		temp_hour = alarm_time_hour;
	}
	
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
    1262:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <min_count>
    1266:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hour_count>
    126a:	0e 94 c6 00 	call	0x18c	; 0x18c <segsum>
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    126e:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1270:	00 00       	nop
    1272:	aa e7       	ldi	r26, 0x7A	; 122
    1274:	b1 e0       	ldi	r27, 0x01	; 1
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    127e:	ed 91       	ld	r30, X+
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	e1 31       	cpi	r30, 0x11	; 17
    1286:	00 f5       	brcc	.+64     	; 0x12c8 <main+0xe4>
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	e0 50       	subi	r30, 0x00	; 0
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	40 81       	ld	r20, Z
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	91 05       	cpc	r25, r1
    1294:	e9 f0       	breq	.+58     	; 0x12d0 <main+0xec>
			encoding &= 0b01111111;
		if(i_seg == 2 && trigger_alarm == 0x01)
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	91 05       	cpc	r25, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <main+0xba>
    129c:	4c c0       	rjmp	.+152    	; 0x1336 <main+0x152>
			encoding &= 0b11111011;
		PORTA = 0xFF;
    129e:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    12a0:	58 2f       	mov	r21, r24
    12a2:	52 95       	swap	r21
    12a4:	50 7f       	andi	r21, 0xF0	; 240
    12a6:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    12a8:	4b bb       	out	0x1b, r20	; 27
    12aa:	ef e3       	ldi	r30, 0x3F	; 63
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	31 97       	sbiw	r30, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <main+0xca>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <main+0xd0>
    12b4:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    12b6:	25 30       	cpi	r18, 0x05	; 5
    12b8:	31 05       	cpc	r19, r1
    12ba:	b9 f0       	breq	.+46     	; 0x12ea <main+0x106>
    12bc:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    12be:	ed 91       	ld	r30, X+
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	e1 31       	cpi	r30, 0x11	; 17
    12c6:	00 f3       	brcs	.-64     	; 0x1288 <main+0xa4>
    12c8:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f7       	brne	.-58     	; 0x1296 <main+0xb2>
    12d0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <pm_flag>
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	f1 f1       	breq	.+124    	; 0x1354 <main+0x170>
			encoding &= 0b01111111;
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;
		PORTA = 0xFF;
    12d8:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    12da:	18 bb       	out	0x18, r17	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    12dc:	4b bb       	out	0x1b, r20	; 27
    12de:	8f e3       	ldi	r24, 0x3F	; 63
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0xfe>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <main+0x104>
    12e8:	00 00       	nop
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    12ea:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    12ec:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
    12ee:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <input_flag>
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <main+0x114>
    12f6:	a2 cf       	rjmp	.-188    	; 0x123c <main+0x58>
	  	button_encoder_read();
    12f8:	0e 94 1e 02 	call	0x43c	; 0x43c <button_encoder_read>
	  	input_flag = FALSE;
    12fc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <input_flag>
  	}

	clock_count();
    1300:	0e 94 43 03 	call	0x686	; 0x686 <clock_count>

	if(lcd_flag == 0x01){
    1304:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <lcd_flag>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	09 f0       	breq	.+2      	; 0x130e <main+0x12a>
    130c:	9e cf       	rjmp	.-196    	; 0x124a <main+0x66>
		lcd_flag = 0;
    130e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <lcd_flag>
		set_LCD();
    1312:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <set_LCD>
	}
	
	if(adjust_alarm == 0){
    1316:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <adjust_alarm>
    131a:	88 23       	and	r24, r24
    131c:	09 f4       	brne	.+2      	; 0x1320 <main+0x13c>
    131e:	99 cf       	rjmp	.-206    	; 0x1252 <main+0x6e>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    1320:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <alarm_time_min>
    1324:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <temp_min>
		temp_hour = alarm_time_hour;
    1328:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <alarm_time_hour>
    132c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <temp_hour>
	}
	
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
    1330:	0e 94 c6 00 	call	0x18c	; 0x18c <segsum>
    1334:	9c cf       	rjmp	.-200    	; 0x126e <main+0x8a>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;
		if(i_seg == 2 && trigger_alarm == 0x01)
    1336:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <trigger_alarm>
    133a:	51 30       	cpi	r21, 0x01	; 1
    133c:	89 f0       	breq	.+34     	; 0x1360 <main+0x17c>
			encoding &= 0b11111011;
		PORTA = 0xFF;
    133e:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1340:	08 bb       	out	0x18, r16	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1342:	4b bb       	out	0x1b, r20	; 27
    1344:	ef e3       	ldi	r30, 0x3F	; 63
    1346:	f1 e0       	ldi	r31, 0x01	; 1
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <main+0x164>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <main+0x16a>
    134e:	00 00       	nop
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	b5 cf       	rjmp	.-150    	; 0x12be <main+0xda>
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1354:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <hour24_flag>
    1358:	81 11       	cpse	r24, r1
    135a:	be cf       	rjmp	.-132    	; 0x12d8 <main+0xf4>
			encoding &= 0b01111111;
    135c:	4f 77       	andi	r20, 0x7F	; 127
    135e:	bc cf       	rjmp	.-136    	; 0x12d8 <main+0xf4>
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;
    1360:	4b 7f       	andi	r20, 0xFB	; 251
    1362:	ed cf       	rjmp	.-38     	; 0x133e <main+0x15a>

00001364 <__divmodhi4>:
    1364:	97 fb       	bst	r25, 7
    1366:	07 2e       	mov	r0, r23
    1368:	16 f4       	brtc	.+4      	; 0x136e <__divmodhi4+0xa>
    136a:	00 94       	com	r0
    136c:	07 d0       	rcall	.+14     	; 0x137c <__divmodhi4_neg1>
    136e:	77 fd       	sbrc	r23, 7
    1370:	09 d0       	rcall	.+18     	; 0x1384 <__divmodhi4_neg2>
    1372:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodhi4>
    1376:	07 fc       	sbrc	r0, 7
    1378:	05 d0       	rcall	.+10     	; 0x1384 <__divmodhi4_neg2>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__divmodhi4_exit>

0000137c <__divmodhi4_neg1>:
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__divmodhi4_neg2>:
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255

0000138a <__divmodhi4_exit>:
    138a:	08 95       	ret

0000138c <__divmodsi4>:
    138c:	05 2e       	mov	r0, r21
    138e:	97 fb       	bst	r25, 7
    1390:	1e f4       	brtc	.+6      	; 0x1398 <__divmodsi4+0xc>
    1392:	00 94       	com	r0
    1394:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__negsi2>
    1398:	57 fd       	sbrc	r21, 7
    139a:	07 d0       	rcall	.+14     	; 0x13aa <__divmodsi4_neg2>
    139c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__udivmodsi4>
    13a0:	07 fc       	sbrc	r0, 7
    13a2:	03 d0       	rcall	.+6      	; 0x13aa <__divmodsi4_neg2>
    13a4:	4e f4       	brtc	.+18     	; 0x13b8 <__divmodsi4_exit>
    13a6:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__negsi2>

000013aa <__divmodsi4_neg2>:
    13aa:	50 95       	com	r21
    13ac:	40 95       	com	r20
    13ae:	30 95       	com	r19
    13b0:	21 95       	neg	r18
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	4f 4f       	sbci	r20, 0xFF	; 255
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255

000013b8 <__divmodsi4_exit>:
    13b8:	08 95       	ret

000013ba <__negsi2>:
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__udivmodhi4>:
    13ca:	aa 1b       	sub	r26, r26
    13cc:	bb 1b       	sub	r27, r27
    13ce:	51 e1       	ldi	r21, 0x11	; 17
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <__udivmodhi4_ep>

000013d2 <__udivmodhi4_loop>:
    13d2:	aa 1f       	adc	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	a6 17       	cp	r26, r22
    13d8:	b7 07       	cpc	r27, r23
    13da:	10 f0       	brcs	.+4      	; 0x13e0 <__udivmodhi4_ep>
    13dc:	a6 1b       	sub	r26, r22
    13de:	b7 0b       	sbc	r27, r23

000013e0 <__udivmodhi4_ep>:
    13e0:	88 1f       	adc	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	5a 95       	dec	r21
    13e6:	a9 f7       	brne	.-22     	; 0x13d2 <__udivmodhi4_loop>
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	08 95       	ret

000013f2 <__udivmodsi4>:
    13f2:	a1 e2       	ldi	r26, 0x21	; 33
    13f4:	1a 2e       	mov	r1, r26
    13f6:	aa 1b       	sub	r26, r26
    13f8:	bb 1b       	sub	r27, r27
    13fa:	fd 01       	movw	r30, r26
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <__udivmodsi4_ep>

000013fe <__udivmodsi4_loop>:
    13fe:	aa 1f       	adc	r26, r26
    1400:	bb 1f       	adc	r27, r27
    1402:	ee 1f       	adc	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	a2 17       	cp	r26, r18
    1408:	b3 07       	cpc	r27, r19
    140a:	e4 07       	cpc	r30, r20
    140c:	f5 07       	cpc	r31, r21
    140e:	20 f0       	brcs	.+8      	; 0x1418 <__udivmodsi4_ep>
    1410:	a2 1b       	sub	r26, r18
    1412:	b3 0b       	sbc	r27, r19
    1414:	e4 0b       	sbc	r30, r20
    1416:	f5 0b       	sbc	r31, r21

00001418 <__udivmodsi4_ep>:
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	1a 94       	dec	r1
    1422:	69 f7       	brne	.-38     	; 0x13fe <__udivmodsi4_loop>
    1424:	60 95       	com	r22
    1426:	70 95       	com	r23
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	bd 01       	movw	r22, r26
    1432:	cf 01       	movw	r24, r30
    1434:	08 95       	ret

00001436 <_exit>:
    1436:	f8 94       	cli

00001438 <__stop_program>:
    1438:	ff cf       	rjmp	.-2      	; 0x1438 <__stop_program>
