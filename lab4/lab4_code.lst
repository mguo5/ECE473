
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000010ca  0000115e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800112  00800112  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f5b  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  0000317f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb3  00000000  00000000  00003dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00004c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001944  00000000  00000000  00005605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ec       	ldi	r30, 0xCA	; 202
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 31       	cpi	r26, 0x12	; 18
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e1       	ldi	r26, 0x12	; 18
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 37       	cpi	r26, 0x73	; 115
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 89 07 	call	0xf12	; 0xf12 <main>
      c6:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
      ce:	87 b3       	in	r24, 0x17	; 23
      d0:	87 60       	ori	r24, 0x07	; 7
      d2:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
      d4:	8f ef       	ldi	r24, 0xFF	; 255
      d6:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
      d8:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
      da:	80 e5       	ldi	r24, 0x50	; 80
      dc:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
      e2:	80 b7       	in	r24, 0x30	; 48
      e4:	88 60       	ori	r24, 0x08	; 8
      e6:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
      e8:	87 b7       	in	r24, 0x37	; 55
      ea:	81 60       	ori	r24, 0x01	; 1
      ec:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
      ee:	83 b7       	in	r24, 0x33	; 51
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	83 bf       	out	0x33, r24	; 51

	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (0 << CS20) | (1 << CS21) | (0 << CS22);
      f4:	85 b5       	in	r24, 0x25	; 37
      f6:	8a 66       	ori	r24, 0x6A	; 106
      f8:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;
      fa:	80 e4       	ldi	r24, 0x40	; 64
      fc:	9c e9       	ldi	r25, 0x9C	; 156
      fe:	9d bd       	out	0x2d, r25	; 45
     100:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     102:	87 b7       	in	r24, 0x37	; 55
     104:	84 60       	ori	r24, 0x04	; 4
     106:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     108:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     10a:	8e b5       	in	r24, 0x2e	; 46
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     110:	eb e8       	ldi	r30, 0x8B	; 139
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	81 68       	ori	r24, 0x81	; 129
     118:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     11a:	ea e8       	ldi	r30, 0x8A	; 138
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8a 60       	ori	r24, 0x0A	; 10
     122:	80 83       	st	Z, r24
     124:	08 95       	ret

00000126 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     126:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     128:	e8 2f       	mov	r30, r24
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	99 b3       	in	r25, 0x19	; 25
     12e:	ee 0f       	add	r30, r30
     130:	ff 1f       	adc	r31, r31
     132:	e0 5e       	subi	r30, 0xE0	; 224
     134:	fe 4f       	sbci	r31, 0xFE	; 254
     136:	20 81       	ld	r18, Z
     138:	31 81       	ldd	r19, Z+1	; 0x01
     13a:	22 0f       	add	r18, r18
     13c:	33 1f       	adc	r19, r19
     13e:	30 6e       	ori	r19, 0xE0	; 224
     140:	89 2f       	mov	r24, r25
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <chk_buttons+0x24>
     146:	95 95       	asr	r25
     148:	87 95       	ror	r24
     14a:	4a 95       	dec	r20
     14c:	e2 f7       	brpl	.-8      	; 0x146 <chk_buttons+0x20>
     14e:	81 70       	andi	r24, 0x01	; 1
     150:	99 27       	eor	r25, r25
     152:	41 e0       	ldi	r20, 0x01	; 1
     154:	84 27       	eor	r24, r20
     156:	28 2b       	or	r18, r24
     158:	39 2b       	or	r19, r25
     15a:	31 83       	std	Z+1, r19	; 0x01
     15c:	20 83       	st	Z, r18
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	21 15       	cp	r18, r1
     162:	30 4f       	sbci	r19, 0xF0	; 240
     164:	09 f0       	breq	.+2      	; 0x168 <chk_buttons+0x42>
     166:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     168:	08 95       	ret

0000016a <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
     16a:	9d ec       	ldi	r25, 0xCD	; 205
     16c:	69 9f       	mul	r22, r25
     16e:	21 2d       	mov	r18, r1
     170:	11 24       	eor	r1, r1
     172:	32 2f       	mov	r19, r18
     174:	36 95       	lsr	r19
     176:	36 95       	lsr	r19
     178:	36 95       	lsr	r19
     17a:	4a e0       	ldi	r20, 0x0A	; 10
     17c:	34 9f       	mul	r19, r20
     17e:	60 19       	sub	r22, r0
     180:	11 24       	eor	r1, r1
     182:	36 2f       	mov	r19, r22
	tens = minute / 10;
     184:	26 95       	lsr	r18
     186:	26 95       	lsr	r18
     188:	26 95       	lsr	r18

	hundreds = hour % 10;
     18a:	89 9f       	mul	r24, r25
     18c:	91 2d       	mov	r25, r1
     18e:	11 24       	eor	r1, r1
     190:	96 95       	lsr	r25
     192:	96 95       	lsr	r25
     194:	96 95       	lsr	r25
     196:	48 2f       	mov	r20, r24
     198:	5a e0       	ldi	r21, 0x0A	; 10
     19a:	95 9f       	mul	r25, r21
     19c:	40 19       	sub	r20, r0
     19e:	11 24       	eor	r1, r1
	if(hour > 9)
     1a0:	8a 30       	cpi	r24, 0x0A	; 10
     1a2:	30 f4       	brcc	.+12     	; 0x1b0 <segsum+0x46>
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour24_flag>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	a9 f0       	breq	.+42     	; 0x1d8 <segsum+0x6e>
     1ae:	91 95       	neg	r25
		thousands = 0;

	if(sec_count % 2 == 0)
     1b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sec_count>
     1b4:	80 ff       	sbrs	r24, 0
     1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     1be:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <segment_data>
	segment_data[1] = tens;
     1c2:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <segment_data+0x1>
	
	segment_data[3] = hundreds;
     1c6:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <segment_data+0x3>
	segment_data[4] = thousands;
     1ca:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <segment_data+0x4>
     1ce:	08 95       	ret
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
		thousands = 0;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     1d0:	80 e1       	ldi	r24, 0x10	; 16
     1d2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <segment_data+0x2>
     1d6:	f3 cf       	rjmp	.-26     	; 0x1be <segsum+0x54>
	tens = minute / 10;

	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	e9 cf       	rjmp	.-46     	; 0x1ae <segsum+0x44>

000001dc <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     1dc:	81 31       	cpi	r24, 0x11	; 17
     1de:	30 f4       	brcc	.+12     	; 0x1ec <seven_seg_encoding+0x10>
     1e0:	e8 2f       	mov	r30, r24
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	e0 50       	subi	r30, 0x00	; 0
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	80 81       	ld	r24, Z
     1ea:	08 95       	ret
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     1ee:	08 95       	ret

000001f0 <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
     1f0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     1f4:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     1f8:	28 2f       	mov	r18, r24
     1fa:	23 70       	andi	r18, 0x03	; 3
     1fc:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     200:	8c 70       	andi	r24, 0x0C	; 12
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	95 95       	asr	r25
     206:	87 95       	ror	r24
     208:	95 95       	asr	r25
     20a:	87 95       	ror	r24
     20c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	41 f1       	breq	.+80     	; 0x264 <encoder_process+0x74>
     214:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>

	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     218:	23 30       	cpi	r18, 0x03	; 3
     21a:	61 f0       	breq	.+24     	; 0x234 <encoder_process+0x44>
				OCR3A -= 10;

		}
	}

	if(adjust_flag == 0x01){
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	09 f0       	breq	.+2      	; 0x222 <encoder_process+0x32>
     220:	08 95       	ret
     222:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
		hour_count = temp_hour;
     226:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>
		min_count = temp_min;
     22a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <temp_min>
     22e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <min_count>
     232:	08 95       	ret

	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     234:	31 30       	cpi	r19, 0x01	; 1
     236:	c1 f1       	breq	.+112    	; 0x2a8 <encoder_process+0xb8>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     238:	32 30       	cpi	r19, 0x02	; 2
     23a:	81 f7       	brne	.-32     	; 0x21c <encoder_process+0x2c>
		if(adjust_flag == 0x01)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	09 f4       	brne	.+2      	; 0x242 <encoder_process+0x52>
     240:	6c c0       	rjmp	.+216    	; 0x31a <encoder_process+0x12a>
				temp_hour = 12;
			}
			else
				temp_hour--;
		else{
			if((OCR3A - 10) <= 0)
     242:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     246:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     24a:	0a 97       	sbiw	r24, 0x0a	; 10
     24c:	09 f4       	brne	.+2      	; 0x250 <encoder_process+0x60>
     24e:	5a c0       	rjmp	.+180    	; 0x304 <encoder_process+0x114>
				OCR3A = 0;
			else
				OCR3A -= 10;
     250:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     254:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     258:	0a 97       	sbiw	r24, 0x0a	; 10
     25a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     25e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     262:	08 95       	ret
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00){
     264:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     268:	41 30       	cpi	r20, 0x01	; 1
     26a:	79 f0       	breq	.+30     	; 0x28a <encoder_process+0x9a>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     26c:	42 30       	cpi	r20, 0x02	; 2
     26e:	a1 f6       	brne	.-88     	; 0x218 <encoder_process+0x28>
		if(adjust_flag == 0x00){
     270:	81 11       	cpse	r24, r1
     272:	36 c0       	rjmp	.+108    	; 0x2e0 <encoder_process+0xf0>
			if((OCR2 - 10) <= 0)
     274:	83 b5       	in	r24, 0x23	; 35
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0b 97       	sbiw	r24, 0x0b	; 11
     27a:	0c f0       	brlt	.+2      	; 0x27e <encoder_process+0x8e>
     27c:	63 c0       	rjmp	.+198    	; 0x344 <encoder_process+0x154>
				OCR2 = 0;
     27e:	13 bc       	out	0x23, r1	; 35
     280:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <encoder_left>
     284:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>
     288:	c7 cf       	rjmp	.-114    	; 0x218 <encoder_process+0x28>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00){
     28a:	81 11       	cpse	r24, r1
     28c:	1f c0       	rjmp	.+62     	; 0x2cc <encoder_process+0xdc>
			if((OCR2 + 10) >= 254)
     28e:	83 b5       	in	r24, 0x23	; 35
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	84 3f       	cpi	r24, 0xF4	; 244
     294:	91 05       	cpc	r25, r1
     296:	0c f4       	brge	.+2      	; 0x29a <encoder_process+0xaa>
     298:	4b c0       	rjmp	.+150    	; 0x330 <encoder_process+0x140>
				OCR2 = 254;
     29a:	8e ef       	ldi	r24, 0xFE	; 254
     29c:	83 bd       	out	0x23, r24	; 35
     29e:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <encoder_left>
     2a2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>
     2a6:	b8 cf       	rjmp	.-144    	; 0x218 <encoder_process+0x28>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if(adjust_flag == 0x01)
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	89 f1       	breq	.+98     	; 0x30e <encoder_process+0x11e>
			temp_hour++;
		else{
			if((OCR3A + 10) > 255)
     2ac:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2b0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2b4:	0a 96       	adiw	r24, 0x0a	; 10
     2b6:	8f 3f       	cpi	r24, 0xFF	; 255
     2b8:	91 05       	cpc	r25, r1
     2ba:	d1 f0       	breq	.+52     	; 0x2f0 <encoder_process+0x100>
     2bc:	c8 f0       	brcs	.+50     	; 0x2f0 <encoder_process+0x100>
				OCR3A = 255;
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2ca:	08 95       	ret
				OCR2 += 10;

		}
		else
		{
			if(temp_min + 1 > 59)
     2cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temp_min>
     2d0:	49 2f       	mov	r20, r25
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	4b 33       	cpi	r20, 0x3B	; 59
     2d6:	51 05       	cpc	r21, r1
     2d8:	8c f1       	brlt	.+98     	; 0x33c <encoder_process+0x14c>
				temp_min = 0;
     2da:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <temp_min>
     2de:	9c cf       	rjmp	.-200    	; 0x218 <encoder_process+0x28>
			else
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){
     2e0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temp_min>
     2e4:	99 23       	and	r25, r25
     2e6:	b1 f1       	breq	.+108    	; 0x354 <encoder_process+0x164>
				temp_min = 59;
			}
			else
				temp_min--;
     2e8:	91 50       	subi	r25, 0x01	; 1
     2ea:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temp_min>
     2ee:	94 cf       	rjmp	.-216    	; 0x218 <encoder_process+0x28>
			temp_hour++;
		else{
			if((OCR3A + 10) > 255)
				OCR3A = 255;
			else
				OCR3A += 10;
     2f0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2f4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2f8:	0a 96       	adiw	r24, 0x0a	; 10
     2fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     302:	08 95       	ret
			}
			else
				temp_hour--;
		else{
			if((OCR3A - 10) <= 0)
				OCR3A = 0;
     304:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     308:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     30c:	08 95       	ret
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if(adjust_flag == 0x01)
			temp_hour++;
     30e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     318:	86 cf       	rjmp	.-244    	; 0x226 <encoder_process+0x36>
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if(adjust_flag == 0x01)
			if(temp_hour - 1 < 1){
     31a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	22 30       	cpi	r18, 0x02	; 2
     324:	31 05       	cpc	r19, r1
     326:	d4 f0       	brlt	.+52     	; 0x35c <encoder_process+0x16c>
				temp_hour = 12;
			}
			else
				temp_hour--;
     328:	81 50       	subi	r24, 0x01	; 1
     32a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     32e:	7b cf       	rjmp	.-266    	; 0x226 <encoder_process+0x36>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00){
			if((OCR2 + 10) >= 254)
				OCR2 = 254;
			else	
				OCR2 += 10;
     330:	83 b5       	in	r24, 0x23	; 35
     332:	86 5f       	subi	r24, 0xF6	; 246
     334:	83 bd       	out	0x23, r24	; 35
     336:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <encoder_left>
     33a:	6c cf       	rjmp	.-296    	; 0x214 <encoder_process+0x24>
		else
		{
			if(temp_min + 1 > 59)
				temp_min = 0;
			else
				temp_min++;
     33c:	9f 5f       	subi	r25, 0xFF	; 255
     33e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temp_min>
     342:	6a cf       	rjmp	.-300    	; 0x218 <encoder_process+0x28>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00){
			if((OCR2 - 10) <= 0)
				OCR2 = 0;
			else
				OCR2 -= 10;
     344:	83 b5       	in	r24, 0x23	; 35
     346:	8a 50       	subi	r24, 0x0A	; 10
     348:	83 bd       	out	0x23, r24	; 35
     34a:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <encoder_left>
     34e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>
     352:	62 cf       	rjmp	.-316    	; 0x218 <encoder_process+0x28>
		}
		else
		{
			if(temp_min - 1 < 0){
				temp_min = 59;
     354:	9b e3       	ldi	r25, 0x3B	; 59
     356:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temp_min>
     35a:	5e cf       	rjmp	.-324    	; 0x218 <encoder_process+0x28>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if(adjust_flag == 0x01)
			if(temp_hour - 1 < 1){
				temp_hour = 12;
     35c:	8c e0       	ldi	r24, 0x0C	; 12
     35e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     362:	61 cf       	rjmp	.-318    	; 0x226 <encoder_process+0x36>

00000364 <button_encoder_read>:
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){

 //make PORTA an input port with pullups
	DDRA = 0x00;
     364:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     36a:	80 e7       	ldi	r24, 0x70	; 112
     36c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36e:	4a e1       	ldi	r20, 0x1A	; 26
     370:	4a 95       	dec	r20
     372:	f1 f7       	brne	.-4      	; 0x370 <button_encoder_read+0xc>
     374:	00 c0       	rjmp	.+0      	; 0x376 <button_encoder_read+0x12>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     376:	99 b3       	in	r25, 0x19	; 25
     378:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <state.1808+0xe>
     37c:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <state.1808+0xf>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	50 6e       	ori	r21, 0xE0	; 224
     386:	89 2f       	mov	r24, r25
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	88 0f       	add	r24, r24
     38c:	89 2f       	mov	r24, r25
     38e:	88 1f       	adc	r24, r24
     390:	99 0b       	sbc	r25, r25
     392:	e1 e0       	ldi	r30, 0x01	; 1
     394:	8e 27       	eor	r24, r30
     396:	84 2b       	or	r24, r20
     398:	95 2b       	or	r25, r21
     39a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <state.1808+0xf>
     39e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state.1808+0xe>
	if(state[button] == 0xF000) return 1;
     3a2:	81 15       	cp	r24, r1
     3a4:	90 4f       	sbci	r25, 0xF0	; 240
     3a6:	31 f4       	brne	.+12     	; 0x3b4 <button_encoder_read+0x50>
	//asm volatile ("nop");

	_delay_us(5);

	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     3a8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adjust_flag>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	89 27       	eor	r24, r25
     3b0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     3b4:	89 b3       	in	r24, 0x19	; 25
     3b6:	86 fb       	bst	r24, 6
     3b8:	66 27       	eor	r22, r22
     3ba:	60 f9       	bld	r22, 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	68 27       	eor	r22, r24
     3c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state.1808+0xc>
     3c6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state.1808+0xd>
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	90 6e       	ori	r25, 0xE0	; 224
     3d0:	86 2b       	or	r24, r22
     3d2:	97 2b       	or	r25, r23
     3d4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <state.1808+0xd>
     3d8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state.1808+0xc>
	if(state[button] == 0xF000) return 1;
     3dc:	81 15       	cp	r24, r1
     3de:	90 4f       	sbci	r25, 0xF0	; 240
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <button_encoder_read+0x80>
     3e2:	3d c0       	rjmp	.+122    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     3e4:	49 b3       	in	r20, 0x19	; 25
     3e6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state.1808+0xa>
     3ea:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state.1808+0xb>
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	90 6e       	ori	r25, 0xE0	; 224
     3f4:	45 fb       	bst	r20, 5
     3f6:	22 27       	eor	r18, r18
     3f8:	20 f9       	bld	r18, 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	24 27       	eor	r18, r20
     400:	82 2b       	or	r24, r18
     402:	93 2b       	or	r25, r19
     404:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state.1808+0xb>
     408:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state.1808+0xa>
	if(state[button] == 0xF000) return 1;
     40c:	81 15       	cp	r24, r1
     40e:	90 4f       	sbci	r25, 0xF0	; 240
     410:	c1 f0       	breq	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
		pm_flag ^= 0x01;

  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     412:	80 e6       	ldi	r24, 0x60	; 96
     414:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     416:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     418:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     41a:	80 e4       	ldi	r24, 0x40	; 64
     41c:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     41e:	00 00       	nop

	SPDR = (adjust_flag + hour24_flag);
     420:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adjust_flag>
     424:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour24_flag>
     428:	89 0f       	add	r24, r25
     42a:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     42c:	77 9b       	sbis	0x0e, 7	; 14
     42e:	fe cf       	rjmp	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     430:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     432:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     434:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     436:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     43e:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     440:	08 95       	ret
			if(hour_count != 12)
				hour_count -= 12;
		}
	}

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     442:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <adjust_flag>
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	21 f7       	brne	.-56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     44a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <hour24_flag>
     44e:	91 11       	cpse	r25, r1
     450:	e0 cf       	rjmp	.-64     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		pm_flag ^= 0x01;
     452:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pm_flag>
     456:	89 27       	eor	r24, r25
     458:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pm_flag>
     45c:	da cf       	rjmp	.-76     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     45e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <hour24_flag>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	89 27       	eor	r24, r25
     466:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     46a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pm_flag>
     46e:	91 30       	cpi	r25, 0x01	; 1
     470:	a9 f0       	breq	.+42     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			pm_flag = 0;
			if(hour_count != 12)
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     472:	81 11       	cpse	r24, r1
     474:	b7 cf       	rjmp	.-146    	; 0x3e4 <button_encoder_read+0x80>
     476:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     47a:	8c 30       	cpi	r24, 0x0C	; 12
     47c:	08 f4       	brcc	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	b2 cf       	rjmp	.-156    	; 0x3e4 <button_encoder_read+0x80>
			pm_flag = 0x01;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pm_flag>
			if(hour_count != 12)
     486:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     48a:	8c 30       	cpi	r24, 0x0C	; 12
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	aa cf       	rjmp	.-172    	; 0x3e4 <button_encoder_read+0x80>
				hour_count -= 12;
     490:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     494:	8c 50       	subi	r24, 0x0C	; 12
     496:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>
     49a:	a4 cf       	rjmp	.-184    	; 0x3e4 <button_encoder_read+0x80>
	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	49 f7       	brne	.-46     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			pm_flag = 0;
     4a0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pm_flag>
			if(hour_count != 12)
     4a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     4a8:	8c 30       	cpi	r24, 0x0C	; 12
     4aa:	09 f4       	brne	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	9b cf       	rjmp	.-202    	; 0x3e4 <button_encoder_read+0x80>
				hour_count += 12;
     4ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     4b2:	84 5f       	subi	r24, 0xF4	; 244
     4b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>
     4b8:	95 cf       	rjmp	.-214    	; 0x3e4 <button_encoder_read+0x80>

000004ba <clock_count>:
 * also looks into the hour24_flag to bound the hour count as necessary depending on the time
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
     4ba:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <isr_count>
     4be:	80 38       	cpi	r24, 0x80	; 128
     4c0:	a1 f1       	breq	.+104    	; 0x52a <clock_count+0x70>
	  	sec_count++;
		isr_count = 0;
  	}
  	if(sec_count == 60){
     4c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sec_count>
     4c6:	8c 33       	cpi	r24, 0x3C	; 60
     4c8:	41 f1       	breq	.+80     	; 0x51a <clock_count+0x60>
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
     4ca:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <min_count>
     4ce:	8c 33       	cpi	r24, 0x3C	; 60
     4d0:	c1 f0       	breq	.+48     	; 0x502 <clock_count+0x48>
			pm_flag ^= 0x01;
		}

		min_count = 0;
  	}
	if(hour_count == 13 && hour24_flag == 0){
     4d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     4d6:	8d 30       	cpi	r24, 0x0D	; 13
     4d8:	61 f0       	breq	.+24     	; 0x4f2 <clock_count+0x38>
		hour_count = 1;	
	}
	else if(hour_count == 24 && hour24_flag == 0x01){
     4da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     4de:	88 31       	cpi	r24, 0x18	; 24
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <clock_count+0x2a>
     4e2:	08 95       	ret
     4e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour24_flag>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <clock_count+0x28>
		hour_count = 0;
     4ec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <hour_count>
     4f0:	08 95       	ret
			pm_flag ^= 0x01;
		}

		min_count = 0;
  	}
	if(hour_count == 13 && hour24_flag == 0){
     4f2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour24_flag>
     4f6:	81 11       	cpse	r24, r1
     4f8:	f0 cf       	rjmp	.-32     	; 0x4da <clock_count+0x20>
		hour_count = 1;	
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>
     500:	08 95       	ret
  	if(sec_count == 60){
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
	  	hour_count++;
     502:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>

		if(hour_count == 12){
     50c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     510:	8c 30       	cpi	r24, 0x0C	; 12
     512:	99 f0       	breq	.+38     	; 0x53a <clock_count+0x80>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     514:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <min_count>
     518:	dc cf       	rjmp	.-72     	; 0x4d2 <clock_count+0x18>
	if(isr_count == 128){
	  	sec_count++;
		isr_count = 0;
  	}
  	if(sec_count == 60){
	  	min_count++;
     51a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <min_count>
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <min_count>
		sec_count = 0;
     524:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <sec_count>
     528:	d0 cf       	rjmp	.-96     	; 0x4ca <clock_count+0x10>
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
	  	sec_count++;
     52a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sec_count>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sec_count>
		isr_count = 0;
     534:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <isr_count>
     538:	c4 cf       	rjmp	.-120    	; 0x4c2 <clock_count+0x8>
  	}
  	if(min_count == 60){
	  	hour_count++;

		if(hour_count == 12){
			pm_flag ^= 0x01;
     53a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pm_flag>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	89 27       	eor	r24, r25
     542:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pm_flag>
     546:	e6 cf       	rjmp	.-52     	; 0x514 <clock_count+0x5a>

00000548 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <input_flag>

	isr_count++;
     55a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <isr_count>
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <isr_count>

}//ISR
     564:	8f 91       	pop	r24
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_14>:


ISR(TIMER1_OVF_vect){
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25

	PORTC ^= (1 << PC3);
     57e:	95 b3       	in	r25, 0x15	; 21
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	89 27       	eor	r24, r25
     584:	85 bb       	out	0x15, r24	; 21
	TCNT1 = 40000;
     586:	80 e4       	ldi	r24, 0x40	; 64
     588:	9c e9       	ldi	r25, 0x9C	; 156
     58a:	9d bd       	out	0x2d, r25	; 45
     58c:	8c bd       	out	0x2c, r24	; 44

}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	81 11       	cpse	r24, r1
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <send_lcd+0x8>
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5a6:	77 9b       	sbis	0x0e, 7	; 14
     5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     5aa:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5ac:	77 9b       	sbis	0x0e, 7	; 14
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b4:	88 60       	ori	r24, 0x08	; 8
     5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5be:	87 7f       	andi	r24, 0xF7	; 247
     5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5c4:	08 95       	ret

000005c6 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     5c6:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <i.2094>
     5ca:	82 0f       	add	r24, r18
     5cc:	91 1d       	adc	r25, r1
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	81 11       	cpse	r24, r1
     5d4:	1f c0       	rjmp	.+62     	; 0x614 <refresh_lcd+0x4e>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5e0:	77 9b       	sbis	0x0e, 7	; 14
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     5e4:	80 e2       	ldi	r24, 0x20	; 32
     5e6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5e8:	77 9b       	sbis	0x0e, 7	; 14
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5fa:	87 7f       	andi	r24, 0xF7	; 247
     5fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     600:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <i.2094>
     604:	8f 5f       	subi	r24, 0xFF	; 255
     606:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     60a:	80 31       	cpi	r24, 0x10	; 16
     60c:	49 f1       	breq	.+82     	; 0x660 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     60e:	80 32       	cpi	r24, 0x20	; 32
     610:	69 f0       	breq	.+26     	; 0x62c <refresh_lcd+0x66>
     612:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     614:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <null_flag.2095>
     618:	91 11       	cpse	r25, r1
     61a:	e0 cf       	rjmp	.-64     	; 0x5dc <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     620:	77 9b       	sbis	0x0e, 7	; 14
     622:	fe cf       	rjmp	.-4      	; 0x620 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     624:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     626:	77 9b       	sbis	0x0e, 7	; 14
     628:	fe cf       	rjmp	.-4      	; 0x626 <refresh_lcd+0x60>
     62a:	e0 cf       	rjmp	.-64     	; 0x5ec <refresh_lcd+0x26>
     62c:	85 ed       	ldi	r24, 0xD5	; 213
     62e:	8a 95       	dec	r24
     630:	f1 f7       	brne	.-4      	; 0x62e <refresh_lcd+0x68>
     632:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     634:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     636:	77 9b       	sbis	0x0e, 7	; 14
     638:	fe cf       	rjmp	.-4      	; 0x636 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     63e:	77 9b       	sbis	0x0e, 7	; 14
     640:	fe cf       	rjmp	.-4      	; 0x63e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     642:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     646:	88 60       	ori	r24, 0x08	; 8
     648:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     64c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     650:	87 7f       	andi	r24, 0xF7	; 247
     652:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     656:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <null_flag.2095>
      i=0;
     65a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <i.2094>
     65e:	08 95       	ret
     660:	f5 ed       	ldi	r31, 0xD5	; 213
     662:	fa 95       	dec	r31
     664:	f1 f7       	brne	.-4      	; 0x662 <refresh_lcd+0x9c>
     666:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     668:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     66e:	80 ec       	ldi	r24, 0xC0	; 192
     670:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     672:	77 9b       	sbis	0x0e, 7	; 14
     674:	fe cf       	rjmp	.-4      	; 0x672 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     676:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     67a:	88 60       	ori	r24, 0x08	; 8
     67c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     680:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     684:	87 7f       	andi	r24, 0xF7	; 247
     686:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     68a:	08 95       	ret

0000068c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     68c:	66 0f       	add	r22, r22
     68e:	66 0f       	add	r22, r22
     690:	66 0f       	add	r22, r22
     692:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     694:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     696:	77 9b       	sbis	0x0e, 7	; 14
     698:	fe cf       	rjmp	.-4      	; 0x696 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     69a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     69c:	77 9b       	sbis	0x0e, 7	; 14
     69e:	fe cf       	rjmp	.-4      	; 0x69c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6a0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a4:	28 60       	ori	r18, 0x08	; 8
     6a6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6aa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ae:	27 7f       	andi	r18, 0xF7	; 247
     6b0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6b4:	25 ed       	ldi	r18, 0xD5	; 213
     6b6:	2a 95       	dec	r18
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <set_custom_character+0x2a>
     6ba:	00 00       	nop
     6bc:	fc 01       	movw	r30, r24
     6be:	9c 01       	movw	r18, r24
     6c0:	28 5f       	subi	r18, 0xF8	; 248
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6c4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     6c6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6c8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ca:	77 9b       	sbis	0x0e, 7	; 14
     6cc:	fe cf       	rjmp	.-4      	; 0x6ca <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     6ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6d0:	77 9b       	sbis	0x0e, 7	; 14
     6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6d8:	88 60       	ori	r24, 0x08	; 8
     6da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e2:	87 7f       	andi	r24, 0xF7	; 247
     6e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e8:	85 ed       	ldi	r24, 0xD5	; 213
     6ea:	8a 95       	dec	r24
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <set_custom_character+0x5e>
     6ee:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     6f0:	e2 17       	cp	r30, r18
     6f2:	f3 07       	cpc	r31, r19
     6f4:	41 f7       	brne	.-48     	; 0x6c6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     6f6:	08 95       	ret

000006f8 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     6f8:	90 e4       	ldi	r25, 0x40	; 64
     6fa:	89 9f       	mul	r24, r25
     6fc:	60 0d       	add	r22, r0
     6fe:	11 24       	eor	r1, r1
     700:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     702:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     704:	77 9b       	sbis	0x0e, 7	; 14
     706:	fe cf       	rjmp	.-4      	; 0x704 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     708:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     70a:	77 9b       	sbis	0x0e, 7	; 14
     70c:	fe cf       	rjmp	.-4      	; 0x70a <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     70e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     712:	88 60       	ori	r24, 0x08	; 8
     714:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     718:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71c:	87 7f       	andi	r24, 0xF7	; 247
     71e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     722:	08 95       	ret

00000724 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     724:	81 11       	cpse	r24, r1
     726:	13 c0       	rjmp	.+38     	; 0x74e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     72c:	77 9b       	sbis	0x0e, 7	; 14
     72e:	fe cf       	rjmp	.-4      	; 0x72c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     730:	80 e3       	ldi	r24, 0x30	; 48
     732:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     734:	77 9b       	sbis	0x0e, 7	; 14
     736:	fe cf       	rjmp	.-4      	; 0x734 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     738:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     73c:	88 60       	ori	r24, 0x08	; 8
     73e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     742:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     746:	87 7f       	andi	r24, 0xF7	; 247
     748:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     74e:	84 36       	cpi	r24, 0x64	; 100
     750:	b0 f4       	brcc	.+44     	; 0x77e <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	60 f5       	brcc	.+88     	; 0x7ae <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     75a:	77 9b       	sbis	0x0e, 7	; 14
     75c:	fe cf       	rjmp	.-4      	; 0x75a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     75e:	9d ec       	ldi	r25, 0xCD	; 205
     760:	89 9f       	mul	r24, r25
     762:	91 2d       	mov	r25, r1
     764:	11 24       	eor	r1, r1
     766:	96 95       	lsr	r25
     768:	96 95       	lsr	r25
     76a:	96 95       	lsr	r25
     76c:	2a e0       	ldi	r18, 0x0A	; 10
     76e:	92 9f       	mul	r25, r18
     770:	80 19       	sub	r24, r0
     772:	11 24       	eor	r1, r1
     774:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     776:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     778:	77 9b       	sbis	0x0e, 7	; 14
     77a:	fe cf       	rjmp	.-4      	; 0x778 <uint2lcd+0x54>
     77c:	dd cf       	rjmp	.-70     	; 0x738 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     77e:	99 e2       	ldi	r25, 0x29	; 41
     780:	89 9f       	mul	r24, r25
     782:	91 2d       	mov	r25, r1
     784:	11 24       	eor	r1, r1
     786:	92 95       	swap	r25
     788:	9f 70       	andi	r25, 0x0F	; 15
     78a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     790:	77 9b       	sbis	0x0e, 7	; 14
     792:	fe cf       	rjmp	.-4      	; 0x790 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     794:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     796:	77 9b       	sbis	0x0e, 7	; 14
     798:	fe cf       	rjmp	.-4      	; 0x796 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     79a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     79e:	98 60       	ori	r25, 0x08	; 8
     7a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a8:	97 7f       	andi	r25, 0xF7	; 247
     7aa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     7ae:	99 e2       	ldi	r25, 0x29	; 41
     7b0:	89 9f       	mul	r24, r25
     7b2:	91 2d       	mov	r25, r1
     7b4:	11 24       	eor	r1, r1
     7b6:	92 95       	swap	r25
     7b8:	9f 70       	andi	r25, 0x0F	; 15
     7ba:	38 2f       	mov	r19, r24
     7bc:	24 e6       	ldi	r18, 0x64	; 100
     7be:	92 9f       	mul	r25, r18
     7c0:	30 19       	sub	r19, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	2d ec       	ldi	r18, 0xCD	; 205
     7c6:	32 9f       	mul	r19, r18
     7c8:	91 2d       	mov	r25, r1
     7ca:	11 24       	eor	r1, r1
     7cc:	96 95       	lsr	r25
     7ce:	96 95       	lsr	r25
     7d0:	96 95       	lsr	r25
     7d2:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7d8:	77 9b       	sbis	0x0e, 7	; 14
     7da:	fe cf       	rjmp	.-4      	; 0x7d8 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     7dc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7de:	77 9b       	sbis	0x0e, 7	; 14
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7e2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e6:	98 60       	ori	r25, 0x08	; 8
     7e8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ec:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7f0:	97 7f       	andi	r25, 0xF7	; 247
     7f2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7f6:	af cf       	rjmp	.-162    	; 0x756 <uint2lcd+0x32>

000007f8 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     7f8:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     7fa:	0c 94 92 03 	jmp	0x724	; 0x724 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     802:	77 9b       	sbis	0x0e, 7	; 14
     804:	fe cf       	rjmp	.-4      	; 0x802 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     806:	9d e2       	ldi	r25, 0x2D	; 45
     808:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     80a:	77 9b       	sbis	0x0e, 7	; 14
     80c:	fe cf       	rjmp	.-4      	; 0x80a <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     80e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     812:	98 60       	ori	r25, 0x08	; 8
     814:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     818:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     81c:	97 7f       	andi	r25, 0xF7	; 247
     81e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     822:	95 ed       	ldi	r25, 0xD5	; 213
     824:	9a 95       	dec	r25
     826:	f1 f7       	brne	.-4      	; 0x824 <int2lcd+0x2c>
     828:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     82a:	81 95       	neg	r24
     82c:	0c 94 92 03 	jmp	0x724	; 0x724 <uint2lcd>

00000830 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     830:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     832:	77 9b       	sbis	0x0e, 7	; 14
     834:	fe cf       	rjmp	.-4      	; 0x832 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     836:	8e e0       	ldi	r24, 0x0E	; 14
     838:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     83a:	77 9b       	sbis	0x0e, 7	; 14
     83c:	fe cf       	rjmp	.-4      	; 0x83a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     83e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     842:	88 60       	ori	r24, 0x08	; 8
     844:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     848:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     84c:	87 7f       	andi	r24, 0xF7	; 247
     84e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     852:	08 95       	ret

00000854 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     854:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     856:	77 9b       	sbis	0x0e, 7	; 14
     858:	fe cf       	rjmp	.-4      	; 0x856 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     85a:	8c e0       	ldi	r24, 0x0C	; 12
     85c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     85e:	77 9b       	sbis	0x0e, 7	; 14
     860:	fe cf       	rjmp	.-4      	; 0x85e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     862:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     866:	88 60       	ori	r24, 0x08	; 8
     868:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     86c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     870:	87 7f       	andi	r24, 0xF7	; 247
     872:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     876:	08 95       	ret

00000878 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     878:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     87a:	77 9b       	sbis	0x0e, 7	; 14
     87c:	fe cf       	rjmp	.-4      	; 0x87a <shift_right+0x2>
  SPDR = byte;                        //send payload
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     882:	77 9b       	sbis	0x0e, 7	; 14
     884:	fe cf       	rjmp	.-4      	; 0x882 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     886:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     890:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     894:	87 7f       	andi	r24, 0xF7	; 247
     896:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     89a:	08 95       	ret

0000089c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     89c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     89e:	77 9b       	sbis	0x0e, 7	; 14
     8a0:	fe cf       	rjmp	.-4      	; 0x89e <shift_left+0x2>
  SPDR = byte;                        //send payload
     8a2:	88 e1       	ldi	r24, 0x18	; 24
     8a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8a6:	77 9b       	sbis	0x0e, 7	; 14
     8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ae:	88 60       	ori	r24, 0x08	; 8
     8b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8be:	08 95       	ret

000008c0 <strobe_lcd>:
     8c0:	e2 e6       	ldi	r30, 0x62	; 98
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	88 60       	ori	r24, 0x08	; 8
     8c8:	80 83       	st	Z, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	87 7f       	andi	r24, 0xF7	; 247
     8ce:	80 83       	st	Z, r24
     8d0:	08 95       	ret

000008d2 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8d2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8d4:	77 9b       	sbis	0x0e, 7	; 14
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <clear_display+0x2>
  SPDR = byte;                        //send payload
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8dc:	77 9b       	sbis	0x0e, 7	; 14
     8de:	fe cf       	rjmp	.-4      	; 0x8dc <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e4:	88 60       	ori	r24, 0x08	; 8
     8e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ee:	87 7f       	andi	r24, 0xF7	; 247
     8f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8f4:	8f e1       	ldi	r24, 0x1F	; 31
     8f6:	9c e1       	ldi	r25, 0x1C	; 28
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <clear_display+0x26>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <clear_display+0x2c>
     8fe:	00 00       	nop
     900:	08 95       	ret

00000902 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     902:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     904:	77 9b       	sbis	0x0e, 7	; 14
     906:	fe cf       	rjmp	.-4      	; 0x904 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     90c:	77 9b       	sbis	0x0e, 7	; 14
     90e:	fe cf       	rjmp	.-4      	; 0x90c <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     910:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     914:	88 60       	ori	r24, 0x08	; 8
     916:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     91e:	87 7f       	andi	r24, 0xF7	; 247
     920:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     924:	8f e6       	ldi	r24, 0x6F	; 111
     926:	97 e1       	ldi	r25, 0x17	; 23
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <cursor_home+0x26>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <cursor_home+0x2c>
     92e:	00 00       	nop
     930:	08 95       	ret

00000932 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     932:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     934:	77 9b       	sbis	0x0e, 7	; 14
     936:	fe cf       	rjmp	.-4      	; 0x934 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     938:	80 ec       	ldi	r24, 0xC0	; 192
     93a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     93c:	77 9b       	sbis	0x0e, 7	; 14
     93e:	fe cf       	rjmp	.-4      	; 0x93c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     940:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     944:	88 60       	ori	r24, 0x08	; 8
     946:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     94a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     94e:	87 7f       	andi	r24, 0xF7	; 247
     950:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     954:	08 95       	ret

00000956 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     956:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     958:	77 9b       	sbis	0x0e, 7	; 14
     95a:	fe cf       	rjmp	.-4      	; 0x958 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     960:	77 9b       	sbis	0x0e, 7	; 14
     962:	fe cf       	rjmp	.-4      	; 0x960 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     964:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     968:	88 60       	ori	r24, 0x08	; 8
     96a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     96e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     972:	87 7f       	andi	r24, 0xF7	; 247
     974:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     978:	08 95       	ret

0000097a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     97a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     97c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     97e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     980:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     982:	77 9b       	sbis	0x0e, 7	; 14
     984:	fe cf       	rjmp	.-4      	; 0x982 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     986:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     988:	77 9b       	sbis	0x0e, 7	; 14
     98a:	fe cf       	rjmp	.-4      	; 0x988 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     98c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     990:	88 60       	ori	r24, 0x08	; 8
     992:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     996:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     99a:	87 7f       	andi	r24, 0xF7	; 247
     99c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a0:	85 ed       	ldi	r24, 0xD5	; 213
     9a2:	8a 95       	dec	r24
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <fill_spaces+0x28>
     9a6:	00 00       	nop
     9a8:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     9aa:	51 f7       	brne	.-44     	; 0x980 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     9ac:	08 95       	ret

000009ae <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9b2:	77 9b       	sbis	0x0e, 7	; 14
     9b4:	fe cf       	rjmp	.-4      	; 0x9b2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     9b6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9b8:	77 9b       	sbis	0x0e, 7	; 14
     9ba:	fe cf       	rjmp	.-4      	; 0x9b8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ca:	87 7f       	andi	r24, 0xF7	; 247
     9cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d0:	08 95       	ret

000009d2 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     9d2:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9da:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     9dc:	df 01       	movw	r26, r30
     9de:	a4 0f       	add	r26, r20
     9e0:	b5 1f       	adc	r27, r21
     9e2:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9e4:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9e6:	77 9b       	sbis	0x0e, 7	; 14
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     9ea:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ec:	77 9b       	sbis	0x0e, 7	; 14
     9ee:	fe cf       	rjmp	.-4      	; 0x9ec <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9f0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9f4:	98 60       	ori	r25, 0x08	; 8
     9f6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fe:	97 7f       	andi	r25, 0xF7	; 247
     a00:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a04:	85 ed       	ldi	r24, 0xD5	; 213
     a06:	8a 95       	dec	r24
     a08:	f1 f7       	brne	.-4      	; 0xa06 <string2lcd+0x34>
     a0a:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a0c:	6f 5f       	subi	r22, 0xFF	; 255
     a0e:	46 2f       	mov	r20, r22
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	df 01       	movw	r26, r30
     a14:	0d 90       	ld	r0, X+
     a16:	00 20       	and	r0, r0
     a18:	e9 f7       	brne	.-6      	; 0xa14 <string2lcd+0x42>
     a1a:	9d 01       	movw	r18, r26
     a1c:	2e 1b       	sub	r18, r30
     a1e:	3f 0b       	sbc	r19, r31
     a20:	22 50       	subi	r18, 0x02	; 2
     a22:	31 09       	sbc	r19, r1
     a24:	24 17       	cp	r18, r20
     a26:	35 07       	cpc	r19, r21
     a28:	c8 f6       	brcc	.-78     	; 0x9dc <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     a2a:	08 95       	ret

00000a2c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	99 ef       	ldi	r25, 0xF9	; 249
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <lcd_init+0x4>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <lcd_init+0xa>
     a36:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a3e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a40:	77 9b       	sbis	0x0e, 7	; 14
     a42:	fe cf       	rjmp	.-4      	; 0xa40 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     a44:	80 e3       	ldi	r24, 0x30	; 48
     a46:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a48:	77 9b       	sbis	0x0e, 7	; 14
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a60:	8f e5       	ldi	r24, 0x5F	; 95
     a62:	9d e6       	ldi	r25, 0x6D	; 109
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <lcd_init+0x38>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <lcd_init+0x3e>
     a6a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a6c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a6e:	77 9b       	sbis	0x0e, 7	; 14
     a70:	fe cf       	rjmp	.-4      	; 0xa6e <lcd_init+0x42>
  SPDR = byte;                        //send payload
     a72:	80 e3       	ldi	r24, 0x30	; 48
     a74:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a76:	77 9b       	sbis	0x0e, 7	; 14
     a78:	fe cf       	rjmp	.-4      	; 0xa76 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7e:	88 60       	ori	r24, 0x08	; 8
     a80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a88:	87 7f       	andi	r24, 0xF7	; 247
     a8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8e:	8f e5       	ldi	r24, 0x5F	; 95
     a90:	9d e6       	ldi	r25, 0x6D	; 109
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <lcd_init+0x66>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <lcd_init+0x6c>
     a98:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a9a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <lcd_init+0x70>
  SPDR = byte;                        //send payload
     aa0:	80 e3       	ldi	r24, 0x30	; 48
     aa2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aa4:	77 9b       	sbis	0x0e, 7	; 14
     aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     aa8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aac:	88 60       	ori	r24, 0x08	; 8
     aae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     abc:	8f e5       	ldi	r24, 0x5F	; 95
     abe:	9d e6       	ldi	r25, 0x6D	; 109
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <lcd_init+0x94>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <lcd_init+0x9a>
     ac6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ac8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aca:	77 9b       	sbis	0x0e, 7	; 14
     acc:	fe cf       	rjmp	.-4      	; 0xaca <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     ace:	88 e3       	ldi	r24, 0x38	; 56
     ad0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad2:	77 9b       	sbis	0x0e, 7	; 14
     ad4:	fe cf       	rjmp	.-4      	; 0xad2 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ad6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ada:	88 60       	ori	r24, 0x08	; 8
     adc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae4:	87 7f       	andi	r24, 0xF7	; 247
     ae6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	8f e1       	ldi	r24, 0x1F	; 31
     aec:	9e e4       	ldi	r25, 0x4E	; 78
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <lcd_init+0xc2>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <lcd_init+0xc8>
     af4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     af6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     af8:	77 9b       	sbis	0x0e, 7	; 14
     afa:	fe cf       	rjmp	.-4      	; 0xaf8 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     afc:	88 e0       	ldi	r24, 0x08	; 8
     afe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b00:	77 9b       	sbis	0x0e, 7	; 14
     b02:	fe cf       	rjmp	.-4      	; 0xb00 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b08:	88 60       	ori	r24, 0x08	; 8
     b0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b12:	87 7f       	andi	r24, 0xF7	; 247
     b14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b18:	8f e1       	ldi	r24, 0x1F	; 31
     b1a:	9e e4       	ldi	r25, 0x4E	; 78
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <lcd_init+0xf0>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <lcd_init+0xf6>
     b22:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b24:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b26:	77 9b       	sbis	0x0e, 7	; 14
     b28:	fe cf       	rjmp	.-4      	; 0xb26 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b2e:	77 9b       	sbis	0x0e, 7	; 14
     b30:	fe cf       	rjmp	.-4      	; 0xb2e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b36:	88 60       	ori	r24, 0x08	; 8
     b38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b40:	87 7f       	andi	r24, 0xF7	; 247
     b42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b46:	8f e1       	ldi	r24, 0x1F	; 31
     b48:	9e e4       	ldi	r25, 0x4E	; 78
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <lcd_init+0x11e>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <lcd_init+0x124>
     b50:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b52:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b54:	77 9b       	sbis	0x0e, 7	; 14
     b56:	fe cf       	rjmp	.-4      	; 0xb54 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b5c:	77 9b       	sbis	0x0e, 7	; 14
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b64:	88 60       	ori	r24, 0x08	; 8
     b66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b6e:	87 7f       	andi	r24, 0xF7	; 247
     b70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b74:	8f e1       	ldi	r24, 0x1F	; 31
     b76:	9e e4       	ldi	r25, 0x4E	; 78
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <lcd_init+0x14c>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <lcd_init+0x152>
     b7e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b80:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b82:	77 9b       	sbis	0x0e, 7	; 14
     b84:	fe cf       	rjmp	.-4      	; 0xb82 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b8a:	77 9b       	sbis	0x0e, 7	; 14
     b8c:	fe cf       	rjmp	.-4      	; 0xb8a <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b92:	88 60       	ori	r24, 0x08	; 8
     b94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b9c:	87 7f       	andi	r24, 0xF7	; 247
     b9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba2:	8f e1       	ldi	r24, 0x1F	; 31
     ba4:	9e e4       	ldi	r25, 0x4E	; 78
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <lcd_init+0x17a>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <lcd_init+0x180>
     bac:	00 00       	nop
     bae:	08 95       	ret

00000bb0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     bb0:	4f 92       	push	r4
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	69 97       	sbiw	r28, 0x19	; 25
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	14 2f       	mov	r17, r20
     be2:	42 2e       	mov	r4, r18
     be4:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     be6:	00 23       	and	r16, r16
     be8:	79 f0       	breq	.+30     	; 0xc08 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     bea:	6b 01       	movw	r12, r22
     bec:	7c 01       	movw	r14, r24
     bee:	cc 24       	eor	r12, r12
     bf0:	f7 fc       	sbrc	r15, 7
     bf2:	c3 94       	inc	r12
     bf4:	dd 24       	eor	r13, r13
     bf6:	ee 24       	eor	r14, r14
     bf8:	ff 24       	eor	r15, r15
     bfa:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     bfc:	6b 01       	movw	r12, r22
     bfe:	7c 01       	movw	r14, r24
     c00:	97 fd       	sbrc	r25, 7
     c02:	a3 c0       	rjmp	.+326    	; 0xd4a <lcd_int32+0x19a>
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     c08:	44 20       	and	r4, r4
     c0a:	09 f4       	brne	.+2      	; 0xc0e <lcd_int32+0x5e>
     c0c:	96 c0       	rjmp	.+300    	; 0xd3a <lcd_int32+0x18a>
     c0e:	9e 01       	movw	r18, r28
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	59 01       	movw	r10, r18
     c16:	49 01       	movw	r8, r18
     c18:	66 24       	eor	r6, r6
     c1a:	6a 94       	dec	r6
     c1c:	64 0c       	add	r6, r4
     c1e:	71 2c       	mov	r7, r1
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	63 1a       	sub	r6, r19
     c24:	73 0a       	sbc	r7, r19
     c26:	6a 0c       	add	r6, r10
     c28:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     c2a:	2a e0       	ldi	r18, 0x0A	; 10
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	0e 94 0e 08 	call	0x101c	; 0x101c <__divmodsi4>
     c36:	e6 2f       	mov	r30, r22
     c38:	2a 8b       	std	Y+18, r18	; 0x12
     c3a:	3b 8b       	std	Y+19, r19	; 0x13
     c3c:	4c 8b       	std	Y+20, r20	; 0x14
     c3e:	5d 8b       	std	Y+21, r21	; 0x15
     c40:	6a 89       	ldd	r22, Y+18	; 0x12
     c42:	7b 89       	ldd	r23, Y+19	; 0x13
     c44:	8c 89       	ldd	r24, Y+20	; 0x14
     c46:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     c48:	20 e3       	ldi	r18, 0x30	; 48
     c4a:	2e 0f       	add	r18, r30
     c4c:	f4 01       	movw	r30, r8
     c4e:	21 93       	st	Z+, r18
     c50:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     c52:	6e 16       	cp	r6, r30
     c54:	7f 06       	cpc	r7, r31
     c56:	49 f7       	brne	.-46     	; 0xc2a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     c58:	99 24       	eor	r9, r9
     c5a:	93 94       	inc	r9
     c5c:	94 0c       	add	r9, r4
     c5e:	f5 01       	movw	r30, r10
     c60:	e4 0d       	add	r30, r4
     c62:	f1 1d       	adc	r31, r1
     c64:	2e e2       	ldi	r18, 0x2E	; 46
     c66:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     c68:	2a e0       	ldi	r18, 0x0A	; 10
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	0e 94 0e 08 	call	0x101c	; 0x101c <__divmodsi4>
     c74:	e6 2f       	mov	r30, r22
     c76:	2a 8b       	std	Y+18, r18	; 0x12
     c78:	3b 8b       	std	Y+19, r19	; 0x13
     c7a:	4c 8b       	std	Y+20, r20	; 0x14
     c7c:	5d 8b       	std	Y+21, r21	; 0x15
     c7e:	6e 8b       	std	Y+22, r22	; 0x16
     c80:	7f 8b       	std	Y+23, r23	; 0x17
     c82:	88 8f       	std	Y+24, r24	; 0x18
     c84:	99 8f       	std	Y+25, r25	; 0x19
     c86:	6a 89       	ldd	r22, Y+18	; 0x12
     c88:	7b 89       	ldd	r23, Y+19	; 0x13
     c8a:	8c 89       	ldd	r24, Y+20	; 0x14
     c8c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     c8e:	31 e0       	ldi	r19, 0x01	; 1
     c90:	39 0d       	add	r19, r9
     c92:	d5 01       	movw	r26, r10
     c94:	a9 0d       	add	r26, r9
     c96:	b1 1d       	adc	r27, r1
     c98:	e0 5d       	subi	r30, 0xD0	; 208
     c9a:	ec 93       	st	X, r30
     c9c:	93 2e       	mov	r9, r19
        }while(qr.quot);
     c9e:	61 15       	cp	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	81 05       	cpc	r24, r1
     ca4:	91 05       	cpc	r25, r1
     ca6:	01 f7       	brne	.-64     	; 0xc68 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     ca8:	11 23       	and	r17, r17
     caa:	61 f0       	breq	.+24     	; 0xcc4 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     cac:	51 10       	cpse	r5, r1
     cae:	4b c0       	rjmp	.+150    	; 0xd46 <lcd_int32+0x196>
     cb0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     cb2:	31 17       	cp	r19, r17
     cb4:	38 f4       	brcc	.+14     	; 0xcc4 <lcd_int32+0x114>
     cb6:	f5 01       	movw	r30, r10
     cb8:	e3 0f       	add	r30, r19
     cba:	f1 1d       	adc	r31, r1
     cbc:	90 83       	st	Z, r25
     cbe:	3f 5f       	subi	r19, 0xFF	; 255
     cc0:	13 13       	cpse	r17, r19
     cc2:	f9 cf       	rjmp	.-14     	; 0xcb6 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     cc4:	00 23       	and	r16, r16
     cc6:	31 f0       	breq	.+12     	; 0xcd4 <lcd_int32+0x124>
     cc8:	f5 01       	movw	r30, r10
     cca:	e3 0f       	add	r30, r19
     ccc:	f1 1d       	adc	r31, r1
     cce:	9d e2       	ldi	r25, 0x2D	; 45
     cd0:	90 83       	st	Z, r25
     cd2:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cd4:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     cd6:	31 50       	subi	r19, 0x01	; 1
     cd8:	f5 01       	movw	r30, r10
     cda:	e3 0f       	add	r30, r19
     cdc:	f1 1d       	adc	r31, r1
     cde:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce0:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce2:	77 9b       	sbis	0x0e, 7	; 14
     ce4:	fe cf       	rjmp	.-4      	; 0xce2 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     ce6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce8:	77 9b       	sbis	0x0e, 7	; 14
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cec:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf0:	98 60       	ori	r25, 0x08	; 8
     cf2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfa:	97 7f       	andi	r25, 0xF7	; 247
     cfc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d00:	85 ed       	ldi	r24, 0xD5	; 213
     d02:	8a 95       	dec	r24
     d04:	f1 f7       	brne	.-4      	; 0xd02 <lcd_int32+0x152>
     d06:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d08:	31 11       	cpse	r19, r1
     d0a:	e5 cf       	rjmp	.-54     	; 0xcd6 <lcd_int32+0x126>

}
     d0c:	69 96       	adiw	r28, 0x19	; 25
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	9f 90       	pop	r9
     d2e:	8f 90       	pop	r8
     d30:	7f 90       	pop	r7
     d32:	6f 90       	pop	r6
     d34:	5f 90       	pop	r5
     d36:	4f 90       	pop	r4
     d38:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     d3a:	91 2c       	mov	r9, r1
     d3c:	9e 01       	movw	r18, r28
     d3e:	2f 5f       	subi	r18, 0xFF	; 255
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	59 01       	movw	r10, r18
     d44:	91 cf       	rjmp	.-222    	; 0xc68 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     d46:	90 e3       	ldi	r25, 0x30	; 48
     d48:	b4 cf       	rjmp	.-152    	; 0xcb2 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     d4a:	f0 94       	com	r15
     d4c:	e0 94       	com	r14
     d4e:	d0 94       	com	r13
     d50:	c0 94       	com	r12
     d52:	c1 1c       	adc	r12, r1
     d54:	d1 1c       	adc	r13, r1
     d56:	e1 1c       	adc	r14, r1
     d58:	f1 1c       	adc	r15, r1
     d5a:	54 cf       	rjmp	.-344    	; 0xc04 <lcd_int32+0x54>

00000d5c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	61 97       	sbiw	r28, 0x11	; 17
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	5c 01       	movw	r10, r24
     d8c:	96 2e       	mov	r9, r22
     d8e:	54 2e       	mov	r5, r20
     d90:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     d92:	8b 2c       	mov	r8, r11
     d94:	88 1c       	adc	r8, r8
     d96:	88 24       	eor	r8, r8
     d98:	88 1c       	adc	r8, r8
     d9a:	78 2c       	mov	r7, r8
     d9c:	9c 01       	movw	r18, r24
     d9e:	97 fd       	sbrc	r25, 7
     da0:	9d c0       	rjmp	.+314    	; 0xedc <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
     da2:	55 20       	and	r5, r5
     da4:	09 f4       	brne	.+2      	; 0xda8 <lcd_int16+0x4c>
     da6:	8e c0       	rjmp	.+284    	; 0xec4 <lcd_int16+0x168>
     da8:	8e 01       	movw	r16, r28
     daa:	0f 5f       	subi	r16, 0xFF	; 255
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	78 01       	movw	r14, r16
     db0:	cc 24       	eor	r12, r12
     db2:	ca 94       	dec	r12
     db4:	c5 0c       	add	r12, r5
     db6:	d1 2c       	mov	r13, r1
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	c8 1a       	sub	r12, r24
     dbc:	d8 0a       	sbc	r13, r24
     dbe:	c0 0e       	add	r12, r16
     dc0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     dc2:	6a e0       	ldi	r22, 0x0A	; 10
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	c9 01       	movw	r24, r18
     dc8:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divmodhi4>
     dcc:	46 2f       	mov	r20, r22
     dce:	24 2f       	mov	r18, r20
     dd0:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     dd2:	80 5d       	subi	r24, 0xD0	; 208
     dd4:	f7 01       	movw	r30, r14
     dd6:	81 93       	st	Z+, r24
     dd8:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
     dda:	ec 15       	cp	r30, r12
     ddc:	fd 05       	cpc	r31, r13
     dde:	89 f7       	brne	.-30     	; 0xdc2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     de0:	ff 24       	eor	r15, r15
     de2:	f3 94       	inc	r15
     de4:	f5 0c       	add	r15, r5
     de6:	f8 01       	movw	r30, r16
     de8:	e5 0d       	add	r30, r5
     dea:	f1 1d       	adc	r31, r1
     dec:	8e e2       	ldi	r24, 0x2E	; 46
     dee:	80 83       	st	Z, r24
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     df2:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
     df4:	6a e0       	ldi	r22, 0x0A	; 10
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	c9 01       	movw	r24, r18
     dfa:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divmodhi4>
     dfe:	46 2f       	mov	r20, r22
     e00:	24 2f       	mov	r18, r20
     e02:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	9f 0d       	add	r25, r15
     e08:	f8 01       	movw	r30, r16
     e0a:	ef 0d       	add	r30, r15
     e0c:	f1 1d       	adc	r31, r1
     e0e:	80 5d       	subi	r24, 0xD0	; 208
     e10:	80 83       	st	Z, r24
        }
        while(qr.quot);
     e12:	21 15       	cp	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	69 f7       	brne	.-38     	; 0xdf2 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
     e18:	61 10       	cpse	r6, r1
     e1a:	59 c0       	rjmp	.+178    	; 0xece <lcd_int16+0x172>
     e1c:	b7 fc       	sbrc	r11, 7
     e1e:	63 c0       	rjmp	.+198    	; 0xee6 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     e20:	99 20       	and	r9, r9
     e22:	b1 f0       	breq	.+44     	; 0xe50 <lcd_int16+0xf4>
     e24:	68 2d       	mov	r22, r8
     e26:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     e28:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     e2a:	29 2f       	mov	r18, r25
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	49 2d       	mov	r20, r9
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	46 1b       	sub	r20, r22
     e34:	57 0b       	sbc	r21, r23
     e36:	24 17       	cp	r18, r20
     e38:	35 07       	cpc	r19, r21
     e3a:	54 f4       	brge	.+20     	; 0xe50 <lcd_int16+0xf4>
     e3c:	9f 5f       	subi	r25, 0xFF	; 255
     e3e:	f8 01       	movw	r30, r16
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	80 83       	st	Z, r24
     e46:	29 2f       	mov	r18, r25
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	24 17       	cp	r18, r20
     e4c:	35 07       	cpc	r19, r21
     e4e:	b4 f3       	brlt	.-20     	; 0xe3c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
     e50:	77 20       	and	r7, r7
     e52:	31 f0       	breq	.+12     	; 0xe60 <lcd_int16+0x104>
     e54:	f8 01       	movw	r30, r16
     e56:	e9 0f       	add	r30, r25
     e58:	f1 1d       	adc	r31, r1
     e5a:	8d e2       	ldi	r24, 0x2D	; 45
     e5c:	80 83       	st	Z, r24
     e5e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e60:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	f8 01       	movw	r30, r16
     e66:	e9 0f       	add	r30, r25
     e68:	f1 1d       	adc	r31, r1
     e6a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e6c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e6e:	77 9b       	sbis	0x0e, 7	; 14
     e70:	fe cf       	rjmp	.-4      	; 0xe6e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     e72:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e74:	77 9b       	sbis	0x0e, 7	; 14
     e76:	fe cf       	rjmp	.-4      	; 0xe74 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e7c:	88 60       	ori	r24, 0x08	; 8
     e7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8c:	f5 ed       	ldi	r31, 0xD5	; 213
     e8e:	fa 95       	dec	r31
     e90:	f1 f7       	brne	.-4      	; 0xe8e <lcd_int16+0x132>
     e92:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e94:	91 11       	cpse	r25, r1
     e96:	e5 cf       	rjmp	.-54     	; 0xe62 <lcd_int16+0x106>
}
     e98:	61 96       	adiw	r28, 0x11	; 17
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	7f 90       	pop	r7
     ebe:	6f 90       	pop	r6
     ec0:	5f 90       	pop	r5
     ec2:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     ec4:	f1 2c       	mov	r15, r1
     ec6:	8e 01       	movw	r16, r28
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	93 cf       	rjmp	.-218    	; 0xdf4 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     ece:	99 20       	and	r9, r9
     ed0:	09 f4       	brne	.+2      	; 0xed4 <lcd_int16+0x178>
     ed2:	be cf       	rjmp	.-132    	; 0xe50 <lcd_int16+0xf4>
     ed4:	68 2d       	mov	r22, r8
     ed6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     ed8:	80 e3       	ldi	r24, 0x30	; 48
     eda:	a7 cf       	rjmp	.-178    	; 0xe2a <lcd_int16+0xce>
     edc:	22 27       	eor	r18, r18
     ede:	33 27       	eor	r19, r19
     ee0:	28 1b       	sub	r18, r24
     ee2:	39 0b       	sbc	r19, r25
     ee4:	5e cf       	rjmp	.-324    	; 0xda2 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     ee6:	f3 94       	inc	r15
     ee8:	f3 94       	inc	r15
     eea:	f8 01       	movw	r30, r16
     eec:	e9 0f       	add	r30, r25
     eee:	f1 1d       	adc	r31, r1
     ef0:	8d e2       	ldi	r24, 0x2D	; 45
     ef2:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     ef4:	99 20       	and	r9, r9
     ef6:	59 f0       	breq	.+22     	; 0xf0e <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     ef8:	2f 2d       	mov	r18, r15
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	49 2d       	mov	r20, r9
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	24 17       	cp	r18, r20
     f02:	35 07       	cpc	r19, r21
     f04:	24 f4       	brge	.+8      	; 0xf0e <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     f06:	9f 2d       	mov	r25, r15
                bSigned = 0;
     f08:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	97 cf       	rjmp	.-210    	; 0xe3c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     f0e:	9f 2d       	mov	r25, r15
     f10:	a7 cf       	rjmp	.-178    	; 0xe60 <lcd_int16+0x104>

00000f12 <main>:
//***********************************************************************************
int main()
{


sec_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48)*10;
     f12:	8e e1       	ldi	r24, 0x1E	; 30
     f14:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48)*10;
     f18:	8a e5       	ldi	r24, 0x5A	; 90
     f1a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <min_count>
hour_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48)*10;
     f1e:	88 e2       	ldi	r24, 0x28	; 40
     f20:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour_count>


//set port bits 4-7 B as outputs
DDRB = 0xF0;
     f24:	80 ef       	ldi	r24, 0xF0	; 240
     f26:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
     f28:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
     f2a:	85 b3       	in	r24, 0x15	; 21
     f2c:	85 bb       	out	0x15, r24	; 21

//initialize encoding value to be used
uint8_t encoding = 0;

//call function to initialize SPI and TC
initialization();
     f2e:	0e 94 67 00 	call	0xce	; 0xce <initialization>

//enable global interrupts
sei();
     f32:	78 94       	sei

OCR2 = 0;
     f34:	13 bc       	out	0x23, r1	; 35
OCR3A = 20;
     f36:	84 e1       	ldi	r24, 0x14	; 20
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f3e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	temp_min = min_count;
	temp_hour = hour_count;

	segsum(hour_count, min_count);
  //make PORTA an output
	DDRA = 0xFF;
     f42:	cf ef       	ldi	r28, 0xFF	; 255
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
     f44:	10 e4       	ldi	r17, 0x40	; 64
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
     f46:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
     f48:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <input_flag>
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <main+0x40>
     f50:	46 c0       	rjmp	.+140    	; 0xfde <main+0xcc>
	  	button_encoder_read();
	  	input_flag = FALSE;
  	}

	clock_count();
     f52:	0e 94 5d 02 	call	0x4ba	; 0x4ba <clock_count>

	temp_min = min_count;
     f56:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <min_count>
     f5a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <temp_min>
	temp_hour = hour_count;
     f5e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     f62:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

	segsum(hour_count, min_count);
     f66:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <min_count>
     f6a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour_count>
     f6e:	0e 94 b5 00 	call	0x16a	; 0x16a <segsum>
  //make PORTA an output
	DDRA = 0xFF;
     f72:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
     f74:	00 00       	nop
     f76:	ae e3       	ldi	r26, 0x3E	; 62
     f78:	b1 e0       	ldi	r27, 0x01	; 1
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <main+0x96>
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	e0 50       	subi	r30, 0x00	; 0
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	20 81       	ld	r18, Z
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	91 05       	cpc	r25, r1
     f8c:	a1 f0       	breq	.+40     	; 0xfb6 <main+0xa4>
			encoding &= 0b01111111;
		PORTA = 0xFF;
     f8e:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
     f90:	38 2f       	mov	r19, r24
     f92:	32 95       	swap	r19
     f94:	30 7f       	andi	r19, 0xF0	; 240
     f96:	38 bb       	out	0x18, r19	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
     f98:	2b bb       	out	0x1b, r18	; 27
     f9a:	ef e3       	ldi	r30, 0x3F	; 63
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x8c>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <main+0x92>
     fa4:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
     fa6:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
     fa8:	ed 91       	ld	r30, X+
     faa:	e1 31       	cpi	r30, 0x11	; 17
     fac:	48 f3       	brcs	.-46     	; 0xf80 <main+0x6e>
     fae:	2f ef       	ldi	r18, 0xFF	; 255
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	91 05       	cpc	r25, r1
     fb4:	61 f7       	brne	.-40     	; 0xf8e <main+0x7c>
     fb6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pm_flag>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <main+0xd6>
			encoding &= 0b01111111;
		PORTA = 0xFF;
     fbe:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
     fc0:	18 bb       	out	0x18, r17	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
     fc2:	2b bb       	out	0x1b, r18	; 27
     fc4:	8f e3       	ldi	r24, 0x3F	; 63
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <main+0xb6>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <main+0xbc>
     fce:	00 00       	nop
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
     fd0:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
     fd2:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
     fd4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <input_flag>
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	09 f0       	breq	.+2      	; 0xfde <main+0xcc>
     fdc:	ba cf       	rjmp	.-140    	; 0xf52 <main+0x40>
	  	button_encoder_read();
     fde:	0e 94 b2 01 	call	0x364	; 0x364 <button_encoder_read>
	  	input_flag = FALSE;
     fe2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <input_flag>
     fe6:	b5 cf       	rjmp	.-150    	; 0xf52 <main+0x40>
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
     fe8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour24_flag>
     fec:	81 11       	cpse	r24, r1
     fee:	e7 cf       	rjmp	.-50     	; 0xfbe <main+0xac>
			encoding &= 0b01111111;
     ff0:	2f 77       	andi	r18, 0x7F	; 127
     ff2:	e5 cf       	rjmp	.-54     	; 0xfbe <main+0xac>

00000ff4 <__divmodhi4>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	07 2e       	mov	r0, r23
     ff8:	16 f4       	brtc	.+4      	; 0xffe <__divmodhi4+0xa>
     ffa:	00 94       	com	r0
     ffc:	07 d0       	rcall	.+14     	; 0x100c <__divmodhi4_neg1>
     ffe:	77 fd       	sbrc	r23, 7
    1000:	09 d0       	rcall	.+18     	; 0x1014 <__divmodhi4_neg2>
    1002:	0e 94 2d 08 	call	0x105a	; 0x105a <__udivmodhi4>
    1006:	07 fc       	sbrc	r0, 7
    1008:	05 d0       	rcall	.+10     	; 0x1014 <__divmodhi4_neg2>
    100a:	3e f4       	brtc	.+14     	; 0x101a <__divmodhi4_exit>

0000100c <__divmodhi4_neg1>:
    100c:	90 95       	com	r25
    100e:	81 95       	neg	r24
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <__divmodhi4_neg2>:
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255

0000101a <__divmodhi4_exit>:
    101a:	08 95       	ret

0000101c <__divmodsi4>:
    101c:	05 2e       	mov	r0, r21
    101e:	97 fb       	bst	r25, 7
    1020:	1e f4       	brtc	.+6      	; 0x1028 <__divmodsi4+0xc>
    1022:	00 94       	com	r0
    1024:	0e 94 25 08 	call	0x104a	; 0x104a <__negsi2>
    1028:	57 fd       	sbrc	r21, 7
    102a:	07 d0       	rcall	.+14     	; 0x103a <__divmodsi4_neg2>
    102c:	0e 94 41 08 	call	0x1082	; 0x1082 <__udivmodsi4>
    1030:	07 fc       	sbrc	r0, 7
    1032:	03 d0       	rcall	.+6      	; 0x103a <__divmodsi4_neg2>
    1034:	4e f4       	brtc	.+18     	; 0x1048 <__divmodsi4_exit>
    1036:	0c 94 25 08 	jmp	0x104a	; 0x104a <__negsi2>

0000103a <__divmodsi4_neg2>:
    103a:	50 95       	com	r21
    103c:	40 95       	com	r20
    103e:	30 95       	com	r19
    1040:	21 95       	neg	r18
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	4f 4f       	sbci	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255

00001048 <__divmodsi4_exit>:
    1048:	08 95       	ret

0000104a <__negsi2>:
    104a:	90 95       	com	r25
    104c:	80 95       	com	r24
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret

0000105a <__udivmodhi4>:
    105a:	aa 1b       	sub	r26, r26
    105c:	bb 1b       	sub	r27, r27
    105e:	51 e1       	ldi	r21, 0x11	; 17
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <__udivmodhi4_ep>

00001062 <__udivmodhi4_loop>:
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	a6 17       	cp	r26, r22
    1068:	b7 07       	cpc	r27, r23
    106a:	10 f0       	brcs	.+4      	; 0x1070 <__udivmodhi4_ep>
    106c:	a6 1b       	sub	r26, r22
    106e:	b7 0b       	sbc	r27, r23

00001070 <__udivmodhi4_ep>:
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	5a 95       	dec	r21
    1076:	a9 f7       	brne	.-22     	; 0x1062 <__udivmodhi4_loop>
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	08 95       	ret

00001082 <__udivmodsi4>:
    1082:	a1 e2       	ldi	r26, 0x21	; 33
    1084:	1a 2e       	mov	r1, r26
    1086:	aa 1b       	sub	r26, r26
    1088:	bb 1b       	sub	r27, r27
    108a:	fd 01       	movw	r30, r26
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <__udivmodsi4_ep>

0000108e <__udivmodsi4_loop>:
    108e:	aa 1f       	adc	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	ee 1f       	adc	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	a2 17       	cp	r26, r18
    1098:	b3 07       	cpc	r27, r19
    109a:	e4 07       	cpc	r30, r20
    109c:	f5 07       	cpc	r31, r21
    109e:	20 f0       	brcs	.+8      	; 0x10a8 <__udivmodsi4_ep>
    10a0:	a2 1b       	sub	r26, r18
    10a2:	b3 0b       	sbc	r27, r19
    10a4:	e4 0b       	sbc	r30, r20
    10a6:	f5 0b       	sbc	r31, r21

000010a8 <__udivmodsi4_ep>:
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	1a 94       	dec	r1
    10b2:	69 f7       	brne	.-38     	; 0x108e <__udivmodsi4_loop>
    10b4:	60 95       	com	r22
    10b6:	70 95       	com	r23
    10b8:	80 95       	com	r24
    10ba:	90 95       	com	r25
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	bd 01       	movw	r22, r26
    10c2:	cf 01       	movw	r24, r30
    10c4:	08 95       	ret

000010c6 <_exit>:
    10c6:	f8 94       	cli

000010c8 <__stop_program>:
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <__stop_program>
