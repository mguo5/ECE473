
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800148  00800148  0000163c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002334  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce4  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001221  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000592c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000764  00000000  00000000  00005c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aa5  00000000  00000000  000063e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e6       	ldi	r30, 0x60	; 96
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3b       	cpi	r26, 0xB6	; 182
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <main>
      c6:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
      ce:	85 e2       	ldi	r24, 0x25	; 37
      d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
      d4:	8c e2       	ldi	r24, 0x2C	; 44
      d6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
      da:	8a e0       	ldi	r24, 0x0A	; 10
      dc:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
      e0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
      e4:	8d 30       	cpi	r24, 0x0D	; 13
      e6:	18 f0       	brcs	.+6      	; 0xee <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pm_flag>
      ee:	08 95       	ret

000000f0 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
      f0:	87 b3       	in	r24, 0x17	; 23
      f2:	87 60       	ori	r24, 0x07	; 7
      f4:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
      fa:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
      fc:	80 e5       	ldi	r24, 0x50	; 80
      fe:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     104:	80 b7       	in	r24, 0x30	; 48
     106:	88 60       	ori	r24, 0x08	; 8
     108:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     10a:	87 b7       	in	r24, 0x37	; 55
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     110:	83 b7       	in	r24, 0x33	; 51
     112:	81 60       	ori	r24, 0x01	; 1
     114:	83 bf       	out	0x33, r24	; 51

	//enable fast PWM mode for TC2 for the seven segment adjust
	//prescale of 8
	//clear bit during output compare
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << CS20) | (0 << CS21) | (0 << CS22);
     116:	85 b5       	in	r24, 0x25	; 37
     118:	89 66       	ori	r24, 0x69	; 105
     11a:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;				//set TCNT1 to obtain approximately 300Hz for beep
     11c:	80 e4       	ldi	r24, 0x40	; 64
     11e:	9c e9       	ldi	r25, 0x9C	; 156
     120:	9d bd       	out	0x2d, r25	; 45
     122:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     124:	87 b7       	in	r24, 0x37	; 55
     126:	84 60       	ori	r24, 0x04	; 4
     128:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     12a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     12c:	8e b5       	in	r24, 0x2e	; 46
     12e:	81 60       	ori	r24, 0x01	; 1
     130:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     132:	eb e8       	ldi	r30, 0x8B	; 139
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	81 68       	ori	r24, 0x81	; 129
     13a:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     13c:	ea e8       	ldi	r30, 0x8A	; 138
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	8a 60       	ori	r24, 0x0A	; 10
     144:	80 83       	st	Z, r24
	
	ADMUX = 0x67; //single-ended, input PORTF bit 7, left adjusted, 10 bits
     146:	87 e6       	ldi	r24, 0x67	; 103
     148:	87 b9       	out	0x07, r24	; 7
	//ADC enabled, start the conversion, single shot mode, interrupts enabled 
	ADCSRA = (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); 
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	86 b9       	out	0x06, r24	; 6
     14e:	08 95       	ret

00000150 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     150:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     152:	e8 2f       	mov	r30, r24
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	99 b3       	in	r25, 0x19	; 25
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	ed 59       	subi	r30, 0x9D	; 157
     15e:	fe 4f       	sbci	r31, 0xFE	; 254
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	30 6e       	ori	r19, 0xE0	; 224
     16a:	89 2f       	mov	r24, r25
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <chk_buttons+0x24>
     170:	95 95       	asr	r25
     172:	87 95       	ror	r24
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <chk_buttons+0x20>
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	99 27       	eor	r25, r25
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	84 27       	eor	r24, r20
     180:	28 2b       	or	r18, r24
     182:	39 2b       	or	r19, r25
     184:	31 83       	std	Z+1, r19	; 0x01
     186:	20 83       	st	Z, r18
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	21 15       	cp	r18, r1
     18c:	30 4f       	sbci	r19, 0xF0	; 240
     18e:	09 f0       	breq	.+2      	; 0x192 <chk_buttons+0x42>
     190:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     192:	08 95       	ret

00000194 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  
	//parse out the two digits for the minutes
	ones = minute % 10;
     194:	9d ec       	ldi	r25, 0xCD	; 205
     196:	69 9f       	mul	r22, r25
     198:	21 2d       	mov	r18, r1
     19a:	11 24       	eor	r1, r1
     19c:	32 2f       	mov	r19, r18
     19e:	36 95       	lsr	r19
     1a0:	36 95       	lsr	r19
     1a2:	36 95       	lsr	r19
     1a4:	4a e0       	ldi	r20, 0x0A	; 10
     1a6:	34 9f       	mul	r19, r20
     1a8:	60 19       	sub	r22, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	36 2f       	mov	r19, r22
	tens = minute / 10;
     1ae:	26 95       	lsr	r18
     1b0:	26 95       	lsr	r18
     1b2:	26 95       	lsr	r18

	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
     1b4:	89 9f       	mul	r24, r25
     1b6:	91 2d       	mov	r25, r1
     1b8:	11 24       	eor	r1, r1
     1ba:	96 95       	lsr	r25
     1bc:	96 95       	lsr	r25
     1be:	96 95       	lsr	r25
     1c0:	48 2f       	mov	r20, r24
     1c2:	5a e0       	ldi	r21, 0x0A	; 10
     1c4:	95 9f       	mul	r25, r21
     1c6:	40 19       	sub	r20, r0
     1c8:	11 24       	eor	r1, r1
	if(hour > 9)
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	30 f4       	brcc	.+12     	; 0x1da <segsum+0x46>
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	a9 f0       	breq	.+42     	; 0x202 <segsum+0x6e>
     1d8:	91 95       	neg	r25
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
     1da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <sec_count>
     1de:	80 ff       	sbrs	r24, 0
     1e0:	0c c0       	rjmp	.+24     	; 0x1fa <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     1e8:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <segment_data>
	segment_data[1] = tens;
     1ec:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <segment_data+0x1>
	
	segment_data[3] = hundreds;
     1f0:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <segment_data+0x3>
	segment_data[4] = thousands;
     1f4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <segment_data+0x4>
     1f8:	08 95       	ret
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <segment_data+0x2>
     200:	f3 cf       	rjmp	.-26     	; 0x1e8 <segsum+0x54>
	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <segsum+0x44>

00000206 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     206:	81 31       	cpi	r24, 0x11	; 17
     208:	30 f4       	brcc	.+12     	; 0x216 <seven_seg_encoding+0x10>
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e0 50       	subi	r30, 0x00	; 0
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 81       	ld	r24, Z
     214:	08 95       	ret
     216:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     218:	08 95       	ret

0000021a <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
     21a:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     21e:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     222:	28 2f       	mov	r18, r24
     224:	23 70       	andi	r18, 0x03	; 3
     226:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     22a:	8c 70       	andi	r24, 0x0C	; 12
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	95 95       	asr	r25
     230:	87 95       	ror	r24
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     23a:	83 30       	cpi	r24, 0x03	; 3
     23c:	e9 f1       	breq	.+122    	; 0x2b8 <encoder_process+0x9e>
     23e:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <adjust_flag>
     242:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adjust_alarm>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     246:	23 30       	cpi	r18, 0x03	; 3
     248:	d9 f0       	breq	.+54     	; 0x280 <encoder_process+0x66>
		}
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
     24a:	31 30       	cpi	r19, 0x01	; 1
     24c:	81 f0       	breq	.+32     	; 0x26e <encoder_process+0x54>
		min_count = temp_min;
	}

	//if the alarm adjustment flag is set, set the alarm time
	//to the temporary variables used to increment/decrement
	if(adjust_alarm == 0x01){
     24e:	41 30       	cpi	r20, 0x01	; 1
     250:	09 f0       	breq	.+2      	; 0x254 <encoder_process+0x3a>
     252:	08 95       	ret
		alarm_time_min = temp_min;
     254:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_min>
     258:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <alarm_time_min>
		alarm_time_hour = temp_hour;
     25c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     260:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <alarm_time_hour>
		temp_pm_flag = pm_flag;			//also save the pm_flag
     264:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pm_flag>
     268:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     26c:	08 95       	ret
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     26e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     272:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <hour_count>
		min_count = temp_min;
     276:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_min>
     27a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <min_count>
     27e:	e7 cf       	rjmp	.-50     	; 0x24e <encoder_process+0x34>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     280:	51 30       	cpi	r21, 0x01	; 1
     282:	09 f4       	brne	.+2      	; 0x286 <encoder_process+0x6c>
     284:	60 c0       	rjmp	.+192    	; 0x346 <encoder_process+0x12c>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     286:	52 30       	cpi	r21, 0x02	; 2
     288:	01 f7       	brne	.-64     	; 0x24a <encoder_process+0x30>
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     28a:	31 30       	cpi	r19, 0x01	; 1
     28c:	09 f4       	brne	.+2      	; 0x290 <encoder_process+0x76>
     28e:	b1 c0       	rjmp	.+354    	; 0x3f2 <encoder_process+0x1d8>
     290:	41 30       	cpi	r20, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <encoder_process+0x7c>
     294:	8e c0       	rjmp	.+284    	; 0x3b2 <encoder_process+0x198>
			else
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
     296:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     29a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     29e:	0a 97       	sbiw	r24, 0x0a	; 10
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <encoder_process+0x8a>
     2a2:	ba c0       	rjmp	.+372    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				OCR3A = 0;
			else
				OCR3A -= 10;			//decrement resolution by 10s to avoid spinning a lot
     2a4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2a8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2ac:	0a 97       	sbiw	r24, 0x0a	; 10
     2ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2b6:	c9 cf       	rjmp	.-110    	; 0x24a <encoder_process+0x30>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     2b8:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     2bc:	41 30       	cpi	r20, 0x01	; 1
     2be:	01 f1       	breq	.+64     	; 0x300 <encoder_process+0xe6>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     2c0:	42 30       	cpi	r20, 0x02	; 2
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <encoder_process+0xac>
     2c4:	be cf       	rjmp	.-132    	; 0x242 <encoder_process+0x28>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     2c6:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adjust_alarm>
     2ca:	31 11       	cpse	r19, r1
     2cc:	10 c0       	rjmp	.+32     	; 0x2ee <encoder_process+0xd4>
     2ce:	41 11       	cpse	r20, r1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <encoder_process+0xd4>
     2d2:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <manual_brightness>
     2d6:	61 30       	cpi	r22, 0x01	; 1
     2d8:	51 f4       	brne	.+20     	; 0x2ee <encoder_process+0xd4>
			if((OCR2 - 5) <= 0)
     2da:	23 b5       	in	r18, 0x23	; 35
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	26 30       	cpi	r18, 0x06	; 6
     2e0:	31 05       	cpc	r19, r1
     2e2:	0c f0       	brlt	.+2      	; 0x2e6 <encoder_process+0xcc>
     2e4:	a8 c0       	rjmp	.+336    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				OCR2 = 3;
     2e6:	83 bd       	out	0x23, r24	; 35
     2e8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <encoder_left>
     2ec:	a8 cf       	rjmp	.-176    	; 0x23e <encoder_process+0x24>
			else
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
     2ee:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_min>
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <encoder_process+0xde>
     2f6:	4a c0       	rjmp	.+148    	; 0x38c <encoder_process+0x172>
				temp_min = 59;			
			}
			else
				temp_min--;				//decrement minute when right encoder turned to left
     2f8:	81 50       	subi	r24, 0x01	; 1
     2fa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_min>
     2fe:	a3 cf       	rjmp	.-186    	; 0x246 <encoder_process+0x2c>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     300:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adjust_alarm>
     304:	31 11       	cpse	r19, r1
     306:	15 c0       	rjmp	.+42     	; 0x332 <encoder_process+0x118>
     308:	41 11       	cpse	r20, r1
     30a:	13 c0       	rjmp	.+38     	; 0x332 <encoder_process+0x118>
     30c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <manual_brightness>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	79 f4       	brne	.+30     	; 0x332 <encoder_process+0x118>
			if((OCR2 + 5) >= 254)
     314:	83 b5       	in	r24, 0x23	; 35
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	89 3f       	cpi	r24, 0xF9	; 249
     31a:	91 05       	cpc	r25, r1
     31c:	0c f4       	brge	.+2      	; 0x320 <encoder_process+0x106>
     31e:	85 c0       	rjmp	.+266    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				OCR2 = 250;
     320:	8a ef       	ldi	r24, 0xFA	; 250
     322:	83 bd       	out	0x23, r24	; 35
     324:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <encoder_left>
     328:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <adjust_flag>
     32c:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adjust_alarm>
     330:	8a cf       	rjmp	.-236    	; 0x246 <encoder_process+0x2c>
				OCR2 += 5;

		}
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
     332:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_min>
     336:	68 2f       	mov	r22, r24
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	6b 33       	cpi	r22, 0x3B	; 59
     33c:	71 05       	cpc	r23, r1
     33e:	c4 f0       	brlt	.+48     	; 0x370 <encoder_process+0x156>
				temp_min = 0;
     340:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <temp_min>
     344:	80 cf       	rjmp	.-256    	; 0x246 <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     346:	31 30       	cpi	r19, 0x01	; 1
     348:	09 f4       	brne	.+2      	; 0x34c <encoder_process+0x132>
     34a:	42 c0       	rjmp	.+132    	; 0x3d0 <encoder_process+0x1b6>
     34c:	41 30       	cpi	r20, 0x01	; 1
     34e:	11 f1       	breq	.+68     	; 0x394 <encoder_process+0x17a>
				temp_hour++;			//increment hour when left encoder turned right

		}
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
     350:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     354:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     358:	0a 96       	adiw	r24, 0x0a	; 10
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	91 05       	cpc	r25, r1
     35e:	61 f0       	breq	.+24     	; 0x378 <encoder_process+0x15e>
     360:	58 f0       	brcs	.+22     	; 0x378 <encoder_process+0x15e>
				OCR3A = 255;
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     36a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     36e:	6d cf       	rjmp	.-294    	; 0x24a <encoder_process+0x30>
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
				temp_min = 0;
			else
				temp_min++;				//increment minute when right encoder turned to the right
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_min>
     376:	67 cf       	rjmp	.-306    	; 0x246 <encoder_process+0x2c>
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
				OCR3A = 255;
			else
				OCR3A += 10;			//increment resolution by 10s to avoid spinning a lot
     378:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     37c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     380:	0a 96       	adiw	r24, 0x0a	; 10
     382:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     386:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     38a:	5f cf       	rjmp	.-322    	; 0x24a <encoder_process+0x30>
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
				temp_min = 59;			
     38c:	8b e3       	ldi	r24, 0x3B	; 59
     38e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_min>
     392:	59 cf       	rjmp	.-334    	; 0x246 <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     394:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
     398:	81 11       	cpse	r24, r1
     39a:	1e c0       	rjmp	.+60     	; 0x3d8 <encoder_process+0x1be>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
     39c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     3a0:	68 2f       	mov	r22, r24
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	6c 30       	cpi	r22, 0x0C	; 12
     3a6:	71 05       	cpc	r23, r1
     3a8:	9c f1       	brlt	.+102    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				temp_hour = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
     3b0:	4c cf       	rjmp	.-360    	; 0x24a <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3b2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
     3b6:	81 11       	cpse	r24, r1
     3b8:	20 c0       	rjmp	.+64     	; 0x3fa <encoder_process+0x1e0>
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
     3ba:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     3be:	68 2f       	mov	r22, r24
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	62 30       	cpi	r22, 0x02	; 2
     3c4:	71 05       	cpc	r23, r1
     3c6:	6c f1       	brlt	.+90     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
				temp_hour = 23;
			else
				temp_hour--;			//decrement hour when left encoder turned left
     3c8:	81 50       	subi	r24, 0x01	; 1
     3ca:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
     3ce:	3d cf       	rjmp	.-390    	; 0x24a <encoder_process+0x30>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3d0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
     3d4:	88 23       	and	r24, r24
     3d6:	11 f3       	breq	.-60     	; 0x39c <encoder_process+0x182>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	09 f0       	breq	.+2      	; 0x3de <encoder_process+0x1c4>
     3dc:	b9 cf       	rjmp	.-142    	; 0x350 <encoder_process+0x136>
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
     3de:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     3e2:	68 2f       	mov	r22, r24
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	67 31       	cpi	r22, 0x17	; 23
     3e8:	71 05       	cpc	r23, r1
     3ea:	94 f0       	brlt	.+36     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				temp_hour = 0;
     3ec:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <temp_hour>
     3f0:	2c cf       	rjmp	.-424    	; 0x24a <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     3f2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
     3f6:	88 23       	and	r24, r24
     3f8:	01 f3       	breq	.-64     	; 0x3ba <encoder_process+0x1a0>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	09 f0       	breq	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	4b cf       	rjmp	.-362    	; 0x296 <encoder_process+0x7c>
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
     400:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     404:	81 11       	cpse	r24, r1
     406:	e0 cf       	rjmp	.-64     	; 0x3c8 <encoder_process+0x1ae>
				temp_hour = 23;
     408:	87 e1       	ldi	r24, 0x17	; 23
     40a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
     40e:	1d cf       	rjmp	.-454    	; 0x24a <encoder_process+0x30>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
				temp_hour = 0;
			else
				temp_hour++;			//increment hour when left encoder turned right
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
     416:	19 cf       	rjmp	.-462    	; 0x24a <encoder_process+0x30>
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
				OCR3A = 0;
     418:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     41c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     420:	14 cf       	rjmp	.-472    	; 0x24a <encoder_process+0x30>
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 12;
     422:	8c e0       	ldi	r24, 0x0C	; 12
     424:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
     428:	10 cf       	rjmp	.-480    	; 0x24a <encoder_process+0x30>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 + 5) >= 254)
				OCR2 = 250;
			else	
				OCR2 += 5;
     42a:	83 b5       	in	r24, 0x23	; 35
     42c:	8b 5f       	subi	r24, 0xFB	; 251
     42e:	83 bd       	out	0x23, r24	; 35
     430:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <encoder_left>
     434:	04 cf       	rjmp	.-504    	; 0x23e <encoder_process+0x24>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 - 5) <= 0)
				OCR2 = 3;
			else
				OCR2 -= 5;
     436:	83 b5       	in	r24, 0x23	; 35
     438:	85 50       	subi	r24, 0x05	; 5
     43a:	83 bd       	out	0x23, r24	; 35
     43c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <encoder_left>
     440:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <adjust_flag>
     444:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adjust_alarm>
     448:	fe ce       	rjmp	.-516    	; 0x246 <encoder_process+0x2c>

0000044a <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     45a:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     460:	80 e7       	ldi	r24, 0x70	; 112
     462:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	2a e1       	ldi	r18, 0x1A	; 26
     466:	2a 95       	dec	r18
     468:	f1 f7       	brne	.-4      	; 0x466 <button_encoder_read+0x1c>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <button_encoder_read+0x22>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     46c:	99 b3       	in	r25, 0x19	; 25
     46e:	e0 90 71 01 	lds	r14, 0x0171	; 0x800171 <state.1823+0xe>
     472:	f0 90 72 01 	lds	r15, 0x0172	; 0x800172 <state.1823+0xf>
     476:	ee 0c       	add	r14, r14
     478:	ff 1c       	adc	r15, r15
     47a:	30 ee       	ldi	r19, 0xE0	; 224
     47c:	f3 2a       	or	r15, r19
     47e:	89 2f       	mov	r24, r25
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9c 01       	movw	r18, r24
     484:	22 0f       	add	r18, r18
     486:	23 2f       	mov	r18, r19
     488:	22 1f       	adc	r18, r18
     48a:	33 0b       	sbc	r19, r19
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	28 27       	eor	r18, r24
     490:	c9 01       	movw	r24, r18
     492:	8e 29       	or	r24, r14
     494:	9f 29       	or	r25, r15
     496:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <state.1823+0xf>
     49a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <state.1823+0xe>
	if(state[button] == 0xF000) return 1;
     49e:	81 15       	cp	r24, r1
     4a0:	90 4f       	sbci	r25, 0xF0	; 240
     4a2:	31 f4       	brne	.+12     	; 0x4b0 <button_encoder_read+0x66>
	_delay_us(5);

	//poll if button 7 is pressed
	//this toggles if the time adjustment flag is set or not
	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     4a4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <adjust_flag>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	89 27       	eor	r24, r25
     4ac:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4b0:	89 b3       	in	r24, 0x19	; 25
     4b2:	86 fb       	bst	r24, 6
     4b4:	88 27       	eor	r24, r24
     4b6:	80 f9       	bld	r24, 0
     4b8:	c8 2f       	mov	r28, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	d3 2f       	mov	r29, r19
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	c8 27       	eor	r28, r24
     4c2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <state.1823+0xc>
     4c6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <state.1823+0xd>
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	90 6e       	ori	r25, 0xE0	; 224
     4d0:	c8 2b       	or	r28, r24
     4d2:	d9 2b       	or	r29, r25
     4d4:	d0 93 70 01 	sts	0x0170, r29	; 0x800170 <state.1823+0xd>
     4d8:	c0 93 6f 01 	sts	0x016F, r28	; 0x80016f <state.1823+0xc>
	if(state[button] == 0xF000) return 1;
     4dc:	c1 15       	cp	r28, r1
     4de:	d0 4f       	sbci	r29, 0xF0	; 240
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <button_encoder_read+0x9a>
     4e2:	f9 c0       	rjmp	.+498    	; 0x6d6 <button_encoder_read+0x28c>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4e4:	89 b3       	in	r24, 0x19	; 25
     4e6:	85 fb       	bst	r24, 5
     4e8:	aa 27       	eor	r26, r26
     4ea:	a0 f9       	bld	r26, 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	31 e0       	ldi	r19, 0x01	; 1
     4f0:	a3 27       	eor	r26, r19
     4f2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <state.1823+0xa>
     4f6:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <state.1823+0xb>
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	90 6e       	ori	r25, 0xE0	; 224
     500:	a8 2b       	or	r26, r24
     502:	b9 2b       	or	r27, r25
     504:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <state.1823+0xb>
     508:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <state.1823+0xa>
	if(state[button] == 0xF000) return 1;
     50c:	a1 15       	cp	r26, r1
     50e:	b0 4f       	sbci	r27, 0xF0	; 240
     510:	09 f4       	brne	.+2      	; 0x514 <button_encoder_read+0xca>
     512:	d2 c0       	rjmp	.+420    	; 0x6b8 <button_encoder_read+0x26e>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     514:	89 b3       	in	r24, 0x19	; 25
     516:	84 fb       	bst	r24, 4
     518:	ee 27       	eor	r30, r30
     51a:	e0 f9       	bld	r30, 0
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	e2 27       	eor	r30, r18
     522:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <state.1823+0x8>
     526:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <state.1823+0x9>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	90 6e       	ori	r25, 0xE0	; 224
     530:	e8 2b       	or	r30, r24
     532:	f9 2b       	or	r31, r25
     534:	f0 93 6c 01 	sts	0x016C, r31	; 0x80016c <state.1823+0x9>
     538:	e0 93 6b 01 	sts	0x016B, r30	; 0x80016b <state.1823+0x8>
	if(state[button] == 0xF000) return 1;
     53c:	e1 15       	cp	r30, r1
     53e:	f0 4f       	sbci	r31, 0xF0	; 240
     540:	31 f4       	brne	.+12     	; 0x54e <button_encoder_read+0x104>
		pm_flag ^= 0x01;
	
	//poll if button 4 is pressed
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     542:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <adjust_alarm>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 27       	eor	r24, r25
     54a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     54e:	89 b3       	in	r24, 0x19	; 25
     550:	83 fb       	bst	r24, 3
     552:	66 27       	eor	r22, r22
     554:	60 f9       	bld	r22, 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	68 27       	eor	r22, r24
     55c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <state.1823+0x6>
     560:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <state.1823+0x7>
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	90 6e       	ori	r25, 0xE0	; 224
     56a:	68 2b       	or	r22, r24
     56c:	79 2b       	or	r23, r25
     56e:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <state.1823+0x7>
     572:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <state.1823+0x6>
	if(state[button] == 0xF000) return 1;
     576:	61 15       	cp	r22, r1
     578:	70 4f       	sbci	r23, 0xF0	; 240
     57a:	41 f4       	brne	.+16     	; 0x58c <button_encoder_read+0x142>
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
	
	if(chk_buttons(3)){
		alarm_is_set ^= 0x01;
     57c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <alarm_is_set>
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	89 27       	eor	r24, r25
     584:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <alarm_is_set>
		lcd_flag = 0x01;
     588:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <lcd_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     58c:	89 b3       	in	r24, 0x19	; 25
     58e:	82 fb       	bst	r24, 2
     590:	44 27       	eor	r20, r20
     592:	40 f9       	bld	r20, 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	31 e0       	ldi	r19, 0x01	; 1
     598:	43 27       	eor	r20, r19
     59a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <state.1823+0x4>
     59e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <state.1823+0x5>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	90 6e       	ori	r25, 0xE0	; 224
     5a8:	48 2b       	or	r20, r24
     5aa:	59 2b       	or	r21, r25
     5ac:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <state.1823+0x5>
     5b0:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <state.1823+0x4>
	if(state[button] == 0xF000) return 1;
     5b4:	41 15       	cp	r20, r1
     5b6:	50 4f       	sbci	r21, 0xF0	; 240
     5b8:	31 f4       	brne	.+12     	; 0x5c6 <button_encoder_read+0x17c>
		alarm_is_set ^= 0x01;
		lcd_flag = 0x01;
	}

	if(chk_buttons(2))
		manual_brightness ^= 0x01;
     5ba:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <manual_brightness>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	89 27       	eor	r24, r25
     5c2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <manual_brightness>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     5c6:	89 b3       	in	r24, 0x19	; 25
     5c8:	81 fb       	bst	r24, 1
     5ca:	cc 24       	eor	r12, r12
     5cc:	c0 f8       	bld	r12, 0
     5ce:	d1 2c       	mov	r13, r1
     5d0:	96 01       	movw	r18, r12
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	24 27       	eor	r18, r20
     5d6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <state.1823+0x2>
     5da:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <state.1823+0x3>
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	90 6e       	ori	r25, 0xE0	; 224
     5e4:	28 2b       	or	r18, r24
     5e6:	39 2b       	or	r19, r25
     5e8:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <state.1823+0x3>
     5ec:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <state.1823+0x2>
	if(state[button] == 0xF000) return 1;
     5f0:	21 15       	cp	r18, r1
     5f2:	30 4f       	sbci	r19, 0xF0	; 240
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <button_encoder_read+0x1ae>
     5f6:	52 c0       	rjmp	.+164    	; 0x69c <button_encoder_read+0x252>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     5f8:	29 b3       	in	r18, 0x19	; 25
     5fa:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <state.1823>
     5fe:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <state.1823+0x1>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	90 6e       	ori	r25, 0xE0	; 224
     608:	20 95       	com	r18
     60a:	02 2f       	mov	r16, r18
     60c:	01 70       	andi	r16, 0x01	; 1
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	08 2b       	or	r16, r24
     612:	19 2b       	or	r17, r25
     614:	10 93 64 01 	sts	0x0164, r17	; 0x800164 <state.1823+0x1>
     618:	00 93 63 01 	sts	0x0163, r16	; 0x800163 <state.1823>
	if(state[button] == 0xF000) return 1;
     61c:	01 15       	cp	r16, r1
     61e:	10 4f       	sbci	r17, 0xF0	; 240
     620:	a1 f1       	breq	.+104    	; 0x68a <button_encoder_read+0x240>
		trigger_alarm = 0;			//alarm turns off
		lcd_flag = 0x01;			//update lcd
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     622:	80 e6       	ldi	r24, 0x60	; 96
     624:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     626:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     628:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     62a:	80 e4       	ldi	r24, 0x40	; 64
     62c:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     62e:	00 00       	nop

	//send out state of flags to the bar graph display
	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5) | (manual_brightness << 2);
     630:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <adjust_flag>
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	24 9f       	mul	r18, r20
     638:	90 01       	movw	r18, r0
     63a:	11 24       	eor	r1, r1
     63c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     640:	40 e4       	ldi	r20, 0x40	; 64
     642:	94 9f       	mul	r25, r20
     644:	c0 01       	movw	r24, r0
     646:	11 24       	eor	r1, r1
     648:	28 2b       	or	r18, r24
     64a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <adjust_alarm>
     64e:	30 e2       	ldi	r19, 0x20	; 32
     650:	93 9f       	mul	r25, r19
     652:	c0 01       	movw	r24, r0
     654:	11 24       	eor	r1, r1
     656:	82 2b       	or	r24, r18
     658:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <manual_brightness>
     65c:	99 0f       	add	r25, r25
     65e:	99 0f       	add	r25, r25
     660:	89 2b       	or	r24, r25
     662:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     664:	77 9b       	sbis	0x0e, 7	; 14
     666:	fe cf       	rjmp	.-4      	; 0x664 <button_encoder_read+0x21a>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     668:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     66a:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     66c:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     66e:	0e 94 0d 01 	call	0x21a	; 0x21a <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     676:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	08 95       	ret
		
	}

	//poll if button 0 is pressed
	//this silences all alarms, no snooze
	if(chk_buttons(0) && trigger_alarm == 0x01){
     68a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <trigger_alarm>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	41 f6       	brne	.-112    	; 0x622 <button_encoder_read+0x1d8>
		trigger_alarm = 0;			//alarm turns off
     692:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <trigger_alarm>
		lcd_flag = 0x01;			//update lcd
     696:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <lcd_flag>
     69a:	c3 cf       	rjmp	.-122    	; 0x622 <button_encoder_read+0x1d8>
	if(chk_buttons(2))
		manual_brightness ^= 0x01;

	//poll if button 1 is pressed
	//this activates the snooze feature
	if(chk_buttons(1) && trigger_alarm == 0x01){
     69c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <trigger_alarm>
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <button_encoder_read+0x25c>
     6a4:	a9 cf       	rjmp	.-174    	; 0x5f8 <button_encoder_read+0x1ae>
		trigger_alarm = 0;			//if pressed, alarm should turn off
     6a6:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <trigger_alarm>
		ten_sec_start = 0x01;		//start the count for 10 second delay
     6aa:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <ten_sec_start>
		ten_sec_count = 0;			//the count variable starts at 0
     6ae:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		lcd_flag = 0x01;			//tell lcd to update
     6b2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <lcd_flag>
     6b6:	a0 cf       	rjmp	.-192    	; 0x5f8 <button_encoder_read+0x1ae>
	}

	//poll if button 5 is pressed
	//this toggles the pm_flag for adjustment
	//this only works when in time set mode
	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     6b8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <adjust_flag>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	09 f0       	breq	.+2      	; 0x6c2 <button_encoder_read+0x278>
     6c0:	29 cf       	rjmp	.-430    	; 0x514 <button_encoder_read+0xca>
     6c2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     6c6:	91 11       	cpse	r25, r1
     6c8:	25 cf       	rjmp	.-438    	; 0x514 <button_encoder_read+0xca>
		pm_flag ^= 0x01;
     6ca:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <pm_flag>
     6ce:	89 27       	eor	r24, r25
     6d0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pm_flag>
     6d4:	1f cf       	rjmp	.-450    	; 0x514 <button_encoder_read+0xca>
		adjust_flag ^= 0x01;

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     6d6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	89 27       	eor	r24, r25
     6de:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     6e2:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <pm_flag>
     6e6:	91 30       	cpi	r25, 0x01	; 1
     6e8:	a9 f0       	breq	.+42     	; 0x714 <button_encoder_read+0x2ca>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     6ea:	81 11       	cpse	r24, r1
     6ec:	fb ce       	rjmp	.-522    	; 0x4e4 <button_encoder_read+0x9a>
     6ee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
     6f2:	8c 30       	cpi	r24, 0x0C	; 12
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <button_encoder_read+0x2ae>
     6f6:	f6 ce       	rjmp	.-532    	; 0x4e4 <button_encoder_read+0x9a>
			pm_flag = 0x01;			//set the pm_flag when coming from 24 hours and time is in afternoon
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pm_flag>
			if(hour_count != 12)	//edge case of when the time is 12 for 24 hour time
     6fe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
     702:	8c 30       	cpi	r24, 0x0C	; 12
     704:	09 f4       	brne	.+2      	; 0x708 <button_encoder_read+0x2be>
     706:	ee ce       	rjmp	.-548    	; 0x4e4 <button_encoder_read+0x9a>
				hour_count -= 12;
     708:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
     70c:	8c 50       	subi	r24, 0x0C	; 12
     70e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <hour_count>
     712:	e8 ce       	rjmp	.-560    	; 0x4e4 <button_encoder_read+0x9a>

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	49 f7       	brne	.-46     	; 0x6ea <button_encoder_read+0x2a0>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
     718:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <pm_flag>
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
     71c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
     720:	8c 30       	cpi	r24, 0x0C	; 12
     722:	09 f4       	brne	.+2      	; 0x726 <button_encoder_read+0x2dc>
     724:	df ce       	rjmp	.-578    	; 0x4e4 <button_encoder_read+0x9a>
				hour_count += 12;
     726:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
     72a:	84 5f       	subi	r24, 0xF4	; 244
     72c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <hour_count>
     730:	d9 ce       	rjmp	.-590    	; 0x4e4 <button_encoder_read+0x9a>

00000732 <clock_count>:
 * mode.
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
     732:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <isr_count>
     736:	80 38       	cpi	r24, 0x80	; 128
     738:	09 f4       	brne	.+2      	; 0x73c <clock_count+0xa>
     73a:	82 c0       	rjmp	.+260    	; 0x840 <clock_count+0x10e>
     73c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
     740:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <sec_count>
     744:	9c 33       	cpi	r25, 0x3C	; 60
     746:	09 f4       	brne	.+2      	; 0x74a <clock_count+0x18>
     748:	6f c0       	rjmp	.+222    	; 0x828 <clock_count+0xf6>
		}
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
     74a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <min_count>
     74e:	9c 33       	cpi	r25, 0x3C	; 60
     750:	09 f4       	brne	.+2      	; 0x754 <clock_count+0x22>
     752:	5e c0       	rjmp	.+188    	; 0x810 <clock_count+0xde>
		}

		min_count = 0;
  	}
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
     754:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     758:	9d 30       	cpi	r25, 0x0D	; 13
     75a:	b0 f0       	brcs	.+44     	; 0x788 <clock_count+0x56>
     75c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     760:	91 11       	cpse	r25, r1
     762:	12 c0       	rjmp	.+36     	; 0x788 <clock_count+0x56>
		hour_count -= 12;	
     764:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     768:	9c 50       	subi	r25, 0x0C	; 12
     76a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <hour_count>
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     76e:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <min_count>
     772:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <alarm_time_min>
     776:	29 17       	cp	r18, r25
     778:	d1 f0       	breq	.+52     	; 0x7ae <clock_count+0x7c>
			lcd_flag = 0x01;				//update lcd
		}
	}
	//else meaning that the actual time does not equal saved alarm time
	else{
		trigger_alarm = 0;
     77a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <trigger_alarm>
		alarm_match_count = 0;
     77e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <alarm_match_count>
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
     782:	8a 30       	cpi	r24, 0x0A	; 10
     784:	99 f1       	breq	.+102    	; 0x7ec <clock_count+0xba>
     786:	08 95       	ret
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	//bind the hour to 0 and 24 if 24 hour flag is set
	else if(hour_count >= 24 && hour24_flag == 0x01){
     788:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     78c:	98 31       	cpi	r25, 0x18	; 24
     78e:	78 f3       	brcs	.-34     	; 0x76e <clock_count+0x3c>
     790:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     794:	91 30       	cpi	r25, 0x01	; 1
     796:	59 f7       	brne	.-42     	; 0x76e <clock_count+0x3c>
		hour_count -= 24;
     798:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     79c:	98 51       	subi	r25, 0x18	; 24
     79e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <hour_count>
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     7a2:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <min_count>
     7a6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <alarm_time_min>
     7aa:	29 13       	cpse	r18, r25
     7ac:	e6 cf       	rjmp	.-52     	; 0x77a <clock_count+0x48>
     7ae:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <hour_count>
     7b2:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <alarm_time_hour>
     7b6:	29 13       	cpse	r18, r25
     7b8:	e0 cf       	rjmp	.-64     	; 0x77a <clock_count+0x48>
     7ba:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <temp_pm_flag>
     7be:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <pm_flag>
     7c2:	29 13       	cpse	r18, r25
     7c4:	da cf       	rjmp	.-76     	; 0x77a <clock_count+0x48>
     7c6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <adjust_alarm>
     7ca:	91 11       	cpse	r25, r1
     7cc:	d6 cf       	rjmp	.-84     	; 0x77a <clock_count+0x48>
		if(alarm_match_count == 0 && alarm_is_set == 0x01){			//a check so that this only goes in once
     7ce:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <alarm_match_count>
     7d2:	91 11       	cpse	r25, r1
     7d4:	d6 cf       	rjmp	.-84     	; 0x782 <clock_count+0x50>
     7d6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <alarm_is_set>
     7da:	91 30       	cpi	r25, 0x01	; 1
     7dc:	91 f6       	brne	.-92     	; 0x782 <clock_count+0x50>
			trigger_alarm = 0x01;			//start the beeping
     7de:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <trigger_alarm>
			alarm_match_count = 0x01;
     7e2:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <alarm_match_count>
			lcd_flag = 0x01;				//update lcd
     7e6:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <lcd_flag>
     7ea:	cb cf       	rjmp	.-106    	; 0x782 <clock_count+0x50>
		alarm_match_count = 0;
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
		trigger_alarm = 0x01;			//initiate beep again after 10 second snooze
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <trigger_alarm>
		ten_sec_start = 0;				//reset the start variable
     7f2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <ten_sec_start>
		ten_sec_count = 0;				//reset the count variable
     7f6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
		lcd_flag = 0x01;				//update lcd
     7fa:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <lcd_flag>
		alarm_time_min = temp_min;		//beep for 1 minute
     7fe:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_min>
     802:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <alarm_time_min>
		alarm_time_hour = temp_hour;		
     806:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temp_hour>
     80a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <alarm_time_hour>
     80e:	08 95       	ret
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
     810:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     814:	9f 5f       	subi	r25, 0xFF	; 255
     816:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <hour_count>
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     81a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <hour_count>
     81e:	9c 30       	cpi	r25, 0x0C	; 12
     820:	21 f1       	breq	.+72     	; 0x86a <clock_count+0x138>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     822:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <min_count>
     826:	96 cf       	rjmp	.-212    	; 0x754 <clock_count+0x22>
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
     828:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <trigger_alarm>
     82c:	91 30       	cpi	r25, 0x01	; 1
     82e:	d1 f0       	breq	.+52     	; 0x864 <clock_count+0x132>
			lcd_flag = 0x01;
		}
	  	min_count++;
     830:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <min_count>
     834:	9f 5f       	subi	r25, 0xFF	; 255
     836:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <min_count>
		sec_count = 0;
     83a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <sec_count>
     83e:	85 cf       	rjmp	.-246    	; 0x74a <clock_count+0x18>
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
	  	sec_count++;				//increment 1 second
     840:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <sec_count>
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <sec_count>
		isr_count = 0;				//reset isr_count
     84a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <isr_count>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
     84e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ten_sec_start>
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	09 f0       	breq	.+2      	; 0x858 <clock_count+0x126>
     856:	72 cf       	rjmp	.-284    	; 0x73c <clock_count+0xa>
			ten_sec_count++;
     858:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
     862:	6e cf       	rjmp	.-292    	; 0x740 <clock_count+0xe>
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
			lcd_flag = 0x01;
     864:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <lcd_flag>
     868:	e3 cf       	rjmp	.-58     	; 0x830 <clock_count+0xfe>
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     86a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour24_flag>
     86e:	91 11       	cpse	r25, r1
     870:	d8 cf       	rjmp	.-80     	; 0x822 <clock_count+0xf0>
			pm_flag ^= 0x01;
     872:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <pm_flag>
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	92 27       	eor	r25, r18
     87a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <pm_flag>
     87e:	d1 cf       	rjmp	.-94     	; 0x822 <clock_count+0xf0>

00000880 <set_LCD>:
* Description: Update the LCD display to show the current state of the alarm
* clock, such as buzzing an alarm, snoozed, or the alarm is not buzzing.
*************************************************************************/
void set_LCD(){
	//clear current contents in display
   clear_display();
     880:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <clear_display>
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
     884:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <trigger_alarm>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	21 f1       	breq	.+72     	; 0x8d4 <set_LCD+0x54>
	  	line2_col1();
		string2lcd("            ");

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
     88c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ten_sec_start>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	59 f1       	breq	.+86     	; 0x8ea <set_LCD+0x6a>
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
      	line2_col1();
      	string2lcd("            ");
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
     894:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <alarm_is_set>
     898:	88 23       	and	r24, r24
     89a:	21 f0       	breq	.+8      	; 0x8a4 <set_LCD+0x24>
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
		line2_col1();
		string2lcd("            ");
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	71 f0       	breq	.+28     	; 0x8bc <set_LCD+0x3c>
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
		line2_col1();
		string2lcd("            ");
	}
   cursor_home();
     8a0:	0c 94 73 06 	jmp	0xce6	; 0xce6 <cursor_home>
      	line2_col1();
      	string2lcd("            ");
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
     8a4:	8f e2       	ldi	r24, 0x2F	; 47
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
		line2_col1();
     8ac:	0e 94 8b 06 	call	0xd16	; 0xd16 <line2_col1>
		string2lcd("            ");
     8b0:	8a e1       	ldi	r24, 0x1A	; 26
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
		line2_col1();
		string2lcd("            ");
	}
   cursor_home();
     8b8:	0c 94 73 06 	jmp	0xce6	; 0xce6 <cursor_home>
		line2_col1();
		string2lcd("            ");
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
     8bc:	8d e3       	ldi	r24, 0x3D	; 61
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
		line2_col1();
     8c4:	0e 94 8b 06 	call	0xd16	; 0xd16 <line2_col1>
		string2lcd("            ");
     8c8:	8a e1       	ldi	r24, 0x1A	; 26
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
	}
   cursor_home();
     8d0:	0c 94 73 06 	jmp	0xce6	; 0xce6 <cursor_home>
void set_LCD(){
	//clear current contents in display
   clear_display();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");			//tell lcd to show "ALARM" message
     8d4:	81 e1       	ldi	r24, 0x11	; 17
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
	  	line2_col1();
     8dc:	0e 94 8b 06 	call	0xd16	; 0xd16 <line2_col1>
		string2lcd("            ");
     8e0:	8a e1       	ldi	r24, 0x1A	; 26
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
     8e8:	db cf       	rjmp	.-74     	; 0x8a0 <set_LCD+0x20>

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
     8ea:	87 e2       	ldi	r24, 0x27	; 39
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
      	line2_col1();
     8f2:	0e 94 8b 06 	call	0xd16	; 0xd16 <line2_col1>
      	string2lcd("            ");
     8f6:	8a e1       	ldi	r24, 0x1A	; 26
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 db 06 	call	0xdb6	; 0xdb6 <string2lcd>
     8fe:	d0 cf       	rjmp	.-96     	; 0x8a0 <set_LCD+0x20>

00000900 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <input_flag>

	isr_count++;
     912:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <isr_count>
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <isr_count>

}//ISR
     91c:	8f 91       	pop	r24
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_14>:
* If it is, then toggle the PORTC bit 3 pin to drive the annoying beeping
* for the speakers.
*
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25

	//check if trigger alarm is set
	if(trigger_alarm == 0x01){
     936:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <trigger_alarm>
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	41 f4       	brne	.+16     	; 0x94e <__vector_14+0x26>
		
		PORTC ^= (1 << PC3);		//start toggling PC3
     93e:	95 b3       	in	r25, 0x15	; 21
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	89 27       	eor	r24, r25
     944:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz
     946:	80 e4       	ldi	r24, 0x40	; 64
     948:	9c e9       	ldi	r25, 0x9C	; 156
     94a:	9d bd       	out	0x2d, r25	; 45
     94c:	8c bd       	out	0x2c, r24	; 44

	}

}//ISR
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	1f 90       	pop	r1
     95a:	18 95       	reti

0000095c <__vector_21>:
* With a defined prescale value of 128, this triggers approximately every 
* 125kHz. It reads the voltage value of the Cds and outputs the 8 bit reading
* to the OCR2 for brightness adjust.
*************************************************************************/

ISR(ADC_vect){
     95c:	1f 92       	push	r1
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	8f 93       	push	r24

	//checks to see if the manual_brightness flag is cleared
	if(manual_brightness == 0)
     968:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <manual_brightness>
     96c:	81 11       	cpse	r24, r1
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__vector_21+0x18>
		OCR2 = ADCH;		//if cleared, store the 8 bit number to OCR2
     970:	85 b1       	in	r24, 0x05	; 5
     972:	83 bd       	out	0x23, r24	; 35

}//ISR
     974:	8f 91       	pop	r24
     976:	0f 90       	pop	r0
     978:	0f be       	out	0x3f, r0	; 63
     97a:	0f 90       	pop	r0
     97c:	1f 90       	pop	r1
     97e:	18 95       	reti

00000980 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	81 11       	cpse	r24, r1
     984:	01 c0       	rjmp	.+2      	; 0x988 <send_lcd+0x8>
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     98a:	77 9b       	sbis	0x0e, 7	; 14
     98c:	fe cf       	rjmp	.-4      	; 0x98a <send_lcd+0xa>
  SPDR = byte;                        //send payload
     98e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     990:	77 9b       	sbis	0x0e, 7	; 14
     992:	fe cf       	rjmp	.-4      	; 0x990 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     994:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     998:	88 60       	ori	r24, 0x08	; 8
     99a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     99e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a2:	87 7f       	andi	r24, 0xF7	; 247
     9a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a8:	08 95       	ret

000009aa <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     9aa:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <i.2094>
     9ae:	82 0f       	add	r24, r18
     9b0:	91 1d       	adc	r25, r1
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	81 11       	cpse	r24, r1
     9b8:	1f c0       	rjmp	.+62     	; 0x9f8 <refresh_lcd+0x4e>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9c4:	77 9b       	sbis	0x0e, 7	; 14
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     9c8:	80 e2       	ldi	r24, 0x20	; 32
     9ca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9cc:	77 9b       	sbis	0x0e, 7	; 14
     9ce:	fe cf       	rjmp	.-4      	; 0x9cc <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d4:	88 60       	ori	r24, 0x08	; 8
     9d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9de:	87 7f       	andi	r24, 0xF7	; 247
     9e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     9e4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <i.2094>
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     9ee:	80 31       	cpi	r24, 0x10	; 16
     9f0:	49 f1       	breq	.+82     	; 0xa44 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     9f2:	80 32       	cpi	r24, 0x20	; 32
     9f4:	69 f0       	breq	.+26     	; 0xa10 <refresh_lcd+0x66>
     9f6:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     9f8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <null_flag.2095>
     9fc:	91 11       	cpse	r25, r1
     9fe:	e0 cf       	rjmp	.-64     	; 0x9c0 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a04:	77 9b       	sbis	0x0e, 7	; 14
     a06:	fe cf       	rjmp	.-4      	; 0xa04 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     a08:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a0a:	77 9b       	sbis	0x0e, 7	; 14
     a0c:	fe cf       	rjmp	.-4      	; 0xa0a <refresh_lcd+0x60>
     a0e:	e0 cf       	rjmp	.-64     	; 0x9d0 <refresh_lcd+0x26>
     a10:	85 ed       	ldi	r24, 0xD5	; 213
     a12:	8a 95       	dec	r24
     a14:	f1 f7       	brne	.-4      	; 0xa12 <refresh_lcd+0x68>
     a16:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a18:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a1a:	77 9b       	sbis	0x0e, 7	; 14
     a1c:	fe cf       	rjmp	.-4      	; 0xa1a <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a22:	77 9b       	sbis	0x0e, 7	; 14
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a34:	87 7f       	andi	r24, 0xF7	; 247
     a36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     a3a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <null_flag.2095>
      i=0;
     a3e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <i.2094>
     a42:	08 95       	ret
     a44:	f5 ed       	ldi	r31, 0xD5	; 213
     a46:	fa 95       	dec	r31
     a48:	f1 f7       	brne	.-4      	; 0xa46 <refresh_lcd+0x9c>
     a4a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a4c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a4e:	77 9b       	sbis	0x0e, 7	; 14
     a50:	fe cf       	rjmp	.-4      	; 0xa4e <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     a52:	80 ec       	ldi	r24, 0xC0	; 192
     a54:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a56:	77 9b       	sbis	0x0e, 7	; 14
     a58:	fe cf       	rjmp	.-4      	; 0xa56 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a6e:	08 95       	ret

00000a70 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     a70:	66 0f       	add	r22, r22
     a72:	66 0f       	add	r22, r22
     a74:	66 0f       	add	r22, r22
     a76:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a78:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a7a:	77 9b       	sbis	0x0e, 7	; 14
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     a7e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a80:	77 9b       	sbis	0x0e, 7	; 14
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a84:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a88:	28 60       	ori	r18, 0x08	; 8
     a8a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a92:	27 7f       	andi	r18, 0xF7	; 247
     a94:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a98:	25 ed       	ldi	r18, 0xD5	; 213
     a9a:	2a 95       	dec	r18
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <set_custom_character+0x2a>
     a9e:	00 00       	nop
     aa0:	fc 01       	movw	r30, r24
     aa2:	9c 01       	movw	r18, r24
     aa4:	28 5f       	subi	r18, 0xF8	; 248
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aa8:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     aaa:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aac:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aae:	77 9b       	sbis	0x0e, 7	; 14
     ab0:	fe cf       	rjmp	.-4      	; 0xaae <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     ab2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ab4:	77 9b       	sbis	0x0e, 7	; 14
     ab6:	fe cf       	rjmp	.-4      	; 0xab4 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ab8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     abc:	88 60       	ori	r24, 0x08	; 8
     abe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ac2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ac6:	87 7f       	andi	r24, 0xF7	; 247
     ac8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     acc:	85 ed       	ldi	r24, 0xD5	; 213
     ace:	8a 95       	dec	r24
     ad0:	f1 f7       	brne	.-4      	; 0xace <set_custom_character+0x5e>
     ad2:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     ad4:	e2 17       	cp	r30, r18
     ad6:	f3 07       	cpc	r31, r19
     ad8:	41 f7       	brne	.-48     	; 0xaaa <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     ada:	08 95       	ret

00000adc <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     adc:	90 e4       	ldi	r25, 0x40	; 64
     ade:	89 9f       	mul	r24, r25
     ae0:	60 0d       	add	r22, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ae6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae8:	77 9b       	sbis	0x0e, 7	; 14
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     aec:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aee:	77 9b       	sbis	0x0e, 7	; 14
     af0:	fe cf       	rjmp	.-4      	; 0xaee <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     af2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af6:	88 60       	ori	r24, 0x08	; 8
     af8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b06:	08 95       	ret

00000b08 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     b08:	81 11       	cpse	r24, r1
     b0a:	13 c0       	rjmp	.+38     	; 0xb32 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b18:	77 9b       	sbis	0x0e, 7	; 14
     b1a:	fe cf       	rjmp	.-4      	; 0xb18 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2a:	87 7f       	andi	r24, 0xF7	; 247
     b2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b30:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     b32:	84 36       	cpi	r24, 0x64	; 100
     b34:	b0 f4       	brcc	.+44     	; 0xb62 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     b36:	8a 30       	cpi	r24, 0x0A	; 10
     b38:	60 f5       	brcc	.+88     	; 0xb92 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b3e:	77 9b       	sbis	0x0e, 7	; 14
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     b42:	9d ec       	ldi	r25, 0xCD	; 205
     b44:	89 9f       	mul	r24, r25
     b46:	91 2d       	mov	r25, r1
     b48:	11 24       	eor	r1, r1
     b4a:	96 95       	lsr	r25
     b4c:	96 95       	lsr	r25
     b4e:	96 95       	lsr	r25
     b50:	2a e0       	ldi	r18, 0x0A	; 10
     b52:	92 9f       	mul	r25, r18
     b54:	80 19       	sub	r24, r0
     b56:	11 24       	eor	r1, r1
     b58:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     b5a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b5c:	77 9b       	sbis	0x0e, 7	; 14
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <uint2lcd+0x54>
     b60:	dd cf       	rjmp	.-70     	; 0xb1c <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     b62:	99 e2       	ldi	r25, 0x29	; 41
     b64:	89 9f       	mul	r24, r25
     b66:	91 2d       	mov	r25, r1
     b68:	11 24       	eor	r1, r1
     b6a:	92 95       	swap	r25
     b6c:	9f 70       	andi	r25, 0x0F	; 15
     b6e:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b74:	77 9b       	sbis	0x0e, 7	; 14
     b76:	fe cf       	rjmp	.-4      	; 0xb74 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     b78:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b7a:	77 9b       	sbis	0x0e, 7	; 14
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b7e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b82:	98 60       	ori	r25, 0x08	; 8
     b84:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b88:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b8c:	97 7f       	andi	r25, 0xF7	; 247
     b8e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     b92:	99 e2       	ldi	r25, 0x29	; 41
     b94:	89 9f       	mul	r24, r25
     b96:	91 2d       	mov	r25, r1
     b98:	11 24       	eor	r1, r1
     b9a:	92 95       	swap	r25
     b9c:	9f 70       	andi	r25, 0x0F	; 15
     b9e:	38 2f       	mov	r19, r24
     ba0:	24 e6       	ldi	r18, 0x64	; 100
     ba2:	92 9f       	mul	r25, r18
     ba4:	30 19       	sub	r19, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	2d ec       	ldi	r18, 0xCD	; 205
     baa:	32 9f       	mul	r19, r18
     bac:	91 2d       	mov	r25, r1
     bae:	11 24       	eor	r1, r1
     bb0:	96 95       	lsr	r25
     bb2:	96 95       	lsr	r25
     bb4:	96 95       	lsr	r25
     bb6:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bbc:	77 9b       	sbis	0x0e, 7	; 14
     bbe:	fe cf       	rjmp	.-4      	; 0xbbc <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     bc0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc2:	77 9b       	sbis	0x0e, 7	; 14
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bc6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bca:	98 60       	ori	r25, 0x08	; 8
     bcc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd4:	97 7f       	andi	r25, 0xF7	; 247
     bd6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bda:	af cf       	rjmp	.-162    	; 0xb3a <uint2lcd+0x32>

00000bdc <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     bdc:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     bde:	0c 94 84 05 	jmp	0xb08	; 0xb08 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     be6:	77 9b       	sbis	0x0e, 7	; 14
     be8:	fe cf       	rjmp	.-4      	; 0xbe6 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     bea:	9d e2       	ldi	r25, 0x2D	; 45
     bec:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bee:	77 9b       	sbis	0x0e, 7	; 14
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bf2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf6:	98 60       	ori	r25, 0x08	; 8
     bf8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bfc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c00:	97 7f       	andi	r25, 0xF7	; 247
     c02:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c06:	95 ed       	ldi	r25, 0xD5	; 213
     c08:	9a 95       	dec	r25
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <int2lcd+0x2c>
     c0c:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     c0e:	81 95       	neg	r24
     c10:	0c 94 84 05 	jmp	0xb08	; 0xb08 <uint2lcd>

00000c14 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c14:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c16:	77 9b       	sbis	0x0e, 7	; 14
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     c1a:	8e e0       	ldi	r24, 0x0E	; 14
     c1c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c1e:	77 9b       	sbis	0x0e, 7	; 14
     c20:	fe cf       	rjmp	.-4      	; 0xc1e <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c26:	88 60       	ori	r24, 0x08	; 8
     c28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c36:	08 95       	ret

00000c38 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c38:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c3a:	77 9b       	sbis	0x0e, 7	; 14
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <cursor_off+0x2>
  SPDR = byte;                        //send payload
     c3e:	8c e0       	ldi	r24, 0x0C	; 12
     c40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c42:	77 9b       	sbis	0x0e, 7	; 14
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5a:	08 95       	ret

00000c5c <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c5c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c5e:	77 9b       	sbis	0x0e, 7	; 14
     c60:	fe cf       	rjmp	.-4      	; 0xc5e <shift_right+0x2>
  SPDR = byte;                        //send payload
     c62:	8e e1       	ldi	r24, 0x1E	; 30
     c64:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c66:	77 9b       	sbis	0x0e, 7	; 14
     c68:	fe cf       	rjmp	.-4      	; 0xc66 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c6e:	88 60       	ori	r24, 0x08	; 8
     c70:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c74:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c78:	87 7f       	andi	r24, 0xF7	; 247
     c7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c7e:	08 95       	ret

00000c80 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c80:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c82:	77 9b       	sbis	0x0e, 7	; 14
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <shift_left+0x2>
  SPDR = byte;                        //send payload
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c8a:	77 9b       	sbis	0x0e, 7	; 14
     c8c:	fe cf       	rjmp	.-4      	; 0xc8a <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c9c:	87 7f       	andi	r24, 0xF7	; 247
     c9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca2:	08 95       	ret

00000ca4 <strobe_lcd>:
     ca4:	e2 e6       	ldi	r30, 0x62	; 98
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	80 83       	st	Z, r24
     cae:	80 81       	ld	r24, Z
     cb0:	87 7f       	andi	r24, 0xF7	; 247
     cb2:	80 83       	st	Z, r24
     cb4:	08 95       	ret

00000cb6 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cb6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cb8:	77 9b       	sbis	0x0e, 7	; 14
     cba:	fe cf       	rjmp	.-4      	; 0xcb8 <clear_display+0x2>
  SPDR = byte;                        //send payload
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cc0:	77 9b       	sbis	0x0e, 7	; 14
     cc2:	fe cf       	rjmp	.-4      	; 0xcc0 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cc4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd2:	87 7f       	andi	r24, 0xF7	; 247
     cd4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd8:	8f e1       	ldi	r24, 0x1F	; 31
     cda:	9c e1       	ldi	r25, 0x1C	; 28
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <clear_display+0x26>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <clear_display+0x2c>
     ce2:	00 00       	nop
     ce4:	08 95       	ret

00000ce6 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ce8:	77 9b       	sbis	0x0e, 7	; 14
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf0:	77 9b       	sbis	0x0e, 7	; 14
     cf2:	fe cf       	rjmp	.-4      	; 0xcf0 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d02:	87 7f       	andi	r24, 0xF7	; 247
     d04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d08:	8f e6       	ldi	r24, 0x6F	; 111
     d0a:	97 e1       	ldi	r25, 0x17	; 23
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <cursor_home+0x26>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <cursor_home+0x2c>
     d12:	00 00       	nop
     d14:	08 95       	ret

00000d16 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d16:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d18:	77 9b       	sbis	0x0e, 7	; 14
     d1a:	fe cf       	rjmp	.-4      	; 0xd18 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     d1c:	80 ec       	ldi	r24, 0xC0	; 192
     d1e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d20:	77 9b       	sbis	0x0e, 7	; 14
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d38:	08 95       	ret

00000d3a <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d3a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d3c:	77 9b       	sbis	0x0e, 7	; 14
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <line1_col1+0x2>
  SPDR = byte;                        //send payload
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d44:	77 9b       	sbis	0x0e, 7	; 14
     d46:	fe cf       	rjmp	.-4      	; 0xd44 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d4c:	88 60       	ori	r24, 0x08	; 8
     d4e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d5c:	08 95       	ret

00000d5e <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     d5e:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d60:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     d62:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d64:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d66:	77 9b       	sbis	0x0e, 7	; 14
     d68:	fe cf       	rjmp	.-4      	; 0xd66 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     d6a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d6c:	77 9b       	sbis	0x0e, 7	; 14
     d6e:	fe cf       	rjmp	.-4      	; 0xd6c <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d70:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7e:	87 7f       	andi	r24, 0xF7	; 247
     d80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d84:	85 ed       	ldi	r24, 0xD5	; 213
     d86:	8a 95       	dec	r24
     d88:	f1 f7       	brne	.-4      	; 0xd86 <fill_spaces+0x28>
     d8a:	00 00       	nop
     d8c:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     d8e:	51 f7       	brne	.-44     	; 0xd64 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     d90:	08 95       	ret

00000d92 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d96:	77 9b       	sbis	0x0e, 7	; 14
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     d9a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d9c:	77 9b       	sbis	0x0e, 7	; 14
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     da0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     daa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     db4:	08 95       	ret

00000db6 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     db6:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dbe:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     dc0:	df 01       	movw	r26, r30
     dc2:	a4 0f       	add	r26, r20
     dc4:	b5 1f       	adc	r27, r21
     dc6:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dc8:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dca:	77 9b       	sbis	0x0e, 7	; 14
     dcc:	fe cf       	rjmp	.-4      	; 0xdca <string2lcd+0x14>
  SPDR = byte;                        //send payload
     dce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dd0:	77 9b       	sbis	0x0e, 7	; 14
     dd2:	fe cf       	rjmp	.-4      	; 0xdd0 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dd4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd8:	98 60       	ori	r25, 0x08	; 8
     dda:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dde:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de2:	97 7f       	andi	r25, 0xF7	; 247
     de4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de8:	85 ed       	ldi	r24, 0xD5	; 213
     dea:	8a 95       	dec	r24
     dec:	f1 f7       	brne	.-4      	; 0xdea <string2lcd+0x34>
     dee:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	46 2f       	mov	r20, r22
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	df 01       	movw	r26, r30
     df8:	0d 90       	ld	r0, X+
     dfa:	00 20       	and	r0, r0
     dfc:	e9 f7       	brne	.-6      	; 0xdf8 <string2lcd+0x42>
     dfe:	9d 01       	movw	r18, r26
     e00:	2e 1b       	sub	r18, r30
     e02:	3f 0b       	sbc	r19, r31
     e04:	22 50       	subi	r18, 0x02	; 2
     e06:	31 09       	sbc	r19, r1
     e08:	24 17       	cp	r18, r20
     e0a:	35 07       	cpc	r19, r21
     e0c:	c8 f6       	brcc	.-78     	; 0xdc0 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     e0e:	08 95       	ret

00000e10 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	99 ef       	ldi	r25, 0xF9	; 249
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <lcd_init+0x4>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <lcd_init+0xa>
     e1a:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e22:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e24:	77 9b       	sbis	0x0e, 7	; 14
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     e28:	80 e3       	ldi	r24, 0x30	; 48
     e2a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e2c:	77 9b       	sbis	0x0e, 7	; 14
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e34:	88 60       	ori	r24, 0x08	; 8
     e36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e44:	8f e5       	ldi	r24, 0x5F	; 95
     e46:	9d e6       	ldi	r25, 0x6D	; 109
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <lcd_init+0x38>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <lcd_init+0x3e>
     e4e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e50:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e52:	77 9b       	sbis	0x0e, 7	; 14
     e54:	fe cf       	rjmp	.-4      	; 0xe52 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     e56:	80 e3       	ldi	r24, 0x30	; 48
     e58:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e5a:	77 9b       	sbis	0x0e, 7	; 14
     e5c:	fe cf       	rjmp	.-4      	; 0xe5a <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e62:	88 60       	ori	r24, 0x08	; 8
     e64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6c:	87 7f       	andi	r24, 0xF7	; 247
     e6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e72:	8f e5       	ldi	r24, 0x5F	; 95
     e74:	9d e6       	ldi	r25, 0x6D	; 109
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <lcd_init+0x66>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <lcd_init+0x6c>
     e7c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e7e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e80:	77 9b       	sbis	0x0e, 7	; 14
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e88:	77 9b       	sbis	0x0e, 7	; 14
     e8a:	fe cf       	rjmp	.-4      	; 0xe88 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e8c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea0:	8f e5       	ldi	r24, 0x5F	; 95
     ea2:	9d e6       	ldi	r25, 0x6D	; 109
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <lcd_init+0x94>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <lcd_init+0x9a>
     eaa:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eac:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eae:	77 9b       	sbis	0x0e, 7	; 14
     eb0:	fe cf       	rjmp	.-4      	; 0xeae <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     eb2:	88 e3       	ldi	r24, 0x38	; 56
     eb4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eb6:	77 9b       	sbis	0x0e, 7	; 14
     eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     eba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ece:	8f e1       	ldi	r24, 0x1F	; 31
     ed0:	9e e4       	ldi	r25, 0x4E	; 78
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <lcd_init+0xc2>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <lcd_init+0xc8>
     ed8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eda:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     edc:	77 9b       	sbis	0x0e, 7	; 14
     ede:	fe cf       	rjmp	.-4      	; 0xedc <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ee4:	77 9b       	sbis	0x0e, 7	; 14
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ee8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efc:	8f e1       	ldi	r24, 0x1F	; 31
     efe:	9e e4       	ldi	r25, 0x4E	; 78
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <lcd_init+0xf0>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <lcd_init+0xf6>
     f06:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f08:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f0a:	77 9b       	sbis	0x0e, 7	; 14
     f0c:	fe cf       	rjmp	.-4      	; 0xf0a <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f12:	77 9b       	sbis	0x0e, 7	; 14
     f14:	fe cf       	rjmp	.-4      	; 0xf12 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f1a:	88 60       	ori	r24, 0x08	; 8
     f1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f20:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f24:	87 7f       	andi	r24, 0xF7	; 247
     f26:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f2a:	8f e1       	ldi	r24, 0x1F	; 31
     f2c:	9e e4       	ldi	r25, 0x4E	; 78
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <lcd_init+0x11e>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <lcd_init+0x124>
     f34:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f36:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f38:	77 9b       	sbis	0x0e, 7	; 14
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     f3c:	86 e0       	ldi	r24, 0x06	; 6
     f3e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f40:	77 9b       	sbis	0x0e, 7	; 14
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f44:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f4e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f58:	8f e1       	ldi	r24, 0x1F	; 31
     f5a:	9e e4       	ldi	r25, 0x4E	; 78
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <lcd_init+0x14c>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <lcd_init+0x152>
     f62:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f64:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f66:	77 9b       	sbis	0x0e, 7	; 14
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     f6a:	8c e0       	ldi	r24, 0x0C	; 12
     f6c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f6e:	77 9b       	sbis	0x0e, 7	; 14
     f70:	fe cf       	rjmp	.-4      	; 0xf6e <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f76:	88 60       	ori	r24, 0x08	; 8
     f78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f86:	8f e1       	ldi	r24, 0x1F	; 31
     f88:	9e e4       	ldi	r25, 0x4E	; 78
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <lcd_init+0x17a>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <lcd_init+0x180>
     f90:	00 00       	nop
     f92:	08 95       	ret

00000f94 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     f94:	4f 92       	push	r4
     f96:	5f 92       	push	r5
     f98:	6f 92       	push	r6
     f9a:	7f 92       	push	r7
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	69 97       	sbiw	r28, 0x19	; 25
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	14 2f       	mov	r17, r20
     fc6:	42 2e       	mov	r4, r18
     fc8:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     fca:	00 23       	and	r16, r16
     fcc:	79 f0       	breq	.+30     	; 0xfec <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
     fd2:	cc 24       	eor	r12, r12
     fd4:	f7 fc       	sbrc	r15, 7
     fd6:	c3 94       	inc	r12
     fd8:	dd 24       	eor	r13, r13
     fda:	ee 24       	eor	r14, r14
     fdc:	ff 24       	eor	r15, r15
     fde:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     fe0:	6b 01       	movw	r12, r22
     fe2:	7c 01       	movw	r14, r24
     fe4:	97 fd       	sbrc	r25, 7
     fe6:	a3 c0       	rjmp	.+326    	; 0x112e <__stack+0x2f>
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     fec:	44 20       	and	r4, r4
     fee:	09 f4       	brne	.+2      	; 0xff2 <lcd_int32+0x5e>
     ff0:	96 c0       	rjmp	.+300    	; 0x111e <__stack+0x1f>
     ff2:	9e 01       	movw	r18, r28
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	59 01       	movw	r10, r18
     ffa:	49 01       	movw	r8, r18
     ffc:	66 24       	eor	r6, r6
     ffe:	6a 94       	dec	r6
    1000:	64 0c       	add	r6, r4
    1002:	71 2c       	mov	r7, r1
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	63 1a       	sub	r6, r19
    1008:	73 0a       	sbc	r7, r19
    100a:	6a 0c       	add	r6, r10
    100c:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    100e:	2a e0       	ldi	r18, 0x0A	; 10
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodsi4>
    101a:	e6 2f       	mov	r30, r22
    101c:	2a 8b       	std	Y+18, r18	; 0x12
    101e:	3b 8b       	std	Y+19, r19	; 0x13
    1020:	4c 8b       	std	Y+20, r20	; 0x14
    1022:	5d 8b       	std	Y+21, r21	; 0x15
    1024:	6a 89       	ldd	r22, Y+18	; 0x12
    1026:	7b 89       	ldd	r23, Y+19	; 0x13
    1028:	8c 89       	ldd	r24, Y+20	; 0x14
    102a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    102c:	20 e3       	ldi	r18, 0x30	; 48
    102e:	2e 0f       	add	r18, r30
    1030:	f4 01       	movw	r30, r8
    1032:	21 93       	st	Z+, r18
    1034:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1036:	6e 16       	cp	r6, r30
    1038:	7f 06       	cpc	r7, r31
    103a:	49 f7       	brne	.-46     	; 0x100e <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    103c:	99 24       	eor	r9, r9
    103e:	93 94       	inc	r9
    1040:	94 0c       	add	r9, r4
    1042:	f5 01       	movw	r30, r10
    1044:	e4 0d       	add	r30, r4
    1046:	f1 1d       	adc	r31, r1
    1048:	2e e2       	ldi	r18, 0x2E	; 46
    104a:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodsi4>
    1058:	e6 2f       	mov	r30, r22
    105a:	2a 8b       	std	Y+18, r18	; 0x12
    105c:	3b 8b       	std	Y+19, r19	; 0x13
    105e:	4c 8b       	std	Y+20, r20	; 0x14
    1060:	5d 8b       	std	Y+21, r21	; 0x15
    1062:	6e 8b       	std	Y+22, r22	; 0x16
    1064:	7f 8b       	std	Y+23, r23	; 0x17
    1066:	88 8f       	std	Y+24, r24	; 0x18
    1068:	99 8f       	std	Y+25, r25	; 0x19
    106a:	6a 89       	ldd	r22, Y+18	; 0x12
    106c:	7b 89       	ldd	r23, Y+19	; 0x13
    106e:	8c 89       	ldd	r24, Y+20	; 0x14
    1070:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	39 0d       	add	r19, r9
    1076:	d5 01       	movw	r26, r10
    1078:	a9 0d       	add	r26, r9
    107a:	b1 1d       	adc	r27, r1
    107c:	e0 5d       	subi	r30, 0xD0	; 208
    107e:	ec 93       	st	X, r30
    1080:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1082:	61 15       	cp	r22, r1
    1084:	71 05       	cpc	r23, r1
    1086:	81 05       	cpc	r24, r1
    1088:	91 05       	cpc	r25, r1
    108a:	01 f7       	brne	.-64     	; 0x104c <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    108c:	11 23       	and	r17, r17
    108e:	61 f0       	breq	.+24     	; 0x10a8 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1090:	51 10       	cpse	r5, r1
    1092:	4b c0       	rjmp	.+150    	; 0x112a <__stack+0x2b>
    1094:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1096:	31 17       	cp	r19, r17
    1098:	38 f4       	brcc	.+14     	; 0x10a8 <lcd_int32+0x114>
    109a:	f5 01       	movw	r30, r10
    109c:	e3 0f       	add	r30, r19
    109e:	f1 1d       	adc	r31, r1
    10a0:	90 83       	st	Z, r25
    10a2:	3f 5f       	subi	r19, 0xFF	; 255
    10a4:	13 13       	cpse	r17, r19
    10a6:	f9 cf       	rjmp	.-14     	; 0x109a <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    10a8:	00 23       	and	r16, r16
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <lcd_int32+0x124>
    10ac:	f5 01       	movw	r30, r10
    10ae:	e3 0f       	add	r30, r19
    10b0:	f1 1d       	adc	r31, r1
    10b2:	9d e2       	ldi	r25, 0x2D	; 45
    10b4:	90 83       	st	Z, r25
    10b6:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10b8:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    10ba:	31 50       	subi	r19, 0x01	; 1
    10bc:	f5 01       	movw	r30, r10
    10be:	e3 0f       	add	r30, r19
    10c0:	f1 1d       	adc	r31, r1
    10c2:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10c4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10c6:	77 9b       	sbis	0x0e, 7	; 14
    10c8:	fe cf       	rjmp	.-4      	; 0x10c6 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    10ca:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10cc:	77 9b       	sbis	0x0e, 7	; 14
    10ce:	fe cf       	rjmp	.-4      	; 0x10cc <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10d0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10d4:	98 60       	ori	r25, 0x08	; 8
    10d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10da:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10de:	97 7f       	andi	r25, 0xF7	; 247
    10e0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e4:	85 ed       	ldi	r24, 0xD5	; 213
    10e6:	8a 95       	dec	r24
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <lcd_int32+0x152>
    10ea:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    10ec:	31 11       	cpse	r19, r1
    10ee:	e5 cf       	rjmp	.-54     	; 0x10ba <lcd_int32+0x126>

}
    10f0:	69 96       	adiw	r28, 0x19	; 25
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	9f 90       	pop	r9
    1112:	8f 90       	pop	r8
    1114:	7f 90       	pop	r7
    1116:	6f 90       	pop	r6
    1118:	5f 90       	pop	r5
    111a:	4f 90       	pop	r4
    111c:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    111e:	91 2c       	mov	r9, r1
    1120:	9e 01       	movw	r18, r28
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	59 01       	movw	r10, r18
    1128:	91 cf       	rjmp	.-222    	; 0x104c <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    112a:	90 e3       	ldi	r25, 0x30	; 48
    112c:	b4 cf       	rjmp	.-152    	; 0x1096 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    112e:	f0 94       	com	r15
    1130:	e0 94       	com	r14
    1132:	d0 94       	com	r13
    1134:	c0 94       	com	r12
    1136:	c1 1c       	adc	r12, r1
    1138:	d1 1c       	adc	r13, r1
    113a:	e1 1c       	adc	r14, r1
    113c:	f1 1c       	adc	r15, r1
    113e:	54 cf       	rjmp	.-344    	; 0xfe8 <lcd_int32+0x54>

00001140 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    1140:	5f 92       	push	r5
    1142:	6f 92       	push	r6
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	61 97       	sbiw	r28, 0x11	; 17
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	5c 01       	movw	r10, r24
    1170:	96 2e       	mov	r9, r22
    1172:	54 2e       	mov	r5, r20
    1174:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1176:	8b 2c       	mov	r8, r11
    1178:	88 1c       	adc	r8, r8
    117a:	88 24       	eor	r8, r8
    117c:	88 1c       	adc	r8, r8
    117e:	78 2c       	mov	r7, r8
    1180:	9c 01       	movw	r18, r24
    1182:	97 fd       	sbrc	r25, 7
    1184:	9d c0       	rjmp	.+314    	; 0x12c0 <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1186:	55 20       	and	r5, r5
    1188:	09 f4       	brne	.+2      	; 0x118c <lcd_int16+0x4c>
    118a:	8e c0       	rjmp	.+284    	; 0x12a8 <lcd_int16+0x168>
    118c:	8e 01       	movw	r16, r28
    118e:	0f 5f       	subi	r16, 0xFF	; 255
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	78 01       	movw	r14, r16
    1194:	cc 24       	eor	r12, r12
    1196:	ca 94       	dec	r12
    1198:	c5 0c       	add	r12, r5
    119a:	d1 2c       	mov	r13, r1
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	c8 1a       	sub	r12, r24
    11a0:	d8 0a       	sbc	r13, r24
    11a2:	c0 0e       	add	r12, r16
    11a4:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    11a6:	6a e0       	ldi	r22, 0x0A	; 10
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	c9 01       	movw	r24, r18
    11ac:	0e 94 45 0a 	call	0x148a	; 0x148a <__divmodhi4>
    11b0:	46 2f       	mov	r20, r22
    11b2:	24 2f       	mov	r18, r20
    11b4:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    11b6:	80 5d       	subi	r24, 0xD0	; 208
    11b8:	f7 01       	movw	r30, r14
    11ba:	81 93       	st	Z+, r24
    11bc:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    11be:	ec 15       	cp	r30, r12
    11c0:	fd 05       	cpc	r31, r13
    11c2:	89 f7       	brne	.-30     	; 0x11a6 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    11c4:	ff 24       	eor	r15, r15
    11c6:	f3 94       	inc	r15
    11c8:	f5 0c       	add	r15, r5
    11ca:	f8 01       	movw	r30, r16
    11cc:	e5 0d       	add	r30, r5
    11ce:	f1 1d       	adc	r31, r1
    11d0:	8e e2       	ldi	r24, 0x2E	; 46
    11d2:	80 83       	st	Z, r24
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    11d6:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    11d8:	6a e0       	ldi	r22, 0x0A	; 10
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	c9 01       	movw	r24, r18
    11de:	0e 94 45 0a 	call	0x148a	; 0x148a <__divmodhi4>
    11e2:	46 2f       	mov	r20, r22
    11e4:	24 2f       	mov	r18, r20
    11e6:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	9f 0d       	add	r25, r15
    11ec:	f8 01       	movw	r30, r16
    11ee:	ef 0d       	add	r30, r15
    11f0:	f1 1d       	adc	r31, r1
    11f2:	80 5d       	subi	r24, 0xD0	; 208
    11f4:	80 83       	st	Z, r24
        }
        while(qr.quot);
    11f6:	21 15       	cp	r18, r1
    11f8:	31 05       	cpc	r19, r1
    11fa:	69 f7       	brne	.-38     	; 0x11d6 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    11fc:	61 10       	cpse	r6, r1
    11fe:	59 c0       	rjmp	.+178    	; 0x12b2 <lcd_int16+0x172>
    1200:	b7 fc       	sbrc	r11, 7
    1202:	63 c0       	rjmp	.+198    	; 0x12ca <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1204:	99 20       	and	r9, r9
    1206:	b1 f0       	breq	.+44     	; 0x1234 <lcd_int16+0xf4>
    1208:	68 2d       	mov	r22, r8
    120a:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    120c:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    120e:	29 2f       	mov	r18, r25
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	49 2d       	mov	r20, r9
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	46 1b       	sub	r20, r22
    1218:	57 0b       	sbc	r21, r23
    121a:	24 17       	cp	r18, r20
    121c:	35 07       	cpc	r19, r21
    121e:	54 f4       	brge	.+20     	; 0x1234 <lcd_int16+0xf4>
    1220:	9f 5f       	subi	r25, 0xFF	; 255
    1222:	f8 01       	movw	r30, r16
    1224:	e2 0f       	add	r30, r18
    1226:	f3 1f       	adc	r31, r19
    1228:	80 83       	st	Z, r24
    122a:	29 2f       	mov	r18, r25
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	24 17       	cp	r18, r20
    1230:	35 07       	cpc	r19, r21
    1232:	b4 f3       	brlt	.-20     	; 0x1220 <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1234:	77 20       	and	r7, r7
    1236:	31 f0       	breq	.+12     	; 0x1244 <lcd_int16+0x104>
    1238:	f8 01       	movw	r30, r16
    123a:	e9 0f       	add	r30, r25
    123c:	f1 1d       	adc	r31, r1
    123e:	8d e2       	ldi	r24, 0x2D	; 45
    1240:	80 83       	st	Z, r24
    1242:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1244:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1246:	91 50       	subi	r25, 0x01	; 1
    1248:	f8 01       	movw	r30, r16
    124a:	e9 0f       	add	r30, r25
    124c:	f1 1d       	adc	r31, r1
    124e:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1250:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1252:	77 9b       	sbis	0x0e, 7	; 14
    1254:	fe cf       	rjmp	.-4      	; 0x1252 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1256:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1258:	77 9b       	sbis	0x0e, 7	; 14
    125a:	fe cf       	rjmp	.-4      	; 0x1258 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    125c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1266:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1270:	f5 ed       	ldi	r31, 0xD5	; 213
    1272:	fa 95       	dec	r31
    1274:	f1 f7       	brne	.-4      	; 0x1272 <lcd_int16+0x132>
    1276:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1278:	91 11       	cpse	r25, r1
    127a:	e5 cf       	rjmp	.-54     	; 0x1246 <lcd_int16+0x106>
}
    127c:	61 96       	adiw	r28, 0x11	; 17
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    12a8:	f1 2c       	mov	r15, r1
    12aa:	8e 01       	movw	r16, r28
    12ac:	0f 5f       	subi	r16, 0xFF	; 255
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	93 cf       	rjmp	.-218    	; 0x11d8 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    12b2:	99 20       	and	r9, r9
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <lcd_int16+0x178>
    12b6:	be cf       	rjmp	.-132    	; 0x1234 <lcd_int16+0xf4>
    12b8:	68 2d       	mov	r22, r8
    12ba:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    12bc:	80 e3       	ldi	r24, 0x30	; 48
    12be:	a7 cf       	rjmp	.-178    	; 0x120e <lcd_int16+0xce>
    12c0:	22 27       	eor	r18, r18
    12c2:	33 27       	eor	r19, r19
    12c4:	28 1b       	sub	r18, r24
    12c6:	39 0b       	sbc	r19, r25
    12c8:	5e cf       	rjmp	.-324    	; 0x1186 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    12ca:	f3 94       	inc	r15
    12cc:	f3 94       	inc	r15
    12ce:	f8 01       	movw	r30, r16
    12d0:	e9 0f       	add	r30, r25
    12d2:	f1 1d       	adc	r31, r1
    12d4:	8d e2       	ldi	r24, 0x2D	; 45
    12d6:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    12d8:	99 20       	and	r9, r9
    12da:	59 f0       	breq	.+22     	; 0x12f2 <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    12dc:	2f 2d       	mov	r18, r15
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	49 2d       	mov	r20, r9
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	24 17       	cp	r18, r20
    12e6:	35 07       	cpc	r19, r21
    12e8:	24 f4       	brge	.+8      	; 0x12f2 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    12ea:	9f 2d       	mov	r25, r15
                bSigned = 0;
    12ec:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	97 cf       	rjmp	.-210    	; 0x1220 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    12f2:	9f 2d       	mov	r25, r15
    12f4:	a7 cf       	rjmp	.-178    	; 0x1244 <lcd_int16+0x104>

000012f6 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    12f6:	80 ef       	ldi	r24, 0xF0	; 240
    12f8:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    12fa:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    12fc:	85 b3       	in	r24, 0x15	; 21
    12fe:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    1300:	85 e2       	ldi	r24, 0x25	; 37
    1302:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    1306:	8c e2       	ldi	r24, 0x2C	; 44
    1308:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1312:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
    1316:	8d 30       	cpi	r24, 0x0D	; 13
    1318:	18 f0       	brcs	.+6      	; 0x1320 <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    1320:	0e 94 78 00 	call	0xf0	; 0xf0 <initialization>

//enable global interrupts
sei();
    1324:	78 94       	sei

//initially set output compare register for TC2 to 0 (brightness control)
OCR2 = 0;
    1326:	13 bc       	out	0x23, r1	; 35
//initially set output compare register for TC3 to 200 (volume control)
OCR3A = 200;
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1330:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

//initialize LCD
lcd_init();
    1334:	0e 94 08 07 	call	0xe10	; 0xe10 <lcd_init>
set_LCD();
    1338:	0e 94 40 04 	call	0x880	; 0x880 <set_LCD>
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    133c:	cf ef       	ldi	r28, 0xFF	; 255
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    133e:	00 e2       	ldi	r16, 0x20	; 32
    1340:	10 e4       	ldi	r17, 0x40	; 64
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    1342:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1344:	36 9a       	sbi	0x06, 6	; 6
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1346:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <input_flag>
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	09 f4       	brne	.+2      	; 0x1350 <main+0x5a>
    134e:	67 c0       	rjmp	.+206    	; 0x141e <main+0x128>
	  	button_encoder_read();		//if so, read the encoders/buttons
	  	input_flag = FALSE;
  	}
	
	//update the clock counters
	clock_count();
    1350:	0e 94 99 03 	call	0x732	; 0x732 <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1354:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <lcd_flag>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	09 f4       	brne	.+2      	; 0x135e <main+0x68>
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <main+0x13e>
		set_LCD();
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    135e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_alarm>
    1362:	81 11       	cpse	r24, r1
    1364:	70 c0       	rjmp	.+224    	; 0x1446 <main+0x150>
		temp_min = min_count;
    1366:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <min_count>
    136a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_min>
		temp_hour = hour_count;
    136e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
    1372:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
    1376:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <min_count>
    137a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <hour_count>
    137e:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    1382:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1384:	00 00       	nop
    1386:	a1 e8       	ldi	r26, 0x81	; 129
    1388:	b1 e0       	ldi	r27, 0x01	; 1
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1392:	ed 91       	ld	r30, X+
    1394:	2f 5f       	subi	r18, 0xFF	; 255
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	e1 31       	cpi	r30, 0x11	; 17
    139a:	10 f5       	brcc	.+68     	; 0x13e0 <main+0xea>
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	e0 50       	subi	r30, 0x00	; 0
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	40 81       	ld	r20, Z
		if(i_seg == 0 && alarm_is_set == 0x01)
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	f9 f0       	breq	.+62     	; 0x13e6 <main+0xf0>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	91 05       	cpc	r25, r1
    13ac:	11 f1       	breq	.+68     	; 0x13f2 <main+0xfc>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0xc0>
    13b4:	53 c0       	rjmp	.+166    	; 0x145c <main+0x166>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    13b6:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    13b8:	58 2f       	mov	r21, r24
    13ba:	52 95       	swap	r21
    13bc:	50 7f       	andi	r21, 0xF0	; 240
    13be:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    13c0:	4b bb       	out	0x1b, r20	; 27
    13c2:	ef e3       	ldi	r30, 0x3F	; 63
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	31 97       	sbiw	r30, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <main+0xd0>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <main+0xd6>
    13cc:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    13ce:	25 30       	cpi	r18, 0x05	; 5
    13d0:	31 05       	cpc	r19, r1
    13d2:	e9 f0       	breq	.+58     	; 0x140e <main+0x118>
    13d4:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    13d6:	ed 91       	ld	r30, X+
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	e1 31       	cpi	r30, 0x11	; 17
    13de:	f0 f2       	brcs	.-68     	; 0x139c <main+0xa6>
    13e0:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 0 && alarm_is_set == 0x01)
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	09 f7       	brne	.-62     	; 0x13a8 <main+0xb2>
    13e6:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <alarm_is_set>
    13ea:	51 30       	cpi	r21, 0x01	; 1
    13ec:	21 f7       	brne	.-56     	; 0x13b6 <main+0xc0>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
    13ee:	4f 77       	andi	r20, 0x7F	; 127
    13f0:	e2 cf       	rjmp	.-60     	; 0x13b6 <main+0xc0>
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    13f2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pm_flag>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <main+0x106>
    13fa:	41 c0       	rjmp	.+130    	; 0x147e <main+0x188>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    13fc:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    13fe:	18 bb       	out	0x18, r17	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1400:	4b bb       	out	0x1b, r20	; 27
    1402:	8f e3       	ldi	r24, 0x3F	; 63
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <main+0x110>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <main+0x116>
    140c:	00 00       	nop
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    140e:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1410:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1412:	36 9a       	sbi	0x06, 6	; 6
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1414:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <input_flag>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	09 f0       	breq	.+2      	; 0x141e <main+0x128>
    141c:	99 cf       	rjmp	.-206    	; 0x1350 <main+0x5a>
	  	button_encoder_read();		//if so, read the encoders/buttons
    141e:	0e 94 25 02 	call	0x44a	; 0x44a <button_encoder_read>
	  	input_flag = FALSE;
    1422:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <input_flag>
  	}
	
	//update the clock counters
	clock_count();
    1426:	0e 94 99 03 	call	0x732	; 0x732 <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    142a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <lcd_flag>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	09 f0       	breq	.+2      	; 0x1434 <main+0x13e>
    1432:	95 cf       	rjmp	.-214    	; 0x135e <main+0x68>
		lcd_flag = 0;
    1434:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <lcd_flag>
		set_LCD();
    1438:	0e 94 40 04 	call	0x880	; 0x880 <set_LCD>
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    143c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adjust_alarm>
    1440:	88 23       	and	r24, r24
    1442:	09 f4       	brne	.+2      	; 0x1446 <main+0x150>
    1444:	90 cf       	rjmp	.-224    	; 0x1366 <main+0x70>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    1446:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <alarm_time_min>
    144a:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <temp_min>
		temp_hour = alarm_time_hour;
    144e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <alarm_time_hour>
    1452:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temp_hour>
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
    1456:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
    145a:	93 cf       	rjmp	.-218    	; 0x1382 <main+0x8c>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
    145c:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <trigger_alarm>
    1460:	51 30       	cpi	r21, 0x01	; 1
    1462:	59 f0       	breq	.+22     	; 0x147a <main+0x184>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1464:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1466:	08 bb       	out	0x18, r16	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1468:	4b bb       	out	0x1b, r20	; 27
    146a:	ef e3       	ldi	r30, 0x3F	; 63
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <main+0x178>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <main+0x17e>
    1474:	00 00       	nop
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	ae cf       	rjmp	.-164    	; 0x13d6 <main+0xe0>
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
    147a:	4b 7f       	andi	r20, 0xFB	; 251
    147c:	f3 cf       	rjmp	.-26     	; 0x1464 <main+0x16e>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    147e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour24_flag>
    1482:	81 11       	cpse	r24, r1
    1484:	bb cf       	rjmp	.-138    	; 0x13fc <main+0x106>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
    1486:	4f 77       	andi	r20, 0x7F	; 127
    1488:	b9 cf       	rjmp	.-142    	; 0x13fc <main+0x106>

0000148a <__divmodhi4>:
    148a:	97 fb       	bst	r25, 7
    148c:	07 2e       	mov	r0, r23
    148e:	16 f4       	brtc	.+4      	; 0x1494 <__divmodhi4+0xa>
    1490:	00 94       	com	r0
    1492:	07 d0       	rcall	.+14     	; 0x14a2 <__divmodhi4_neg1>
    1494:	77 fd       	sbrc	r23, 7
    1496:	09 d0       	rcall	.+18     	; 0x14aa <__divmodhi4_neg2>
    1498:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__udivmodhi4>
    149c:	07 fc       	sbrc	r0, 7
    149e:	05 d0       	rcall	.+10     	; 0x14aa <__divmodhi4_neg2>
    14a0:	3e f4       	brtc	.+14     	; 0x14b0 <__divmodhi4_exit>

000014a2 <__divmodhi4_neg1>:
    14a2:	90 95       	com	r25
    14a4:	81 95       	neg	r24
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	08 95       	ret

000014aa <__divmodhi4_neg2>:
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255

000014b0 <__divmodhi4_exit>:
    14b0:	08 95       	ret

000014b2 <__divmodsi4>:
    14b2:	05 2e       	mov	r0, r21
    14b4:	97 fb       	bst	r25, 7
    14b6:	1e f4       	brtc	.+6      	; 0x14be <__divmodsi4+0xc>
    14b8:	00 94       	com	r0
    14ba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__negsi2>
    14be:	57 fd       	sbrc	r21, 7
    14c0:	07 d0       	rcall	.+14     	; 0x14d0 <__divmodsi4_neg2>
    14c2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__udivmodsi4>
    14c6:	07 fc       	sbrc	r0, 7
    14c8:	03 d0       	rcall	.+6      	; 0x14d0 <__divmodsi4_neg2>
    14ca:	4e f4       	brtc	.+18     	; 0x14de <__divmodsi4_exit>
    14cc:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__negsi2>

000014d0 <__divmodsi4_neg2>:
    14d0:	50 95       	com	r21
    14d2:	40 95       	com	r20
    14d4:	30 95       	com	r19
    14d6:	21 95       	neg	r18
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	4f 4f       	sbci	r20, 0xFF	; 255
    14dc:	5f 4f       	sbci	r21, 0xFF	; 255

000014de <__divmodsi4_exit>:
    14de:	08 95       	ret

000014e0 <__negsi2>:
    14e0:	90 95       	com	r25
    14e2:	80 95       	com	r24
    14e4:	70 95       	com	r23
    14e6:	61 95       	neg	r22
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__udivmodhi4>:
    14f0:	aa 1b       	sub	r26, r26
    14f2:	bb 1b       	sub	r27, r27
    14f4:	51 e1       	ldi	r21, 0x11	; 17
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <__udivmodhi4_ep>

000014f8 <__udivmodhi4_loop>:
    14f8:	aa 1f       	adc	r26, r26
    14fa:	bb 1f       	adc	r27, r27
    14fc:	a6 17       	cp	r26, r22
    14fe:	b7 07       	cpc	r27, r23
    1500:	10 f0       	brcs	.+4      	; 0x1506 <__udivmodhi4_ep>
    1502:	a6 1b       	sub	r26, r22
    1504:	b7 0b       	sbc	r27, r23

00001506 <__udivmodhi4_ep>:
    1506:	88 1f       	adc	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	5a 95       	dec	r21
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__udivmodhi4_loop>
    150e:	80 95       	com	r24
    1510:	90 95       	com	r25
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	08 95       	ret

00001518 <__udivmodsi4>:
    1518:	a1 e2       	ldi	r26, 0x21	; 33
    151a:	1a 2e       	mov	r1, r26
    151c:	aa 1b       	sub	r26, r26
    151e:	bb 1b       	sub	r27, r27
    1520:	fd 01       	movw	r30, r26
    1522:	0d c0       	rjmp	.+26     	; 0x153e <__udivmodsi4_ep>

00001524 <__udivmodsi4_loop>:
    1524:	aa 1f       	adc	r26, r26
    1526:	bb 1f       	adc	r27, r27
    1528:	ee 1f       	adc	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	a2 17       	cp	r26, r18
    152e:	b3 07       	cpc	r27, r19
    1530:	e4 07       	cpc	r30, r20
    1532:	f5 07       	cpc	r31, r21
    1534:	20 f0       	brcs	.+8      	; 0x153e <__udivmodsi4_ep>
    1536:	a2 1b       	sub	r26, r18
    1538:	b3 0b       	sbc	r27, r19
    153a:	e4 0b       	sbc	r30, r20
    153c:	f5 0b       	sbc	r31, r21

0000153e <__udivmodsi4_ep>:
    153e:	66 1f       	adc	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	1a 94       	dec	r1
    1548:	69 f7       	brne	.-38     	; 0x1524 <__udivmodsi4_loop>
    154a:	60 95       	com	r22
    154c:	70 95       	com	r23
    154e:	80 95       	com	r24
    1550:	90 95       	com	r25
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	bd 01       	movw	r22, r26
    1558:	cf 01       	movw	r24, r30
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
