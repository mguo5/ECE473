
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800112  00800112  00000f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f34  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000048c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068c  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001949  00000000  00000000  00005204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006b4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4a 06 	call	0xc94	; 0xc94 <main>
  c6:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
  d8:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
  da:	80 e5       	ldi	r24, 0x50	; 80
  dc:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
  e2:	80 b7       	in	r24, 0x30	; 48
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
  e8:	87 b7       	in	r24, 0x37	; 55
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
  ee:	83 b7       	in	r24, 0x33	; 51
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51

	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (0 << CS20) | (1 << CS21) | (0 << CS22);
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	8a 66       	ori	r24, 0x6A	; 106
  f8:	85 bd       	out	0x25, r24	; 37
  fa:	08 95       	ret

000000fc <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
  fc:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	99 b3       	in	r25, 0x19	; 25
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e2 5e       	subi	r30, 0xE2	; 226
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	20 81       	ld	r18, Z
 10e:	31 81       	ldd	r19, Z+1	; 0x01
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	30 6e       	ori	r19, 0xE0	; 224
 116:	89 2f       	mov	r24, r25
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <chk_buttons+0x24>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <chk_buttons+0x20>
 124:	81 70       	andi	r24, 0x01	; 1
 126:	99 27       	eor	r25, r25
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	84 27       	eor	r24, r20
 12c:	28 2b       	or	r18, r24
 12e:	39 2b       	or	r19, r25
 130:	31 83       	std	Z+1, r19	; 0x01
 132:	20 83       	st	Z, r18
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	21 15       	cp	r18, r1
 138:	30 4f       	sbci	r19, 0xF0	; 240
 13a:	09 f0       	breq	.+2      	; 0x13e <chk_buttons+0x42>
 13c:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
 13e:	08 95       	ret

00000140 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
 140:	9d ec       	ldi	r25, 0xCD	; 205
 142:	69 9f       	mul	r22, r25
 144:	21 2d       	mov	r18, r1
 146:	11 24       	eor	r1, r1
 148:	32 2f       	mov	r19, r18
 14a:	36 95       	lsr	r19
 14c:	36 95       	lsr	r19
 14e:	36 95       	lsr	r19
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	34 9f       	mul	r19, r20
 154:	60 19       	sub	r22, r0
 156:	11 24       	eor	r1, r1
 158:	36 2f       	mov	r19, r22
	tens = minute / 10;
 15a:	26 95       	lsr	r18
 15c:	26 95       	lsr	r18
 15e:	26 95       	lsr	r18

	hundreds = hour % 10;
 160:	89 9f       	mul	r24, r25
 162:	91 2d       	mov	r25, r1
 164:	11 24       	eor	r1, r1
 166:	96 95       	lsr	r25
 168:	96 95       	lsr	r25
 16a:	96 95       	lsr	r25
 16c:	48 2f       	mov	r20, r24
 16e:	5a e0       	ldi	r21, 0x0A	; 10
 170:	95 9f       	mul	r25, r21
 172:	40 19       	sub	r20, r0
 174:	11 24       	eor	r1, r1
	if(hour > 9)
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	08 f4       	brcc	.+2      	; 0x17c <segsum+0x3c>
void segsum(uint8_t hour, uint8_t minute) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 17a:	9f ef       	ldi	r25, 0xFF	; 255

	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;

	if(sec_count % 2 == 0)
 17c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec_count>
 180:	80 ff       	sbrs	r24, 0
 182:	0c c0       	rjmp	.+24     	; 0x19c <segsum+0x5c>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
 18a:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <segment_data>
	segment_data[1] = tens;
 18e:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <segment_data+0x1>
	
	segment_data[3] = hundreds;
 192:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <segment_data+0x3>
	segment_data[4] = thousands;
 196:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <segment_data+0x4>
 19a:	08 95       	ret
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <segment_data+0x2>
 1a2:	f3 cf       	rjmp	.-26     	; 0x18a <segsum+0x4a>

000001a4 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
 1a4:	81 31       	cpi	r24, 0x11	; 17
 1a6:	30 f4       	brcc	.+12     	; 0x1b4 <seven_seg_encoding+0x10>
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ef 5f       	subi	r30, 0xFF	; 255
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	80 81       	ld	r24, Z
 1b2:	08 95       	ret
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
 1b6:	08 95       	ret

000001b8 <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
 1b8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
 1bc:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
 1c0:	28 2f       	mov	r18, r24
 1c2:	23 70       	andi	r18, 0x03	; 3
 1c4:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
 1c8:	8c 70       	andi	r24, 0x0C	; 12
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	95 95       	asr	r25
 1d2:	87 95       	ror	r24
 1d4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	69 f0       	breq	.+26     	; 0x1f6 <encoder_process+0x3e>

	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
 1dc:	23 30       	cpi	r18, 0x03	; 3
 1de:	09 f0       	breq	.+2      	; 0x1e2 <encoder_process+0x2a>
 1e0:	08 95       	ret
 1e2:	31 30       	cpi	r19, 0x01	; 1
 1e4:	f1 f0       	breq	.+60     	; 0x222 <encoder_process+0x6a>
		hour_count++;
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
 1e6:	32 30       	cpi	r19, 0x02	; 2
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <encoder_process+0x28>
		hour_count--;
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1f4:	08 95       	ret

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	51 f0       	breq	.+20     	; 0x20e <encoder_process+0x56>
			OCR2 += 10;

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
 1fa:	42 30       	cpi	r20, 0x02	; 2
 1fc:	79 f7       	brne	.-34     	; 0x1dc <encoder_process+0x24>
		if((OCR2 - 10) <= 0)
 1fe:	83 b5       	in	r24, 0x23	; 35
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0b 97       	sbiw	r24, 0x0b	; 11
 204:	d4 f4       	brge	.+52     	; 0x23a <encoder_process+0x82>
			OCR2 = 0;
 206:	13 bc       	out	0x23, r1	; 35
 208:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <encoder_left>
 20c:	e7 cf       	rjmp	.-50     	; 0x1dc <encoder_process+0x24>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if((OCR2 + 10) >= 254)
 20e:	83 b5       	in	r24, 0x23	; 35
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	84 3f       	cpi	r24, 0xF4	; 244
 214:	91 05       	cpc	r25, r1
 216:	5c f0       	brlt	.+22     	; 0x22e <encoder_process+0x76>
			OCR2 = 254;
 218:	8e ef       	ldi	r24, 0xFE	; 254
 21a:	83 bd       	out	0x23, r24	; 35
 21c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <encoder_left>
 220:	dd cf       	rjmp	.-70     	; 0x1dc <encoder_process+0x24>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		hour_count++;
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 22c:	08 95       	ret
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if((OCR2 + 10) >= 254)
			OCR2 = 254;
		else	
			OCR2 += 10;
 22e:	83 b5       	in	r24, 0x23	; 35
 230:	86 5f       	subi	r24, 0xF6	; 246
 232:	83 bd       	out	0x23, r24	; 35
 234:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <encoder_left>
 238:	d1 cf       	rjmp	.-94     	; 0x1dc <encoder_process+0x24>
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if((OCR2 - 10) <= 0)
			OCR2 = 0;
		else
			OCR2 -= 10;
 23a:	83 b5       	in	r24, 0x23	; 35
 23c:	8a 50       	subi	r24, 0x0A	; 10
 23e:	83 bd       	out	0x23, r24	; 35
 240:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <encoder_left>
 244:	cb cf       	rjmp	.-106    	; 0x1dc <encoder_process+0x24>

00000246 <button_encoder_read>:
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){

 //make PORTA an input port with pullups
	DDRA = 0x00;
 246:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
 24c:	80 e7       	ldi	r24, 0x70	; 112
 24e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2a e1       	ldi	r18, 0x1A	; 26
 252:	2a 95       	dec	r18
 254:	f1 f7       	brne	.-4      	; 0x252 <button_encoder_read+0xc>
 256:	00 c0       	rjmp	.+0      	; 0x258 <button_encoder_read+0x12>
	//asm volatile ("nop");

	_delay_us(5);

	//store the previous bar graph encoding
	bar_prev = bar_disp;
 258:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <bar_disp>
 25c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <bar_prev>
 260:	ee e1       	ldi	r30, 0x1E	; 30
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0

	//use a for-loop to check the buttons being pressed
	for(uint8_t i_buttons = 0; i_buttons < 2; i_buttons++){
		if(chk_buttons(i_buttons)){
			bar_disp ^= (1 << (i_buttons));		//makes S1 add 1, S2 add 2, S3 add 4, etc, using binary shift
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	70 e0       	ldi	r23, 0x00	; 0
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
 26c:	99 b3       	in	r25, 0x19	; 25
 26e:	20 81       	ld	r18, Z
 270:	31 81       	ldd	r19, Z+1	; 0x01
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	30 6e       	ori	r19, 0xE0	; 224
 278:	89 2f       	mov	r24, r25
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	04 2e       	mov	r0, r20
 27e:	02 c0       	rjmp	.+4      	; 0x284 <button_encoder_read+0x3e>
 280:	95 95       	asr	r25
 282:	87 95       	ror	r24
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <button_encoder_read+0x3a>
 288:	81 70       	andi	r24, 0x01	; 1
 28a:	99 27       	eor	r25, r25
 28c:	b1 e0       	ldi	r27, 0x01	; 1
 28e:	8b 27       	eor	r24, r27
 290:	82 2b       	or	r24, r18
 292:	93 2b       	or	r25, r19
 294:	81 93       	st	Z+, r24
 296:	91 93       	st	Z+, r25
	if(state[button] == 0xF000) return 1;
 298:	81 15       	cp	r24, r1
 29a:	90 4f       	sbci	r25, 0xF0	; 240
 29c:	d1 f0       	breq	.+52     	; 0x2d2 <button_encoder_read+0x8c>
 29e:	4f 5f       	subi	r20, 0xFF	; 255
 2a0:	5f 4f       	sbci	r21, 0xFF	; 255

	//store the previous bar graph encoding
	bar_prev = bar_disp;

	//use a for-loop to check the buttons being pressed
	for(uint8_t i_buttons = 0; i_buttons < 2; i_buttons++){
 2a2:	42 30       	cpi	r20, 0x02	; 2
 2a4:	51 05       	cpc	r21, r1
 2a6:	11 f7       	brne	.-60     	; 0x26c <button_encoder_read+0x26>
	
	}


  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
 2ac:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
 2ae:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
 2b0:	80 e4       	ldi	r24, 0x40	; 64
 2b2:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
 2b4:	00 00       	nop

	SPDR = bar_disp;
 2b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <bar_disp>
 2ba:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
 2bc:	77 9b       	sbis	0x0e, 7	; 14
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <button_encoder_read+0x76>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
 2c0:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
 2c2:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
 2c4:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
 2c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
 2ce:	13 b8       	out	0x03, r1	; 3

}
 2d0:	08 95       	ret
	bar_prev = bar_disp;

	//use a for-loop to check the buttons being pressed
	for(uint8_t i_buttons = 0; i_buttons < 2; i_buttons++){
		if(chk_buttons(i_buttons)){
			bar_disp ^= (1 << (i_buttons));		//makes S1 add 1, S2 add 2, S3 add 4, etc, using binary shift
 2d2:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <bar_disp>
 2d6:	cb 01       	movw	r24, r22
 2d8:	04 2e       	mov	r0, r20
 2da:	01 c0       	rjmp	.+2      	; 0x2de <button_encoder_read+0x98>
 2dc:	88 0f       	add	r24, r24
 2de:	0a 94       	dec	r0
 2e0:	ea f7       	brpl	.-6      	; 0x2dc <button_encoder_read+0x96>
 2e2:	82 27       	eor	r24, r18
 2e4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <bar_disp>
			
			if(bar_disp == bar_prev){			//make sure that the button can be toggled
 2e8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <bar_disp>
 2ec:	a8 13       	cpse	r26, r24
 2ee:	d7 cf       	rjmp	.-82     	; 0x29e <button_encoder_read+0x58>
				bar_disp = 0;
 2f0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <bar_disp>
 2f4:	d4 cf       	rjmp	.-88     	; 0x29e <button_encoder_read+0x58>

000002f6 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <input_flag>

	isr_count++;
 308:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isr_count>
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <isr_count>

}//ISR
 312:	8f 91       	pop	r24
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	81 11       	cpse	r24, r1
 322:	01 c0       	rjmp	.+2      	; 0x326 <send_lcd+0x8>
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 328:	77 9b       	sbis	0x0e, 7	; 14
 32a:	fe cf       	rjmp	.-4      	; 0x328 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 32c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 32e:	77 9b       	sbis	0x0e, 7	; 14
 330:	fe cf       	rjmp	.-4      	; 0x32e <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 332:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 336:	88 60       	ori	r24, 0x08	; 8
 338:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 346:	08 95       	ret

00000348 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
 348:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <i.2094>
 34c:	82 0f       	add	r24, r18
 34e:	91 1d       	adc	r25, r1
 350:	fc 01       	movw	r30, r24
 352:	80 81       	ld	r24, Z
 354:	81 11       	cpse	r24, r1
 356:	1f c0       	rjmp	.+62     	; 0x396 <refresh_lcd+0x4e>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 362:	77 9b       	sbis	0x0e, 7	; 14
 364:	fe cf       	rjmp	.-4      	; 0x362 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 36a:	77 9b       	sbis	0x0e, 7	; 14
 36c:	fe cf       	rjmp	.-4      	; 0x36a <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 36e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 372:	88 60       	ori	r24, 0x08	; 8
 374:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 378:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 37c:	87 7f       	andi	r24, 0xF7	; 247
 37e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
 382:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <i.2094>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
 38c:	80 31       	cpi	r24, 0x10	; 16
 38e:	49 f1       	breq	.+82     	; 0x3e2 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
 390:	80 32       	cpi	r24, 0x20	; 32
 392:	69 f0       	breq	.+26     	; 0x3ae <refresh_lcd+0x66>
 394:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 396:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <null_flag.2095>
 39a:	91 11       	cpse	r25, r1
 39c:	e0 cf       	rjmp	.-64     	; 0x35e <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a2:	77 9b       	sbis	0x0e, 7	; 14
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
 3a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <refresh_lcd+0x60>
 3ac:	e0 cf       	rjmp	.-64     	; 0x36e <refresh_lcd+0x26>
 3ae:	85 ed       	ldi	r24, 0xD5	; 213
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <refresh_lcd+0x68>
 3b4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3b6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3b8:	77 9b       	sbis	0x0e, 7	; 14
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
 3bc:	80 e8       	ldi	r24, 0x80	; 128
 3be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3c0:	77 9b       	sbis	0x0e, 7	; 14
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d2:	87 7f       	andi	r24, 0xF7	; 247
 3d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
 3d8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <null_flag.2095>
      i=0;
 3dc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <i.2094>
 3e0:	08 95       	ret
 3e2:	f5 ed       	ldi	r31, 0xD5	; 213
 3e4:	fa 95       	dec	r31
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <refresh_lcd+0x9c>
 3e8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3ea:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ec:	77 9b       	sbis	0x0e, 7	; 14
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
 3f0:	80 ec       	ldi	r24, 0xC0	; 192
 3f2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 402:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 406:	87 7f       	andi	r24, 0xF7	; 247
 408:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 40c:	08 95       	ret

0000040e <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 40e:	66 0f       	add	r22, r22
 410:	66 0f       	add	r22, r22
 412:	66 0f       	add	r22, r22
 414:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 416:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 418:	77 9b       	sbis	0x0e, 7	; 14
 41a:	fe cf       	rjmp	.-4      	; 0x418 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 41c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 41e:	77 9b       	sbis	0x0e, 7	; 14
 420:	fe cf       	rjmp	.-4      	; 0x41e <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 422:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 426:	28 60       	ori	r18, 0x08	; 8
 428:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 42c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 430:	27 7f       	andi	r18, 0xF7	; 247
 432:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 436:	25 ed       	ldi	r18, 0xD5	; 213
 438:	2a 95       	dec	r18
 43a:	f1 f7       	brne	.-4      	; 0x438 <set_custom_character+0x2a>
 43c:	00 00       	nop
 43e:	fc 01       	movw	r30, r24
 440:	9c 01       	movw	r18, r24
 442:	28 5f       	subi	r18, 0xF8	; 248
 444:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 446:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 448:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 44a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44c:	77 9b       	sbis	0x0e, 7	; 14
 44e:	fe cf       	rjmp	.-4      	; 0x44c <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 450:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 452:	77 9b       	sbis	0x0e, 7	; 14
 454:	fe cf       	rjmp	.-4      	; 0x452 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 456:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 460:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 464:	87 7f       	andi	r24, 0xF7	; 247
 466:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 46a:	85 ed       	ldi	r24, 0xD5	; 213
 46c:	8a 95       	dec	r24
 46e:	f1 f7       	brne	.-4      	; 0x46c <set_custom_character+0x5e>
 470:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 472:	e2 17       	cp	r30, r18
 474:	f3 07       	cpc	r31, r19
 476:	41 f7       	brne	.-48     	; 0x448 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 478:	08 95       	ret

0000047a <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 47a:	90 e4       	ldi	r25, 0x40	; 64
 47c:	89 9f       	mul	r24, r25
 47e:	60 0d       	add	r22, r0
 480:	11 24       	eor	r1, r1
 482:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 484:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 486:	77 9b       	sbis	0x0e, 7	; 14
 488:	fe cf       	rjmp	.-4      	; 0x486 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 48a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 48c:	77 9b       	sbis	0x0e, 7	; 14
 48e:	fe cf       	rjmp	.-4      	; 0x48c <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 490:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 494:	88 60       	ori	r24, 0x08	; 8
 496:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 49a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 49e:	87 7f       	andi	r24, 0xF7	; 247
 4a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4a4:	08 95       	ret

000004a6 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 4a6:	81 11       	cpse	r24, r1
 4a8:	13 c0       	rjmp	.+38     	; 0x4d0 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ae:	77 9b       	sbis	0x0e, 7	; 14
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 4b2:	80 e3       	ldi	r24, 0x30	; 48
 4b4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4be:	88 60       	ori	r24, 0x08	; 8
 4c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c8:	87 7f       	andi	r24, 0xF7	; 247
 4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ce:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 4d0:	84 36       	cpi	r24, 0x64	; 100
 4d2:	b0 f4       	brcc	.+44     	; 0x500 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4d4:	8a 30       	cpi	r24, 0x0A	; 10
 4d6:	60 f5       	brcc	.+88     	; 0x530 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4dc:	77 9b       	sbis	0x0e, 7	; 14
 4de:	fe cf       	rjmp	.-4      	; 0x4dc <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 4e0:	9d ec       	ldi	r25, 0xCD	; 205
 4e2:	89 9f       	mul	r24, r25
 4e4:	91 2d       	mov	r25, r1
 4e6:	11 24       	eor	r1, r1
 4e8:	96 95       	lsr	r25
 4ea:	96 95       	lsr	r25
 4ec:	96 95       	lsr	r25
 4ee:	2a e0       	ldi	r18, 0x0A	; 10
 4f0:	92 9f       	mul	r25, r18
 4f2:	80 19       	sub	r24, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 4f8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4fa:	77 9b       	sbis	0x0e, 7	; 14
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <uint2lcd+0x54>
 4fe:	dd cf       	rjmp	.-70     	; 0x4ba <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 500:	99 e2       	ldi	r25, 0x29	; 41
 502:	89 9f       	mul	r24, r25
 504:	91 2d       	mov	r25, r1
 506:	11 24       	eor	r1, r1
 508:	92 95       	swap	r25
 50a:	9f 70       	andi	r25, 0x0F	; 15
 50c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 512:	77 9b       	sbis	0x0e, 7	; 14
 514:	fe cf       	rjmp	.-4      	; 0x512 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
 516:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 518:	77 9b       	sbis	0x0e, 7	; 14
 51a:	fe cf       	rjmp	.-4      	; 0x518 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 51c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 520:	98 60       	ori	r25, 0x08	; 8
 522:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 526:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52a:	97 7f       	andi	r25, 0xF7	; 247
 52c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 530:	99 e2       	ldi	r25, 0x29	; 41
 532:	89 9f       	mul	r24, r25
 534:	91 2d       	mov	r25, r1
 536:	11 24       	eor	r1, r1
 538:	92 95       	swap	r25
 53a:	9f 70       	andi	r25, 0x0F	; 15
 53c:	38 2f       	mov	r19, r24
 53e:	24 e6       	ldi	r18, 0x64	; 100
 540:	92 9f       	mul	r25, r18
 542:	30 19       	sub	r19, r0
 544:	11 24       	eor	r1, r1
 546:	2d ec       	ldi	r18, 0xCD	; 205
 548:	32 9f       	mul	r19, r18
 54a:	91 2d       	mov	r25, r1
 54c:	11 24       	eor	r1, r1
 54e:	96 95       	lsr	r25
 550:	96 95       	lsr	r25
 552:	96 95       	lsr	r25
 554:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 55a:	77 9b       	sbis	0x0e, 7	; 14
 55c:	fe cf       	rjmp	.-4      	; 0x55a <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
 55e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 560:	77 9b       	sbis	0x0e, 7	; 14
 562:	fe cf       	rjmp	.-4      	; 0x560 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 564:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 568:	98 60       	ori	r25, 0x08	; 8
 56a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 56e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 572:	97 7f       	andi	r25, 0xF7	; 247
 574:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 578:	af cf       	rjmp	.-162    	; 0x4d8 <uint2lcd+0x32>

0000057a <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 57a:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 57c:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 584:	77 9b       	sbis	0x0e, 7	; 14
 586:	fe cf       	rjmp	.-4      	; 0x584 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 588:	9d e2       	ldi	r25, 0x2D	; 45
 58a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 58c:	77 9b       	sbis	0x0e, 7	; 14
 58e:	fe cf       	rjmp	.-4      	; 0x58c <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 590:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 594:	98 60       	ori	r25, 0x08	; 8
 596:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 59a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 59e:	97 7f       	andi	r25, 0xF7	; 247
 5a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a4:	95 ed       	ldi	r25, 0xD5	; 213
 5a6:	9a 95       	dec	r25
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <int2lcd+0x2c>
 5aa:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 5ac:	81 95       	neg	r24
 5ae:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <uint2lcd>

000005b2 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5b2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5b4:	77 9b       	sbis	0x0e, 7	; 14
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 5b8:	8e e0       	ldi	r24, 0x0E	; 14
 5ba:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5c4:	88 60       	ori	r24, 0x08	; 8
 5c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ce:	87 7f       	andi	r24, 0xF7	; 247
 5d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d4:	08 95       	ret

000005d6 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5d6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5d8:	77 9b       	sbis	0x0e, 7	; 14
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 5dc:	8c e0       	ldi	r24, 0x0C	; 12
 5de:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5e0:	77 9b       	sbis	0x0e, 7	; 14
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e8:	88 60       	ori	r24, 0x08	; 8
 5ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5f2:	87 7f       	andi	r24, 0xF7	; 247
 5f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5f8:	08 95       	ret

000005fa <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5fa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5fc:	77 9b       	sbis	0x0e, 7	; 14
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <shift_right+0x2>
  SPDR = byte;                        //send payload
 600:	8e e1       	ldi	r24, 0x1E	; 30
 602:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 604:	77 9b       	sbis	0x0e, 7	; 14
 606:	fe cf       	rjmp	.-4      	; 0x604 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 608:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60c:	88 60       	ori	r24, 0x08	; 8
 60e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 612:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 616:	87 7f       	andi	r24, 0xF7	; 247
 618:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 61c:	08 95       	ret

0000061e <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 61e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 620:	77 9b       	sbis	0x0e, 7	; 14
 622:	fe cf       	rjmp	.-4      	; 0x620 <shift_left+0x2>
  SPDR = byte;                        //send payload
 624:	88 e1       	ldi	r24, 0x18	; 24
 626:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 628:	77 9b       	sbis	0x0e, 7	; 14
 62a:	fe cf       	rjmp	.-4      	; 0x628 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 62c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 630:	88 60       	ori	r24, 0x08	; 8
 632:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 636:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63a:	87 7f       	andi	r24, 0xF7	; 247
 63c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 640:	08 95       	ret

00000642 <strobe_lcd>:
 642:	e2 e6       	ldi	r30, 0x62	; 98
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	88 60       	ori	r24, 0x08	; 8
 64a:	80 83       	st	Z, r24
 64c:	80 81       	ld	r24, Z
 64e:	87 7f       	andi	r24, 0xF7	; 247
 650:	80 83       	st	Z, r24
 652:	08 95       	ret

00000654 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 654:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 656:	77 9b       	sbis	0x0e, 7	; 14
 658:	fe cf       	rjmp	.-4      	; 0x656 <clear_display+0x2>
  SPDR = byte;                        //send payload
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 65e:	77 9b       	sbis	0x0e, 7	; 14
 660:	fe cf       	rjmp	.-4      	; 0x65e <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 662:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 666:	88 60       	ori	r24, 0x08	; 8
 668:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 670:	87 7f       	andi	r24, 0xF7	; 247
 672:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 676:	8f e1       	ldi	r24, 0x1F	; 31
 678:	9c e1       	ldi	r25, 0x1C	; 28
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <clear_display+0x26>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <clear_display+0x2c>
 680:	00 00       	nop
 682:	08 95       	ret

00000684 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 684:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 686:	77 9b       	sbis	0x0e, 7	; 14
 688:	fe cf       	rjmp	.-4      	; 0x686 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 68e:	77 9b       	sbis	0x0e, 7	; 14
 690:	fe cf       	rjmp	.-4      	; 0x68e <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 692:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 696:	88 60       	ori	r24, 0x08	; 8
 698:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 69c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6a0:	87 7f       	andi	r24, 0xF7	; 247
 6a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6a6:	8f e6       	ldi	r24, 0x6F	; 111
 6a8:	97 e1       	ldi	r25, 0x17	; 23
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <cursor_home+0x26>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <cursor_home+0x2c>
 6b0:	00 00       	nop
 6b2:	08 95       	ret

000006b4 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6b6:	77 9b       	sbis	0x0e, 7	; 14
 6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <line2_col1+0x2>
  SPDR = byte;                        //send payload
 6ba:	80 ec       	ldi	r24, 0xC0	; 192
 6bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6be:	77 9b       	sbis	0x0e, 7	; 14
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c6:	88 60       	ori	r24, 0x08	; 8
 6c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6d0:	87 7f       	andi	r24, 0xF7	; 247
 6d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6d6:	08 95       	ret

000006d8 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6d8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6da:	77 9b       	sbis	0x0e, 7	; 14
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <line1_col1+0x2>
  SPDR = byte;                        //send payload
 6de:	80 e8       	ldi	r24, 0x80	; 128
 6e0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6e2:	77 9b       	sbis	0x0e, 7	; 14
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ea:	88 60       	ori	r24, 0x08	; 8
 6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f4:	87 7f       	andi	r24, 0xF7	; 247
 6f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6fa:	08 95       	ret

000006fc <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
 6fc:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6fe:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 700:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 702:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 704:	77 9b       	sbis	0x0e, 7	; 14
 706:	fe cf       	rjmp	.-4      	; 0x704 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 708:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 70a:	77 9b       	sbis	0x0e, 7	; 14
 70c:	fe cf       	rjmp	.-4      	; 0x70a <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 70e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 712:	88 60       	ori	r24, 0x08	; 8
 714:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 718:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71c:	87 7f       	andi	r24, 0xF7	; 247
 71e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 722:	85 ed       	ldi	r24, 0xD5	; 213
 724:	8a 95       	dec	r24
 726:	f1 f7       	brne	.-4      	; 0x724 <fill_spaces+0x28>
 728:	00 00       	nop
 72a:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 72c:	51 f7       	brne	.-44     	; 0x702 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
 72e:	08 95       	ret

00000730 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 734:	77 9b       	sbis	0x0e, 7	; 14
 736:	fe cf       	rjmp	.-4      	; 0x734 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 738:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 73a:	77 9b       	sbis	0x0e, 7	; 14
 73c:	fe cf       	rjmp	.-4      	; 0x73a <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 73e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 742:	88 60       	ori	r24, 0x08	; 8
 744:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 748:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74c:	87 7f       	andi	r24, 0xF7	; 247
 74e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 752:	08 95       	ret

00000754 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
 754:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 75c:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 75e:	df 01       	movw	r26, r30
 760:	a4 0f       	add	r26, r20
 762:	b5 1f       	adc	r27, r21
 764:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 766:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 768:	77 9b       	sbis	0x0e, 7	; 14
 76a:	fe cf       	rjmp	.-4      	; 0x768 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 76c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 76e:	77 9b       	sbis	0x0e, 7	; 14
 770:	fe cf       	rjmp	.-4      	; 0x76e <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 772:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 776:	98 60       	ori	r25, 0x08	; 8
 778:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 780:	97 7f       	andi	r25, 0xF7	; 247
 782:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 786:	85 ed       	ldi	r24, 0xD5	; 213
 788:	8a 95       	dec	r24
 78a:	f1 f7       	brne	.-4      	; 0x788 <string2lcd+0x34>
 78c:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 78e:	6f 5f       	subi	r22, 0xFF	; 255
 790:	46 2f       	mov	r20, r22
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	df 01       	movw	r26, r30
 796:	0d 90       	ld	r0, X+
 798:	00 20       	and	r0, r0
 79a:	e9 f7       	brne	.-6      	; 0x796 <string2lcd+0x42>
 79c:	9d 01       	movw	r18, r26
 79e:	2e 1b       	sub	r18, r30
 7a0:	3f 0b       	sbc	r19, r31
 7a2:	22 50       	subi	r18, 0x02	; 2
 7a4:	31 09       	sbc	r19, r1
 7a6:	24 17       	cp	r18, r20
 7a8:	35 07       	cpc	r19, r21
 7aa:	c8 f6       	brcc	.-78     	; 0x75e <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
 7ac:	08 95       	ret

000007ae <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	99 ef       	ldi	r25, 0xF9	; 249
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <lcd_init+0x4>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <lcd_init+0xa>
 7b8:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 7ba:	88 e0       	ldi	r24, 0x08	; 8
 7bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7c0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c2:	77 9b       	sbis	0x0e, 7	; 14
 7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 7c6:	80 e3       	ldi	r24, 0x30	; 48
 7c8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7ca:	77 9b       	sbis	0x0e, 7	; 14
 7cc:	fe cf       	rjmp	.-4      	; 0x7ca <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d2:	88 60       	ori	r24, 0x08	; 8
 7d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7dc:	87 7f       	andi	r24, 0xF7	; 247
 7de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7e2:	8f e5       	ldi	r24, 0x5F	; 95
 7e4:	9d e6       	ldi	r25, 0x6D	; 109
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <lcd_init+0x38>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <lcd_init+0x3e>
 7ec:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f0:	77 9b       	sbis	0x0e, 7	; 14
 7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <lcd_init+0x42>
  SPDR = byte;                        //send payload
 7f4:	80 e3       	ldi	r24, 0x30	; 48
 7f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f8:	77 9b       	sbis	0x0e, 7	; 14
 7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 800:	88 60       	ori	r24, 0x08	; 8
 802:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 806:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 80a:	87 7f       	andi	r24, 0xF7	; 247
 80c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 810:	8f e5       	ldi	r24, 0x5F	; 95
 812:	9d e6       	ldi	r25, 0x6D	; 109
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <lcd_init+0x66>
 818:	00 c0       	rjmp	.+0      	; 0x81a <lcd_init+0x6c>
 81a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 81c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 81e:	77 9b       	sbis	0x0e, 7	; 14
 820:	fe cf       	rjmp	.-4      	; 0x81e <lcd_init+0x70>
  SPDR = byte;                        //send payload
 822:	80 e3       	ldi	r24, 0x30	; 48
 824:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 826:	77 9b       	sbis	0x0e, 7	; 14
 828:	fe cf       	rjmp	.-4      	; 0x826 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 82a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 82e:	88 60       	ori	r24, 0x08	; 8
 830:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 834:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 838:	87 7f       	andi	r24, 0xF7	; 247
 83a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 83e:	8f e5       	ldi	r24, 0x5F	; 95
 840:	9d e6       	ldi	r25, 0x6D	; 109
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <lcd_init+0x94>
 846:	00 c0       	rjmp	.+0      	; 0x848 <lcd_init+0x9a>
 848:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 84a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 84c:	77 9b       	sbis	0x0e, 7	; 14
 84e:	fe cf       	rjmp	.-4      	; 0x84c <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 850:	88 e3       	ldi	r24, 0x38	; 56
 852:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 854:	77 9b       	sbis	0x0e, 7	; 14
 856:	fe cf       	rjmp	.-4      	; 0x854 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 858:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 85c:	88 60       	ori	r24, 0x08	; 8
 85e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 862:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 866:	87 7f       	andi	r24, 0xF7	; 247
 868:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 86c:	8f e1       	ldi	r24, 0x1F	; 31
 86e:	9e e4       	ldi	r25, 0x4E	; 78
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <lcd_init+0xc2>
 874:	00 c0       	rjmp	.+0      	; 0x876 <lcd_init+0xc8>
 876:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 878:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 87a:	77 9b       	sbis	0x0e, 7	; 14
 87c:	fe cf       	rjmp	.-4      	; 0x87a <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 87e:	88 e0       	ldi	r24, 0x08	; 8
 880:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 882:	77 9b       	sbis	0x0e, 7	; 14
 884:	fe cf       	rjmp	.-4      	; 0x882 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 886:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 88a:	88 60       	ori	r24, 0x08	; 8
 88c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 890:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 894:	87 7f       	andi	r24, 0xF7	; 247
 896:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 89a:	8f e1       	ldi	r24, 0x1F	; 31
 89c:	9e e4       	ldi	r25, 0x4E	; 78
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <lcd_init+0xf0>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <lcd_init+0xf6>
 8a4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 8a6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8a8:	77 9b       	sbis	0x0e, 7	; 14
 8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8b0:	77 9b       	sbis	0x0e, 7	; 14
 8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 8b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8b8:	88 60       	ori	r24, 0x08	; 8
 8ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8c2:	87 7f       	andi	r24, 0xF7	; 247
 8c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8c8:	8f e1       	ldi	r24, 0x1F	; 31
 8ca:	9e e4       	ldi	r25, 0x4E	; 78
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <lcd_init+0x11e>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <lcd_init+0x124>
 8d2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 8d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8d6:	77 9b       	sbis	0x0e, 7	; 14
 8d8:	fe cf       	rjmp	.-4      	; 0x8d6 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 8da:	86 e0       	ldi	r24, 0x06	; 6
 8dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8de:	77 9b       	sbis	0x0e, 7	; 14
 8e0:	fe cf       	rjmp	.-4      	; 0x8de <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 8e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8e6:	88 60       	ori	r24, 0x08	; 8
 8e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8f0:	87 7f       	andi	r24, 0xF7	; 247
 8f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8f6:	8f e1       	ldi	r24, 0x1F	; 31
 8f8:	9e e4       	ldi	r25, 0x4E	; 78
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <lcd_init+0x14c>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <lcd_init+0x152>
 900:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 902:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 904:	77 9b       	sbis	0x0e, 7	; 14
 906:	fe cf       	rjmp	.-4      	; 0x904 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 908:	8c e0       	ldi	r24, 0x0C	; 12
 90a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 90c:	77 9b       	sbis	0x0e, 7	; 14
 90e:	fe cf       	rjmp	.-4      	; 0x90c <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 910:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 914:	88 60       	ori	r24, 0x08	; 8
 916:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 91a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 91e:	87 7f       	andi	r24, 0xF7	; 247
 920:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 924:	8f e1       	ldi	r24, 0x1F	; 31
 926:	9e e4       	ldi	r25, 0x4E	; 78
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	f1 f7       	brne	.-4      	; 0x928 <lcd_init+0x17a>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <lcd_init+0x180>
 92e:	00 00       	nop
 930:	08 95       	ret

00000932 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 932:	4f 92       	push	r4
 934:	5f 92       	push	r5
 936:	6f 92       	push	r6
 938:	7f 92       	push	r7
 93a:	8f 92       	push	r8
 93c:	9f 92       	push	r9
 93e:	af 92       	push	r10
 940:	bf 92       	push	r11
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	69 97       	sbiw	r28, 0x19	; 25
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	14 2f       	mov	r17, r20
 964:	42 2e       	mov	r4, r18
 966:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
 968:	00 23       	and	r16, r16
 96a:	79 f0       	breq	.+30     	; 0x98a <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 96c:	6b 01       	movw	r12, r22
 96e:	7c 01       	movw	r14, r24
 970:	cc 24       	eor	r12, r12
 972:	f7 fc       	sbrc	r15, 7
 974:	c3 94       	inc	r12
 976:	dd 24       	eor	r13, r13
 978:	ee 24       	eor	r14, r14
 97a:	ff 24       	eor	r15, r15
 97c:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 97e:	6b 01       	movw	r12, r22
 980:	7c 01       	movw	r14, r24
 982:	97 fd       	sbrc	r25, 7
 984:	a3 c0       	rjmp	.+326    	; 0xacc <lcd_int32+0x19a>
 986:	c7 01       	movw	r24, r14
 988:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
 98a:	44 20       	and	r4, r4
 98c:	09 f4       	brne	.+2      	; 0x990 <lcd_int32+0x5e>
 98e:	96 c0       	rjmp	.+300    	; 0xabc <lcd_int32+0x18a>
 990:	9e 01       	movw	r18, r28
 992:	2f 5f       	subi	r18, 0xFF	; 255
 994:	3f 4f       	sbci	r19, 0xFF	; 255
 996:	59 01       	movw	r10, r18
 998:	49 01       	movw	r8, r18
 99a:	66 24       	eor	r6, r6
 99c:	6a 94       	dec	r6
 99e:	64 0c       	add	r6, r4
 9a0:	71 2c       	mov	r7, r1
 9a2:	3f ef       	ldi	r19, 0xFF	; 255
 9a4:	63 1a       	sub	r6, r19
 9a6:	73 0a       	sbc	r7, r19
 9a8:	6a 0c       	add	r6, r10
 9aa:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	40 e0       	ldi	r20, 0x00	; 0
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 9b8:	e6 2f       	mov	r30, r22
 9ba:	2a 8b       	std	Y+18, r18	; 0x12
 9bc:	3b 8b       	std	Y+19, r19	; 0x13
 9be:	4c 8b       	std	Y+20, r20	; 0x14
 9c0:	5d 8b       	std	Y+21, r21	; 0x15
 9c2:	6a 89       	ldd	r22, Y+18	; 0x12
 9c4:	7b 89       	ldd	r23, Y+19	; 0x13
 9c6:	8c 89       	ldd	r24, Y+20	; 0x14
 9c8:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 9ca:	20 e3       	ldi	r18, 0x30	; 48
 9cc:	2e 0f       	add	r18, r30
 9ce:	f4 01       	movw	r30, r8
 9d0:	21 93       	st	Z+, r18
 9d2:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
 9d4:	6e 16       	cp	r6, r30
 9d6:	7f 06       	cpc	r7, r31
 9d8:	49 f7       	brne	.-46     	; 0x9ac <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 9da:	99 24       	eor	r9, r9
 9dc:	93 94       	inc	r9
 9de:	94 0c       	add	r9, r4
 9e0:	f5 01       	movw	r30, r10
 9e2:	e4 0d       	add	r30, r4
 9e4:	f1 1d       	adc	r31, r1
 9e6:	2e e2       	ldi	r18, 0x2E	; 46
 9e8:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
 9ea:	2a e0       	ldi	r18, 0x0A	; 10
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	50 e0       	ldi	r21, 0x00	; 0
 9f2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 9f6:	e6 2f       	mov	r30, r22
 9f8:	2a 8b       	std	Y+18, r18	; 0x12
 9fa:	3b 8b       	std	Y+19, r19	; 0x13
 9fc:	4c 8b       	std	Y+20, r20	; 0x14
 9fe:	5d 8b       	std	Y+21, r21	; 0x15
 a00:	6e 8b       	std	Y+22, r22	; 0x16
 a02:	7f 8b       	std	Y+23, r23	; 0x17
 a04:	88 8f       	std	Y+24, r24	; 0x18
 a06:	99 8f       	std	Y+25, r25	; 0x19
 a08:	6a 89       	ldd	r22, Y+18	; 0x12
 a0a:	7b 89       	ldd	r23, Y+19	; 0x13
 a0c:	8c 89       	ldd	r24, Y+20	; 0x14
 a0e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 a10:	31 e0       	ldi	r19, 0x01	; 1
 a12:	39 0d       	add	r19, r9
 a14:	d5 01       	movw	r26, r10
 a16:	a9 0d       	add	r26, r9
 a18:	b1 1d       	adc	r27, r1
 a1a:	e0 5d       	subi	r30, 0xD0	; 208
 a1c:	ec 93       	st	X, r30
 a1e:	93 2e       	mov	r9, r19
        }while(qr.quot);
 a20:	61 15       	cp	r22, r1
 a22:	71 05       	cpc	r23, r1
 a24:	81 05       	cpc	r24, r1
 a26:	91 05       	cpc	r25, r1
 a28:	01 f7       	brne	.-64     	; 0x9ea <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 a2a:	11 23       	and	r17, r17
 a2c:	61 f0       	breq	.+24     	; 0xa46 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 a2e:	51 10       	cpse	r5, r1
 a30:	4b c0       	rjmp	.+150    	; 0xac8 <lcd_int32+0x196>
 a32:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 a34:	31 17       	cp	r19, r17
 a36:	38 f4       	brcc	.+14     	; 0xa46 <lcd_int32+0x114>
 a38:	f5 01       	movw	r30, r10
 a3a:	e3 0f       	add	r30, r19
 a3c:	f1 1d       	adc	r31, r1
 a3e:	90 83       	st	Z, r25
 a40:	3f 5f       	subi	r19, 0xFF	; 255
 a42:	13 13       	cpse	r17, r19
 a44:	f9 cf       	rjmp	.-14     	; 0xa38 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 a46:	00 23       	and	r16, r16
 a48:	31 f0       	breq	.+12     	; 0xa56 <lcd_int32+0x124>
 a4a:	f5 01       	movw	r30, r10
 a4c:	e3 0f       	add	r30, r19
 a4e:	f1 1d       	adc	r31, r1
 a50:	9d e2       	ldi	r25, 0x2D	; 45
 a52:	90 83       	st	Z, r25
 a54:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a56:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 a58:	31 50       	subi	r19, 0x01	; 1
 a5a:	f5 01       	movw	r30, r10
 a5c:	e3 0f       	add	r30, r19
 a5e:	f1 1d       	adc	r31, r1
 a60:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a62:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a64:	77 9b       	sbis	0x0e, 7	; 14
 a66:	fe cf       	rjmp	.-4      	; 0xa64 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 a68:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a6a:	77 9b       	sbis	0x0e, 7	; 14
 a6c:	fe cf       	rjmp	.-4      	; 0xa6a <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 a6e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a72:	98 60       	ori	r25, 0x08	; 8
 a74:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a78:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a7c:	97 7f       	andi	r25, 0xF7	; 247
 a7e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a82:	85 ed       	ldi	r24, 0xD5	; 213
 a84:	8a 95       	dec	r24
 a86:	f1 f7       	brne	.-4      	; 0xa84 <lcd_int32+0x152>
 a88:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 a8a:	31 11       	cpse	r19, r1
 a8c:	e5 cf       	rjmp	.-54     	; 0xa58 <lcd_int32+0x126>

}
 a8e:	69 96       	adiw	r28, 0x19	; 25
 a90:	0f b6       	in	r0, 0x3f	; 63
 a92:	f8 94       	cli
 a94:	de bf       	out	0x3e, r29	; 62
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	cd bf       	out	0x3d, r28	; 61
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	ff 90       	pop	r15
 aa4:	ef 90       	pop	r14
 aa6:	df 90       	pop	r13
 aa8:	cf 90       	pop	r12
 aaa:	bf 90       	pop	r11
 aac:	af 90       	pop	r10
 aae:	9f 90       	pop	r9
 ab0:	8f 90       	pop	r8
 ab2:	7f 90       	pop	r7
 ab4:	6f 90       	pop	r6
 ab6:	5f 90       	pop	r5
 ab8:	4f 90       	pop	r4
 aba:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 abc:	91 2c       	mov	r9, r1
 abe:	9e 01       	movw	r18, r28
 ac0:	2f 5f       	subi	r18, 0xFF	; 255
 ac2:	3f 4f       	sbci	r19, 0xFF	; 255
 ac4:	59 01       	movw	r10, r18
 ac6:	91 cf       	rjmp	.-222    	; 0x9ea <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 ac8:	90 e3       	ldi	r25, 0x30	; 48
 aca:	b4 cf       	rjmp	.-152    	; 0xa34 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 acc:	f0 94       	com	r15
 ace:	e0 94       	com	r14
 ad0:	d0 94       	com	r13
 ad2:	c0 94       	com	r12
 ad4:	c1 1c       	adc	r12, r1
 ad6:	d1 1c       	adc	r13, r1
 ad8:	e1 1c       	adc	r14, r1
 ada:	f1 1c       	adc	r15, r1
 adc:	54 cf       	rjmp	.-344    	; 0x986 <lcd_int32+0x54>

00000ade <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
 ade:	5f 92       	push	r5
 ae0:	6f 92       	push	r6
 ae2:	7f 92       	push	r7
 ae4:	8f 92       	push	r8
 ae6:	9f 92       	push	r9
 ae8:	af 92       	push	r10
 aea:	bf 92       	push	r11
 aec:	cf 92       	push	r12
 aee:	df 92       	push	r13
 af0:	ef 92       	push	r14
 af2:	ff 92       	push	r15
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	cf 93       	push	r28
 afa:	df 93       	push	r29
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
 b00:	61 97       	sbiw	r28, 0x11	; 17
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	f8 94       	cli
 b06:	de bf       	out	0x3e, r29	; 62
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	cd bf       	out	0x3d, r28	; 61
 b0c:	5c 01       	movw	r10, r24
 b0e:	96 2e       	mov	r9, r22
 b10:	54 2e       	mov	r5, r20
 b12:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 b14:	8b 2c       	mov	r8, r11
 b16:	88 1c       	adc	r8, r8
 b18:	88 24       	eor	r8, r8
 b1a:	88 1c       	adc	r8, r8
 b1c:	78 2c       	mov	r7, r8
 b1e:	9c 01       	movw	r18, r24
 b20:	97 fd       	sbrc	r25, 7
 b22:	9d c0       	rjmp	.+314    	; 0xc5e <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
 b24:	55 20       	and	r5, r5
 b26:	09 f4       	brne	.+2      	; 0xb2a <lcd_int16+0x4c>
 b28:	8e c0       	rjmp	.+284    	; 0xc46 <lcd_int16+0x168>
 b2a:	8e 01       	movw	r16, r28
 b2c:	0f 5f       	subi	r16, 0xFF	; 255
 b2e:	1f 4f       	sbci	r17, 0xFF	; 255
 b30:	78 01       	movw	r14, r16
 b32:	cc 24       	eor	r12, r12
 b34:	ca 94       	dec	r12
 b36:	c5 0c       	add	r12, r5
 b38:	d1 2c       	mov	r13, r1
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	c8 1a       	sub	r12, r24
 b3e:	d8 0a       	sbc	r13, r24
 b40:	c0 0e       	add	r12, r16
 b42:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 b44:	6a e0       	ldi	r22, 0x0A	; 10
 b46:	70 e0       	ldi	r23, 0x00	; 0
 b48:	c9 01       	movw	r24, r18
 b4a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b4e:	46 2f       	mov	r20, r22
 b50:	24 2f       	mov	r18, r20
 b52:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 b54:	80 5d       	subi	r24, 0xD0	; 208
 b56:	f7 01       	movw	r30, r14
 b58:	81 93       	st	Z+, r24
 b5a:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
 b5c:	ec 15       	cp	r30, r12
 b5e:	fd 05       	cpc	r31, r13
 b60:	89 f7       	brne	.-30     	; 0xb44 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 b62:	ff 24       	eor	r15, r15
 b64:	f3 94       	inc	r15
 b66:	f5 0c       	add	r15, r5
 b68:	f8 01       	movw	r30, r16
 b6a:	e5 0d       	add	r30, r5
 b6c:	f1 1d       	adc	r31, r1
 b6e:	8e e2       	ldi	r24, 0x2E	; 46
 b70:	80 83       	st	Z, r24
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 b74:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
 b76:	6a e0       	ldi	r22, 0x0A	; 10
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	c9 01       	movw	r24, r18
 b7c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b80:	46 2f       	mov	r20, r22
 b82:	24 2f       	mov	r18, r20
 b84:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 b86:	91 e0       	ldi	r25, 0x01	; 1
 b88:	9f 0d       	add	r25, r15
 b8a:	f8 01       	movw	r30, r16
 b8c:	ef 0d       	add	r30, r15
 b8e:	f1 1d       	adc	r31, r1
 b90:	80 5d       	subi	r24, 0xD0	; 208
 b92:	80 83       	st	Z, r24
        }
        while(qr.quot);
 b94:	21 15       	cp	r18, r1
 b96:	31 05       	cpc	r19, r1
 b98:	69 f7       	brne	.-38     	; 0xb74 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
 b9a:	61 10       	cpse	r6, r1
 b9c:	59 c0       	rjmp	.+178    	; 0xc50 <lcd_int16+0x172>
 b9e:	b7 fc       	sbrc	r11, 7
 ba0:	63 c0       	rjmp	.+198    	; 0xc68 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 ba2:	99 20       	and	r9, r9
 ba4:	b1 f0       	breq	.+44     	; 0xbd2 <lcd_int16+0xf4>
 ba6:	68 2d       	mov	r22, r8
 ba8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 baa:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 bac:	29 2f       	mov	r18, r25
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	49 2d       	mov	r20, r9
 bb2:	50 e0       	ldi	r21, 0x00	; 0
 bb4:	46 1b       	sub	r20, r22
 bb6:	57 0b       	sbc	r21, r23
 bb8:	24 17       	cp	r18, r20
 bba:	35 07       	cpc	r19, r21
 bbc:	54 f4       	brge	.+20     	; 0xbd2 <lcd_int16+0xf4>
 bbe:	9f 5f       	subi	r25, 0xFF	; 255
 bc0:	f8 01       	movw	r30, r16
 bc2:	e2 0f       	add	r30, r18
 bc4:	f3 1f       	adc	r31, r19
 bc6:	80 83       	st	Z, r24
 bc8:	29 2f       	mov	r18, r25
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	24 17       	cp	r18, r20
 bce:	35 07       	cpc	r19, r21
 bd0:	b4 f3       	brlt	.-20     	; 0xbbe <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
 bd2:	77 20       	and	r7, r7
 bd4:	31 f0       	breq	.+12     	; 0xbe2 <lcd_int16+0x104>
 bd6:	f8 01       	movw	r30, r16
 bd8:	e9 0f       	add	r30, r25
 bda:	f1 1d       	adc	r31, r1
 bdc:	8d e2       	ldi	r24, 0x2D	; 45
 bde:	80 83       	st	Z, r24
 be0:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 be2:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 be4:	91 50       	subi	r25, 0x01	; 1
 be6:	f8 01       	movw	r30, r16
 be8:	e9 0f       	add	r30, r25
 bea:	f1 1d       	adc	r31, r1
 bec:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 bee:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 bf0:	77 9b       	sbis	0x0e, 7	; 14
 bf2:	fe cf       	rjmp	.-4      	; 0xbf0 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
 bf4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 bf6:	77 9b       	sbis	0x0e, 7	; 14
 bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 bfa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 bfe:	88 60       	ori	r24, 0x08	; 8
 c00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 c04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 c08:	87 7f       	andi	r24, 0xF7	; 247
 c0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 c0e:	f5 ed       	ldi	r31, 0xD5	; 213
 c10:	fa 95       	dec	r31
 c12:	f1 f7       	brne	.-4      	; 0xc10 <lcd_int16+0x132>
 c14:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 c16:	91 11       	cpse	r25, r1
 c18:	e5 cf       	rjmp	.-54     	; 0xbe4 <lcd_int16+0x106>
}
 c1a:	61 96       	adiw	r28, 0x11	; 17
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	1f 91       	pop	r17
 c2c:	0f 91       	pop	r16
 c2e:	ff 90       	pop	r15
 c30:	ef 90       	pop	r14
 c32:	df 90       	pop	r13
 c34:	cf 90       	pop	r12
 c36:	bf 90       	pop	r11
 c38:	af 90       	pop	r10
 c3a:	9f 90       	pop	r9
 c3c:	8f 90       	pop	r8
 c3e:	7f 90       	pop	r7
 c40:	6f 90       	pop	r6
 c42:	5f 90       	pop	r5
 c44:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 c46:	f1 2c       	mov	r15, r1
 c48:	8e 01       	movw	r16, r28
 c4a:	0f 5f       	subi	r16, 0xFF	; 255
 c4c:	1f 4f       	sbci	r17, 0xFF	; 255
 c4e:	93 cf       	rjmp	.-218    	; 0xb76 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 c50:	99 20       	and	r9, r9
 c52:	09 f4       	brne	.+2      	; 0xc56 <lcd_int16+0x178>
 c54:	be cf       	rjmp	.-132    	; 0xbd2 <lcd_int16+0xf4>
 c56:	68 2d       	mov	r22, r8
 c58:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 c5a:	80 e3       	ldi	r24, 0x30	; 48
 c5c:	a7 cf       	rjmp	.-178    	; 0xbac <lcd_int16+0xce>
 c5e:	22 27       	eor	r18, r18
 c60:	33 27       	eor	r19, r19
 c62:	28 1b       	sub	r18, r24
 c64:	39 0b       	sbc	r19, r25
 c66:	5e cf       	rjmp	.-324    	; 0xb24 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c68:	f3 94       	inc	r15
 c6a:	f3 94       	inc	r15
 c6c:	f8 01       	movw	r30, r16
 c6e:	e9 0f       	add	r30, r25
 c70:	f1 1d       	adc	r31, r1
 c72:	8d e2       	ldi	r24, 0x2D	; 45
 c74:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 c76:	99 20       	and	r9, r9
 c78:	59 f0       	breq	.+22     	; 0xc90 <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 c7a:	2f 2d       	mov	r18, r15
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	49 2d       	mov	r20, r9
 c80:	50 e0       	ldi	r21, 0x00	; 0
 c82:	24 17       	cp	r18, r20
 c84:	35 07       	cpc	r19, r21
 c86:	24 f4       	brge	.+8      	; 0xc90 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c88:	9f 2d       	mov	r25, r15
                bSigned = 0;
 c8a:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 c8c:	80 e2       	ldi	r24, 0x20	; 32
 c8e:	97 cf       	rjmp	.-210    	; 0xbbe <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c90:	9f 2d       	mov	r25, r15
 c92:	a7 cf       	rjmp	.-178    	; 0xbe2 <lcd_int16+0x104>

00000c94 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
 c94:	80 ef       	ldi	r24, 0xF0	; 240
 c96:	87 bb       	out	0x17, r24	; 23

//initialize encoding value to be used
uint8_t encoding = 0;

//call function to initialize SPI and TC
initialization();
 c98:	0e 94 67 00 	call	0xce	; 0xce <initialization>

//enable global interrupts
sei();
 c9c:	78 94       	sei

OCR2 = 0;
 c9e:	13 bc       	out	0x23, r1	; 35
  	if(min_count == 60){
	  	hour_count++;
		min_count = 0;
  	}
	if(hour_count == 13){
		hour_count = 1;
 ca0:	ff 24       	eor	r15, r15
 ca2:	f3 94       	inc	r15
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
 ca4:	dd ec       	ldi	r29, 0xCD	; 205
void segsum(uint8_t hour, uint8_t minute) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 ca6:	cf ef       	ldi	r28, 0xFF	; 255
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
 ca8:	00 e1       	ldi	r16, 0x10	; 16
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
 caa:	10 e5       	ldi	r17, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
 cac:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <input_flag>
 cb0:	81 30       	cpi	r24, 0x01	; 1
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <main+0x22>
 cb4:	68 c0       	rjmp	.+208    	; 0xd86 <main+0xf2>
	  	button_encoder_read();
	  	input_flag = FALSE;
  	}

  	if(isr_count == 128){
 cb6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isr_count>
 cba:	80 38       	cpi	r24, 0x80	; 128
 cbc:	09 f4       	brne	.+2      	; 0xcc0 <main+0x2c>
 cbe:	6c c0       	rjmp	.+216    	; 0xd98 <main+0x104>
	  	sec_count++;
		isr_count = 0;
  	}
  	if(sec_count == 60){
 cc0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec_count>
 cc4:	8c 33       	cpi	r24, 0x3C	; 60
 cc6:	09 f4       	brne	.+2      	; 0xcca <main+0x36>
 cc8:	73 c0       	rjmp	.+230    	; 0xdb0 <main+0x11c>
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
 cca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 cce:	8c 33       	cpi	r24, 0x3C	; 60
 cd0:	09 f4       	brne	.+2      	; 0xcd4 <main+0x40>
 cd2:	7a c0       	rjmp	.+244    	; 0xdc8 <main+0x134>
	  	hour_count++;
		min_count = 0;
  	}
	if(hour_count == 13){
 cd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 cd8:	8d 30       	cpi	r24, 0x0D	; 13
 cda:	09 f4       	brne	.+2      	; 0xcde <main+0x4a>
 cdc:	81 c0       	rjmp	.+258    	; 0xde0 <main+0x14c>
		hour_count = 1;
	}

	segsum(hour_count, min_count);
 cde:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 ce2:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
 ce6:	9d 9f       	mul	r25, r29
 ce8:	81 2d       	mov	r24, r1
 cea:	11 24       	eor	r1, r1
 cec:	28 2f       	mov	r18, r24
 cee:	26 95       	lsr	r18
 cf0:	26 95       	lsr	r18
 cf2:	26 95       	lsr	r18
 cf4:	4a e0       	ldi	r20, 0x0A	; 10
 cf6:	24 9f       	mul	r18, r20
 cf8:	90 19       	sub	r25, r0
 cfa:	11 24       	eor	r1, r1
 cfc:	29 2f       	mov	r18, r25
	tens = minute / 10;
 cfe:	98 2f       	mov	r25, r24
 d00:	96 95       	lsr	r25
 d02:	96 95       	lsr	r25
 d04:	96 95       	lsr	r25

	hundreds = hour % 10;
 d06:	3d 9f       	mul	r19, r29
 d08:	81 2d       	mov	r24, r1
 d0a:	11 24       	eor	r1, r1
 d0c:	86 95       	lsr	r24
 d0e:	86 95       	lsr	r24
 d10:	86 95       	lsr	r24
 d12:	43 2f       	mov	r20, r19
 d14:	5a e0       	ldi	r21, 0x0A	; 10
 d16:	85 9f       	mul	r24, r21
 d18:	40 19       	sub	r20, r0
 d1a:	11 24       	eor	r1, r1
	if(hour > 9)
 d1c:	3a 30       	cpi	r19, 0x0A	; 10
 d1e:	08 f4       	brcc	.+2      	; 0xd22 <main+0x8e>
void segsum(uint8_t hour, uint8_t minute) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 d20:	8f ef       	ldi	r24, 0xFF	; 255

	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;

	if(sec_count % 2 == 0)
 d22:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <sec_count>
 d26:	30 fd       	sbrc	r19, 0
 d28:	60 c0       	rjmp	.+192    	; 0xdea <main+0x156>
		segment_data[2] = 16;
 d2a:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <segment_data+0x2>
	else
		segment_data[2] = -1;
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
 d2e:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <segment_data>
	segment_data[1] = tens;
 d32:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <segment_data+0x1>
	
	segment_data[3] = hundreds;
 d36:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <segment_data+0x3>
	segment_data[4] = thousands;
 d3a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <segment_data+0x4>
		hour_count = 1;
	}

	segsum(hour_count, min_count);
  //make PORTA an output
	DDRA = 0xFF;
 d3e:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
 d40:	00 00       	nop
 d42:	ac e3       	ldi	r26, 0x3C	; 60
 d44:	b1 e0       	ldi	r27, 0x01	; 1
 d46:	80 e0       	ldi	r24, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
 d48:	ed 91       	ld	r30, X+
 d4a:	e1 31       	cpi	r30, 0x11	; 17
 d4c:	08 f0       	brcs	.+2      	; 0xd50 <main+0xbc>
 d4e:	4b c0       	rjmp	.+150    	; 0xde6 <main+0x152>
 d50:	f0 e0       	ldi	r31, 0x00	; 0
 d52:	ef 5f       	subi	r30, 0xFF	; 255
 d54:	fe 4f       	sbci	r31, 0xFE	; 254
 d56:	20 81       	ld	r18, Z
		PORTA = 0xFF;
 d58:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
 d5a:	98 2f       	mov	r25, r24
 d5c:	92 95       	swap	r25
 d5e:	90 7f       	andi	r25, 0xF0	; 240
 d60:	98 bb       	out	0x18, r25	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
 d62:	2b bb       	out	0x1b, r18	; 27
 d64:	ef e3       	ldi	r30, 0x3F	; 63
 d66:	f1 e0       	ldi	r31, 0x01	; 1
 d68:	31 97       	sbiw	r30, 0x01	; 1
 d6a:	f1 f7       	brne	.-4      	; 0xd68 <main+0xd4>
 d6c:	00 c0       	rjmp	.+0      	; 0xd6e <main+0xda>
 d6e:	00 00       	nop
 d70:	8f 5f       	subi	r24, 0xFF	; 255
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
 d72:	85 30       	cpi	r24, 0x05	; 5
 d74:	49 f7       	brne	.-46     	; 0xd48 <main+0xb4>
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	8b bb       	out	0x1b, r24	; 27
	PORTB = (5 << 4);
 d7a:	18 bb       	out	0x18, r17	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
 d7c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <input_flag>
 d80:	81 30       	cpi	r24, 0x01	; 1
 d82:	09 f0       	breq	.+2      	; 0xd86 <main+0xf2>
 d84:	98 cf       	rjmp	.-208    	; 0xcb6 <main+0x22>
	  	button_encoder_read();
 d86:	0e 94 23 01 	call	0x246	; 0x246 <button_encoder_read>
	  	input_flag = FALSE;
 d8a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <input_flag>
  	}

  	if(isr_count == 128){
 d8e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <isr_count>
 d92:	80 38       	cpi	r24, 0x80	; 128
 d94:	09 f0       	breq	.+2      	; 0xd98 <main+0x104>
 d96:	94 cf       	rjmp	.-216    	; 0xcc0 <main+0x2c>
	  	sec_count++;
 d98:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec_count>
 d9c:	8f 5f       	subi	r24, 0xFF	; 255
 d9e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sec_count>
		isr_count = 0;
 da2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <isr_count>
  	}
  	if(sec_count == 60){
 da6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec_count>
 daa:	8c 33       	cpi	r24, 0x3C	; 60
 dac:	09 f0       	breq	.+2      	; 0xdb0 <main+0x11c>
 dae:	8d cf       	rjmp	.-230    	; 0xcca <main+0x36>
	  	min_count++;
 db0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 db4:	8f 5f       	subi	r24, 0xFF	; 255
 db6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		sec_count = 0;
 dba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sec_count>
  	}
  	if(min_count == 60){
 dbe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 dc2:	8c 33       	cpi	r24, 0x3C	; 60
 dc4:	09 f0       	breq	.+2      	; 0xdc8 <main+0x134>
 dc6:	86 cf       	rjmp	.-244    	; 0xcd4 <main+0x40>
	  	hour_count++;
 dc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 dcc:	8f 5f       	subi	r24, 0xFF	; 255
 dce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		min_count = 0;
 dd2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
  	}
	if(hour_count == 13){
 dd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 dda:	8d 30       	cpi	r24, 0x0D	; 13
 ddc:	09 f0       	breq	.+2      	; 0xde0 <main+0x14c>
 dde:	7f cf       	rjmp	.-258    	; 0xcde <main+0x4a>
		hour_count = 1;
 de0:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
 de4:	7c cf       	rjmp	.-264    	; 0xcde <main+0x4a>
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
 de6:	2f ef       	ldi	r18, 0xFF	; 255
 de8:	b7 cf       	rjmp	.-146    	; 0xd58 <main+0xc4>
		thousands = hour / 10;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
 dea:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <segment_data+0x2>
 dee:	9f cf       	rjmp	.-194    	; 0xd2e <main+0x9a>

00000df0 <__divmodhi4>:
 df0:	97 fb       	bst	r25, 7
 df2:	07 2e       	mov	r0, r23
 df4:	16 f4       	brtc	.+4      	; 0xdfa <__divmodhi4+0xa>
 df6:	00 94       	com	r0
 df8:	07 d0       	rcall	.+14     	; 0xe08 <__divmodhi4_neg1>
 dfa:	77 fd       	sbrc	r23, 7
 dfc:	09 d0       	rcall	.+18     	; 0xe10 <__divmodhi4_neg2>
 dfe:	0e 94 2b 07 	call	0xe56	; 0xe56 <__udivmodhi4>
 e02:	07 fc       	sbrc	r0, 7
 e04:	05 d0       	rcall	.+10     	; 0xe10 <__divmodhi4_neg2>
 e06:	3e f4       	brtc	.+14     	; 0xe16 <__divmodhi4_exit>

00000e08 <__divmodhi4_neg1>:
 e08:	90 95       	com	r25
 e0a:	81 95       	neg	r24
 e0c:	9f 4f       	sbci	r25, 0xFF	; 255
 e0e:	08 95       	ret

00000e10 <__divmodhi4_neg2>:
 e10:	70 95       	com	r23
 e12:	61 95       	neg	r22
 e14:	7f 4f       	sbci	r23, 0xFF	; 255

00000e16 <__divmodhi4_exit>:
 e16:	08 95       	ret

00000e18 <__divmodsi4>:
 e18:	05 2e       	mov	r0, r21
 e1a:	97 fb       	bst	r25, 7
 e1c:	1e f4       	brtc	.+6      	; 0xe24 <__divmodsi4+0xc>
 e1e:	00 94       	com	r0
 e20:	0e 94 23 07 	call	0xe46	; 0xe46 <__negsi2>
 e24:	57 fd       	sbrc	r21, 7
 e26:	07 d0       	rcall	.+14     	; 0xe36 <__divmodsi4_neg2>
 e28:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__udivmodsi4>
 e2c:	07 fc       	sbrc	r0, 7
 e2e:	03 d0       	rcall	.+6      	; 0xe36 <__divmodsi4_neg2>
 e30:	4e f4       	brtc	.+18     	; 0xe44 <__divmodsi4_exit>
 e32:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__negsi2>

00000e36 <__divmodsi4_neg2>:
 e36:	50 95       	com	r21
 e38:	40 95       	com	r20
 e3a:	30 95       	com	r19
 e3c:	21 95       	neg	r18
 e3e:	3f 4f       	sbci	r19, 0xFF	; 255
 e40:	4f 4f       	sbci	r20, 0xFF	; 255
 e42:	5f 4f       	sbci	r21, 0xFF	; 255

00000e44 <__divmodsi4_exit>:
 e44:	08 95       	ret

00000e46 <__negsi2>:
 e46:	90 95       	com	r25
 e48:	80 95       	com	r24
 e4a:	70 95       	com	r23
 e4c:	61 95       	neg	r22
 e4e:	7f 4f       	sbci	r23, 0xFF	; 255
 e50:	8f 4f       	sbci	r24, 0xFF	; 255
 e52:	9f 4f       	sbci	r25, 0xFF	; 255
 e54:	08 95       	ret

00000e56 <__udivmodhi4>:
 e56:	aa 1b       	sub	r26, r26
 e58:	bb 1b       	sub	r27, r27
 e5a:	51 e1       	ldi	r21, 0x11	; 17
 e5c:	07 c0       	rjmp	.+14     	; 0xe6c <__udivmodhi4_ep>

00000e5e <__udivmodhi4_loop>:
 e5e:	aa 1f       	adc	r26, r26
 e60:	bb 1f       	adc	r27, r27
 e62:	a6 17       	cp	r26, r22
 e64:	b7 07       	cpc	r27, r23
 e66:	10 f0       	brcs	.+4      	; 0xe6c <__udivmodhi4_ep>
 e68:	a6 1b       	sub	r26, r22
 e6a:	b7 0b       	sbc	r27, r23

00000e6c <__udivmodhi4_ep>:
 e6c:	88 1f       	adc	r24, r24
 e6e:	99 1f       	adc	r25, r25
 e70:	5a 95       	dec	r21
 e72:	a9 f7       	brne	.-22     	; 0xe5e <__udivmodhi4_loop>
 e74:	80 95       	com	r24
 e76:	90 95       	com	r25
 e78:	bc 01       	movw	r22, r24
 e7a:	cd 01       	movw	r24, r26
 e7c:	08 95       	ret

00000e7e <__udivmodsi4>:
 e7e:	a1 e2       	ldi	r26, 0x21	; 33
 e80:	1a 2e       	mov	r1, r26
 e82:	aa 1b       	sub	r26, r26
 e84:	bb 1b       	sub	r27, r27
 e86:	fd 01       	movw	r30, r26
 e88:	0d c0       	rjmp	.+26     	; 0xea4 <__udivmodsi4_ep>

00000e8a <__udivmodsi4_loop>:
 e8a:	aa 1f       	adc	r26, r26
 e8c:	bb 1f       	adc	r27, r27
 e8e:	ee 1f       	adc	r30, r30
 e90:	ff 1f       	adc	r31, r31
 e92:	a2 17       	cp	r26, r18
 e94:	b3 07       	cpc	r27, r19
 e96:	e4 07       	cpc	r30, r20
 e98:	f5 07       	cpc	r31, r21
 e9a:	20 f0       	brcs	.+8      	; 0xea4 <__udivmodsi4_ep>
 e9c:	a2 1b       	sub	r26, r18
 e9e:	b3 0b       	sbc	r27, r19
 ea0:	e4 0b       	sbc	r30, r20
 ea2:	f5 0b       	sbc	r31, r21

00000ea4 <__udivmodsi4_ep>:
 ea4:	66 1f       	adc	r22, r22
 ea6:	77 1f       	adc	r23, r23
 ea8:	88 1f       	adc	r24, r24
 eaa:	99 1f       	adc	r25, r25
 eac:	1a 94       	dec	r1
 eae:	69 f7       	brne	.-38     	; 0xe8a <__udivmodsi4_loop>
 eb0:	60 95       	com	r22
 eb2:	70 95       	com	r23
 eb4:	80 95       	com	r24
 eb6:	90 95       	com	r25
 eb8:	9b 01       	movw	r18, r22
 eba:	ac 01       	movw	r20, r24
 ebc:	bd 01       	movw	r22, r26
 ebe:	cf 01       	movw	r24, r30
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
