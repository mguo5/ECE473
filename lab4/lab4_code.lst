
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000012a0  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800112  00800112  00001346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000207c  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c79  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fec  00000000  00000000  000040f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  000053e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198e  00000000  00000000  00005ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00007475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ea       	ldi	r30, 0xA0	; 160
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 31       	cpi	r26, 0x12	; 18
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e1       	ldi	r26, 0x12	; 18
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 37       	cpi	r26, 0x7A	; 122
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <main>
      c6:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
      ce:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
      d2:	8a e3       	ldi	r24, 0x3A	; 58
      d4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min_count>
hour_count = (__TIME__[0]-24)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
      d8:	8e ef       	ldi	r24, 0xFE	; 254
      da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>

//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
      de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
      e2:	8d 30       	cpi	r24, 0x0D	; 13
      e4:	40 f0       	brcs	.+16     	; 0xf6 <real_time+0x28>
	hour_count -= 12;
      e6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
      ea:	8c 50       	subi	r24, 0x0C	; 12
      ec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
	pm_flag = 0x01;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pm_flag>
      f6:	08 95       	ret

000000f8 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
      f8:	87 b3       	in	r24, 0x17	; 23
      fa:	87 60       	ori	r24, 0x07	; 7
      fc:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
      fe:	8f ef       	ldi	r24, 0xFF	; 255
     100:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
     102:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
     104:	80 e5       	ldi	r24, 0x50	; 80
     106:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     10c:	80 b7       	in	r24, 0x30	; 48
     10e:	88 60       	ori	r24, 0x08	; 8
     110:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     112:	87 b7       	in	r24, 0x37	; 55
     114:	81 60       	ori	r24, 0x01	; 1
     116:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     118:	83 b7       	in	r24, 0x33	; 51
     11a:	81 60       	ori	r24, 0x01	; 1
     11c:	83 bf       	out	0x33, r24	; 51

	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (0 << CS20) | (1 << CS21) | (0 << CS22);
     11e:	85 b5       	in	r24, 0x25	; 37
     120:	8a 66       	ori	r24, 0x6A	; 106
     122:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;
     124:	80 e4       	ldi	r24, 0x40	; 64
     126:	9c e9       	ldi	r25, 0x9C	; 156
     128:	9d bd       	out	0x2d, r25	; 45
     12a:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     12c:	87 b7       	in	r24, 0x37	; 55
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     132:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     134:	8e b5       	in	r24, 0x2e	; 46
     136:	81 60       	ori	r24, 0x01	; 1
     138:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     13a:	eb e8       	ldi	r30, 0x8B	; 139
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	81 68       	ori	r24, 0x81	; 129
     142:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     144:	ea e8       	ldi	r30, 0x8A	; 138
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	8a 60       	ori	r24, 0x0A	; 10
     14c:	80 83       	st	Z, r24
     14e:	08 95       	ret

00000150 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     150:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     152:	e8 2f       	mov	r30, r24
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	99 b3       	in	r25, 0x19	; 25
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	e9 5d       	subi	r30, 0xD9	; 217
     15e:	fe 4f       	sbci	r31, 0xFE	; 254
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	30 6e       	ori	r19, 0xE0	; 224
     16a:	89 2f       	mov	r24, r25
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <chk_buttons+0x24>
     170:	95 95       	asr	r25
     172:	87 95       	ror	r24
     174:	4a 95       	dec	r20
     176:	e2 f7       	brpl	.-8      	; 0x170 <chk_buttons+0x20>
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	99 27       	eor	r25, r25
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	84 27       	eor	r24, r20
     180:	28 2b       	or	r18, r24
     182:	39 2b       	or	r19, r25
     184:	31 83       	std	Z+1, r19	; 0x01
     186:	20 83       	st	Z, r18
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	21 15       	cp	r18, r1
     18c:	30 4f       	sbci	r19, 0xF0	; 240
     18e:	09 f0       	breq	.+2      	; 0x192 <chk_buttons+0x42>
     190:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     192:	08 95       	ret

00000194 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	ones = minute % 10;
     194:	9d ec       	ldi	r25, 0xCD	; 205
     196:	69 9f       	mul	r22, r25
     198:	21 2d       	mov	r18, r1
     19a:	11 24       	eor	r1, r1
     19c:	32 2f       	mov	r19, r18
     19e:	36 95       	lsr	r19
     1a0:	36 95       	lsr	r19
     1a2:	36 95       	lsr	r19
     1a4:	4a e0       	ldi	r20, 0x0A	; 10
     1a6:	34 9f       	mul	r19, r20
     1a8:	60 19       	sub	r22, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	36 2f       	mov	r19, r22
	tens = minute / 10;
     1ae:	26 95       	lsr	r18
     1b0:	26 95       	lsr	r18
     1b2:	26 95       	lsr	r18

	hundreds = hour % 10;
     1b4:	89 9f       	mul	r24, r25
     1b6:	91 2d       	mov	r25, r1
     1b8:	11 24       	eor	r1, r1
     1ba:	96 95       	lsr	r25
     1bc:	96 95       	lsr	r25
     1be:	96 95       	lsr	r25
     1c0:	48 2f       	mov	r20, r24
     1c2:	5a e0       	ldi	r21, 0x0A	; 10
     1c4:	95 9f       	mul	r25, r21
     1c6:	40 19       	sub	r20, r0
     1c8:	11 24       	eor	r1, r1
	if(hour > 9)
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	30 f4       	brcc	.+12     	; 0x1da <segsum+0x46>
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hour24_flag>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	a9 f0       	breq	.+42     	; 0x202 <segsum+0x6e>
     1d8:	91 95       	neg	r25
		thousands = 0;

	if(sec_count % 2 == 0)
     1da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_count>
     1de:	80 ff       	sbrs	r24, 0
     1e0:	0c c0       	rjmp	.+24     	; 0x1fa <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     1e8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <segment_data>
	segment_data[1] = tens;
     1ec:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <segment_data+0x1>
	
	segment_data[3] = hundreds;
     1f0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <segment_data+0x3>
	segment_data[4] = thousands;
     1f4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <segment_data+0x4>
     1f8:	08 95       	ret
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
		thousands = 0;

	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <segment_data+0x2>
     200:	f3 cf       	rjmp	.-26     	; 0x1e8 <segsum+0x54>
	tens = minute / 10;

	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	else if(hour24_flag == 0x01)
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	e9 cf       	rjmp	.-46     	; 0x1d8 <segsum+0x44>

00000206 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     206:	81 31       	cpi	r24, 0x11	; 17
     208:	30 f4       	brcc	.+12     	; 0x216 <seven_seg_encoding+0x10>
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e0 50       	subi	r30, 0x00	; 0
     210:	ff 4f       	sbci	r31, 0xFF	; 255
     212:	80 81       	ld	r24, Z
     214:	08 95       	ret
     216:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     218:	08 95       	ret

0000021a <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	uint8_t encoder_left_prev = encoder_left;
     21a:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     21e:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     222:	28 2f       	mov	r18, r24
     224:	23 70       	andi	r18, 0x03	; 3
     226:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     22a:	8c 70       	andi	r24, 0x0C	; 12
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	95 95       	asr	r25
     230:	87 95       	ror	r24
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     23a:	83 30       	cpi	r24, 0x03	; 3
     23c:	a1 f1       	breq	.+104    	; 0x2a6 <encoder_process+0x8c>
     23e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adjust_flag>
     242:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>

	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     246:	23 30       	cpi	r18, 0x03	; 3
     248:	99 f0       	breq	.+38     	; 0x270 <encoder_process+0x56>
				OCR3A -= 10;

		}
	}

	if(adjust_flag == 0x01){
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	09 f4       	brne	.+2      	; 0x250 <encoder_process+0x36>
     24e:	40 c0       	rjmp	.+128    	; 0x2d0 <encoder_process+0xb6>
		hour_count = temp_hour;
		min_count = temp_min;
	}

	if(adjust_alarm == 0x01){
     250:	91 30       	cpi	r25, 0x01	; 1
     252:	09 f0       	breq	.+2      	; 0x256 <encoder_process+0x3c>
     254:	08 95       	ret
		alarm_time_min = temp_min;
     256:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <temp_min>
     25a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <alarm_time_min>
		alarm_time_hour = temp_hour;
     25e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <temp_hour>
     262:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		temp_pm_flag = pm_flag;
     266:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <pm_flag>
     26a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <temp_pm_flag>
     26e:	08 95       	ret

	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     270:	31 30       	cpi	r19, 0x01	; 1
     272:	09 f4       	brne	.+2      	; 0x276 <encoder_process+0x5c>
     274:	5e c0       	rjmp	.+188    	; 0x332 <encoder_process+0x118>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     276:	32 30       	cpi	r19, 0x02	; 2
     278:	41 f7       	brne	.-48     	; 0x24a <encoder_process+0x30>
		if(adjust_flag == 0x01 || adjust_flag == 0x01)
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	09 f4       	brne	.+2      	; 0x280 <encoder_process+0x66>
     27e:	8a c0       	rjmp	.+276    	; 0x394 <encoder_process+0x17a>
				temp_hour = 12;
			}
			else
				temp_hour--;
		else{
			if((OCR3A - 10) <= 0)
     280:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     284:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     288:	2a 30       	cpi	r18, 0x0A	; 10
     28a:	31 05       	cpc	r19, r1
     28c:	09 f4       	brne	.+2      	; 0x290 <encoder_process+0x76>
     28e:	73 c0       	rjmp	.+230    	; 0x376 <encoder_process+0x15c>
				OCR3A = 0;
			else
				OCR3A -= 10;
     290:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     294:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     298:	2a 50       	subi	r18, 0x0A	; 10
     29a:	31 09       	sbc	r19, r1
     29c:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2a0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     2a4:	d5 cf       	rjmp	.-86     	; 0x250 <encoder_process+0x36>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2a6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     2aa:	41 30       	cpi	r20, 0x01	; 1
     2ac:	19 f1       	breq	.+70     	; 0x2f4 <encoder_process+0xda>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     2ae:	42 30       	cpi	r20, 0x02	; 2
     2b0:	41 f6       	brne	.-112    	; 0x242 <encoder_process+0x28>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2b2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     2b6:	81 11       	cpse	r24, r1
     2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <encoder_process+0xc8>
     2ba:	91 11       	cpse	r25, r1
     2bc:	12 c0       	rjmp	.+36     	; 0x2e2 <encoder_process+0xc8>
			if((OCR2 - 10) <= 0)
     2be:	83 b5       	in	r24, 0x23	; 35
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0b 97       	sbiw	r24, 0x0b	; 11
     2c4:	0c f0       	brlt	.+2      	; 0x2c8 <encoder_process+0xae>
     2c6:	77 c0       	rjmp	.+238    	; 0x3b6 <encoder_process+0x19c>
				OCR2 = 0;
     2c8:	13 bc       	out	0x23, r1	; 35
     2ca:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <encoder_left>
     2ce:	b7 cf       	rjmp	.-146    	; 0x23e <encoder_process+0x24>
     2d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <temp_hour>

		}
	}

	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     2d4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
		min_count = temp_min;
     2d8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <temp_min>
     2dc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min_count>
     2e0:	b7 cf       	rjmp	.-146    	; 0x250 <encoder_process+0x36>
			else
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){
     2e2:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <temp_min>
     2e6:	44 23       	and	r20, r20
     2e8:	09 f4       	brne	.+2      	; 0x2ec <encoder_process+0xd2>
     2ea:	4a c0       	rjmp	.+148    	; 0x380 <encoder_process+0x166>
				temp_min = 59;
			}
			else
				temp_min--;
     2ec:	41 50       	subi	r20, 0x01	; 1
     2ee:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <temp_min>
     2f2:	a9 cf       	rjmp	.-174    	; 0x246 <encoder_process+0x2c>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
     2f4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     2f8:	81 11       	cpse	r24, r1
     2fa:	11 c0       	rjmp	.+34     	; 0x31e <encoder_process+0x104>
     2fc:	91 11       	cpse	r25, r1
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <encoder_process+0x104>
			if((OCR2 + 10) >= 254)
     300:	83 b5       	in	r24, 0x23	; 35
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	84 3f       	cpi	r24, 0xF4	; 244
     306:	91 05       	cpc	r25, r1
     308:	0c f4       	brge	.+2      	; 0x30c <encoder_process+0xf2>
     30a:	4f c0       	rjmp	.+158    	; 0x3aa <encoder_process+0x190>
				OCR2 = 254;
     30c:	8e ef       	ldi	r24, 0xFE	; 254
     30e:	83 bd       	out	0x23, r24	; 35
     310:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <encoder_left>
     314:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adjust_flag>
     318:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     31c:	94 cf       	rjmp	.-216    	; 0x246 <encoder_process+0x2c>
				OCR2 += 10;

		}
		else
		{
			if(temp_min + 1 > 59)
     31e:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <temp_min>
     322:	64 2f       	mov	r22, r20
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	6b 33       	cpi	r22, 0x3B	; 59
     328:	71 05       	cpc	r23, r1
     32a:	b4 f0       	brlt	.+44     	; 0x358 <encoder_process+0x13e>
				temp_min = 0;
     32c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <temp_min>
     330:	8a cf       	rjmp	.-236    	; 0x246 <encoder_process+0x2c>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if(adjust_flag == 0x01 || adjust_flag == 0x01)
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	49 f1       	breq	.+82     	; 0x388 <encoder_process+0x16e>
			temp_hour++;
		else{
			if((OCR3A + 10) > 255)
     336:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     33a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     33e:	26 5f       	subi	r18, 0xF6	; 246
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	2f 3f       	cpi	r18, 0xFF	; 255
     344:	31 05       	cpc	r19, r1
     346:	61 f0       	breq	.+24     	; 0x360 <encoder_process+0x146>
     348:	58 f0       	brcs	.+22     	; 0x360 <encoder_process+0x146>
				OCR3A = 255;
     34a:	2f ef       	ldi	r18, 0xFF	; 255
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     352:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     356:	7c cf       	rjmp	.-264    	; 0x250 <encoder_process+0x36>
		else
		{
			if(temp_min + 1 > 59)
				temp_min = 0;
			else
				temp_min++;
     358:	4f 5f       	subi	r20, 0xFF	; 255
     35a:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <temp_min>
     35e:	73 cf       	rjmp	.-282    	; 0x246 <encoder_process+0x2c>
			temp_hour++;
		else{
			if((OCR3A + 10) > 255)
				OCR3A = 255;
			else
				OCR3A += 10;
     360:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     364:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     368:	26 5f       	subi	r18, 0xF6	; 246
     36a:	3f 4f       	sbci	r19, 0xFF	; 255
     36c:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     370:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     374:	6d cf       	rjmp	.-294    	; 0x250 <encoder_process+0x36>
			}
			else
				temp_hour--;
		else{
			if((OCR3A - 10) <= 0)
				OCR3A = 0;
     376:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     37a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     37e:	68 cf       	rjmp	.-304    	; 0x250 <encoder_process+0x36>
				OCR2 -= 10;
		}
		else
		{
			if(temp_min - 1 < 0){
				temp_min = 59;
     380:	4b e3       	ldi	r20, 0x3B	; 59
     382:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <temp_min>
     386:	5f cf       	rjmp	.-322    	; 0x246 <encoder_process+0x2c>
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		if(adjust_flag == 0x01 || adjust_flag == 0x01)
			temp_hour++;
     388:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <temp_hour>
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp_hour>
     392:	a0 cf       	rjmp	.-192    	; 0x2d4 <encoder_process+0xba>
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if(adjust_flag == 0x01 || adjust_flag == 0x01)
			if(temp_hour - 1 < 1){
     394:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <temp_hour>
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	22 30       	cpi	r18, 0x02	; 2
     39e:	31 05       	cpc	r19, r1
     3a0:	a4 f0       	brlt	.+40     	; 0x3ca <encoder_process+0x1b0>
				temp_hour = 12;
			}
			else
				temp_hour--;
     3a2:	81 50       	subi	r24, 0x01	; 1
     3a4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp_hour>
     3a8:	95 cf       	rjmp	.-214    	; 0x2d4 <encoder_process+0xba>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
			if((OCR2 + 10) >= 254)
				OCR2 = 254;
			else	
				OCR2 += 10;
     3aa:	83 b5       	in	r24, 0x23	; 35
     3ac:	86 5f       	subi	r24, 0xF6	; 246
     3ae:	83 bd       	out	0x23, r24	; 35
     3b0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <encoder_left>
     3b4:	44 cf       	rjmp	.-376    	; 0x23e <encoder_process+0x24>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00){
			if((OCR2 - 10) <= 0)
				OCR2 = 0;
			else
				OCR2 -= 10;
     3b6:	83 b5       	in	r24, 0x23	; 35
     3b8:	8a 50       	subi	r24, 0x0A	; 10
     3ba:	83 bd       	out	0x23, r24	; 35
     3bc:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <encoder_left>
     3c0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adjust_flag>
     3c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     3c8:	3e cf       	rjmp	.-388    	; 0x246 <encoder_process+0x2c>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		if(adjust_flag == 0x01 || adjust_flag == 0x01)
			if(temp_hour - 1 < 1){
				temp_hour = 12;
     3ca:	8c e0       	ldi	r24, 0x0C	; 12
     3cc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp_hour>
     3d0:	81 cf       	rjmp	.-254    	; 0x2d4 <encoder_process+0xba>

000003d2 <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     3d2:	cf 93       	push	r28

 //make PORTA an input port with pullups
	DDRA = 0x00;
     3d4:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     3da:	80 e7       	ldi	r24, 0x70	; 112
     3dc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3de:	8a e1       	ldi	r24, 0x1A	; 26
     3e0:	8a 95       	dec	r24
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <button_encoder_read+0xe>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <button_encoder_read+0x14>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     3e6:	99 b3       	in	r25, 0x19	; 25
     3e8:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <state.1817+0xe>
     3ec:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <state.1817+0xf>
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	b0 6e       	ori	r27, 0xE0	; 224
     3f6:	89 2f       	mov	r24, r25
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	89 2f       	mov	r24, r25
     3fe:	88 1f       	adc	r24, r24
     400:	99 0b       	sbc	r25, r25
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	8c 27       	eor	r24, r28
     406:	8a 2b       	or	r24, r26
     408:	9b 2b       	or	r25, r27
     40a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <state.1817+0xf>
     40e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state.1817+0xe>
	if(state[button] == 0xF000) return 1;
     412:	81 15       	cp	r24, r1
     414:	90 4f       	sbci	r25, 0xF0	; 240
     416:	31 f4       	brne	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	//asm volatile ("nop");

	_delay_us(5);

	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     418:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <adjust_flag>
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	89 27       	eor	r24, r25
     420:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     424:	89 b3       	in	r24, 0x19	; 25
     426:	86 fb       	bst	r24, 6
     428:	66 27       	eor	r22, r22
     42a:	60 f9       	bld	r22, 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	cb 01       	movw	r24, r22
     430:	c1 e0       	ldi	r28, 0x01	; 1
     432:	8c 27       	eor	r24, r28
     434:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <state.1817+0xc>
     438:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <state.1817+0xd>
     43c:	66 0f       	add	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	70 6e       	ori	r23, 0xE0	; 224
     442:	68 2b       	or	r22, r24
     444:	79 2b       	or	r23, r25
     446:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <state.1817+0xd>
     44a:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <state.1817+0xc>
	if(state[button] == 0xF000) return 1;
     44e:	61 15       	cp	r22, r1
     450:	70 4f       	sbci	r23, 0xF0	; 240
     452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	7d c0       	rjmp	.+250    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     456:	89 b3       	in	r24, 0x19	; 25
     458:	85 fb       	bst	r24, 5
     45a:	ee 27       	eor	r30, r30
     45c:	e0 f9       	bld	r30, 0
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	a1 e0       	ldi	r26, 0x01	; 1
     462:	ea 27       	eor	r30, r26
     464:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <state.1817+0xa>
     468:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <state.1817+0xb>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	90 6e       	ori	r25, 0xE0	; 224
     472:	8e 2b       	or	r24, r30
     474:	9f 2b       	or	r25, r31
     476:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <state.1817+0xb>
     47a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <state.1817+0xa>
	if(state[button] == 0xF000) return 1;
     47e:	81 15       	cp	r24, r1
     480:	90 4f       	sbci	r25, 0xF0	; 240
     482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	56 c0       	rjmp	.+172    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     486:	89 b3       	in	r24, 0x19	; 25
     488:	84 fb       	bst	r24, 4
     48a:	22 27       	eor	r18, r18
     48c:	20 f9       	bld	r18, 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	c9 01       	movw	r24, r18
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	86 27       	eor	r24, r22
     496:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <state.1817+0x8>
     49a:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <state.1817+0x9>
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	30 6e       	ori	r19, 0xE0	; 224
     4a4:	28 2b       	or	r18, r24
     4a6:	39 2b       	or	r19, r25
     4a8:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <state.1817+0x9>
     4ac:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <state.1817+0x8>
	if(state[button] == 0xF000) return 1;
     4b0:	21 15       	cp	r18, r1
     4b2:	30 4f       	sbci	r19, 0xF0	; 240
     4b4:	31 f4       	brne	.+12     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
		pm_flag ^= 0x01;
	
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     4b6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	89 27       	eor	r24, r25
     4be:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     4c2:	29 b3       	in	r18, 0x19	; 25
     4c4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <state.1817>
     4c8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <state.1817+0x1>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	90 6e       	ori	r25, 0xE0	; 224
     4d2:	20 95       	com	r18
     4d4:	42 2f       	mov	r20, r18
     4d6:	41 70       	andi	r20, 0x01	; 1
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	84 2b       	or	r24, r20
     4dc:	95 2b       	or	r25, r21
     4de:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <state.1817+0x1>
     4e2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state.1817>
	if(state[button] == 0xF000) return 1;
     4e6:	81 15       	cp	r24, r1
     4e8:	90 4f       	sbci	r25, 0xF0	; 240
     4ea:	e1 f0       	breq	.+56     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		}
		*/
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     4ec:	80 e6       	ldi	r24, 0x60	; 96
     4ee:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     4f0:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     4f2:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     4f4:	80 e4       	ldi	r24, 0x40	; 64
     4f6:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     4f8:	00 00       	nop

	SPDR = (adjust_flag + hour24_flag + adjust_alarm);
     4fa:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <adjust_flag>
     4fe:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hour24_flag>
     502:	89 0f       	add	r24, r25
     504:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     508:	89 0f       	add	r24, r25
     50a:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     50c:	77 9b       	sbis	0x0e, 7	; 14
     50e:	fe cf       	rjmp	.-4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     510:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     512:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     514:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     516:	0e 94 0d 01 	call	0x21a	; 0x21a <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     51e:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     520:	cf 91       	pop	r28
     522:	08 95       	ret
		pm_flag ^= 0x01;
	
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;

	if(chk_buttons(0) && trigger_alarm == 0x01){
     524:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <trigger_alarm>
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	01 f7       	brne	.-64     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		trigger_alarm = 0;
     52c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <trigger_alarm>
     530:	dd cf       	rjmp	.-70     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
			if(hour_count != 12)
				hour_count -= 12;
		}
	}

	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     532:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adjust_flag>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	09 f0       	breq	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53a:	a5 cf       	rjmp	.-182    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     53c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <hour24_flag>
     540:	91 11       	cpse	r25, r1
     542:	a1 cf       	rjmp	.-190    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		pm_flag ^= 0x01;
     544:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <pm_flag>
     548:	89 27       	eor	r24, r25
     54a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pm_flag>
     54e:	9b cf       	rjmp	.-202    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>

	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     550:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <hour24_flag>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	89 27       	eor	r24, r25
     558:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     55c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <pm_flag>
     560:	91 30       	cpi	r25, 0x01	; 1
     562:	a9 f0       	breq	.+42     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
			pm_flag = 0;
			if(hour_count != 12)
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     564:	81 11       	cpse	r24, r1
     566:	77 cf       	rjmp	.-274    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     568:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     56c:	8c 30       	cpi	r24, 0x0C	; 12
     56e:	08 f4       	brcc	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	72 cf       	rjmp	.-284    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			pm_flag = 0x01;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pm_flag>
			if(hour_count != 12)
     578:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     57c:	8c 30       	cpi	r24, 0x0C	; 12
     57e:	09 f4       	brne	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     580:	6a cf       	rjmp	.-300    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				hour_count -= 12;
     582:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     586:	8c 50       	subi	r24, 0x0C	; 12
     588:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
     58c:	64 cf       	rjmp	.-312    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	if(chk_buttons(7))
		adjust_flag ^= 0x01;

	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	49 f7       	brne	.-46     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			pm_flag = 0;
     592:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <pm_flag>
			if(hour_count != 12)
     596:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     59a:	8c 30       	cpi	r24, 0x0C	; 12
     59c:	09 f4       	brne	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     59e:	5b cf       	rjmp	.-330    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				hour_count += 12;
     5a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     5a4:	84 5f       	subi	r24, 0xF4	; 244
     5a6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
     5aa:	55 cf       	rjmp	.-342    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

000005ac <clock_count>:
 * also looks into the hour24_flag to bound the hour count as necessary depending on the time
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
     5ac:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_count>
     5b0:	80 38       	cpi	r24, 0x80	; 128
     5b2:	a1 f1       	breq	.+104    	; 0x61c <clock_count+0x70>
	  	sec_count++;
		isr_count = 0;
  	}
  	if(sec_count == 60){
     5b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_count>
     5b8:	8c 33       	cpi	r24, 0x3C	; 60
     5ba:	d9 f1       	breq	.+118    	; 0x632 <clock_count+0x86>
	  	min_count++;
		sec_count = 0;
  	}
  	if(min_count == 60){
     5bc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min_count>
     5c0:	8c 33       	cpi	r24, 0x3C	; 60
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <clock_count+0x1a>
     5c4:	42 c0       	rjmp	.+132    	; 0x64a <clock_count+0x9e>
			pm_flag ^= 0x01;
		}

		min_count = 0;
  	}
	if(hour_count == 13 && hour24_flag == 0){
     5c6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     5ca:	8d 30       	cpi	r24, 0x0D	; 13
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <clock_count+0x24>
     5ce:	4d c0       	rjmp	.+154    	; 0x66a <clock_count+0xbe>
		hour_count = 1;	
	}
	else if(hour_count == 24 && hour24_flag == 0x01){
     5d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     5d4:	88 31       	cpi	r24, 0x18	; 24
     5d6:	09 f4       	brne	.+2      	; 0x5da <clock_count+0x2e>
     5d8:	6f c0       	rjmp	.+222    	; 0x6b8 <clock_count+0x10c>
		hour_count = 0;
	}
	
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     5da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <min_count>
     5de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <alarm_time_min>
     5e2:	98 17       	cp	r25, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <clock_count+0x3c>
     5e6:	4e c0       	rjmp	.+156    	; 0x684 <clock_count+0xd8>
			trigger_alarm = 0x01;
			alarm_match_count = 0x01;
		}
	}
	else{
		trigger_alarm = 0;
     5e8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <trigger_alarm>
		alarm_match_count = 0;
     5ec:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <alarm_match_count>
	}
	if(min_count == (alarm_time_min + 1) || hour_count == (alarm_time_hour + 1))
     5f0:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <min_count>
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	59 f0       	breq	.+22     	; 0x616 <clock_count+0x6a>
     600:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <hour_count>
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	28 17       	cp	r18, r24
     610:	39 07       	cpc	r19, r25
     612:	09 f0       	breq	.+2      	; 0x616 <clock_count+0x6a>
     614:	08 95       	ret
		trigger_alarm = 0;
     616:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <trigger_alarm>
     61a:	08 95       	ret
 * mode.
***********************************************************************************/
void clock_count(){

	if(isr_count == 128){
	  	sec_count++;
     61c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_count>
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec_count>
		isr_count = 0;
     626:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isr_count>
  	}
  	if(sec_count == 60){
     62a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_count>
     62e:	8c 33       	cpi	r24, 0x3C	; 60
     630:	29 f6       	brne	.-118    	; 0x5bc <clock_count+0x10>
	  	min_count++;
     632:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min_count>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min_count>
		sec_count = 0;
     63c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec_count>
  	}
  	if(min_count == 60){
     640:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min_count>
     644:	8c 33       	cpi	r24, 0x3C	; 60
     646:	09 f0       	breq	.+2      	; 0x64a <clock_count+0x9e>
     648:	be cf       	rjmp	.-132    	; 0x5c6 <clock_count+0x1a>
	  	hour_count++;
     64a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>

		if(hour_count == 12){
     654:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     658:	8c 30       	cpi	r24, 0x0C	; 12
     65a:	b1 f1       	breq	.+108    	; 0x6c8 <clock_count+0x11c>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     65c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <min_count>
  	}
	if(hour_count == 13 && hour24_flag == 0){
     660:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
     664:	8d 30       	cpi	r24, 0x0D	; 13
     666:	09 f0       	breq	.+2      	; 0x66a <clock_count+0xbe>
     668:	b3 cf       	rjmp	.-154    	; 0x5d0 <clock_count+0x24>
     66a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hour24_flag>
     66e:	81 11       	cpse	r24, r1
     670:	af cf       	rjmp	.-162    	; 0x5d0 <clock_count+0x24>
		hour_count = 1;	
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
	}
	else if(hour_count == 24 && hour24_flag == 0x01){
		hour_count = 0;
	}
	
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     678:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <min_count>
     67c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <alarm_time_min>
     680:	98 13       	cpse	r25, r24
     682:	b2 cf       	rjmp	.-156    	; 0x5e8 <clock_count+0x3c>
     684:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <hour_count>
     688:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     68c:	29 13       	cpse	r18, r25
     68e:	ac cf       	rjmp	.-168    	; 0x5e8 <clock_count+0x3c>
     690:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <temp_pm_flag>
     694:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <pm_flag>
     698:	29 13       	cpse	r18, r25
     69a:	a6 cf       	rjmp	.-180    	; 0x5e8 <clock_count+0x3c>
     69c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adjust_alarm>
     6a0:	91 11       	cpse	r25, r1
     6a2:	a2 cf       	rjmp	.-188    	; 0x5e8 <clock_count+0x3c>
		if(alarm_match_count == 0){
     6a4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <alarm_match_count>
     6a8:	91 11       	cpse	r25, r1
     6aa:	a2 cf       	rjmp	.-188    	; 0x5f0 <clock_count+0x44>
			trigger_alarm = 0x01;
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <trigger_alarm>
			alarm_match_count = 0x01;
     6b2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <alarm_match_count>
     6b6:	9c cf       	rjmp	.-200    	; 0x5f0 <clock_count+0x44>
		min_count = 0;
  	}
	if(hour_count == 13 && hour24_flag == 0){
		hour_count = 1;	
	}
	else if(hour_count == 24 && hour24_flag == 0x01){
     6b8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hour24_flag>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	09 f0       	breq	.+2      	; 0x6c2 <clock_count+0x116>
     6c0:	8c cf       	rjmp	.-232    	; 0x5da <clock_count+0x2e>
		hour_count = 0;
     6c2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <hour_count>
     6c6:	89 cf       	rjmp	.-238    	; 0x5da <clock_count+0x2e>
  	}
  	if(min_count == 60){
	  	hour_count++;

		if(hour_count == 12){
			pm_flag ^= 0x01;
     6c8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <pm_flag>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	89 27       	eor	r24, r25
     6d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pm_flag>
     6d4:	c3 cf       	rjmp	.-122    	; 0x65c <clock_count+0xb0>

000006d6 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <input_flag>

	isr_count++;
     6e8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_count>
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isr_count>

}//ISR
     6f2:	8f 91       	pop	r24
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <__vector_14>:


ISR(TIMER1_OVF_vect){
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	11 24       	eor	r1, r1
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25

	if(trigger_alarm == 0x01){
     70c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <trigger_alarm>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	41 f4       	brne	.+16     	; 0x724 <__vector_14+0x26>
		
		PORTC ^= (1 << PC3);
     714:	95 b3       	in	r25, 0x15	; 21
     716:	88 e0       	ldi	r24, 0x08	; 8
     718:	89 27       	eor	r24, r25
     71a:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;
     71c:	80 e4       	ldi	r24, 0x40	; 64
     71e:	9c e9       	ldi	r25, 0x9C	; 156
     720:	9d bd       	out	0x2d, r25	; 45
     722:	8c bd       	out	0x2c, r24	; 44

	}

}
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	81 11       	cpse	r24, r1
     736:	01 c0       	rjmp	.+2      	; 0x73a <send_lcd+0x8>
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     73c:	77 9b       	sbis	0x0e, 7	; 14
     73e:	fe cf       	rjmp	.-4      	; 0x73c <send_lcd+0xa>
  SPDR = byte;                        //send payload
     740:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     742:	77 9b       	sbis	0x0e, 7	; 14
     744:	fe cf       	rjmp	.-4      	; 0x742 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74a:	88 60       	ori	r24, 0x08	; 8
     74c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     750:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     754:	87 7f       	andi	r24, 0xF7	; 247
     756:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     75a:	08 95       	ret

0000075c <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     75c:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <i.2094>
     760:	82 0f       	add	r24, r18
     762:	91 1d       	adc	r25, r1
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	81 11       	cpse	r24, r1
     76a:	1f c0       	rjmp	.+62     	; 0x7aa <refresh_lcd+0x4e>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     776:	77 9b       	sbis	0x0e, 7	; 14
     778:	fe cf       	rjmp	.-4      	; 0x776 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     77e:	77 9b       	sbis	0x0e, 7	; 14
     780:	fe cf       	rjmp	.-4      	; 0x77e <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     782:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     786:	88 60       	ori	r24, 0x08	; 8
     788:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     78c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     790:	87 7f       	andi	r24, 0xF7	; 247
     792:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     796:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <i.2094>
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     7a0:	80 31       	cpi	r24, 0x10	; 16
     7a2:	49 f1       	breq	.+82     	; 0x7f6 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     7a4:	80 32       	cpi	r24, 0x20	; 32
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <refresh_lcd+0x66>
     7a8:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     7aa:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <null_flag.2095>
     7ae:	91 11       	cpse	r25, r1
     7b0:	e0 cf       	rjmp	.-64     	; 0x772 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7b6:	77 9b       	sbis	0x0e, 7	; 14
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     7ba:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7bc:	77 9b       	sbis	0x0e, 7	; 14
     7be:	fe cf       	rjmp	.-4      	; 0x7bc <refresh_lcd+0x60>
     7c0:	e0 cf       	rjmp	.-64     	; 0x782 <refresh_lcd+0x26>
     7c2:	85 ed       	ldi	r24, 0xD5	; 213
     7c4:	8a 95       	dec	r24
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <refresh_lcd+0x68>
     7c8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7ca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7cc:	77 9b       	sbis	0x0e, 7	; 14
     7ce:	fe cf       	rjmp	.-4      	; 0x7cc <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7d4:	77 9b       	sbis	0x0e, 7	; 14
     7d6:	fe cf       	rjmp	.-4      	; 0x7d4 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7dc:	88 60       	ori	r24, 0x08	; 8
     7de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e6:	87 7f       	andi	r24, 0xF7	; 247
     7e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     7ec:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <null_flag.2095>
      i=0;
     7f0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <i.2094>
     7f4:	08 95       	ret
     7f6:	f5 ed       	ldi	r31, 0xD5	; 213
     7f8:	fa 95       	dec	r31
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <refresh_lcd+0x9c>
     7fc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7fe:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     800:	77 9b       	sbis	0x0e, 7	; 14
     802:	fe cf       	rjmp	.-4      	; 0x800 <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     804:	80 ec       	ldi	r24, 0xC0	; 192
     806:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     808:	77 9b       	sbis	0x0e, 7	; 14
     80a:	fe cf       	rjmp	.-4      	; 0x808 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     80c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     810:	88 60       	ori	r24, 0x08	; 8
     812:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     816:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     81a:	87 7f       	andi	r24, 0xF7	; 247
     81c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     820:	08 95       	ret

00000822 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     822:	66 0f       	add	r22, r22
     824:	66 0f       	add	r22, r22
     826:	66 0f       	add	r22, r22
     828:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     82a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     82c:	77 9b       	sbis	0x0e, 7	; 14
     82e:	fe cf       	rjmp	.-4      	; 0x82c <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     830:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     832:	77 9b       	sbis	0x0e, 7	; 14
     834:	fe cf       	rjmp	.-4      	; 0x832 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     836:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     83a:	28 60       	ori	r18, 0x08	; 8
     83c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     840:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     844:	27 7f       	andi	r18, 0xF7	; 247
     846:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     84a:	25 ed       	ldi	r18, 0xD5	; 213
     84c:	2a 95       	dec	r18
     84e:	f1 f7       	brne	.-4      	; 0x84c <set_custom_character+0x2a>
     850:	00 00       	nop
     852:	fc 01       	movw	r30, r24
     854:	9c 01       	movw	r18, r24
     856:	28 5f       	subi	r18, 0xF8	; 248
     858:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     85a:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     85c:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     85e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     860:	77 9b       	sbis	0x0e, 7	; 14
     862:	fe cf       	rjmp	.-4      	; 0x860 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     864:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     866:	77 9b       	sbis	0x0e, 7	; 14
     868:	fe cf       	rjmp	.-4      	; 0x866 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     86a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     86e:	88 60       	ori	r24, 0x08	; 8
     870:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     874:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     878:	87 7f       	andi	r24, 0xF7	; 247
     87a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     87e:	85 ed       	ldi	r24, 0xD5	; 213
     880:	8a 95       	dec	r24
     882:	f1 f7       	brne	.-4      	; 0x880 <set_custom_character+0x5e>
     884:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     886:	e2 17       	cp	r30, r18
     888:	f3 07       	cpc	r31, r19
     88a:	41 f7       	brne	.-48     	; 0x85c <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     88c:	08 95       	ret

0000088e <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     88e:	90 e4       	ldi	r25, 0x40	; 64
     890:	89 9f       	mul	r24, r25
     892:	60 0d       	add	r22, r0
     894:	11 24       	eor	r1, r1
     896:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     898:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     89a:	77 9b       	sbis	0x0e, 7	; 14
     89c:	fe cf       	rjmp	.-4      	; 0x89a <set_cursor+0xc>
  SPDR = byte;                        //send payload
     89e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8a0:	77 9b       	sbis	0x0e, 7	; 14
     8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8a8:	88 60       	ori	r24, 0x08	; 8
     8aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b2:	87 7f       	andi	r24, 0xF7	; 247
     8b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b8:	08 95       	ret

000008ba <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     8ba:	81 11       	cpse	r24, r1
     8bc:	13 c0       	rjmp	.+38     	; 0x8e4 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8c2:	77 9b       	sbis	0x0e, 7	; 14
     8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     8c6:	80 e3       	ldi	r24, 0x30	; 48
     8c8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8ca:	77 9b       	sbis	0x0e, 7	; 14
     8cc:	fe cf       	rjmp	.-4      	; 0x8ca <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d2:	88 60       	ori	r24, 0x08	; 8
     8d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e2:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     8e4:	84 36       	cpi	r24, 0x64	; 100
     8e6:	b0 f4       	brcc	.+44     	; 0x914 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     8e8:	8a 30       	cpi	r24, 0x0A	; 10
     8ea:	60 f5       	brcc	.+88     	; 0x944 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     8f4:	9d ec       	ldi	r25, 0xCD	; 205
     8f6:	89 9f       	mul	r24, r25
     8f8:	91 2d       	mov	r25, r1
     8fa:	11 24       	eor	r1, r1
     8fc:	96 95       	lsr	r25
     8fe:	96 95       	lsr	r25
     900:	96 95       	lsr	r25
     902:	2a e0       	ldi	r18, 0x0A	; 10
     904:	92 9f       	mul	r25, r18
     906:	80 19       	sub	r24, r0
     908:	11 24       	eor	r1, r1
     90a:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     90c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     90e:	77 9b       	sbis	0x0e, 7	; 14
     910:	fe cf       	rjmp	.-4      	; 0x90e <uint2lcd+0x54>
     912:	dd cf       	rjmp	.-70     	; 0x8ce <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     914:	99 e2       	ldi	r25, 0x29	; 41
     916:	89 9f       	mul	r24, r25
     918:	91 2d       	mov	r25, r1
     91a:	11 24       	eor	r1, r1
     91c:	92 95       	swap	r25
     91e:	9f 70       	andi	r25, 0x0F	; 15
     920:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     926:	77 9b       	sbis	0x0e, 7	; 14
     928:	fe cf       	rjmp	.-4      	; 0x926 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     92a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     92c:	77 9b       	sbis	0x0e, 7	; 14
     92e:	fe cf       	rjmp	.-4      	; 0x92c <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     930:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     934:	98 60       	ori	r25, 0x08	; 8
     936:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     93a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     93e:	97 7f       	andi	r25, 0xF7	; 247
     940:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     944:	99 e2       	ldi	r25, 0x29	; 41
     946:	89 9f       	mul	r24, r25
     948:	91 2d       	mov	r25, r1
     94a:	11 24       	eor	r1, r1
     94c:	92 95       	swap	r25
     94e:	9f 70       	andi	r25, 0x0F	; 15
     950:	38 2f       	mov	r19, r24
     952:	24 e6       	ldi	r18, 0x64	; 100
     954:	92 9f       	mul	r25, r18
     956:	30 19       	sub	r19, r0
     958:	11 24       	eor	r1, r1
     95a:	2d ec       	ldi	r18, 0xCD	; 205
     95c:	32 9f       	mul	r19, r18
     95e:	91 2d       	mov	r25, r1
     960:	11 24       	eor	r1, r1
     962:	96 95       	lsr	r25
     964:	96 95       	lsr	r25
     966:	96 95       	lsr	r25
     968:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     96e:	77 9b       	sbis	0x0e, 7	; 14
     970:	fe cf       	rjmp	.-4      	; 0x96e <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     972:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     974:	77 9b       	sbis	0x0e, 7	; 14
     976:	fe cf       	rjmp	.-4      	; 0x974 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     978:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     97c:	98 60       	ori	r25, 0x08	; 8
     97e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     982:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     986:	97 7f       	andi	r25, 0xF7	; 247
     988:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     98c:	af cf       	rjmp	.-162    	; 0x8ec <uint2lcd+0x32>

0000098e <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     98e:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     990:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     998:	77 9b       	sbis	0x0e, 7	; 14
     99a:	fe cf       	rjmp	.-4      	; 0x998 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     99c:	9d e2       	ldi	r25, 0x2D	; 45
     99e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9a0:	77 9b       	sbis	0x0e, 7	; 14
     9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9a4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9a8:	98 60       	ori	r25, 0x08	; 8
     9aa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b2:	97 7f       	andi	r25, 0xF7	; 247
     9b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b8:	95 ed       	ldi	r25, 0xD5	; 213
     9ba:	9a 95       	dec	r25
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <int2lcd+0x2c>
     9be:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     9c0:	81 95       	neg	r24
     9c2:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <uint2lcd>

000009c6 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9c6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9c8:	77 9b       	sbis	0x0e, 7	; 14
     9ca:	fe cf       	rjmp	.-4      	; 0x9c8 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     9cc:	8e e0       	ldi	r24, 0x0E	; 14
     9ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d0:	77 9b       	sbis	0x0e, 7	; 14
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9d8:	88 60       	ori	r24, 0x08	; 8
     9da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e2:	87 7f       	andi	r24, 0xF7	; 247
     9e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e8:	08 95       	ret

000009ea <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9ea:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ec:	77 9b       	sbis	0x0e, 7	; 14
     9ee:	fe cf       	rjmp	.-4      	; 0x9ec <cursor_off+0x2>
  SPDR = byte;                        //send payload
     9f0:	8c e0       	ldi	r24, 0x0C	; 12
     9f2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9f4:	77 9b       	sbis	0x0e, 7	; 14
     9f6:	fe cf       	rjmp	.-4      	; 0x9f4 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fc:	88 60       	ori	r24, 0x08	; 8
     9fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a02:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a06:	87 7f       	andi	r24, 0xF7	; 247
     a08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0c:	08 95       	ret

00000a0e <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a0e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a10:	77 9b       	sbis	0x0e, 7	; 14
     a12:	fe cf       	rjmp	.-4      	; 0xa10 <shift_right+0x2>
  SPDR = byte;                        //send payload
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a18:	77 9b       	sbis	0x0e, 7	; 14
     a1a:	fe cf       	rjmp	.-4      	; 0xa18 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a30:	08 95       	ret

00000a32 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a32:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a34:	77 9b       	sbis	0x0e, 7	; 14
     a36:	fe cf       	rjmp	.-4      	; 0xa34 <shift_left+0x2>
  SPDR = byte;                        //send payload
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a3c:	77 9b       	sbis	0x0e, 7	; 14
     a3e:	fe cf       	rjmp	.-4      	; 0xa3c <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a4a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a4e:	87 7f       	andi	r24, 0xF7	; 247
     a50:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a54:	08 95       	ret

00000a56 <strobe_lcd>:
     a56:	e2 e6       	ldi	r30, 0x62	; 98
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	88 60       	ori	r24, 0x08	; 8
     a5e:	80 83       	st	Z, r24
     a60:	80 81       	ld	r24, Z
     a62:	87 7f       	andi	r24, 0xF7	; 247
     a64:	80 83       	st	Z, r24
     a66:	08 95       	ret

00000a68 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a6a:	77 9b       	sbis	0x0e, 7	; 14
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <clear_display+0x2>
  SPDR = byte;                        //send payload
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a72:	77 9b       	sbis	0x0e, 7	; 14
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7a:	88 60       	ori	r24, 0x08	; 8
     a7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a84:	87 7f       	andi	r24, 0xF7	; 247
     a86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8a:	8f e1       	ldi	r24, 0x1F	; 31
     a8c:	9c e1       	ldi	r25, 0x1C	; 28
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <clear_display+0x26>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <clear_display+0x2c>
     a94:	00 00       	nop
     a96:	08 95       	ret

00000a98 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a98:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a9a:	77 9b       	sbis	0x0e, 7	; 14
     a9c:	fe cf       	rjmp	.-4      	; 0xa9a <cursor_home+0x2>
  SPDR = byte;                        //send payload
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aa2:	77 9b       	sbis	0x0e, 7	; 14
     aa4:	fe cf       	rjmp	.-4      	; 0xaa2 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     aa6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aaa:	88 60       	ori	r24, 0x08	; 8
     aac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab4:	87 7f       	andi	r24, 0xF7	; 247
     ab6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aba:	8f e6       	ldi	r24, 0x6F	; 111
     abc:	97 e1       	ldi	r25, 0x17	; 23
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <cursor_home+0x26>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <cursor_home+0x2c>
     ac4:	00 00       	nop
     ac6:	08 95       	ret

00000ac8 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ac8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aca:	77 9b       	sbis	0x0e, 7	; 14
     acc:	fe cf       	rjmp	.-4      	; 0xaca <line2_col1+0x2>
  SPDR = byte;                        //send payload
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad2:	77 9b       	sbis	0x0e, 7	; 14
     ad4:	fe cf       	rjmp	.-4      	; 0xad2 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ad6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ada:	88 60       	ori	r24, 0x08	; 8
     adc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae4:	87 7f       	andi	r24, 0xF7	; 247
     ae6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	08 95       	ret

00000aec <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aec:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aee:	77 9b       	sbis	0x0e, 7	; 14
     af0:	fe cf       	rjmp	.-4      	; 0xaee <line1_col1+0x2>
  SPDR = byte;                        //send payload
     af2:	80 e8       	ldi	r24, 0x80	; 128
     af4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     af6:	77 9b       	sbis	0x0e, 7	; 14
     af8:	fe cf       	rjmp	.-4      	; 0xaf6 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     afa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afe:	88 60       	ori	r24, 0x08	; 8
     b00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b08:	87 7f       	andi	r24, 0xF7	; 247
     b0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b0e:	08 95       	ret

00000b10 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     b10:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b12:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     b14:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b16:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b18:	77 9b       	sbis	0x0e, 7	; 14
     b1a:	fe cf       	rjmp	.-4      	; 0xb18 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     b1c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b1e:	77 9b       	sbis	0x0e, 7	; 14
     b20:	fe cf       	rjmp	.-4      	; 0xb1e <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b26:	88 60       	ori	r24, 0x08	; 8
     b28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b30:	87 7f       	andi	r24, 0xF7	; 247
     b32:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b36:	85 ed       	ldi	r24, 0xD5	; 213
     b38:	8a 95       	dec	r24
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <fill_spaces+0x28>
     b3c:	00 00       	nop
     b3e:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     b40:	51 f7       	brne	.-44     	; 0xb16 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     b42:	08 95       	ret

00000b44 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b48:	77 9b       	sbis	0x0e, 7	; 14
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     b4c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b4e:	77 9b       	sbis	0x0e, 7	; 14
     b50:	fe cf       	rjmp	.-4      	; 0xb4e <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b66:	08 95       	ret

00000b68 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     b68:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b70:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     b72:	df 01       	movw	r26, r30
     b74:	a4 0f       	add	r26, r20
     b76:	b5 1f       	adc	r27, r21
     b78:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b7a:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b7c:	77 9b       	sbis	0x0e, 7	; 14
     b7e:	fe cf       	rjmp	.-4      	; 0xb7c <string2lcd+0x14>
  SPDR = byte;                        //send payload
     b80:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b82:	77 9b       	sbis	0x0e, 7	; 14
     b84:	fe cf       	rjmp	.-4      	; 0xb82 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b86:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b8a:	98 60       	ori	r25, 0x08	; 8
     b8c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b90:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b94:	97 7f       	andi	r25, 0xF7	; 247
     b96:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b9a:	85 ed       	ldi	r24, 0xD5	; 213
     b9c:	8a 95       	dec	r24
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <string2lcd+0x34>
     ba0:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	46 2f       	mov	r20, r22
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	df 01       	movw	r26, r30
     baa:	0d 90       	ld	r0, X+
     bac:	00 20       	and	r0, r0
     bae:	e9 f7       	brne	.-6      	; 0xbaa <string2lcd+0x42>
     bb0:	9d 01       	movw	r18, r26
     bb2:	2e 1b       	sub	r18, r30
     bb4:	3f 0b       	sbc	r19, r31
     bb6:	22 50       	subi	r18, 0x02	; 2
     bb8:	31 09       	sbc	r19, r1
     bba:	24 17       	cp	r18, r20
     bbc:	35 07       	cpc	r19, r21
     bbe:	c8 f6       	brcc	.-78     	; 0xb72 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     bc0:	08 95       	ret

00000bc2 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	99 ef       	ldi	r25, 0xF9	; 249
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <lcd_init+0x4>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <lcd_init+0xa>
     bcc:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bd4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd6:	77 9b       	sbis	0x0e, 7	; 14
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bde:	77 9b       	sbis	0x0e, 7	; 14
     be0:	fe cf       	rjmp	.-4      	; 0xbde <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     be2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be6:	88 60       	ori	r24, 0x08	; 8
     be8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf6:	8f e5       	ldi	r24, 0x5F	; 95
     bf8:	9d e6       	ldi	r25, 0x6D	; 109
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <lcd_init+0x38>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <lcd_init+0x3e>
     c00:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c02:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c04:	77 9b       	sbis	0x0e, 7	; 14
     c06:	fe cf       	rjmp	.-4      	; 0xc04 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     c08:	80 e3       	ldi	r24, 0x30	; 48
     c0a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c0c:	77 9b       	sbis	0x0e, 7	; 14
     c0e:	fe cf       	rjmp	.-4      	; 0xc0c <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c24:	8f e5       	ldi	r24, 0x5F	; 95
     c26:	9d e6       	ldi	r25, 0x6D	; 109
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <lcd_init+0x66>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <lcd_init+0x6c>
     c2e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c30:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c32:	77 9b       	sbis	0x0e, 7	; 14
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     c36:	80 e3       	ldi	r24, 0x30	; 48
     c38:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c3a:	77 9b       	sbis	0x0e, 7	; 14
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c3e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4c:	87 7f       	andi	r24, 0xF7	; 247
     c4e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c52:	8f e5       	ldi	r24, 0x5F	; 95
     c54:	9d e6       	ldi	r25, 0x6D	; 109
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <lcd_init+0x94>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <lcd_init+0x9a>
     c5c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c5e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c60:	77 9b       	sbis	0x0e, 7	; 14
     c62:	fe cf       	rjmp	.-4      	; 0xc60 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     c64:	88 e3       	ldi	r24, 0x38	; 56
     c66:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c68:	77 9b       	sbis	0x0e, 7	; 14
     c6a:	fe cf       	rjmp	.-4      	; 0xc68 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c6c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c70:	88 60       	ori	r24, 0x08	; 8
     c72:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c7a:	87 7f       	andi	r24, 0xF7	; 247
     c7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c80:	8f e1       	ldi	r24, 0x1F	; 31
     c82:	9e e4       	ldi	r25, 0x4E	; 78
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <lcd_init+0xc2>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <lcd_init+0xc8>
     c8a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c8c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c8e:	77 9b       	sbis	0x0e, 7	; 14
     c90:	fe cf       	rjmp	.-4      	; 0xc8e <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c96:	77 9b       	sbis	0x0e, 7	; 14
     c98:	fe cf       	rjmp	.-4      	; 0xc96 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c9e:	88 60       	ori	r24, 0x08	; 8
     ca0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cae:	8f e1       	ldi	r24, 0x1F	; 31
     cb0:	9e e4       	ldi	r25, 0x4E	; 78
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <lcd_init+0xf0>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <lcd_init+0xf6>
     cb8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cba:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cbc:	77 9b       	sbis	0x0e, 7	; 14
     cbe:	fe cf       	rjmp	.-4      	; 0xcbc <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cc4:	77 9b       	sbis	0x0e, 7	; 14
     cc6:	fe cf       	rjmp	.-4      	; 0xcc4 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cc8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cdc:	8f e1       	ldi	r24, 0x1F	; 31
     cde:	9e e4       	ldi	r25, 0x4E	; 78
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <lcd_init+0x11e>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <lcd_init+0x124>
     ce6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cea:	77 9b       	sbis	0x0e, 7	; 14
     cec:	fe cf       	rjmp	.-4      	; 0xcea <lcd_init+0x128>
  SPDR = byte;                        //send payload
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf2:	77 9b       	sbis	0x0e, 7	; 14
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d0a:	8f e1       	ldi	r24, 0x1F	; 31
     d0c:	9e e4       	ldi	r25, 0x4E	; 78
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <lcd_init+0x14c>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <lcd_init+0x152>
     d14:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d16:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d18:	77 9b       	sbis	0x0e, 7	; 14
     d1a:	fe cf       	rjmp	.-4      	; 0xd18 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     d1c:	8c e0       	ldi	r24, 0x0C	; 12
     d1e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d20:	77 9b       	sbis	0x0e, 7	; 14
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d38:	8f e1       	ldi	r24, 0x1F	; 31
     d3a:	9e e4       	ldi	r25, 0x4E	; 78
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <lcd_init+0x17a>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <lcd_init+0x180>
     d42:	00 00       	nop
     d44:	08 95       	ret

00000d46 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	69 97       	sbiw	r28, 0x19	; 25
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	14 2f       	mov	r17, r20
     d78:	42 2e       	mov	r4, r18
     d7a:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     d7c:	00 23       	and	r16, r16
     d7e:	79 f0       	breq	.+30     	; 0xd9e <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     d80:	6b 01       	movw	r12, r22
     d82:	7c 01       	movw	r14, r24
     d84:	cc 24       	eor	r12, r12
     d86:	f7 fc       	sbrc	r15, 7
     d88:	c3 94       	inc	r12
     d8a:	dd 24       	eor	r13, r13
     d8c:	ee 24       	eor	r14, r14
     d8e:	ff 24       	eor	r15, r15
     d90:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     d92:	6b 01       	movw	r12, r22
     d94:	7c 01       	movw	r14, r24
     d96:	97 fd       	sbrc	r25, 7
     d98:	a3 c0       	rjmp	.+326    	; 0xee0 <lcd_int32+0x19a>
     d9a:	c7 01       	movw	r24, r14
     d9c:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     d9e:	44 20       	and	r4, r4
     da0:	09 f4       	brne	.+2      	; 0xda4 <lcd_int32+0x5e>
     da2:	96 c0       	rjmp	.+300    	; 0xed0 <lcd_int32+0x18a>
     da4:	9e 01       	movw	r18, r28
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	59 01       	movw	r10, r18
     dac:	49 01       	movw	r8, r18
     dae:	66 24       	eor	r6, r6
     db0:	6a 94       	dec	r6
     db2:	64 0c       	add	r6, r4
     db4:	71 2c       	mov	r7, r1
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	63 1a       	sub	r6, r19
     dba:	73 0a       	sbc	r7, r19
     dbc:	6a 0c       	add	r6, r10
     dbe:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     dc0:	2a e0       	ldi	r18, 0x0A	; 10
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__divmodsi4>
     dcc:	e6 2f       	mov	r30, r22
     dce:	2a 8b       	std	Y+18, r18	; 0x12
     dd0:	3b 8b       	std	Y+19, r19	; 0x13
     dd2:	4c 8b       	std	Y+20, r20	; 0x14
     dd4:	5d 8b       	std	Y+21, r21	; 0x15
     dd6:	6a 89       	ldd	r22, Y+18	; 0x12
     dd8:	7b 89       	ldd	r23, Y+19	; 0x13
     dda:	8c 89       	ldd	r24, Y+20	; 0x14
     ddc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     dde:	20 e3       	ldi	r18, 0x30	; 48
     de0:	2e 0f       	add	r18, r30
     de2:	f4 01       	movw	r30, r8
     de4:	21 93       	st	Z+, r18
     de6:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     de8:	6e 16       	cp	r6, r30
     dea:	7f 06       	cpc	r7, r31
     dec:	49 f7       	brne	.-46     	; 0xdc0 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     dee:	99 24       	eor	r9, r9
     df0:	93 94       	inc	r9
     df2:	94 0c       	add	r9, r4
     df4:	f5 01       	movw	r30, r10
     df6:	e4 0d       	add	r30, r4
     df8:	f1 1d       	adc	r31, r1
     dfa:	2e e2       	ldi	r18, 0x2E	; 46
     dfc:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__divmodsi4>
     e0a:	e6 2f       	mov	r30, r22
     e0c:	2a 8b       	std	Y+18, r18	; 0x12
     e0e:	3b 8b       	std	Y+19, r19	; 0x13
     e10:	4c 8b       	std	Y+20, r20	; 0x14
     e12:	5d 8b       	std	Y+21, r21	; 0x15
     e14:	6e 8b       	std	Y+22, r22	; 0x16
     e16:	7f 8b       	std	Y+23, r23	; 0x17
     e18:	88 8f       	std	Y+24, r24	; 0x18
     e1a:	99 8f       	std	Y+25, r25	; 0x19
     e1c:	6a 89       	ldd	r22, Y+18	; 0x12
     e1e:	7b 89       	ldd	r23, Y+19	; 0x13
     e20:	8c 89       	ldd	r24, Y+20	; 0x14
     e22:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     e24:	31 e0       	ldi	r19, 0x01	; 1
     e26:	39 0d       	add	r19, r9
     e28:	d5 01       	movw	r26, r10
     e2a:	a9 0d       	add	r26, r9
     e2c:	b1 1d       	adc	r27, r1
     e2e:	e0 5d       	subi	r30, 0xD0	; 208
     e30:	ec 93       	st	X, r30
     e32:	93 2e       	mov	r9, r19
        }while(qr.quot);
     e34:	61 15       	cp	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	81 05       	cpc	r24, r1
     e3a:	91 05       	cpc	r25, r1
     e3c:	01 f7       	brne	.-64     	; 0xdfe <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     e3e:	11 23       	and	r17, r17
     e40:	61 f0       	breq	.+24     	; 0xe5a <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     e42:	51 10       	cpse	r5, r1
     e44:	4b c0       	rjmp	.+150    	; 0xedc <lcd_int32+0x196>
     e46:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     e48:	31 17       	cp	r19, r17
     e4a:	38 f4       	brcc	.+14     	; 0xe5a <lcd_int32+0x114>
     e4c:	f5 01       	movw	r30, r10
     e4e:	e3 0f       	add	r30, r19
     e50:	f1 1d       	adc	r31, r1
     e52:	90 83       	st	Z, r25
     e54:	3f 5f       	subi	r19, 0xFF	; 255
     e56:	13 13       	cpse	r17, r19
     e58:	f9 cf       	rjmp	.-14     	; 0xe4c <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     e5a:	00 23       	and	r16, r16
     e5c:	31 f0       	breq	.+12     	; 0xe6a <lcd_int32+0x124>
     e5e:	f5 01       	movw	r30, r10
     e60:	e3 0f       	add	r30, r19
     e62:	f1 1d       	adc	r31, r1
     e64:	9d e2       	ldi	r25, 0x2D	; 45
     e66:	90 83       	st	Z, r25
     e68:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e6a:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e6c:	31 50       	subi	r19, 0x01	; 1
     e6e:	f5 01       	movw	r30, r10
     e70:	e3 0f       	add	r30, r19
     e72:	f1 1d       	adc	r31, r1
     e74:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e76:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e78:	77 9b       	sbis	0x0e, 7	; 14
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     e7c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e7e:	77 9b       	sbis	0x0e, 7	; 14
     e80:	fe cf       	rjmp	.-4      	; 0xe7e <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e82:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e86:	98 60       	ori	r25, 0x08	; 8
     e88:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e90:	97 7f       	andi	r25, 0xF7	; 247
     e92:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e96:	85 ed       	ldi	r24, 0xD5	; 213
     e98:	8a 95       	dec	r24
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <lcd_int32+0x152>
     e9c:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e9e:	31 11       	cpse	r19, r1
     ea0:	e5 cf       	rjmp	.-54     	; 0xe6c <lcd_int32+0x126>

}
     ea2:	69 96       	adiw	r28, 0x19	; 25
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
     ec6:	7f 90       	pop	r7
     ec8:	6f 90       	pop	r6
     eca:	5f 90       	pop	r5
     ecc:	4f 90       	pop	r4
     ece:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     ed0:	91 2c       	mov	r9, r1
     ed2:	9e 01       	movw	r18, r28
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	59 01       	movw	r10, r18
     eda:	91 cf       	rjmp	.-222    	; 0xdfe <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     edc:	90 e3       	ldi	r25, 0x30	; 48
     ede:	b4 cf       	rjmp	.-152    	; 0xe48 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     ee0:	f0 94       	com	r15
     ee2:	e0 94       	com	r14
     ee4:	d0 94       	com	r13
     ee6:	c0 94       	com	r12
     ee8:	c1 1c       	adc	r12, r1
     eea:	d1 1c       	adc	r13, r1
     eec:	e1 1c       	adc	r14, r1
     eee:	f1 1c       	adc	r15, r1
     ef0:	54 cf       	rjmp	.-344    	; 0xd9a <lcd_int32+0x54>

00000ef2 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	61 97       	sbiw	r28, 0x11	; 17
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	5c 01       	movw	r10, r24
     f22:	96 2e       	mov	r9, r22
     f24:	54 2e       	mov	r5, r20
     f26:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     f28:	8b 2c       	mov	r8, r11
     f2a:	88 1c       	adc	r8, r8
     f2c:	88 24       	eor	r8, r8
     f2e:	88 1c       	adc	r8, r8
     f30:	78 2c       	mov	r7, r8
     f32:	9c 01       	movw	r18, r24
     f34:	97 fd       	sbrc	r25, 7
     f36:	9d c0       	rjmp	.+314    	; 0x1072 <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
     f38:	55 20       	and	r5, r5
     f3a:	09 f4       	brne	.+2      	; 0xf3e <lcd_int16+0x4c>
     f3c:	8e c0       	rjmp	.+284    	; 0x105a <lcd_int16+0x168>
     f3e:	8e 01       	movw	r16, r28
     f40:	0f 5f       	subi	r16, 0xFF	; 255
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	78 01       	movw	r14, r16
     f46:	cc 24       	eor	r12, r12
     f48:	ca 94       	dec	r12
     f4a:	c5 0c       	add	r12, r5
     f4c:	d1 2c       	mov	r13, r1
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	c8 1a       	sub	r12, r24
     f52:	d8 0a       	sbc	r13, r24
     f54:	c0 0e       	add	r12, r16
     f56:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     f58:	6a e0       	ldi	r22, 0x0A	; 10
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	c9 01       	movw	r24, r18
     f5e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divmodhi4>
     f62:	46 2f       	mov	r20, r22
     f64:	24 2f       	mov	r18, r20
     f66:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     f68:	80 5d       	subi	r24, 0xD0	; 208
     f6a:	f7 01       	movw	r30, r14
     f6c:	81 93       	st	Z+, r24
     f6e:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
     f70:	ec 15       	cp	r30, r12
     f72:	fd 05       	cpc	r31, r13
     f74:	89 f7       	brne	.-30     	; 0xf58 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     f76:	ff 24       	eor	r15, r15
     f78:	f3 94       	inc	r15
     f7a:	f5 0c       	add	r15, r5
     f7c:	f8 01       	movw	r30, r16
     f7e:	e5 0d       	add	r30, r5
     f80:	f1 1d       	adc	r31, r1
     f82:	8e e2       	ldi	r24, 0x2E	; 46
     f84:	80 83       	st	Z, r24
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     f88:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
     f8a:	6a e0       	ldi	r22, 0x0A	; 10
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divmodhi4>
     f94:	46 2f       	mov	r20, r22
     f96:	24 2f       	mov	r18, r20
     f98:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	9f 0d       	add	r25, r15
     f9e:	f8 01       	movw	r30, r16
     fa0:	ef 0d       	add	r30, r15
     fa2:	f1 1d       	adc	r31, r1
     fa4:	80 5d       	subi	r24, 0xD0	; 208
     fa6:	80 83       	st	Z, r24
        }
        while(qr.quot);
     fa8:	21 15       	cp	r18, r1
     faa:	31 05       	cpc	r19, r1
     fac:	69 f7       	brne	.-38     	; 0xf88 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
     fae:	61 10       	cpse	r6, r1
     fb0:	59 c0       	rjmp	.+178    	; 0x1064 <lcd_int16+0x172>
     fb2:	b7 fc       	sbrc	r11, 7
     fb4:	63 c0       	rjmp	.+198    	; 0x107c <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     fb6:	99 20       	and	r9, r9
     fb8:	b1 f0       	breq	.+44     	; 0xfe6 <lcd_int16+0xf4>
     fba:	68 2d       	mov	r22, r8
     fbc:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     fbe:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     fc0:	29 2f       	mov	r18, r25
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	49 2d       	mov	r20, r9
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	46 1b       	sub	r20, r22
     fca:	57 0b       	sbc	r21, r23
     fcc:	24 17       	cp	r18, r20
     fce:	35 07       	cpc	r19, r21
     fd0:	54 f4       	brge	.+20     	; 0xfe6 <lcd_int16+0xf4>
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	f8 01       	movw	r30, r16
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	80 83       	st	Z, r24
     fdc:	29 2f       	mov	r18, r25
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	24 17       	cp	r18, r20
     fe2:	35 07       	cpc	r19, r21
     fe4:	b4 f3       	brlt	.-20     	; 0xfd2 <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
     fe6:	77 20       	and	r7, r7
     fe8:	31 f0       	breq	.+12     	; 0xff6 <lcd_int16+0x104>
     fea:	f8 01       	movw	r30, r16
     fec:	e9 0f       	add	r30, r25
     fee:	f1 1d       	adc	r31, r1
     ff0:	8d e2       	ldi	r24, 0x2D	; 45
     ff2:	80 83       	st	Z, r24
     ff4:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ff6:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     ff8:	91 50       	subi	r25, 0x01	; 1
     ffa:	f8 01       	movw	r30, r16
     ffc:	e9 0f       	add	r30, r25
     ffe:	f1 1d       	adc	r31, r1
    1000:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1002:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1004:	77 9b       	sbis	0x0e, 7	; 14
    1006:	fe cf       	rjmp	.-4      	; 0x1004 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1008:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    100a:	77 9b       	sbis	0x0e, 7	; 14
    100c:	fe cf       	rjmp	.-4      	; 0x100a <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    100e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1012:	88 60       	ori	r24, 0x08	; 8
    1014:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1018:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    101c:	87 7f       	andi	r24, 0xF7	; 247
    101e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1022:	f5 ed       	ldi	r31, 0xD5	; 213
    1024:	fa 95       	dec	r31
    1026:	f1 f7       	brne	.-4      	; 0x1024 <lcd_int16+0x132>
    1028:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    102a:	91 11       	cpse	r25, r1
    102c:	e5 cf       	rjmp	.-54     	; 0xff8 <lcd_int16+0x106>
}
    102e:	61 96       	adiw	r28, 0x11	; 17
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	7f 90       	pop	r7
    1054:	6f 90       	pop	r6
    1056:	5f 90       	pop	r5
    1058:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    105a:	f1 2c       	mov	r15, r1
    105c:	8e 01       	movw	r16, r28
    105e:	0f 5f       	subi	r16, 0xFF	; 255
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	93 cf       	rjmp	.-218    	; 0xf8a <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1064:	99 20       	and	r9, r9
    1066:	09 f4       	brne	.+2      	; 0x106a <lcd_int16+0x178>
    1068:	be cf       	rjmp	.-132    	; 0xfe6 <lcd_int16+0xf4>
    106a:	68 2d       	mov	r22, r8
    106c:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    106e:	80 e3       	ldi	r24, 0x30	; 48
    1070:	a7 cf       	rjmp	.-178    	; 0xfc0 <lcd_int16+0xce>
    1072:	22 27       	eor	r18, r18
    1074:	33 27       	eor	r19, r19
    1076:	28 1b       	sub	r18, r24
    1078:	39 0b       	sbc	r19, r25
    107a:	5e cf       	rjmp	.-324    	; 0xf38 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    107c:	f3 94       	inc	r15
    107e:	f3 94       	inc	r15
    1080:	f8 01       	movw	r30, r16
    1082:	e9 0f       	add	r30, r25
    1084:	f1 1d       	adc	r31, r1
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    108a:	99 20       	and	r9, r9
    108c:	59 f0       	breq	.+22     	; 0x10a4 <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    108e:	2f 2d       	mov	r18, r15
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	49 2d       	mov	r20, r9
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	24 17       	cp	r18, r20
    1098:	35 07       	cpc	r19, r21
    109a:	24 f4       	brge	.+8      	; 0x10a4 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    109c:	9f 2d       	mov	r25, r15
                bSigned = 0;
    109e:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	97 cf       	rjmp	.-210    	; 0xfd2 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    10a4:	9f 2d       	mov	r25, r15
    10a6:	a7 cf       	rjmp	.-178    	; 0xff6 <lcd_int16+0x104>

000010a8 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    10a8:	80 ef       	ldi	r24, 0xF0	; 240
    10aa:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    10ac:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    10ae:	85 b3       	in	r24, 0x15	; 21
    10b0:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    10b2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    10b6:	8a e3       	ldi	r24, 0x3A	; 58
    10b8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min_count>
hour_count = (__TIME__[0]-24)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    10bc:	8e ef       	ldi	r24, 0xFE	; 254
    10be:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>

//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    10c2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
    10c6:	8d 30       	cpi	r24, 0x0D	; 13
    10c8:	40 f0       	brcs	.+16     	; 0x10da <main+0x32>
	hour_count -= 12;
    10ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
    10ce:	8c 50       	subi	r24, 0x0C	; 12
    10d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour_count>
	pm_flag = 0x01;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    10da:	0e 94 7c 00 	call	0xf8	; 0xf8 <initialization>

//enable global interrupts
sei();
    10de:	78 94       	sei

OCR2 = 0;
    10e0:	13 bc       	out	0x23, r1	; 35
OCR3A = 200;
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    10ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    10ee:	cf ef       	ldi	r28, 0xFF	; 255
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
			encoding &= 0b01111111;
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    10f0:	10 e4       	ldi	r17, 0x40	; 64
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    10f2:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
    10f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <input_flag>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <main+0x56>
    10fc:	4a c0       	rjmp	.+148    	; 0x1192 <__stack+0x93>
	  	button_encoder_read();
	  	input_flag = FALSE;
  	}

	clock_count();
    10fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <clock_count>
	
	if(adjust_alarm == 0){
    1102:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <adjust_alarm>
    1106:	81 11       	cpse	r24, r1
    1108:	4f c0       	rjmp	.+158    	; 0x11a8 <__stack+0xa9>
		temp_min = min_count;
    110a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min_count>
    110e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <temp_min>
		temp_hour = hour_count;
    1112:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
    1116:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp_hour>
		temp_min = alarm_time_min;
		temp_hour = alarm_time_hour;
	}
	
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
    111a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <min_count>
    111e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour_count>
    1122:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
	else
		segsum(alarm_time_hour, alarm_time_min);
  //make PORTA an output
	DDRA = 0xFF;
    1126:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1128:	00 00       	nop
    112a:	a5 e4       	ldi	r26, 0x45	; 69
    112c:	b1 e0       	ldi	r27, 0x01	; 1
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	14 c0       	rjmp	.+40     	; 0x115c <__stack+0x5d>
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	e0 50       	subi	r30, 0x00	; 0
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	20 81       	ld	r18, Z
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	91 05       	cpc	r25, r1
    1140:	a1 f0       	breq	.+40     	; 0x116a <__stack+0x6b>
			encoding &= 0b01111111;
		PORTA = 0xFF;
    1142:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1144:	38 2f       	mov	r19, r24
    1146:	32 95       	swap	r19
    1148:	30 7f       	andi	r19, 0xF0	; 240
    114a:	38 bb       	out	0x18, r19	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    114c:	2b bb       	out	0x1b, r18	; 27
    114e:	ef e3       	ldi	r30, 0x3F	; 63
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <__stack+0x53>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <__stack+0x59>
    1158:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    115a:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    115c:	ed 91       	ld	r30, X+
    115e:	e1 31       	cpi	r30, 0x11	; 17
    1160:	48 f3       	brcs	.-46     	; 0x1134 <__stack+0x35>
    1162:	2f ef       	ldi	r18, 0xFF	; 255
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	91 05       	cpc	r25, r1
    1168:	61 f7       	brne	.-40     	; 0x1142 <__stack+0x43>
    116a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <pm_flag>
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	31 f1       	breq	.+76     	; 0x11be <__stack+0xbf>
			encoding &= 0b01111111;
		PORTA = 0xFF;
    1172:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1174:	18 bb       	out	0x18, r17	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1176:	2b bb       	out	0x1b, r18	; 27
    1178:	8f e3       	ldi	r24, 0x3F	; 63
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <__stack+0x7d>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <__stack+0x83>
    1182:	00 00       	nop
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    1184:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1186:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);

  	if(input_flag == TRUE){
    1188:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <input_flag>
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	09 f0       	breq	.+2      	; 0x1192 <__stack+0x93>
    1190:	b6 cf       	rjmp	.-148    	; 0x10fe <main+0x56>
	  	button_encoder_read();
    1192:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <button_encoder_read>
	  	input_flag = FALSE;
    1196:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <input_flag>
  	}

	clock_count();
    119a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <clock_count>
	
	if(adjust_alarm == 0){
    119e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <adjust_alarm>
    11a2:	88 23       	and	r24, r24
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <__stack+0xa9>
    11a6:	b1 cf       	rjmp	.-158    	; 0x110a <__stack+0xb>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    11a8:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <alarm_time_min>
    11ac:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <temp_min>
		temp_hour = alarm_time_hour;
    11b0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    11b4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp_hour>
	}
	
	if(adjust_alarm == 0)
		segsum(hour_count, min_count);
	else
		segsum(alarm_time_hour, alarm_time_min);
    11b8:	0e 94 ca 00 	call	0x194	; 0x194 <segsum>
    11bc:	b4 cf       	rjmp	.-152    	; 0x1126 <__stack+0x27>
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0)
    11be:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hour24_flag>
    11c2:	81 11       	cpse	r24, r1
    11c4:	d6 cf       	rjmp	.-84     	; 0x1172 <__stack+0x73>
			encoding &= 0b01111111;
    11c6:	2f 77       	andi	r18, 0x7F	; 127
    11c8:	d4 cf       	rjmp	.-88     	; 0x1172 <__stack+0x73>

000011ca <__divmodhi4>:
    11ca:	97 fb       	bst	r25, 7
    11cc:	07 2e       	mov	r0, r23
    11ce:	16 f4       	brtc	.+4      	; 0x11d4 <__divmodhi4+0xa>
    11d0:	00 94       	com	r0
    11d2:	07 d0       	rcall	.+14     	; 0x11e2 <__divmodhi4_neg1>
    11d4:	77 fd       	sbrc	r23, 7
    11d6:	09 d0       	rcall	.+18     	; 0x11ea <__divmodhi4_neg2>
    11d8:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivmodhi4>
    11dc:	07 fc       	sbrc	r0, 7
    11de:	05 d0       	rcall	.+10     	; 0x11ea <__divmodhi4_neg2>
    11e0:	3e f4       	brtc	.+14     	; 0x11f0 <__divmodhi4_exit>

000011e2 <__divmodhi4_neg1>:
    11e2:	90 95       	com	r25
    11e4:	81 95       	neg	r24
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__divmodhi4_neg2>:
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255

000011f0 <__divmodhi4_exit>:
    11f0:	08 95       	ret

000011f2 <__divmodsi4>:
    11f2:	05 2e       	mov	r0, r21
    11f4:	97 fb       	bst	r25, 7
    11f6:	1e f4       	brtc	.+6      	; 0x11fe <__divmodsi4+0xc>
    11f8:	00 94       	com	r0
    11fa:	0e 94 10 09 	call	0x1220	; 0x1220 <__negsi2>
    11fe:	57 fd       	sbrc	r21, 7
    1200:	07 d0       	rcall	.+14     	; 0x1210 <__divmodsi4_neg2>
    1202:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodsi4>
    1206:	07 fc       	sbrc	r0, 7
    1208:	03 d0       	rcall	.+6      	; 0x1210 <__divmodsi4_neg2>
    120a:	4e f4       	brtc	.+18     	; 0x121e <__divmodsi4_exit>
    120c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__negsi2>

00001210 <__divmodsi4_neg2>:
    1210:	50 95       	com	r21
    1212:	40 95       	com	r20
    1214:	30 95       	com	r19
    1216:	21 95       	neg	r18
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	4f 4f       	sbci	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255

0000121e <__divmodsi4_exit>:
    121e:	08 95       	ret

00001220 <__negsi2>:
    1220:	90 95       	com	r25
    1222:	80 95       	com	r24
    1224:	70 95       	com	r23
    1226:	61 95       	neg	r22
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__udivmodhi4>:
    1230:	aa 1b       	sub	r26, r26
    1232:	bb 1b       	sub	r27, r27
    1234:	51 e1       	ldi	r21, 0x11	; 17
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <__udivmodhi4_ep>

00001238 <__udivmodhi4_loop>:
    1238:	aa 1f       	adc	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	a6 17       	cp	r26, r22
    123e:	b7 07       	cpc	r27, r23
    1240:	10 f0       	brcs	.+4      	; 0x1246 <__udivmodhi4_ep>
    1242:	a6 1b       	sub	r26, r22
    1244:	b7 0b       	sbc	r27, r23

00001246 <__udivmodhi4_ep>:
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	5a 95       	dec	r21
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__udivmodhi4_loop>
    124e:	80 95       	com	r24
    1250:	90 95       	com	r25
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	08 95       	ret

00001258 <__udivmodsi4>:
    1258:	a1 e2       	ldi	r26, 0x21	; 33
    125a:	1a 2e       	mov	r1, r26
    125c:	aa 1b       	sub	r26, r26
    125e:	bb 1b       	sub	r27, r27
    1260:	fd 01       	movw	r30, r26
    1262:	0d c0       	rjmp	.+26     	; 0x127e <__udivmodsi4_ep>

00001264 <__udivmodsi4_loop>:
    1264:	aa 1f       	adc	r26, r26
    1266:	bb 1f       	adc	r27, r27
    1268:	ee 1f       	adc	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	a2 17       	cp	r26, r18
    126e:	b3 07       	cpc	r27, r19
    1270:	e4 07       	cpc	r30, r20
    1272:	f5 07       	cpc	r31, r21
    1274:	20 f0       	brcs	.+8      	; 0x127e <__udivmodsi4_ep>
    1276:	a2 1b       	sub	r26, r18
    1278:	b3 0b       	sbc	r27, r19
    127a:	e4 0b       	sbc	r30, r20
    127c:	f5 0b       	sbc	r31, r21

0000127e <__udivmodsi4_ep>:
    127e:	66 1f       	adc	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	1a 94       	dec	r1
    1288:	69 f7       	brne	.-38     	; 0x1264 <__udivmodsi4_loop>
    128a:	60 95       	com	r22
    128c:	70 95       	com	r23
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	bd 01       	movw	r22, r26
    1298:	cf 01       	movw	r24, r30
    129a:	08 95       	ret

0000129c <_exit>:
    129c:	f8 94       	cli

0000129e <__stop_program>:
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stop_program>
