
lab2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080010a  0080010a  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad9  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a1  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  c6:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
  ce:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e6 5f       	subi	r30, 0xF6	; 246
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <chk_buttons+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <chk_buttons+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	84 27       	eor	r24, r20
  fe:	28 2b       	or	r18, r24
 100:	39 2b       	or	r19, r25
 102:	31 83       	std	Z+1, r19	; 0x01
 104:	20 83       	st	Z, r18
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	21 15       	cp	r18, r1
 10a:	30 4f       	sbci	r19, 0xF0	; 240
 10c:	09 f0       	breq	.+2      	; 0x110 <chk_buttons+0x42>
 10e:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
 110:	08 95       	ret

00000112 <segsum>:
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//NOTE: -1 is used as a way to determine leading 0s necessary to turn them off in the case statement
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ac 01       	movw	r20, r24
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	//check to see if the total sum count is less than 10 for parsing
	if(sum < 10){
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	91 05       	cpc	r25, r1
 11c:	08 f4       	brcc	.+2      	; 0x120 <segsum+0xe>
 11e:	6e c0       	rjmp	.+220    	; 0x1fc <segsum+0xea>
		ones = sum;
	
	}
	//check to see if the total sum count less than 100 but at or greater than 10 for parsing
	else if(sum < 100 && sum > 9){
 120:	0a 97       	sbiw	r24, 0x0a	; 10
 122:	8a 35       	cpi	r24, 0x5A	; 90
 124:	91 05       	cpc	r25, r1
 126:	08 f4       	brcc	.+2      	; 0x12a <segsum+0x18>
 128:	49 c0       	rjmp	.+146    	; 0x1bc <segsum+0xaa>
		ones = sum % 10;
		tens = sum / 10;
	
	}
	//check to see if the total sum count is less than 100 but at or greater than 100 for parsing
	else if(sum < 1000 && sum > 99){
 12a:	ca 01       	movw	r24, r20
 12c:	84 56       	subi	r24, 0x64	; 100
 12e:	91 09       	sbc	r25, r1
 130:	84 38       	cpi	r24, 0x84	; 132
 132:	93 40       	sbci	r25, 0x03	; 3
 134:	08 f4       	brcc	.+2      	; 0x138 <segsum+0x26>
 136:	6b c0       	rjmp	.+214    	; 0x20e <segsum+0xfc>
		tens = (sum % 100) / 10;
		hundreds = sum / 100;

	}
	//check to see if the total sum count is less than 1024 but at or greater than 1000 for parsing
	else if(sum <= 1023){
 138:	41 15       	cp	r20, r1
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	58 07       	cpc	r21, r24
 13e:	08 f0       	brcs	.+2      	; 0x142 <segsum+0x30>
 140:	61 c0       	rjmp	.+194    	; 0x204 <segsum+0xf2>
		ones = (sum % 1000) % 10;
 142:	9a 01       	movw	r18, r20
 144:	36 95       	lsr	r19
 146:	27 95       	ror	r18
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	a5 ec       	ldi	r26, 0xC5	; 197
 152:	b0 e2       	ldi	r27, 0x20	; 32
 154:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 158:	fc 01       	movw	r30, r24
 15a:	f2 95       	swap	r31
 15c:	e2 95       	swap	r30
 15e:	ef 70       	andi	r30, 0x0F	; 15
 160:	ef 27       	eor	r30, r31
 162:	ff 70       	andi	r31, 0x0F	; 15
 164:	ef 27       	eor	r30, r31
 166:	28 ee       	ldi	r18, 0xE8	; 232
 168:	33 e0       	ldi	r19, 0x03	; 3
 16a:	e2 9f       	mul	r30, r18
 16c:	c0 01       	movw	r24, r0
 16e:	e3 9f       	mul	r30, r19
 170:	90 0d       	add	r25, r0
 172:	f2 9f       	mul	r31, r18
 174:	90 0d       	add	r25, r0
 176:	11 24       	eor	r1, r1
 178:	fa 01       	movw	r30, r20
 17a:	e8 1b       	sub	r30, r24
 17c:	f9 0b       	sbc	r31, r25
 17e:	9f 01       	movw	r18, r30
 180:	ad ec       	ldi	r26, 0xCD	; 205
 182:	bc ec       	ldi	r27, 0xCC	; 204
 184:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	4e 2f       	mov	r20, r30
 196:	2a e0       	ldi	r18, 0x0A	; 10
 198:	82 9f       	mul	r24, r18
 19a:	40 19       	sub	r20, r0
 19c:	11 24       	eor	r1, r1
		tens = (sum % 1000) / 10;
 19e:	58 2f       	mov	r21, r24
		hundreds = (sum % 1000) / 100;
 1a0:	9f 01       	movw	r18, r30
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	ab e7       	ldi	r26, 0x7B	; 123
 1ac:	b4 e1       	ldi	r27, 0x14	; 20
 1ae:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	e8 2f       	mov	r30, r24
		thousands = sum / 1000;
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <segsum+0xce>
		ones = sum;
	
	}
	//check to see if the total sum count less than 100 but at or greater than 10 for parsing
	else if(sum < 100 && sum > 9){
		ones = sum % 10;
 1bc:	9a 01       	movw	r18, r20
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	2a e0       	ldi	r18, 0x0A	; 10
 1d4:	82 9f       	mul	r24, r18
 1d6:	40 19       	sub	r20, r0
 1d8:	11 24       	eor	r1, r1
		tens = sum / 10;
 1da:	58 2f       	mov	r21, r24
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 1dc:	9f ef       	ldi	r25, 0xFF	; 255
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 1de:	ef ef       	ldi	r30, 0xFF	; 255
		hundreds = (sum % 1000) / 100;
		thousands = sum / 1000;
	
	} 
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
 1e0:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <segment_data>
	segment_data[1] = tens;
 1e4:	50 93 27 01 	sts	0x0127, r21	; 0x800127 <segment_data+0x1>
	segment_data[2] = -1;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <segment_data+0x2>
	segment_data[3] = hundreds;
 1ee:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <segment_data+0x3>
	segment_data[4] = thousands;
 1f2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <segment_data+0x4>
}//segment_sum
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 1fe:	ef ef       	ldi	r30, 0xFF	; 255
//NOTE: -1 is used as a way to determine leading 0s necessary to turn them off in the case statement
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
 200:	5f ef       	ldi	r21, 0xFF	; 255
 202:	ee cf       	rjmp	.-36     	; 0x1e0 <segsum+0xce>
	int8_t hundreds = -1;
	int8_t thousands = -1;
 204:	9f ef       	ldi	r25, 0xFF	; 255
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 206:	ef ef       	ldi	r30, 0xFF	; 255
//NOTE: -1 is used as a way to determine leading 0s necessary to turn them off in the case statement
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
 208:	5f ef       	ldi	r21, 0xFF	; 255
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//NOTE: -1 is used as a way to determine leading 0s necessary to turn them off in the case statement
//       for the seven_seg_encoding() function
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
 20a:	4f ef       	ldi	r20, 0xFF	; 255
 20c:	e9 cf       	rjmp	.-46     	; 0x1e0 <segsum+0xce>
		tens = sum / 10;
	
	}
	//check to see if the total sum count is less than 100 but at or greater than 100 for parsing
	else if(sum < 1000 && sum > 99){
		ones = (sum % 100) % 10;
 20e:	9a 01       	movw	r18, r20
 210:	36 95       	lsr	r19
 212:	27 95       	ror	r18
 214:	36 95       	lsr	r19
 216:	27 95       	ror	r18
 218:	ab e7       	ldi	r26, 0x7B	; 123
 21a:	b4 e1       	ldi	r27, 0x14	; 20
 21c:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 220:	fc 01       	movw	r30, r24
 222:	ec 01       	movw	r28, r24
 224:	d6 95       	lsr	r29
 226:	c7 95       	ror	r28
 228:	24 e6       	ldi	r18, 0x64	; 100
 22a:	2c 9f       	mul	r18, r28
 22c:	c0 01       	movw	r24, r0
 22e:	2d 9f       	mul	r18, r29
 230:	90 0d       	add	r25, r0
 232:	11 24       	eor	r1, r1
 234:	ea 01       	movw	r28, r20
 236:	c8 1b       	sub	r28, r24
 238:	d9 0b       	sbc	r29, r25
 23a:	9e 01       	movw	r18, r28
 23c:	ad ec       	ldi	r26, 0xCD	; 205
 23e:	bc ec       	ldi	r27, 0xCC	; 204
 240:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	4c 2f       	mov	r20, r28
 252:	2a e0       	ldi	r18, 0x0A	; 10
 254:	82 9f       	mul	r24, r18
 256:	40 19       	sub	r20, r0
 258:	11 24       	eor	r1, r1
		tens = (sum % 100) / 10;
 25a:	58 2f       	mov	r21, r24
		hundreds = sum / 100;
 25c:	f6 95       	lsr	r31
 25e:	e7 95       	ror	r30
void segsum(uint16_t sum) {
	//initialize variables to be used in this function to -1, which makes LEDs go off
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 260:	9f ef       	ldi	r25, 0xFF	; 255
 262:	be cf       	rjmp	.-132    	; 0x1e0 <segsum+0xce>

00000264 <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	30 f4       	brcc	.+12     	; 0x274 <seven_seg_encoding+0x10>
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e0 50       	subi	r30, 0x00	; 0
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	08 95       	ret
 274:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
 276:	08 95       	ret

00000278 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
 278:	80 ef       	ldi	r24, 0xF0	; 240
 27a:	87 bb       	out	0x17, r24	; 23
uint16_t count = 0;
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
while(1){
  //insert loop delay for debounce
	_delay_ms(2);
  //make PORTA an input port with pullups
	DDRA = 0x00;
	PORTA = 0xFF;	
 280:	ff 24       	eor	r15, r15
 282:	fa 94       	dec	r15
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
 284:	90 e7       	ldi	r25, 0x70	; 112
 286:	d9 2e       	mov	r13, r25
  //now check each button and increment the count as needed
	//use a for loop to increment through each button to check
	for(uint8_t i_buttons = 0; i_buttons < 8; i_buttons++){
		if(chk_buttons(i_buttons)){
			count += (1 << (i_buttons));		//makes S1 add 1, S2 add 2, S3 add 4, etc, using binary shift
 288:	01 e0       	ldi	r16, 0x01	; 1
 28a:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	}
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
 28c:	20 e6       	ldi	r18, 0x60	; 96
 28e:	e2 2e       	mov	r14, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	9f e1       	ldi	r25, 0x1F	; 31
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x1c>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x22>
 29a:	00 00       	nop
uint8_t encoding = 0;
while(1){
  //insert loop delay for debounce
	_delay_ms(2);
  //make PORTA an input port with pullups
	DDRA = 0x00;
 29c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
 29e:	fb ba       	out	0x1b, r15	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
 2a0:	d8 ba       	out	0x18, r13	; 24
 2a2:	ea e0       	ldi	r30, 0x0A	; 10
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
 2aa:	99 b3       	in	r25, 0x19	; 25
 2ac:	40 81       	ld	r20, Z
 2ae:	51 81       	ldd	r21, Z+1	; 0x01
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	50 6e       	ori	r21, 0xE0	; 224
 2b6:	89 2f       	mov	r24, r25
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x4a>
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <main+0x46>
 2c6:	81 70       	andi	r24, 0x01	; 1
 2c8:	99 27       	eor	r25, r25
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	86 27       	eor	r24, r22
 2ce:	84 2b       	or	r24, r20
 2d0:	95 2b       	or	r25, r21
 2d2:	81 93       	st	Z+, r24
 2d4:	91 93       	st	Z+, r25
	if(state[button] == 0xF000) return 1;
 2d6:	81 15       	cp	r24, r1
 2d8:	90 4f       	sbci	r25, 0xF0	; 240
 2da:	49 f4       	brne	.+18     	; 0x2ee <main+0x76>
    PORTB = 0x70;
  //now check each button and increment the count as needed
	//use a for loop to increment through each button to check
	for(uint8_t i_buttons = 0; i_buttons < 8; i_buttons++){
		if(chk_buttons(i_buttons)){
			count += (1 << (i_buttons));		//makes S1 add 1, S2 add 2, S3 add 4, etc, using binary shift
 2dc:	c8 01       	movw	r24, r16
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <main+0x6e>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <main+0x6a>
 2ea:	c8 0f       	add	r28, r24
 2ec:	d9 1f       	adc	r29, r25
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
	PORTA = 0xFF;	
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
  //now check each button and increment the count as needed
	//use a for loop to increment through each button to check
	for(uint8_t i_buttons = 0; i_buttons < 8; i_buttons++){
 2f2:	28 30       	cpi	r18, 0x08	; 8
 2f4:	31 05       	cpc	r19, r1
 2f6:	c9 f6       	brne	.-78     	; 0x2aa <main+0x32>
			count += (1 << (i_buttons));		//makes S1 add 1, S2 add 2, S3 add 4, etc, using binary shift
		}
	
	}
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
 2f8:	e8 ba       	out	0x18, r14	; 24
  //bound the count to 0 - 1023
	//uses while loop to check if count is greater than 1024, and subtract 1024 to it, making 1024 -> 0
    while(count > 1023){
 2fa:	c1 15       	cp	r28, r1
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	d6 07       	cpc	r29, r22
 300:	30 f0       	brcs	.+12     	; 0x30e <main+0x96>
		count -= 1023;
 302:	cf 5f       	subi	r28, 0xFF	; 255
 304:	d3 40       	sbci	r29, 0x03	; 3
	}
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
  //bound the count to 0 - 1023
	//uses while loop to check if count is greater than 1024, and subtract 1024 to it, making 1024 -> 0
    while(count > 1023){
 306:	c1 15       	cp	r28, r1
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	d8 07       	cpc	r29, r24
 30c:	d0 f7       	brcc	.-12     	; 0x302 <main+0x8a>
		count -= 1023;
	}
  //break up the disp_value to 4, BCD digits in the array: call (segsum)
    segsum(count);
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 89 00 	call	0x112	; 0x112 <segsum>
  //make PORTA an output
	DDRA = 0xFF;
 314:	fa ba       	out	0x1a, r15	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
 316:	00 00       	nop
 318:	a6 e2       	ldi	r26, 0x26	; 38
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	80 e0       	ldi	r24, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
 31e:	ed 91       	ld	r30, X+
 320:	ea 30       	cpi	r30, 0x0A	; 10
 322:	b0 f4       	brcc	.+44     	; 0x350 <main+0xd8>
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	90 81       	ld	r25, Z
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
 32c:	28 2f       	mov	r18, r24
 32e:	22 95       	swap	r18
 330:	20 7f       	andi	r18, 0xF0	; 240
 332:	28 bb       	out	0x18, r18	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
 334:	9b bb       	out	0x1b, r25	; 27
 336:	ef e3       	ldi	r30, 0x3F	; 63
 338:	ff e1       	ldi	r31, 0x1F	; 31
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0xc2>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0xc8>
 340:	00 00       	nop
 342:	8f 5f       	subi	r24, 0xFF	; 255
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
 344:	85 30       	cpi	r24, 0x05	; 5
 346:	09 f4       	brne	.+2      	; 0x34a <main+0xd2>
 348:	a3 cf       	rjmp	.-186    	; 0x290 <main+0x18>
		encoding = seven_seg_encoding(segment_data[i_seg]);
 34a:	ed 91       	ld	r30, X+
 34c:	ea 30       	cpi	r30, 0x0A	; 10
 34e:	50 f3       	brcs	.-44     	; 0x324 <main+0xac>
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	ec cf       	rjmp	.-40     	; 0x32c <main+0xb4>

00000354 <__umulhisi3>:
 354:	a2 9f       	mul	r26, r18
 356:	b0 01       	movw	r22, r0
 358:	b3 9f       	mul	r27, r19
 35a:	c0 01       	movw	r24, r0
 35c:	a3 9f       	mul	r26, r19
 35e:	70 0d       	add	r23, r0
 360:	81 1d       	adc	r24, r1
 362:	11 24       	eor	r1, r1
 364:	91 1d       	adc	r25, r1
 366:	b2 9f       	mul	r27, r18
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
