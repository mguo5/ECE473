
lab2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010a  0080010a  00000bc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad1  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000340  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  8c:	07 63       	ori	r16, 0x37	; 55
  8e:	42 36       	cpi	r20, 0x62	; 98
  90:	b7 9b       	sbis	0x16, 7	; 22
  92:	d8 a7       	std	Y+40, r29	; 0x28
  94:	1a 39       	cpi	r17, 0x9A	; 154
  96:	68 56       	subi	r22, 0x68	; 104
  98:	18 ae       	std	Y+56, r1	; 0x38
  9a:	ba ab       	std	Y+50, r27	; 0x32
  9c:	55 8c       	ldd	r5, Z+29	; 0x1d
  9e:	1d 3c       	cpi	r17, 0xCD	; 205
  a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
  a2:	57 63       	ori	r21, 0x37	; 55
  a4:	bd 6d       	ori	r27, 0xDD	; 221
  a6:	ed fd       	.word	0xfded	; ????
  a8:	75 3e       	cpi	r23, 0xE5	; 229
  aa:	f6 17       	cp	r31, r22
  ac:	72 31       	cpi	r23, 0x12	; 18
  ae:	bf 00       	.word	0x00bf	; ????
  b0:	00 00       	nop
  b2:	80 3f       	cpi	r24, 0xF0	; 240
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <modf+0x2c>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d0 e1       	ldi	r29, 0x10	; 16
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e2 e2       	ldi	r30, 0x22	; 34
 122:	fb e0       	ldi	r31, 0x0B	; 11
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	aa 30       	cpi	r26, 0x0A	; 10
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	aa e0       	ldi	r26, 0x0A	; 10
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	ad 31       	cpi	r26, 0x1D	; 29
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
 148:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state = 0;
	state = (state << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 150:	49 b3       	in	r20, 0x19	; 25
 152:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 156:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	30 6e       	ori	r19, 0xE0	; 224
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <chk_buttons+0x18>
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <chk_buttons+0x14>
 16c:	41 70       	andi	r20, 0x01	; 1
 16e:	55 27       	eor	r21, r21
 170:	24 2b       	or	r18, r20
 172:	35 2b       	or	r19, r21
 174:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__data_end+0x1>
 178:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	21 15       	cp	r18, r1
 180:	30 4f       	sbci	r19, 0xF0	; 240
 182:	09 f0       	breq	.+2      	; 0x186 <chk_buttons+0x36>
 184:	80 e0       	ldi	r24, 0x00	; 0
	if(state == 0xF000) return 1;
	return 0;

}
 186:	08 95       	ret

00000188 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ac 01       	movw	r20, r24
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  //determine how many digits there are
	if(sum < 10 && sum > 0){
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	09 97       	sbiw	r24, 0x09	; 9
 192:	08 f4       	brcc	.+2      	; 0x196 <segsum+0xe>
 194:	75 c0       	rjmp	.+234    	; 0x280 <segsum+0xf8>
		ones = sum;
	
	}
	else if(sum < 100 && sum > 9){
 196:	ca 01       	movw	r24, r20
 198:	0a 97       	sbiw	r24, 0x0a	; 10
 19a:	8a 35       	cpi	r24, 0x5A	; 90
 19c:	91 05       	cpc	r25, r1
 19e:	08 f4       	brcc	.+2      	; 0x1a2 <segsum+0x1a>
 1a0:	4f c0       	rjmp	.+158    	; 0x240 <segsum+0xb8>
		ones = sum % 10;
		tens = sum / 10;
	
	}
	else if(sum < 1000 && sum > 99){
 1a2:	ca 01       	movw	r24, r20
 1a4:	84 56       	subi	r24, 0x64	; 100
 1a6:	91 09       	sbc	r25, r1
 1a8:	84 38       	cpi	r24, 0x84	; 132
 1aa:	93 40       	sbci	r25, 0x03	; 3
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <segsum+0x28>
 1ae:	71 c0       	rjmp	.+226    	; 0x292 <segsum+0x10a>
		ones = (sum % 100) % 10;
		tens = (sum % 100) / 10;
		hundreds = sum / 100;

	}
	else if(sum <= 1023){
 1b0:	41 15       	cp	r20, r1
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	58 07       	cpc	r21, r24
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <segsum+0x32>
 1b8:	67 c0       	rjmp	.+206    	; 0x288 <segsum+0x100>
		ones = (sum % 1000) % 10;
 1ba:	9a 01       	movw	r18, r20
 1bc:	36 95       	lsr	r19
 1be:	27 95       	ror	r18
 1c0:	36 95       	lsr	r19
 1c2:	27 95       	ror	r18
 1c4:	36 95       	lsr	r19
 1c6:	27 95       	ror	r18
 1c8:	a5 ec       	ldi	r26, 0xC5	; 197
 1ca:	b0 e2       	ldi	r27, 0x20	; 32
 1cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 1d0:	ec 01       	movw	r28, r24
 1d2:	fc 01       	movw	r30, r24
 1d4:	f2 95       	swap	r31
 1d6:	e2 95       	swap	r30
 1d8:	ef 70       	andi	r30, 0x0F	; 15
 1da:	ef 27       	eor	r30, r31
 1dc:	ff 70       	andi	r31, 0x0F	; 15
 1de:	ef 27       	eor	r30, r31
 1e0:	28 ee       	ldi	r18, 0xE8	; 232
 1e2:	33 e0       	ldi	r19, 0x03	; 3
 1e4:	e2 9f       	mul	r30, r18
 1e6:	c0 01       	movw	r24, r0
 1e8:	e3 9f       	mul	r30, r19
 1ea:	90 0d       	add	r25, r0
 1ec:	f2 9f       	mul	r31, r18
 1ee:	90 0d       	add	r25, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	fa 01       	movw	r30, r20
 1f4:	e8 1b       	sub	r30, r24
 1f6:	f9 0b       	sbc	r31, r25
 1f8:	9f 01       	movw	r18, r30
 1fa:	ad ec       	ldi	r26, 0xCD	; 205
 1fc:	bc ec       	ldi	r27, 0xCC	; 204
 1fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	4e 2f       	mov	r20, r30
 210:	2a e0       	ldi	r18, 0x0A	; 10
 212:	82 9f       	mul	r24, r18
 214:	40 19       	sub	r20, r0
 216:	11 24       	eor	r1, r1
		tens = (sum % 1000) / 10;
 218:	58 2f       	mov	r21, r24
		hundreds = (sum % 1000) / 100;
 21a:	9f 01       	movw	r18, r30
 21c:	36 95       	lsr	r19
 21e:	27 95       	ror	r18
 220:	36 95       	lsr	r19
 222:	27 95       	ror	r18
 224:	ab e7       	ldi	r26, 0x7B	; 123
 226:	b4 e1       	ldi	r27, 0x14	; 20
 228:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	e8 2f       	mov	r30, r24
		thousands = sum / 1000;
 232:	d2 95       	swap	r29
 234:	c2 95       	swap	r28
 236:	cf 70       	andi	r28, 0x0F	; 15
 238:	cd 27       	eor	r28, r29
 23a:	df 70       	andi	r29, 0x0F	; 15
 23c:	cd 27       	eor	r28, r29
 23e:	12 c0       	rjmp	.+36     	; 0x264 <segsum+0xdc>
	if(sum < 10 && sum > 0){
		ones = sum;
	
	}
	else if(sum < 100 && sum > 9){
		ones = sum % 10;
 240:	9a 01       	movw	r18, r20
 242:	ad ec       	ldi	r26, 0xCD	; 205
 244:	bc ec       	ldi	r27, 0xCC	; 204
 246:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	2a e0       	ldi	r18, 0x0A	; 10
 258:	82 9f       	mul	r24, r18
 25a:	40 19       	sub	r20, r0
 25c:	11 24       	eor	r1, r1
		tens = sum / 10;
 25e:	58 2f       	mov	r21, r24
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 260:	cf ef       	ldi	r28, 0xFF	; 255
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 262:	ef ef       	ldi	r30, 0xFF	; 255
	
	}
  //break up decimal sum into 4 digit-segments
  //blank out leading zero digits 
  //now move data to right place for misplaced colon position
	segment_data[0] = ones;
 264:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <segment_data>
	segment_data[1] = tens;
 268:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <segment_data+0x1>
	segment_data[2] = -1;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <segment_data+0x2>
	segment_data[3] = hundreds;
 272:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <segment_data+0x3>
	segment_data[4] = thousands;
 276:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <segment_data+0x4>
}//segment_sum
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 280:	cf ef       	ldi	r28, 0xFF	; 255
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 282:	ef ef       	ldi	r30, 0xFF	; 255
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
 284:	5f ef       	ldi	r21, 0xFF	; 255
 286:	ee cf       	rjmp	.-36     	; 0x264 <segsum+0xdc>
	int8_t hundreds = -1;
	int8_t thousands = -1;
 288:	cf ef       	ldi	r28, 0xFF	; 255
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
 28a:	ef ef       	ldi	r30, 0xFF	; 255
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
 28c:	5f ef       	ldi	r21, 0xFF	; 255
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
 28e:	4f ef       	ldi	r20, 0xFF	; 255
 290:	e9 cf       	rjmp	.-46     	; 0x264 <segsum+0xdc>
		ones = sum % 10;
		tens = sum / 10;
	
	}
	else if(sum < 1000 && sum > 99){
		ones = (sum % 100) % 10;
 292:	9a 01       	movw	r18, r20
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	ab e7       	ldi	r26, 0x7B	; 123
 29e:	b4 e1       	ldi	r27, 0x14	; 20
 2a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 01       	movw	r28, r24
 2a8:	d6 95       	lsr	r29
 2aa:	c7 95       	ror	r28
 2ac:	24 e6       	ldi	r18, 0x64	; 100
 2ae:	2c 9f       	mul	r18, r28
 2b0:	c0 01       	movw	r24, r0
 2b2:	2d 9f       	mul	r18, r29
 2b4:	90 0d       	add	r25, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	ea 01       	movw	r28, r20
 2ba:	c8 1b       	sub	r28, r24
 2bc:	d9 0b       	sbc	r29, r25
 2be:	9e 01       	movw	r18, r28
 2c0:	ad ec       	ldi	r26, 0xCD	; 205
 2c2:	bc ec       	ldi	r27, 0xCC	; 204
 2c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	4c 2f       	mov	r20, r28
 2d6:	2a e0       	ldi	r18, 0x0A	; 10
 2d8:	82 9f       	mul	r24, r18
 2da:	40 19       	sub	r20, r0
 2dc:	11 24       	eor	r1, r1
		tens = (sum % 100) / 10;
 2de:	58 2f       	mov	r21, r24
		hundreds = sum / 100;
 2e0:	f6 95       	lsr	r31
 2e2:	e7 95       	ror	r30
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
	int8_t ones = -1;
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
 2e4:	cf ef       	ldi	r28, 0xFF	; 255
 2e6:	be cf       	rjmp	.-132    	; 0x264 <segsum+0xdc>

000002e8 <seven_seg_encoding>:
	segment_data[4] = thousands;
}//segment_sum
//***********************************************************************************


uint8_t seven_seg_encoding(int8_t num){
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	30 f4       	brcc	.+12     	; 0x2f8 <seven_seg_encoding+0x10>
 2ec:	e8 2f       	mov	r30, r24
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e0 50       	subi	r30, 0x00	; 0
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	80 81       	ld	r24, Z
 2f6:	08 95       	ret
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;

}
 2fa:	08 95       	ret

000002fc <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
 2fc:	80 ef       	ldi	r24, 0xF0	; 240
 2fe:	87 bb       	out	0x17, r24	; 23
uint16_t count = 0;
 300:	e1 2c       	mov	r14, r1
 302:	f1 2c       	mov	r15, r1
while(1){
  //insert loop delay for debounce
	_delay_ms(2);
  //make PORTA an input port with pullups
	DDRA = 0x00;
	PORTA = 0xFF;	
 304:	dd 24       	eor	r13, r13
 306:	da 94       	dec	r13
  //enable tristate buffer for pushbutton switches
    PORTB = (7 << 4);
 308:	20 e7       	ldi	r18, 0x70	; 112
 30a:	c2 2e       	mov	r12, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	8f e3       	ldi	r24, 0x3F	; 63
 30e:	9f e1       	ldi	r25, 0x1F	; 31
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x14>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x1a>
 316:	00 00       	nop
uint8_t encoding = 0;
while(1){
  //insert loop delay for debounce
	_delay_ms(2);
  //make PORTA an input port with pullups
	DDRA = 0x00;
 318:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
 31a:	db ba       	out	0x1b, r13	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = (7 << 4);
 31c:	c8 ba       	out	0x18, r12	; 24
 31e:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <__data_end>
 322:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <__data_end+0x1>
  //now check each button and increment the count as needed
	for(int i_buttons = 0; i_buttons < 8; i_buttons++){
 326:	00 e0       	ldi	r16, 0x00	; 0
 328:	10 e0       	ldi	r17, 0x00	; 0
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state = 0;
	state = (state << 1) | (!bit_is_clear(PINA, button)) | 0xE000;
 32a:	89 b3       	in	r24, 0x19	; 25
 32c:	cc 0f       	add	r28, r28
 32e:	dd 1f       	adc	r29, r29
 330:	d0 6e       	ori	r29, 0xE0	; 224
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	00 2e       	mov	r0, r16
 336:	02 c0       	rjmp	.+4      	; 0x33c <main+0x40>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <main+0x3c>
 340:	81 70       	andi	r24, 0x01	; 1
 342:	99 27       	eor	r25, r25
 344:	c8 2b       	or	r28, r24
 346:	d9 2b       	or	r29, r25
 348:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <__data_end+0x1>
 34c:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <__data_end>
	if(state == 0xF000) return 1;
 350:	c1 15       	cp	r28, r1
 352:	90 ef       	ldi	r25, 0xF0	; 240
 354:	d9 07       	cpc	r29, r25
 356:	e9 f4       	brne	.+58     	; 0x392 <main+0x96>
  //enable tristate buffer for pushbutton switches
    PORTB = (7 << 4);
  //now check each button and increment the count as needed
	for(int i_buttons = 0; i_buttons < 8; i_buttons++){
		if(chk_buttons(i_buttons)){
			count += pow(2, i_buttons);
 358:	b8 01       	movw	r22, r16
 35a:	01 2e       	mov	r0, r17
 35c:	00 0c       	add	r0, r0
 35e:	88 0b       	sbc	r24, r24
 360:	99 0b       	sbc	r25, r25
 362:	0e 94 9f 02 	call	0x53e	; 0x53e <__floatsisf>
 366:	9b 01       	movw	r18, r22
 368:	ac 01       	movw	r20, r24
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e4       	ldi	r25, 0x40	; 64
 372:	0e 94 2b 03 	call	0x656	; 0x656 <pow>
 376:	4b 01       	movw	r8, r22
 378:	5c 01       	movw	r10, r24
 37a:	b7 01       	movw	r22, r14
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 9d 02 	call	0x53a	; 0x53a <__floatunsisf>
 384:	a5 01       	movw	r20, r10
 386:	94 01       	movw	r18, r8
 388:	0e 94 02 02 	call	0x404	; 0x404 <__addsf3>
 38c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__fixunssfsi>
 390:	7b 01       	movw	r14, r22
	DDRA = 0x00;
	PORTA = 0xFF;	
  //enable tristate buffer for pushbutton switches
    PORTB = (7 << 4);
  //now check each button and increment the count as needed
	for(int i_buttons = 0; i_buttons < 8; i_buttons++){
 392:	0f 5f       	subi	r16, 0xFF	; 255
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	08 30       	cpi	r16, 0x08	; 8
 398:	11 05       	cpc	r17, r1
 39a:	39 f6       	brne	.-114    	; 0x32a <main+0x2e>
			count += pow(2, i_buttons);
		}
	
	}
  //disable tristate buffer for pushbutton switches
    PORTB = 0x00;
 39c:	18 ba       	out	0x18, r1	; 24
  //bound the count to 0 - 1023
    while(count > 1023){
 39e:	e1 14       	cp	r14, r1
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	f8 06       	cpc	r15, r24
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <main+0xae>
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	f9 22       	and	r15, r25
		count -= 1024;
	}
  //break up the disp_value to 4, BCD digits in the array: call (segsum)
    segsum(count);
 3aa:	c7 01       	movw	r24, r14
 3ac:	0e 94 c4 00 	call	0x188	; 0x188 <segsum>
  //bound a counter (0-4) to keep track of digit to display 
  //make PORTA an output
	DDRA = 0xFF;
 3b0:	da ba       	out	0x1a, r13	; 26
	asm volatile ("nop");
 3b2:	00 00       	nop
 3b4:	a8 e1       	ldi	r26, 0x18	; 24
 3b6:	b1 e0       	ldi	r27, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
  //send 7 segment code to LED segments
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
 3ba:	ed 91       	ld	r30, X+
 3bc:	ea 30       	cpi	r30, 0x0A	; 10
 3be:	80 f4       	brcc	.+32     	; 0x3e0 <main+0xe4>
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	e0 50       	subi	r30, 0x00	; 0
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	90 81       	ld	r25, Z
		PORTB = (i_seg << 4);
 3c8:	28 2f       	mov	r18, r24
 3ca:	22 95       	swap	r18
 3cc:	20 7f       	andi	r18, 0xF0	; 240
 3ce:	28 bb       	out	0x18, r18	; 24
		PORTA = encoding;		
 3d0:	9b bb       	out	0x1b, r25	; 27
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
  //bound a counter (0-4) to keep track of digit to display 
  //make PORTA an output
	DDRA = 0xFF;
	asm volatile ("nop");
  //send 7 segment code to LED segments
	for(int i_seg = 0; i_seg < 5; i_seg++){
 3d4:	85 30       	cpi	r24, 0x05	; 5
 3d6:	09 f4       	brne	.+2      	; 0x3da <main+0xde>
 3d8:	99 cf       	rjmp	.-206    	; 0x30c <main+0x10>
		encoding = seven_seg_encoding(segment_data[i_seg]);
 3da:	ed 91       	ld	r30, X+
 3dc:	ea 30       	cpi	r30, 0x0A	; 10
 3de:	80 f3       	brcs	.-32     	; 0x3c0 <main+0xc4>
 3e0:	9f ef       	ldi	r25, 0xFF	; 255
 3e2:	f2 cf       	rjmp	.-28     	; 0x3c8 <main+0xcc>

000003e4 <__umulhisi3>:
 3e4:	a2 9f       	mul	r26, r18
 3e6:	b0 01       	movw	r22, r0
 3e8:	b3 9f       	mul	r27, r19
 3ea:	c0 01       	movw	r24, r0
 3ec:	a3 9f       	mul	r26, r19
 3ee:	70 0d       	add	r23, r0
 3f0:	81 1d       	adc	r24, r1
 3f2:	11 24       	eor	r1, r1
 3f4:	91 1d       	adc	r25, r1
 3f6:	b2 9f       	mul	r27, r18
 3f8:	70 0d       	add	r23, r0
 3fa:	81 1d       	adc	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	91 1d       	adc	r25, r1
 400:	08 95       	ret

00000402 <__subsf3>:
 402:	50 58       	subi	r21, 0x80	; 128

00000404 <__addsf3>:
 404:	bb 27       	eor	r27, r27
 406:	aa 27       	eor	r26, r26
 408:	0e 94 19 02 	call	0x432	; 0x432 <__addsf3x>
 40c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_round>
 410:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_pscA>
 414:	38 f0       	brcs	.+14     	; 0x424 <__addsf3+0x20>
 416:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_pscB>
 41a:	20 f0       	brcs	.+8      	; 0x424 <__addsf3+0x20>
 41c:	39 f4       	brne	.+14     	; 0x42c <__addsf3+0x28>
 41e:	9f 3f       	cpi	r25, 0xFF	; 255
 420:	19 f4       	brne	.+6      	; 0x428 <__addsf3+0x24>
 422:	26 f4       	brtc	.+8      	; 0x42c <__addsf3+0x28>
 424:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>
 428:	0e f4       	brtc	.+2      	; 0x42c <__addsf3+0x28>
 42a:	e0 95       	com	r30
 42c:	e7 fb       	bst	r30, 7
 42e:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>

00000432 <__addsf3x>:
 432:	e9 2f       	mov	r30, r25
 434:	0e 94 02 03 	call	0x604	; 0x604 <__fp_split3>
 438:	58 f3       	brcs	.-42     	; 0x410 <__addsf3+0xc>
 43a:	ba 17       	cp	r27, r26
 43c:	62 07       	cpc	r22, r18
 43e:	73 07       	cpc	r23, r19
 440:	84 07       	cpc	r24, r20
 442:	95 07       	cpc	r25, r21
 444:	20 f0       	brcs	.+8      	; 0x44e <__addsf3x+0x1c>
 446:	79 f4       	brne	.+30     	; 0x466 <__addsf3x+0x34>
 448:	a6 f5       	brtc	.+104    	; 0x4b2 <__addsf3x+0x80>
 44a:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_zero>
 44e:	0e f4       	brtc	.+2      	; 0x452 <__addsf3x+0x20>
 450:	e0 95       	com	r30
 452:	0b 2e       	mov	r0, r27
 454:	ba 2f       	mov	r27, r26
 456:	a0 2d       	mov	r26, r0
 458:	0b 01       	movw	r0, r22
 45a:	b9 01       	movw	r22, r18
 45c:	90 01       	movw	r18, r0
 45e:	0c 01       	movw	r0, r24
 460:	ca 01       	movw	r24, r20
 462:	a0 01       	movw	r20, r0
 464:	11 24       	eor	r1, r1
 466:	ff 27       	eor	r31, r31
 468:	59 1b       	sub	r21, r25
 46a:	99 f0       	breq	.+38     	; 0x492 <__addsf3x+0x60>
 46c:	59 3f       	cpi	r21, 0xF9	; 249
 46e:	50 f4       	brcc	.+20     	; 0x484 <__addsf3x+0x52>
 470:	50 3e       	cpi	r21, 0xE0	; 224
 472:	68 f1       	brcs	.+90     	; 0x4ce <__addsf3x+0x9c>
 474:	1a 16       	cp	r1, r26
 476:	f0 40       	sbci	r31, 0x00	; 0
 478:	a2 2f       	mov	r26, r18
 47a:	23 2f       	mov	r18, r19
 47c:	34 2f       	mov	r19, r20
 47e:	44 27       	eor	r20, r20
 480:	58 5f       	subi	r21, 0xF8	; 248
 482:	f3 cf       	rjmp	.-26     	; 0x46a <__addsf3x+0x38>
 484:	46 95       	lsr	r20
 486:	37 95       	ror	r19
 488:	27 95       	ror	r18
 48a:	a7 95       	ror	r26
 48c:	f0 40       	sbci	r31, 0x00	; 0
 48e:	53 95       	inc	r21
 490:	c9 f7       	brne	.-14     	; 0x484 <__addsf3x+0x52>
 492:	7e f4       	brtc	.+30     	; 0x4b2 <__addsf3x+0x80>
 494:	1f 16       	cp	r1, r31
 496:	ba 0b       	sbc	r27, r26
 498:	62 0b       	sbc	r22, r18
 49a:	73 0b       	sbc	r23, r19
 49c:	84 0b       	sbc	r24, r20
 49e:	ba f0       	brmi	.+46     	; 0x4ce <__addsf3x+0x9c>
 4a0:	91 50       	subi	r25, 0x01	; 1
 4a2:	a1 f0       	breq	.+40     	; 0x4cc <__addsf3x+0x9a>
 4a4:	ff 0f       	add	r31, r31
 4a6:	bb 1f       	adc	r27, r27
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	c2 f7       	brpl	.-16     	; 0x4a0 <__addsf3x+0x6e>
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <__addsf3x+0x9c>
 4b2:	ba 0f       	add	r27, r26
 4b4:	62 1f       	adc	r22, r18
 4b6:	73 1f       	adc	r23, r19
 4b8:	84 1f       	adc	r24, r20
 4ba:	48 f4       	brcc	.+18     	; 0x4ce <__addsf3x+0x9c>
 4bc:	87 95       	ror	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b7 95       	ror	r27
 4c4:	f7 95       	ror	r31
 4c6:	9e 3f       	cpi	r25, 0xFE	; 254
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <__addsf3x+0x9a>
 4ca:	b0 cf       	rjmp	.-160    	; 0x42c <__addsf3+0x28>
 4cc:	93 95       	inc	r25
 4ce:	88 0f       	add	r24, r24
 4d0:	08 f0       	brcs	.+2      	; 0x4d4 <__addsf3x+0xa2>
 4d2:	99 27       	eor	r25, r25
 4d4:	ee 0f       	add	r30, r30
 4d6:	97 95       	ror	r25
 4d8:	87 95       	ror	r24
 4da:	08 95       	ret

000004dc <__fixunssfsi>:
 4dc:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_splitA>
 4e0:	88 f0       	brcs	.+34     	; 0x504 <__fixunssfsi+0x28>
 4e2:	9f 57       	subi	r25, 0x7F	; 127
 4e4:	98 f0       	brcs	.+38     	; 0x50c <__fixunssfsi+0x30>
 4e6:	b9 2f       	mov	r27, r25
 4e8:	99 27       	eor	r25, r25
 4ea:	b7 51       	subi	r27, 0x17	; 23
 4ec:	b0 f0       	brcs	.+44     	; 0x51a <__fixunssfsi+0x3e>
 4ee:	e1 f0       	breq	.+56     	; 0x528 <__fixunssfsi+0x4c>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	1a f0       	brmi	.+6      	; 0x500 <__fixunssfsi+0x24>
 4fa:	ba 95       	dec	r27
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__fixunssfsi+0x14>
 4fe:	14 c0       	rjmp	.+40     	; 0x528 <__fixunssfsi+0x4c>
 500:	b1 30       	cpi	r27, 0x01	; 1
 502:	91 f0       	breq	.+36     	; 0x528 <__fixunssfsi+0x4c>
 504:	0e 94 24 03 	call	0x648	; 0x648 <__fp_zero>
 508:	b1 e0       	ldi	r27, 0x01	; 1
 50a:	08 95       	ret
 50c:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_zero>
 510:	67 2f       	mov	r22, r23
 512:	78 2f       	mov	r23, r24
 514:	88 27       	eor	r24, r24
 516:	b8 5f       	subi	r27, 0xF8	; 248
 518:	39 f0       	breq	.+14     	; 0x528 <__fixunssfsi+0x4c>
 51a:	b9 3f       	cpi	r27, 0xF9	; 249
 51c:	cc f3       	brlt	.-14     	; 0x510 <__fixunssfsi+0x34>
 51e:	86 95       	lsr	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b3 95       	inc	r27
 526:	d9 f7       	brne	.-10     	; 0x51e <__fixunssfsi+0x42>
 528:	3e f4       	brtc	.+14     	; 0x538 <__fixunssfsi+0x5c>
 52a:	90 95       	com	r25
 52c:	80 95       	com	r24
 52e:	70 95       	com	r23
 530:	61 95       	neg	r22
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__floatunsisf>:
 53a:	e8 94       	clt
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__floatsisf+0x12>

0000053e <__floatsisf>:
 53e:	97 fb       	bst	r25, 7
 540:	3e f4       	brtc	.+14     	; 0x550 <__floatsisf+0x12>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	99 23       	and	r25, r25
 552:	a9 f0       	breq	.+42     	; 0x57e <__floatsisf+0x40>
 554:	f9 2f       	mov	r31, r25
 556:	96 e9       	ldi	r25, 0x96	; 150
 558:	bb 27       	eor	r27, r27
 55a:	93 95       	inc	r25
 55c:	f6 95       	lsr	r31
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f1 11       	cpse	r31, r1
 568:	f8 cf       	rjmp	.-16     	; 0x55a <__floatsisf+0x1c>
 56a:	fa f4       	brpl	.+62     	; 0x5aa <__floatsisf+0x6c>
 56c:	bb 0f       	add	r27, r27
 56e:	11 f4       	brne	.+4      	; 0x574 <__floatsisf+0x36>
 570:	60 ff       	sbrs	r22, 0
 572:	1b c0       	rjmp	.+54     	; 0x5aa <__floatsisf+0x6c>
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <__floatsisf+0x6c>
 57e:	88 23       	and	r24, r24
 580:	11 f0       	breq	.+4      	; 0x586 <__floatsisf+0x48>
 582:	96 e9       	ldi	r25, 0x96	; 150
 584:	11 c0       	rjmp	.+34     	; 0x5a8 <__floatsisf+0x6a>
 586:	77 23       	and	r23, r23
 588:	21 f0       	breq	.+8      	; 0x592 <__floatsisf+0x54>
 58a:	9e e8       	ldi	r25, 0x8E	; 142
 58c:	87 2f       	mov	r24, r23
 58e:	76 2f       	mov	r23, r22
 590:	05 c0       	rjmp	.+10     	; 0x59c <__floatsisf+0x5e>
 592:	66 23       	and	r22, r22
 594:	71 f0       	breq	.+28     	; 0x5b2 <__floatsisf+0x74>
 596:	96 e8       	ldi	r25, 0x86	; 134
 598:	86 2f       	mov	r24, r22
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	2a f0       	brmi	.+10     	; 0x5aa <__floatsisf+0x6c>
 5a0:	9a 95       	dec	r25
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	da f7       	brpl	.-10     	; 0x5a0 <__floatsisf+0x62>
 5aa:	88 0f       	add	r24, r24
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <__fp_inf>:
 5b4:	97 f9       	bld	r25, 7
 5b6:	9f 67       	ori	r25, 0x7F	; 127
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	08 95       	ret

000005c0 <__fp_nan>:
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	08 95       	ret

000005c6 <__fp_pscA>:
 5c6:	00 24       	eor	r0, r0
 5c8:	0a 94       	dec	r0
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	09 06       	cpc	r0, r25
 5d2:	08 95       	ret

000005d4 <__fp_pscB>:
 5d4:	00 24       	eor	r0, r0
 5d6:	0a 94       	dec	r0
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	14 06       	cpc	r1, r20
 5de:	05 06       	cpc	r0, r21
 5e0:	08 95       	ret

000005e2 <__fp_round>:
 5e2:	09 2e       	mov	r0, r25
 5e4:	03 94       	inc	r0
 5e6:	00 0c       	add	r0, r0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0xc>
 5ea:	88 23       	and	r24, r24
 5ec:	52 f0       	brmi	.+20     	; 0x602 <__fp_round+0x20>
 5ee:	bb 0f       	add	r27, r27
 5f0:	40 f4       	brcc	.+16     	; 0x602 <__fp_round+0x20>
 5f2:	bf 2b       	or	r27, r31
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0x18>
 5f6:	60 ff       	sbrs	r22, 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__fp_round+0x20>
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	08 95       	ret

00000604 <__fp_split3>:
 604:	57 fd       	sbrc	r21, 7
 606:	90 58       	subi	r25, 0x80	; 128
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	59 f0       	breq	.+22     	; 0x624 <__fp_splitA+0x10>
 60e:	5f 3f       	cpi	r21, 0xFF	; 255
 610:	71 f0       	breq	.+28     	; 0x62e <__fp_splitA+0x1a>
 612:	47 95       	ror	r20

00000614 <__fp_splitA>:
 614:	88 0f       	add	r24, r24
 616:	97 fb       	bst	r25, 7
 618:	99 1f       	adc	r25, r25
 61a:	61 f0       	breq	.+24     	; 0x634 <__fp_splitA+0x20>
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	79 f0       	breq	.+30     	; 0x63e <__fp_splitA+0x2a>
 620:	87 95       	ror	r24
 622:	08 95       	ret
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	55 1f       	adc	r21, r21
 62c:	f2 cf       	rjmp	.-28     	; 0x612 <__fp_split3+0xe>
 62e:	46 95       	lsr	r20
 630:	f1 df       	rcall	.-30     	; 0x614 <__fp_splitA>
 632:	08 c0       	rjmp	.+16     	; 0x644 <__fp_splitA+0x30>
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	99 1f       	adc	r25, r25
 63c:	f1 cf       	rjmp	.-30     	; 0x620 <__fp_splitA+0xc>
 63e:	86 95       	lsr	r24
 640:	71 05       	cpc	r23, r1
 642:	61 05       	cpc	r22, r1
 644:	08 94       	sec
 646:	08 95       	ret

00000648 <__fp_zero>:
 648:	e8 94       	clt

0000064a <__fp_szero>:
 64a:	bb 27       	eor	r27, r27
 64c:	66 27       	eor	r22, r22
 64e:	77 27       	eor	r23, r23
 650:	cb 01       	movw	r24, r22
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <pow>:
 656:	fa 01       	movw	r30, r20
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	30 96       	adiw	r30, 0x00	; 0
 65e:	21 05       	cpc	r18, r1
 660:	31 05       	cpc	r19, r1
 662:	a1 f1       	breq	.+104    	; 0x6cc <pow+0x76>
 664:	61 15       	cp	r22, r1
 666:	71 05       	cpc	r23, r1
 668:	61 f4       	brne	.+24     	; 0x682 <pow+0x2c>
 66a:	80 38       	cpi	r24, 0x80	; 128
 66c:	bf e3       	ldi	r27, 0x3F	; 63
 66e:	9b 07       	cpc	r25, r27
 670:	49 f1       	breq	.+82     	; 0x6c4 <pow+0x6e>
 672:	68 94       	set
 674:	90 38       	cpi	r25, 0x80	; 128
 676:	81 05       	cpc	r24, r1
 678:	61 f0       	breq	.+24     	; 0x692 <pow+0x3c>
 67a:	80 38       	cpi	r24, 0x80	; 128
 67c:	bf ef       	ldi	r27, 0xFF	; 255
 67e:	9b 07       	cpc	r25, r27
 680:	41 f0       	breq	.+16     	; 0x692 <pow+0x3c>
 682:	99 23       	and	r25, r25
 684:	4a f5       	brpl	.+82     	; 0x6d8 <pow+0x82>
 686:	ff 3f       	cpi	r31, 0xFF	; 255
 688:	e1 05       	cpc	r30, r1
 68a:	31 05       	cpc	r19, r1
 68c:	21 05       	cpc	r18, r1
 68e:	19 f1       	breq	.+70     	; 0x6d6 <pow+0x80>
 690:	e8 94       	clt
 692:	08 94       	sec
 694:	e7 95       	ror	r30
 696:	d9 01       	movw	r26, r18
 698:	aa 23       	and	r26, r26
 69a:	29 f4       	brne	.+10     	; 0x6a6 <pow+0x50>
 69c:	ab 2f       	mov	r26, r27
 69e:	be 2f       	mov	r27, r30
 6a0:	f8 5f       	subi	r31, 0xF8	; 248
 6a2:	d0 f3       	brcs	.-12     	; 0x698 <pow+0x42>
 6a4:	10 c0       	rjmp	.+32     	; 0x6c6 <pow+0x70>
 6a6:	ff 5f       	subi	r31, 0xFF	; 255
 6a8:	70 f4       	brcc	.+28     	; 0x6c6 <pow+0x70>
 6aa:	a6 95       	lsr	r26
 6ac:	e0 f7       	brcc	.-8      	; 0x6a6 <pow+0x50>
 6ae:	f7 39       	cpi	r31, 0x97	; 151
 6b0:	50 f0       	brcs	.+20     	; 0x6c6 <pow+0x70>
 6b2:	19 f0       	breq	.+6      	; 0x6ba <pow+0x64>
 6b4:	ff 3a       	cpi	r31, 0xAF	; 175
 6b6:	38 f4       	brcc	.+14     	; 0x6c6 <pow+0x70>
 6b8:	9f 77       	andi	r25, 0x7F	; 127
 6ba:	9f 93       	push	r25
 6bc:	0d d0       	rcall	.+26     	; 0x6d8 <pow+0x82>
 6be:	0f 90       	pop	r0
 6c0:	07 fc       	sbrc	r0, 7
 6c2:	90 58       	subi	r25, 0x80	; 128
 6c4:	08 95       	ret
 6c6:	46 f0       	brts	.+16     	; 0x6d8 <pow+0x82>
 6c8:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	80 e8       	ldi	r24, 0x80	; 128
 6d2:	9f e3       	ldi	r25, 0x3F	; 63
 6d4:	08 95       	ret
 6d6:	4f e7       	ldi	r20, 0x7F	; 127
 6d8:	9f 77       	andi	r25, 0x7F	; 127
 6da:	5f 93       	push	r21
 6dc:	4f 93       	push	r20
 6de:	3f 93       	push	r19
 6e0:	2f 93       	push	r18
 6e2:	0e 94 26 04 	call	0x84c	; 0x84c <log>
 6e6:	2f 91       	pop	r18
 6e8:	3f 91       	pop	r19
 6ea:	4f 91       	pop	r20
 6ec:	5f 91       	pop	r21
 6ee:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 6f2:	0c 94 83 03 	jmp	0x706	; 0x706 <exp>
 6f6:	29 f4       	brne	.+10     	; 0x702 <pow+0xac>
 6f8:	16 f0       	brts	.+4      	; 0x6fe <pow+0xa8>
 6fa:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 6fe:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_zero>
 702:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>

00000706 <exp>:
 706:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_splitA>
 70a:	a8 f3       	brcs	.-22     	; 0x6f6 <pow+0xa0>
 70c:	96 38       	cpi	r25, 0x86	; 134
 70e:	a0 f7       	brcc	.-24     	; 0x6f8 <pow+0xa2>
 710:	07 f8       	bld	r0, 7
 712:	0f 92       	push	r0
 714:	e8 94       	clt
 716:	2b e3       	ldi	r18, 0x3B	; 59
 718:	3a ea       	ldi	r19, 0xAA	; 170
 71a:	48 eb       	ldi	r20, 0xB8	; 184
 71c:	5f e7       	ldi	r21, 0x7F	; 127
 71e:	0e 94 b8 04 	call	0x970	; 0x970 <__mulsf3_pse>
 722:	0f 92       	push	r0
 724:	0f 92       	push	r0
 726:	0f 92       	push	r0
 728:	4d b7       	in	r20, 0x3d	; 61
 72a:	5e b7       	in	r21, 0x3e	; 62
 72c:	0f 92       	push	r0
 72e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <modf>
 732:	ec e8       	ldi	r30, 0x8C	; 140
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_powser>
 73a:	4f 91       	pop	r20
 73c:	5f 91       	pop	r21
 73e:	ef 91       	pop	r30
 740:	ff 91       	pop	r31
 742:	e5 95       	asr	r30
 744:	ee 1f       	adc	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	49 f0       	breq	.+18     	; 0x75c <exp+0x56>
 74a:	fe 57       	subi	r31, 0x7E	; 126
 74c:	e0 68       	ori	r30, 0x80	; 128
 74e:	44 27       	eor	r20, r20
 750:	ee 0f       	add	r30, r30
 752:	44 1f       	adc	r20, r20
 754:	fa 95       	dec	r31
 756:	e1 f7       	brne	.-8      	; 0x750 <exp+0x4a>
 758:	41 95       	neg	r20
 75a:	55 0b       	sbc	r21, r21
 75c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <ldexp>
 760:	0f 90       	pop	r0
 762:	07 fe       	sbrs	r0, 7
 764:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <inverse>
 768:	08 95       	ret

0000076a <__fp_powser>:
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	1f 93       	push	r17
 770:	0f 93       	push	r16
 772:	ff 92       	push	r15
 774:	ef 92       	push	r14
 776:	df 92       	push	r13
 778:	7b 01       	movw	r14, r22
 77a:	8c 01       	movw	r16, r24
 77c:	68 94       	set
 77e:	06 c0       	rjmp	.+12     	; 0x78c <__fp_powser+0x22>
 780:	da 2e       	mov	r13, r26
 782:	ef 01       	movw	r28, r30
 784:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 788:	fe 01       	movw	r30, r28
 78a:	e8 94       	clt
 78c:	a5 91       	lpm	r26, Z+
 78e:	25 91       	lpm	r18, Z+
 790:	35 91       	lpm	r19, Z+
 792:	45 91       	lpm	r20, Z+
 794:	55 91       	lpm	r21, Z+
 796:	a6 f3       	brts	.-24     	; 0x780 <__fp_powser+0x16>
 798:	ef 01       	movw	r28, r30
 79a:	0e 94 19 02 	call	0x432	; 0x432 <__addsf3x>
 79e:	fe 01       	movw	r30, r28
 7a0:	97 01       	movw	r18, r14
 7a2:	a8 01       	movw	r20, r16
 7a4:	da 94       	dec	r13
 7a6:	69 f7       	brne	.-38     	; 0x782 <__fp_powser+0x18>
 7a8:	df 90       	pop	r13
 7aa:	ef 90       	pop	r14
 7ac:	ff 90       	pop	r15
 7ae:	0f 91       	pop	r16
 7b0:	1f 91       	pop	r17
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <inverse>:
 7b8:	9b 01       	movw	r18, r22
 7ba:	ac 01       	movw	r20, r24
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	80 e8       	ldi	r24, 0x80	; 128
 7c2:	9f e3       	ldi	r25, 0x3F	; 63
 7c4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__divsf3>
 7c8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 7cc:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_mpack>

000007d0 <ldexp>:
 7d0:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_splitA>
 7d4:	d8 f3       	brcs	.-10     	; 0x7cc <inverse+0x14>
 7d6:	99 23       	and	r25, r25
 7d8:	c9 f3       	breq	.-14     	; 0x7cc <inverse+0x14>
 7da:	94 0f       	add	r25, r20
 7dc:	51 1d       	adc	r21, r1
 7de:	a3 f3       	brvs	.-24     	; 0x7c8 <inverse+0x10>
 7e0:	91 50       	subi	r25, 0x01	; 1
 7e2:	50 40       	sbci	r21, 0x00	; 0
 7e4:	94 f0       	brlt	.+36     	; 0x80a <ldexp+0x3a>
 7e6:	59 f0       	breq	.+22     	; 0x7fe <ldexp+0x2e>
 7e8:	88 23       	and	r24, r24
 7ea:	32 f0       	brmi	.+12     	; 0x7f8 <ldexp+0x28>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	91 50       	subi	r25, 0x01	; 1
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	c1 f7       	brne	.-16     	; 0x7e8 <ldexp+0x18>
 7f8:	9e 3f       	cpi	r25, 0xFE	; 254
 7fa:	51 05       	cpc	r21, r1
 7fc:	2c f7       	brge	.-54     	; 0x7c8 <inverse+0x10>
 7fe:	88 0f       	add	r24, r24
 800:	91 1d       	adc	r25, r1
 802:	96 95       	lsr	r25
 804:	87 95       	ror	r24
 806:	97 f9       	bld	r25, 7
 808:	08 95       	ret
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	ac f0       	brlt	.+42     	; 0x838 <ldexp+0x68>
 80e:	98 3e       	cpi	r25, 0xE8	; 232
 810:	9c f0       	brlt	.+38     	; 0x838 <ldexp+0x68>
 812:	bb 27       	eor	r27, r27
 814:	86 95       	lsr	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	08 f4       	brcc	.+2      	; 0x820 <ldexp+0x50>
 81e:	b1 60       	ori	r27, 0x01	; 1
 820:	93 95       	inc	r25
 822:	c1 f7       	brne	.-16     	; 0x814 <ldexp+0x44>
 824:	bb 0f       	add	r27, r27
 826:	58 f7       	brcc	.-42     	; 0x7fe <ldexp+0x2e>
 828:	11 f4       	brne	.+4      	; 0x82e <ldexp+0x5e>
 82a:	60 ff       	sbrs	r22, 0
 82c:	e8 cf       	rjmp	.-48     	; 0x7fe <ldexp+0x2e>
 82e:	6f 5f       	subi	r22, 0xFF	; 255
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	e3 cf       	rjmp	.-58     	; 0x7fe <ldexp+0x2e>
 838:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_szero>
 83c:	16 f0       	brts	.+4      	; 0x842 <ldexp+0x72>
 83e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_mpack>
 842:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>
 846:	68 94       	set
 848:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>

0000084c <log>:
 84c:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_splitA>
 850:	a8 f3       	brcs	.-22     	; 0x83c <ldexp+0x6c>
 852:	99 23       	and	r25, r25
 854:	c1 f3       	breq	.-16     	; 0x846 <ldexp+0x76>
 856:	ae f3       	brts	.-22     	; 0x842 <ldexp+0x72>
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	1f 93       	push	r17
 85e:	0f 93       	push	r16
 860:	ff 92       	push	r15
 862:	c9 2f       	mov	r28, r25
 864:	dd 27       	eor	r29, r29
 866:	88 23       	and	r24, r24
 868:	2a f0       	brmi	.+10     	; 0x874 <log+0x28>
 86a:	21 97       	sbiw	r28, 0x01	; 1
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <log+0x1e>
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e8       	ldi	r20, 0x80	; 128
 87a:	5f eb       	ldi	r21, 0xBF	; 191
 87c:	9f e3       	ldi	r25, 0x3F	; 63
 87e:	88 39       	cpi	r24, 0x98	; 152
 880:	20 f0       	brcs	.+8      	; 0x88a <log+0x3e>
 882:	80 3e       	cpi	r24, 0xE0	; 224
 884:	38 f0       	brcs	.+14     	; 0x894 <log+0x48>
 886:	21 96       	adiw	r28, 0x01	; 1
 888:	8f 77       	andi	r24, 0x7F	; 127
 88a:	0e 94 02 02 	call	0x404	; 0x404 <__addsf3>
 88e:	e4 eb       	ldi	r30, 0xB4	; 180
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	04 c0       	rjmp	.+8      	; 0x89c <log+0x50>
 894:	0e 94 02 02 	call	0x404	; 0x404 <__addsf3>
 898:	e1 ee       	ldi	r30, 0xE1	; 225
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_powser>
 8a0:	8b 01       	movw	r16, r22
 8a2:	be 01       	movw	r22, r28
 8a4:	ec 01       	movw	r28, r24
 8a6:	fb 2e       	mov	r15, r27
 8a8:	6f 57       	subi	r22, 0x7F	; 127
 8aa:	71 09       	sbc	r23, r1
 8ac:	75 95       	asr	r23
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 0b       	sbc	r24, r24
 8b2:	99 0b       	sbc	r25, r25
 8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <__floatsisf>
 8b8:	28 e1       	ldi	r18, 0x18	; 24
 8ba:	32 e7       	ldi	r19, 0x72	; 114
 8bc:	41 e3       	ldi	r20, 0x31	; 49
 8be:	5f e3       	ldi	r21, 0x3F	; 63
 8c0:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 8c4:	af 2d       	mov	r26, r15
 8c6:	98 01       	movw	r18, r16
 8c8:	ae 01       	movw	r20, r28
 8ca:	ff 90       	pop	r15
 8cc:	0f 91       	pop	r16
 8ce:	1f 91       	pop	r17
 8d0:	cf 91       	pop	r28
 8d2:	df 91       	pop	r29
 8d4:	0e 94 19 02 	call	0x432	; 0x432 <__addsf3x>
 8d8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_round>

000008dc <modf>:
 8dc:	fa 01       	movw	r30, r20
 8de:	dc 01       	movw	r26, r24
 8e0:	aa 0f       	add	r26, r26
 8e2:	bb 1f       	adc	r27, r27
 8e4:	9b 01       	movw	r18, r22
 8e6:	ac 01       	movw	r20, r24
 8e8:	bf 57       	subi	r27, 0x7F	; 127
 8ea:	28 f4       	brcc	.+10     	; 0x8f6 <modf+0x1a>
 8ec:	22 27       	eor	r18, r18
 8ee:	33 27       	eor	r19, r19
 8f0:	44 27       	eor	r20, r20
 8f2:	50 78       	andi	r21, 0x80	; 128
 8f4:	20 c0       	rjmp	.+64     	; 0x936 <modf+0x5a>
 8f6:	b7 51       	subi	r27, 0x17	; 23
 8f8:	90 f4       	brcc	.+36     	; 0x91e <modf+0x42>
 8fa:	ab 2f       	mov	r26, r27
 8fc:	00 24       	eor	r0, r0
 8fe:	46 95       	lsr	r20
 900:	37 95       	ror	r19
 902:	27 95       	ror	r18
 904:	01 1c       	adc	r0, r1
 906:	a3 95       	inc	r26
 908:	d2 f3       	brmi	.-12     	; 0x8fe <modf+0x22>
 90a:	00 20       	and	r0, r0
 90c:	71 f0       	breq	.+28     	; 0x92a <modf+0x4e>
 90e:	22 0f       	add	r18, r18
 910:	33 1f       	adc	r19, r19
 912:	44 1f       	adc	r20, r20
 914:	b3 95       	inc	r27
 916:	da f3       	brmi	.-10     	; 0x90e <modf+0x32>
 918:	0e d0       	rcall	.+28     	; 0x936 <modf+0x5a>
 91a:	0c 94 01 02 	jmp	0x402	; 0x402 <__subsf3>
 91e:	61 30       	cpi	r22, 0x01	; 1
 920:	71 05       	cpc	r23, r1
 922:	a0 e8       	ldi	r26, 0x80	; 128
 924:	8a 07       	cpc	r24, r26
 926:	b9 46       	sbci	r27, 0x69	; 105
 928:	30 f4       	brcc	.+12     	; 0x936 <modf+0x5a>
 92a:	9b 01       	movw	r18, r22
 92c:	ac 01       	movw	r20, r24
 92e:	66 27       	eor	r22, r22
 930:	77 27       	eor	r23, r23
 932:	88 27       	eor	r24, r24
 934:	90 78       	andi	r25, 0x80	; 128
 936:	30 96       	adiw	r30, 0x00	; 0
 938:	21 f0       	breq	.+8      	; 0x942 <modf+0x66>
 93a:	20 83       	st	Z, r18
 93c:	31 83       	std	Z+1, r19	; 0x01
 93e:	42 83       	std	Z+2, r20	; 0x02
 940:	53 83       	std	Z+3, r21	; 0x03
 942:	08 95       	ret

00000944 <__mulsf3>:
 944:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 948:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_round>
 94c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_pscA>
 950:	38 f0       	brcs	.+14     	; 0x960 <__mulsf3+0x1c>
 952:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_pscB>
 956:	20 f0       	brcs	.+8      	; 0x960 <__mulsf3+0x1c>
 958:	95 23       	and	r25, r21
 95a:	11 f0       	breq	.+4      	; 0x960 <__mulsf3+0x1c>
 95c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 960:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>
 964:	11 24       	eor	r1, r1
 966:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_szero>

0000096a <__mulsf3x>:
 96a:	0e 94 02 03 	call	0x604	; 0x604 <__fp_split3>
 96e:	70 f3       	brcs	.-36     	; 0x94c <__mulsf3+0x8>

00000970 <__mulsf3_pse>:
 970:	95 9f       	mul	r25, r21
 972:	c1 f3       	breq	.-16     	; 0x964 <__mulsf3+0x20>
 974:	95 0f       	add	r25, r21
 976:	50 e0       	ldi	r21, 0x00	; 0
 978:	55 1f       	adc	r21, r21
 97a:	62 9f       	mul	r22, r18
 97c:	f0 01       	movw	r30, r0
 97e:	72 9f       	mul	r23, r18
 980:	bb 27       	eor	r27, r27
 982:	f0 0d       	add	r31, r0
 984:	b1 1d       	adc	r27, r1
 986:	63 9f       	mul	r22, r19
 988:	aa 27       	eor	r26, r26
 98a:	f0 0d       	add	r31, r0
 98c:	b1 1d       	adc	r27, r1
 98e:	aa 1f       	adc	r26, r26
 990:	64 9f       	mul	r22, r20
 992:	66 27       	eor	r22, r22
 994:	b0 0d       	add	r27, r0
 996:	a1 1d       	adc	r26, r1
 998:	66 1f       	adc	r22, r22
 99a:	82 9f       	mul	r24, r18
 99c:	22 27       	eor	r18, r18
 99e:	b0 0d       	add	r27, r0
 9a0:	a1 1d       	adc	r26, r1
 9a2:	62 1f       	adc	r22, r18
 9a4:	73 9f       	mul	r23, r19
 9a6:	b0 0d       	add	r27, r0
 9a8:	a1 1d       	adc	r26, r1
 9aa:	62 1f       	adc	r22, r18
 9ac:	83 9f       	mul	r24, r19
 9ae:	a0 0d       	add	r26, r0
 9b0:	61 1d       	adc	r22, r1
 9b2:	22 1f       	adc	r18, r18
 9b4:	74 9f       	mul	r23, r20
 9b6:	33 27       	eor	r19, r19
 9b8:	a0 0d       	add	r26, r0
 9ba:	61 1d       	adc	r22, r1
 9bc:	23 1f       	adc	r18, r19
 9be:	84 9f       	mul	r24, r20
 9c0:	60 0d       	add	r22, r0
 9c2:	21 1d       	adc	r18, r1
 9c4:	82 2f       	mov	r24, r18
 9c6:	76 2f       	mov	r23, r22
 9c8:	6a 2f       	mov	r22, r26
 9ca:	11 24       	eor	r1, r1
 9cc:	9f 57       	subi	r25, 0x7F	; 127
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	9a f0       	brmi	.+38     	; 0x9f8 <__mulsf3_pse+0x88>
 9d2:	f1 f0       	breq	.+60     	; 0xa10 <__mulsf3_pse+0xa0>
 9d4:	88 23       	and	r24, r24
 9d6:	4a f0       	brmi	.+18     	; 0x9ea <__mulsf3_pse+0x7a>
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__mulsf3_pse+0x64>
 9ea:	9e 3f       	cpi	r25, 0xFE	; 254
 9ec:	51 05       	cpc	r21, r1
 9ee:	80 f0       	brcs	.+32     	; 0xa10 <__mulsf3_pse+0xa0>
 9f0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 9f4:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_szero>
 9f8:	5f 3f       	cpi	r21, 0xFF	; 255
 9fa:	e4 f3       	brlt	.-8      	; 0x9f4 <__mulsf3_pse+0x84>
 9fc:	98 3e       	cpi	r25, 0xE8	; 232
 9fe:	d4 f3       	brlt	.-12     	; 0x9f4 <__mulsf3_pse+0x84>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	e7 95       	ror	r30
 a0c:	9f 5f       	subi	r25, 0xFF	; 255
 a0e:	c1 f7       	brne	.-16     	; 0xa00 <__mulsf3_pse+0x90>
 a10:	fe 2b       	or	r31, r30
 a12:	88 0f       	add	r24, r24
 a14:	91 1d       	adc	r25, r1
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__divsf3>:
 a1e:	0e 94 23 05 	call	0xa46	; 0xa46 <__divsf3x>
 a22:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_round>
 a26:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_pscB>
 a2a:	58 f0       	brcs	.+22     	; 0xa42 <__divsf3+0x24>
 a2c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_pscA>
 a30:	40 f0       	brcs	.+16     	; 0xa42 <__divsf3+0x24>
 a32:	29 f4       	brne	.+10     	; 0xa3e <__divsf3+0x20>
 a34:	5f 3f       	cpi	r21, 0xFF	; 255
 a36:	29 f0       	breq	.+10     	; 0xa42 <__divsf3+0x24>
 a38:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 a3c:	51 11       	cpse	r21, r1
 a3e:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_szero>
 a42:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__fp_nan>

00000a46 <__divsf3x>:
 a46:	0e 94 02 03 	call	0x604	; 0x604 <__fp_split3>
 a4a:	68 f3       	brcs	.-38     	; 0xa26 <__divsf3+0x8>

00000a4c <__divsf3_pse>:
 a4c:	99 23       	and	r25, r25
 a4e:	b1 f3       	breq	.-20     	; 0xa3c <__divsf3+0x1e>
 a50:	55 23       	and	r21, r21
 a52:	91 f3       	breq	.-28     	; 0xa38 <__divsf3+0x1a>
 a54:	95 1b       	sub	r25, r21
 a56:	55 0b       	sbc	r21, r21
 a58:	bb 27       	eor	r27, r27
 a5a:	aa 27       	eor	r26, r26
 a5c:	62 17       	cp	r22, r18
 a5e:	73 07       	cpc	r23, r19
 a60:	84 07       	cpc	r24, r20
 a62:	38 f0       	brcs	.+14     	; 0xa72 <__divsf3_pse+0x26>
 a64:	9f 5f       	subi	r25, 0xFF	; 255
 a66:	5f 4f       	sbci	r21, 0xFF	; 255
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	44 1f       	adc	r20, r20
 a6e:	aa 1f       	adc	r26, r26
 a70:	a9 f3       	breq	.-22     	; 0xa5c <__divsf3_pse+0x10>
 a72:	35 d0       	rcall	.+106    	; 0xade <__divsf3_pse+0x92>
 a74:	0e 2e       	mov	r0, r30
 a76:	3a f0       	brmi	.+14     	; 0xa86 <__divsf3_pse+0x3a>
 a78:	e0 e8       	ldi	r30, 0x80	; 128
 a7a:	32 d0       	rcall	.+100    	; 0xae0 <__divsf3_pse+0x94>
 a7c:	91 50       	subi	r25, 0x01	; 1
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	e6 95       	lsr	r30
 a82:	00 1c       	adc	r0, r0
 a84:	ca f7       	brpl	.-14     	; 0xa78 <__divsf3_pse+0x2c>
 a86:	2b d0       	rcall	.+86     	; 0xade <__divsf3_pse+0x92>
 a88:	fe 2f       	mov	r31, r30
 a8a:	29 d0       	rcall	.+82     	; 0xade <__divsf3_pse+0x92>
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	bb 1f       	adc	r27, r27
 a94:	26 17       	cp	r18, r22
 a96:	37 07       	cpc	r19, r23
 a98:	48 07       	cpc	r20, r24
 a9a:	ab 07       	cpc	r26, r27
 a9c:	b0 e8       	ldi	r27, 0x80	; 128
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__divsf3_pse+0x56>
 aa0:	bb 0b       	sbc	r27, r27
 aa2:	80 2d       	mov	r24, r0
 aa4:	bf 01       	movw	r22, r30
 aa6:	ff 27       	eor	r31, r31
 aa8:	93 58       	subi	r25, 0x83	; 131
 aaa:	5f 4f       	sbci	r21, 0xFF	; 255
 aac:	3a f0       	brmi	.+14     	; 0xabc <__divsf3_pse+0x70>
 aae:	9e 3f       	cpi	r25, 0xFE	; 254
 ab0:	51 05       	cpc	r21, r1
 ab2:	78 f0       	brcs	.+30     	; 0xad2 <__divsf3_pse+0x86>
 ab4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_inf>
 ab8:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_szero>
 abc:	5f 3f       	cpi	r21, 0xFF	; 255
 abe:	e4 f3       	brlt	.-8      	; 0xab8 <__divsf3_pse+0x6c>
 ac0:	98 3e       	cpi	r25, 0xE8	; 232
 ac2:	d4 f3       	brlt	.-12     	; 0xab8 <__divsf3_pse+0x6c>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b7 95       	ror	r27
 acc:	f7 95       	ror	r31
 ace:	9f 5f       	subi	r25, 0xFF	; 255
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__divsf3_pse+0x78>
 ad2:	88 0f       	add	r24, r24
 ad4:	91 1d       	adc	r25, r1
 ad6:	96 95       	lsr	r25
 ad8:	87 95       	ror	r24
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret
 ade:	e1 e0       	ldi	r30, 0x01	; 1
 ae0:	66 0f       	add	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	bb 1f       	adc	r27, r27
 ae8:	62 17       	cp	r22, r18
 aea:	73 07       	cpc	r23, r19
 aec:	84 07       	cpc	r24, r20
 aee:	ba 07       	cpc	r27, r26
 af0:	20 f0       	brcs	.+8      	; 0xafa <__divsf3_pse+0xae>
 af2:	62 1b       	sub	r22, r18
 af4:	73 0b       	sbc	r23, r19
 af6:	84 0b       	sbc	r24, r20
 af8:	ba 0b       	sbc	r27, r26
 afa:	ee 1f       	adc	r30, r30
 afc:	88 f7       	brcc	.-30     	; 0xae0 <__divsf3_pse+0x94>
 afe:	e0 95       	com	r30
 b00:	08 95       	ret

00000b02 <__fp_mpack>:
 b02:	9f 3f       	cpi	r25, 0xFF	; 255
 b04:	31 f0       	breq	.+12     	; 0xb12 <__fp_mpack_finite+0xc>

00000b06 <__fp_mpack_finite>:
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	20 f4       	brcc	.+8      	; 0xb12 <__fp_mpack_finite+0xc>
 b0a:	87 95       	ror	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	b7 95       	ror	r27
 b12:	88 0f       	add	r24, r24
 b14:	91 1d       	adc	r25, r1
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
