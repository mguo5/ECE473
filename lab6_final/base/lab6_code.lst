
lab6_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000021ba  0000224e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  0080014e  0080014e  0000229c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a06  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000132f  00000000  00000000  00005dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d3d  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00008e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd2  00000000  00000000  00009454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002597  00000000  00000000  0000a026  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_14>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_21>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	db 0b       	sbc	r29, r27
      8e:	b2 0b       	sbc	r27, r18
      90:	b2 0b       	sbc	r27, r18
      92:	b2 0b       	sbc	r27, r18
      94:	b2 0b       	sbc	r27, r18
      96:	b2 0b       	sbc	r27, r18
      98:	b2 0b       	sbc	r27, r18
      9a:	b2 0b       	sbc	r27, r18
      9c:	db 0b       	sbc	r29, r27
      9e:	b2 0b       	sbc	r27, r18
      a0:	b2 0b       	sbc	r27, r18
      a2:	b2 0b       	sbc	r27, r18
      a4:	b2 0b       	sbc	r27, r18
      a6:	b2 0b       	sbc	r27, r18
      a8:	b2 0b       	sbc	r27, r18
      aa:	b2 0b       	sbc	r27, r18
      ac:	e5 0b       	sbc	r30, r21
      ae:	b2 0b       	sbc	r27, r18
      b0:	b2 0b       	sbc	r27, r18
      b2:	b2 0b       	sbc	r27, r18
      b4:	b2 0b       	sbc	r27, r18
      b6:	b2 0b       	sbc	r27, r18
      b8:	b2 0b       	sbc	r27, r18
      ba:	b2 0b       	sbc	r27, r18
      bc:	b2 0b       	sbc	r27, r18
      be:	b2 0b       	sbc	r27, r18
      c0:	b2 0b       	sbc	r27, r18
      c2:	b2 0b       	sbc	r27, r18
      c4:	b2 0b       	sbc	r27, r18
      c6:	b2 0b       	sbc	r27, r18
      c8:	b2 0b       	sbc	r27, r18
      ca:	b2 0b       	sbc	r27, r18
      cc:	e5 0b       	sbc	r30, r21
      ce:	b2 0b       	sbc	r27, r18
      d0:	b2 0b       	sbc	r27, r18
      d2:	b2 0b       	sbc	r27, r18
      d4:	b2 0b       	sbc	r27, r18
      d6:	b2 0b       	sbc	r27, r18
      d8:	b2 0b       	sbc	r27, r18
      da:	b2 0b       	sbc	r27, r18
      dc:	b2 0b       	sbc	r27, r18
      de:	b2 0b       	sbc	r27, r18
      e0:	b2 0b       	sbc	r27, r18
      e2:	b2 0b       	sbc	r27, r18
      e4:	b2 0b       	sbc	r27, r18
      e6:	b2 0b       	sbc	r27, r18
      e8:	b2 0b       	sbc	r27, r18
      ea:	b2 0b       	sbc	r27, r18
      ec:	fc 0b       	sbc	r31, r28
      ee:	b2 0b       	sbc	r27, r18
      f0:	b2 0b       	sbc	r27, r18
      f2:	b2 0b       	sbc	r27, r18
      f4:	b2 0b       	sbc	r27, r18
      f6:	b2 0b       	sbc	r27, r18
      f8:	b2 0b       	sbc	r27, r18
      fa:	b2 0b       	sbc	r27, r18
      fc:	00 0c       	add	r0, r0
      fe:	b2 0b       	sbc	r27, r18
     100:	b2 0b       	sbc	r27, r18
     102:	b2 0b       	sbc	r27, r18
     104:	b2 0b       	sbc	r27, r18
     106:	b2 0b       	sbc	r27, r18
     108:	b2 0b       	sbc	r27, r18
     10a:	b2 0b       	sbc	r27, r18
     10c:	b2 0b       	sbc	r27, r18
     10e:	b2 0b       	sbc	r27, r18
     110:	b2 0b       	sbc	r27, r18
     112:	b2 0b       	sbc	r27, r18
     114:	b2 0b       	sbc	r27, r18
     116:	b2 0b       	sbc	r27, r18
     118:	b2 0b       	sbc	r27, r18
     11a:	b2 0b       	sbc	r27, r18
     11c:	0e 0c       	add	r0, r14
     11e:	b2 0b       	sbc	r27, r18
     120:	b2 0b       	sbc	r27, r18
     122:	b2 0b       	sbc	r27, r18
     124:	b2 0b       	sbc	r27, r18
     126:	b2 0b       	sbc	r27, r18
     128:	b2 0b       	sbc	r27, r18
     12a:	b2 0b       	sbc	r27, r18
     12c:	cc 0b       	sbc	r28, r28

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ea eb       	ldi	r30, 0xBA	; 186
     142:	f1 e2       	ldi	r31, 0x21	; 33
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ae 34       	cpi	r26, 0x4E	; 78
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	ae e4       	ldi	r26, 0x4E	; 78
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	af 35       	cpi	r26, 0x5F	; 95
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <main>
     168:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
     170:	8c e2       	ldi	r24, 0x2C	; 44
     172:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
     176:	89 e0       	ldi	r24, 0x09	; 9
     178:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
     17c:	82 e1       	ldi	r24, 0x12	; 18
     17e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
     182:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour_count>
     186:	8d 30       	cpi	r24, 0x0D	; 13
     188:	18 f0       	brcs	.+6      	; 0x190 <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <pm_flag>
     190:	08 95       	ret

00000192 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
     192:	87 b3       	in	r24, 0x17	; 23
     194:	87 60       	ori	r24, 0x07	; 7
     196:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
     19c:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
     19e:	80 e5       	ldi	r24, 0x50	; 80
     1a0:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     1a6:	80 b7       	in	r24, 0x30	; 48
     1a8:	88 60       	ori	r24, 0x08	; 8
     1aa:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     1ac:	87 b7       	in	r24, 0x37	; 55
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     1b2:	83 b7       	in	r24, 0x33	; 51
     1b4:	81 60       	ori	r24, 0x01	; 1
     1b6:	83 bf       	out	0x33, r24	; 51

	//enable fast PWM mode for TC2 for the seven segment adjust
	//prescale of 8
	//clear bit during output compare
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << CS20) | (0 << CS21) | (0 << CS22);
     1b8:	85 b5       	in	r24, 0x25	; 37
     1ba:	89 66       	ori	r24, 0x69	; 105
     1bc:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;				//set TCNT1 to obtain approximately 300Hz for beep
     1be:	80 e4       	ldi	r24, 0x40	; 64
     1c0:	9c e9       	ldi	r25, 0x9C	; 156
     1c2:	9d bd       	out	0x2d, r25	; 45
     1c4:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     1c6:	87 b7       	in	r24, 0x37	; 55
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     1cc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     1ce:	8e b5       	in	r24, 0x2e	; 46
     1d0:	81 60       	ori	r24, 0x01	; 1
     1d2:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     1d4:	eb e8       	ldi	r30, 0x8B	; 139
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 68       	ori	r24, 0x81	; 129
     1dc:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     1de:	ea e8       	ldi	r30, 0x8A	; 138
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8a 60       	ori	r24, 0x0A	; 10
     1e6:	80 83       	st	Z, r24
	
	ADMUX = 0x67; //single-ended, input PORTF bit 7, left adjusted, 10 bits
     1e8:	87 e6       	ldi	r24, 0x67	; 103
     1ea:	87 b9       	out	0x07, r24	; 7
	//ADC enabled, start the conversion, single shot mode, interrupts enabled 
	ADCSRA = (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); 
     1ec:	8f e8       	ldi	r24, 0x8F	; 143
     1ee:	86 b9       	out	0x06, r24	; 6
     1f0:	08 95       	ret

000001f2 <radio_init>:
* Description: initializes the radio by doing the appropriate hardware reset of
* the radio module. This was from the code snippet handed out by Roger.
* After some experimentation, a loop of 5 times makes this radio turn on.
*****************************************************************************/

void radio_init(){
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	c2 e0       	ldi	r28, 0x02	; 2
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt

		fm_pwr_up(); //powerup the radio as appropriate
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     1fe:	06 eb       	ldi	r16, 0xB6	; 182
     200:	16 e2       	ldi	r17, 0x26	; 38
void radio_init(){

	for(int i = 0; i < 2; i++){

		
		DDRE  |= (1 << PE2); //Port E bit 2 is active high reset for radio 
     202:	12 9a       	sbi	0x02, 2	; 2
		PORTE |= (1 << PE2); //radio reset is on at powerup (active high)
     204:	1a 9a       	sbi	0x03, 2	; 3

		//hardware reset of Si4734
		PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     206:	1f 98       	cbi	0x03, 7	; 3
		DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     208:	17 9a       	sbi	0x02, 7	; 2
		PORTE |=  (1<<PE2); //hardware reset Si4734 
     20a:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	8f e1       	ldi	r24, 0x1F	; 31
     20e:	93 e0       	ldi	r25, 0x03	; 3
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <radio_init+0x1e>
     214:	00 c0       	rjmp	.+0      	; 0x216 <radio_init+0x24>
     216:	00 00       	nop
		_delay_us(200);     //hold for 200us, 100us by spec         
		PORTE &= ~(1<<PE2); //release reset 
     218:	1a 98       	cbi	0x03, 2	; 3
     21a:	90 ea       	ldi	r25, 0xA0	; 160
     21c:	9a 95       	dec	r25
     21e:	f1 f7       	brne	.-4      	; 0x21c <radio_init+0x2a>
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     220:	17 98       	cbi	0x02, 7	; 2

		fm_pwr_up(); //powerup the radio as appropriate
     222:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <fm_pwr_up>
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     226:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
     22a:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq
     22e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <fm_tune_freq>
     232:	21 97       	sbiw	r28, 0x01	; 1
* After some experimentation, a loop of 5 times makes this radio turn on.
*****************************************************************************/

void radio_init(){

	for(int i = 0; i < 2; i++){
     234:	31 f7       	brne	.-52     	; 0x202 <radio_init+0x10>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq

	}


}//radio_init
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <init_lm73_sensor>:
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e9       	ldi	r24, 0x90	; 144
     248:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
	asm volatile("nop");	
     24c:	00 00       	nop
     24e:	08 95       	ret

00000250 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     250:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     252:	e8 2f       	mov	r30, r24
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	99 b3       	in	r25, 0x19	; 25
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e0 59       	subi	r30, 0x90	; 144
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	20 81       	ld	r18, Z
     262:	31 81       	ldd	r19, Z+1	; 0x01
     264:	22 0f       	add	r18, r18
     266:	33 1f       	adc	r19, r19
     268:	30 6e       	ori	r19, 0xE0	; 224
     26a:	89 2f       	mov	r24, r25
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <chk_buttons+0x24>
     270:	95 95       	asr	r25
     272:	87 95       	ror	r24
     274:	4a 95       	dec	r20
     276:	e2 f7       	brpl	.-8      	; 0x270 <chk_buttons+0x20>
     278:	81 70       	andi	r24, 0x01	; 1
     27a:	99 27       	eor	r25, r25
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	84 27       	eor	r24, r20
     280:	28 2b       	or	r18, r24
     282:	39 2b       	or	r19, r25
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	21 15       	cp	r18, r1
     28c:	30 4f       	sbci	r19, 0xF0	; 240
     28e:	09 f0       	breq	.+2      	; 0x292 <chk_buttons+0x42>
     290:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     292:	08 95       	ret

00000294 <segsum_freq>:
//******************************************************************************

void segsum_freq(uint16_t frequency){
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	fc 01       	movw	r30, r24
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;

	//check to see if the total sum count is less than 1024 but at or greater than 1000 for parsing
	if(frequency <= 9999){
     29c:	80 31       	cpi	r24, 0x10	; 16
     29e:	27 e2       	ldi	r18, 0x27	; 39
     2a0:	92 07       	cpc	r25, r18
     2a2:	08 f4       	brcc	.+2      	; 0x2a6 <segsum_freq+0x12>
     2a4:	61 c0       	rjmp	.+194    	; 0x368 <segsum_freq+0xd4>
		tens = (frequency % 100) / 10;
		hundreds = (frequency % 1000) / 100;
		thousands = frequency / 1000;
	}
	else{
		ones = (frequency % 10000) % 10;
     2a6:	9c 01       	movw	r18, r24
     2a8:	32 95       	swap	r19
     2aa:	22 95       	swap	r18
     2ac:	2f 70       	andi	r18, 0x0F	; 15
     2ae:	23 27       	eor	r18, r19
     2b0:	3f 70       	andi	r19, 0x0F	; 15
     2b2:	23 27       	eor	r18, r19
     2b4:	a7 e4       	ldi	r26, 0x47	; 71
     2b6:	b3 e0       	ldi	r27, 0x03	; 3
     2b8:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     2bc:	ac 01       	movw	r20, r24
     2be:	ec 01       	movw	r28, r24
     2c0:	d6 95       	lsr	r29
     2c2:	c7 95       	ror	r28
     2c4:	d6 95       	lsr	r29
     2c6:	c7 95       	ror	r28
     2c8:	d6 95       	lsr	r29
     2ca:	c7 95       	ror	r28
     2cc:	20 e1       	ldi	r18, 0x10	; 16
     2ce:	37 e2       	ldi	r19, 0x27	; 39
     2d0:	c2 9f       	mul	r28, r18
     2d2:	c0 01       	movw	r24, r0
     2d4:	c3 9f       	mul	r28, r19
     2d6:	90 0d       	add	r25, r0
     2d8:	d2 9f       	mul	r29, r18
     2da:	90 0d       	add	r25, r0
     2dc:	11 24       	eor	r1, r1
     2de:	ef 01       	movw	r28, r30
     2e0:	c8 1b       	sub	r28, r24
     2e2:	d9 0b       	sbc	r29, r25
     2e4:	9e 01       	movw	r18, r28
     2e6:	ad ec       	ldi	r26, 0xCD	; 205
     2e8:	bc ec       	ldi	r27, 0xCC	; 204
     2ea:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     2ee:	96 95       	lsr	r25
     2f0:	87 95       	ror	r24
     2f2:	96 95       	lsr	r25
     2f4:	87 95       	ror	r24
     2f6:	96 95       	lsr	r25
     2f8:	87 95       	ror	r24
     2fa:	1c 2f       	mov	r17, r28
     2fc:	2a e0       	ldi	r18, 0x0A	; 10
     2fe:	82 9f       	mul	r24, r18
     300:	10 19       	sub	r17, r0
     302:	11 24       	eor	r1, r1
		tens = (frequency % 10000) / 100;
     304:	9e 01       	movw	r18, r28
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	36 95       	lsr	r19
     30c:	27 95       	ror	r18
     30e:	ab e7       	ldi	r26, 0x7B	; 123
     310:	b4 e1       	ldi	r27, 0x14	; 20
     312:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     316:	96 95       	lsr	r25
     318:	87 95       	ror	r24
     31a:	e8 2f       	mov	r30, r24
		hundreds = (frequency % 10000) / 1000;
     31c:	9e 01       	movw	r18, r28
     31e:	36 95       	lsr	r19
     320:	27 95       	ror	r18
     322:	36 95       	lsr	r19
     324:	27 95       	ror	r18
     326:	36 95       	lsr	r19
     328:	27 95       	ror	r18
     32a:	a5 ec       	ldi	r26, 0xC5	; 197
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     332:	92 95       	swap	r25
     334:	82 95       	swap	r24
     336:	8f 70       	andi	r24, 0x0F	; 15
     338:	89 27       	eor	r24, r25
     33a:	9f 70       	andi	r25, 0x0F	; 15
     33c:	89 27       	eor	r24, r25
		thousands = frequency / 10000;
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	56 95       	lsr	r21
     348:	47 95       	ror	r20
	
	}
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     34a:	10 93 a0 01 	sts	0x01A0, r17	; 0x8001a0 <segment_data>
	segment_data[1] = tens;
     34e:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <segment_data+0x1>
	segment_data[2] = -1;
     352:	9f ef       	ldi	r25, 0xFF	; 255
     354:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <segment_data+0x2>
	segment_data[3] = hundreds;
     358:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <segment_data+0x3>
	segment_data[4] = thousands;
     35c:	40 93 a4 01 	sts	0x01A4, r20	; 0x8001a4 <segment_data+0x4>

}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	08 95       	ret
	int8_t hundreds = -1;
	int8_t thousands = -1;

	//check to see if the total sum count is less than 1024 but at or greater than 1000 for parsing
	if(frequency <= 9999){
		ones = (frequency % 1000) % 10;
     368:	9c 01       	movw	r18, r24
     36a:	36 95       	lsr	r19
     36c:	27 95       	ror	r18
     36e:	36 95       	lsr	r19
     370:	27 95       	ror	r18
     372:	36 95       	lsr	r19
     374:	27 95       	ror	r18
     376:	a5 ec       	ldi	r26, 0xC5	; 197
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     37e:	ac 01       	movw	r20, r24
     380:	ec 01       	movw	r28, r24
     382:	d2 95       	swap	r29
     384:	c2 95       	swap	r28
     386:	cf 70       	andi	r28, 0x0F	; 15
     388:	cd 27       	eor	r28, r29
     38a:	df 70       	andi	r29, 0x0F	; 15
     38c:	cd 27       	eor	r28, r29
     38e:	28 ee       	ldi	r18, 0xE8	; 232
     390:	33 e0       	ldi	r19, 0x03	; 3
     392:	c2 9f       	mul	r28, r18
     394:	c0 01       	movw	r24, r0
     396:	c3 9f       	mul	r28, r19
     398:	90 0d       	add	r25, r0
     39a:	d2 9f       	mul	r29, r18
     39c:	90 0d       	add	r25, r0
     39e:	11 24       	eor	r1, r1
     3a0:	ef 01       	movw	r28, r30
     3a2:	c8 1b       	sub	r28, r24
     3a4:	d9 0b       	sbc	r29, r25
     3a6:	9e 01       	movw	r18, r28
     3a8:	ad ec       	ldi	r26, 0xCD	; 205
     3aa:	bc ec       	ldi	r27, 0xCC	; 204
     3ac:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	96 95       	lsr	r25
     3ba:	87 95       	ror	r24
     3bc:	1c 2f       	mov	r17, r28
     3be:	2a e0       	ldi	r18, 0x0A	; 10
     3c0:	82 9f       	mul	r24, r18
     3c2:	10 19       	sub	r17, r0
     3c4:	11 24       	eor	r1, r1
		tens = (frequency % 100) / 10;
     3c6:	9f 01       	movw	r18, r30
     3c8:	36 95       	lsr	r19
     3ca:	27 95       	ror	r18
     3cc:	36 95       	lsr	r19
     3ce:	27 95       	ror	r18
     3d0:	ab e7       	ldi	r26, 0x7B	; 123
     3d2:	b4 e1       	ldi	r27, 0x14	; 20
     3d4:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     3d8:	96 95       	lsr	r25
     3da:	87 95       	ror	r24
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	68 9f       	mul	r22, r24
     3e0:	90 01       	movw	r18, r0
     3e2:	69 9f       	mul	r22, r25
     3e4:	30 0d       	add	r19, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	cf 01       	movw	r24, r30
     3ea:	82 1b       	sub	r24, r18
     3ec:	93 0b       	sbc	r25, r19
     3ee:	9c 01       	movw	r18, r24
     3f0:	ad ec       	ldi	r26, 0xCD	; 205
     3f2:	bc ec       	ldi	r27, 0xCC	; 204
     3f4:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     3f8:	96 95       	lsr	r25
     3fa:	87 95       	ror	r24
     3fc:	96 95       	lsr	r25
     3fe:	87 95       	ror	r24
     400:	96 95       	lsr	r25
     402:	87 95       	ror	r24
     404:	e8 2f       	mov	r30, r24
		hundreds = (frequency % 1000) / 100;
     406:	9e 01       	movw	r18, r28
     408:	36 95       	lsr	r19
     40a:	27 95       	ror	r18
     40c:	36 95       	lsr	r19
     40e:	27 95       	ror	r18
     410:	ab e7       	ldi	r26, 0x7B	; 123
     412:	b4 e1       	ldi	r27, 0x14	; 20
     414:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
     418:	96 95       	lsr	r25
     41a:	87 95       	ror	r24
		thousands = frequency / 1000;
     41c:	52 95       	swap	r21
     41e:	42 95       	swap	r20
     420:	4f 70       	andi	r20, 0x0F	; 15
     422:	45 27       	eor	r20, r21
     424:	5f 70       	andi	r21, 0x0F	; 15
     426:	45 27       	eor	r20, r21
     428:	90 cf       	rjmp	.-224    	; 0x34a <segsum_freq+0xb6>

0000042a <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  
	//parse out the two digits for the minutes
	ones = minute % 10;
     42a:	9d ec       	ldi	r25, 0xCD	; 205
     42c:	69 9f       	mul	r22, r25
     42e:	21 2d       	mov	r18, r1
     430:	11 24       	eor	r1, r1
     432:	32 2f       	mov	r19, r18
     434:	36 95       	lsr	r19
     436:	36 95       	lsr	r19
     438:	36 95       	lsr	r19
     43a:	4a e0       	ldi	r20, 0x0A	; 10
     43c:	34 9f       	mul	r19, r20
     43e:	60 19       	sub	r22, r0
     440:	11 24       	eor	r1, r1
     442:	36 2f       	mov	r19, r22
	tens = minute / 10;
     444:	26 95       	lsr	r18
     446:	26 95       	lsr	r18
     448:	26 95       	lsr	r18

	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
     44a:	89 9f       	mul	r24, r25
     44c:	91 2d       	mov	r25, r1
     44e:	11 24       	eor	r1, r1
     450:	96 95       	lsr	r25
     452:	96 95       	lsr	r25
     454:	96 95       	lsr	r25
     456:	48 2f       	mov	r20, r24
     458:	5a e0       	ldi	r21, 0x0A	; 10
     45a:	95 9f       	mul	r25, r21
     45c:	40 19       	sub	r20, r0
     45e:	11 24       	eor	r1, r1
	if(hour > 9)
     460:	8a 30       	cpi	r24, 0x0A	; 10
     462:	30 f4       	brcc	.+12     	; 0x470 <segsum+0x46>
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hour24_flag>
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	a9 f0       	breq	.+42     	; 0x498 <segsum+0x6e>
     46e:	91 95       	neg	r25
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
     470:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <sec_count>
     474:	80 ff       	sbrs	r24, 0
     476:	0c c0       	rjmp	.+24     	; 0x490 <segsum+0x66>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     47e:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <segment_data>
	segment_data[1] = tens;
     482:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <segment_data+0x1>
	
	segment_data[3] = hundreds;
     486:	40 93 a3 01 	sts	0x01A3, r20	; 0x8001a3 <segment_data+0x3>
	segment_data[4] = thousands;
     48a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <segment_data+0x4>
     48e:	08 95       	ret
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     490:	80 e1       	ldi	r24, 0x10	; 16
     492:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <segment_data+0x2>
     496:	f3 cf       	rjmp	.-26     	; 0x47e <segsum+0x54>
	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	e9 cf       	rjmp	.-46     	; 0x46e <segsum+0x44>

0000049c <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     49c:	81 31       	cpi	r24, 0x11	; 17
     49e:	30 f4       	brcc	.+12     	; 0x4ac <seven_seg_encoding+0x10>
     4a0:	e8 2f       	mov	r30, r24
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ea 5f       	subi	r30, 0xFA	; 250
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	80 81       	ld	r24, Z
     4aa:	08 95       	ret
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     4ae:	08 95       	ret

000004b0 <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	int8_t encoder_left_prev = encoder_left;
     4b0:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     4b4:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     4b8:	28 2f       	mov	r18, r24
     4ba:	23 70       	andi	r18, 0x03	; 3
     4bc:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     4c0:	8c 70       	andi	r24, 0x0C	; 12
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 95       	asr	r25
     4c6:	87 95       	ror	r24
     4c8:	95 95       	asr	r25
     4ca:	87 95       	ror	r24
     4cc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     4d0:	83 30       	cpi	r24, 0x03	; 3
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <encoder_process+0x26>
     4d4:	4b c0       	rjmp	.+150    	; 0x56c <encoder_process+0xbc>
     4d6:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <adjust_flag>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     4da:	23 30       	cpi	r18, 0x03	; 3
     4dc:	49 f1       	breq	.+82     	; 0x530 <encoder_process+0x80>
     4de:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
		}
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
     4e2:	41 30       	cpi	r20, 0x01	; 1
     4e4:	81 f0       	breq	.+32     	; 0x506 <encoder_process+0x56>
		min_count = temp_min;
	}

	//if the alarm adjustment flag is set, set the alarm time
	//to the temporary variables used to increment/decrement
	if(adjust_alarm == 0x01){
     4e6:	31 30       	cpi	r19, 0x01	; 1
     4e8:	09 f0       	breq	.+2      	; 0x4ec <encoder_process+0x3c>
     4ea:	08 95       	ret
		alarm_time_min = temp_min;
     4ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_min>
     4f0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <alarm_time_min>
		alarm_time_hour = temp_hour;
     4f4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     4f8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <alarm_time_hour>
		temp_pm_flag = pm_flag;			//also save the pm_flag
     4fc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <pm_flag>
     500:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     504:	08 95       	ret
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     506:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     50a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <hour_count>
		min_count = temp_min;
     50e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_min>
     512:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <min_count>
     516:	e7 cf       	rjmp	.-50     	; 0x4e6 <encoder_process+0x36>
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if(radio_tune == 0x01){
				current_fm_freq += 10;
     518:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     51c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     520:	0a 96       	adiw	r24, 0x0a	; 10
     522:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     526:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     52a:	23 30       	cpi	r18, 0x03	; 3
     52c:	f1 f6       	brne	.-68     	; 0x4ea <encoder_process+0x3a>
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	51 30       	cpi	r21, 0x01	; 1
     532:	09 f4       	brne	.+2      	; 0x536 <encoder_process+0x86>
     534:	6e c0       	rjmp	.+220    	; 0x612 <encoder_process+0x162>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     536:	52 30       	cpi	r21, 0x02	; 2
     538:	91 f6       	brne	.-92     	; 0x4de <encoder_process+0x2e>
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     53a:	41 30       	cpi	r20, 0x01	; 1
     53c:	09 f4       	brne	.+2      	; 0x540 <encoder_process+0x90>
     53e:	d8 c0       	rjmp	.+432    	; 0x6f0 <encoder_process+0x240>
     540:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     544:	31 30       	cpi	r19, 0x01	; 1
     546:	09 f4       	brne	.+2      	; 0x54a <encoder_process+0x9a>
     548:	a1 c0       	rjmp	.+322    	; 0x68c <encoder_process+0x1dc>
			else
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
     54a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     54e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     552:	0a 97       	sbiw	r24, 0x0a	; 10
     554:	09 f4       	brne	.+2      	; 0x558 <encoder_process+0xa8>
     556:	d3 c0       	rjmp	.+422    	; 0x6fe <encoder_process+0x24e>
				OCR3A = 0;
			else
				OCR3A -= 10;			//decrement resolution by 10s to avoid spinning a lot
     558:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     55c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     560:	0a 97       	sbiw	r24, 0x0a	; 10
     562:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     566:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     56a:	b9 cf       	rjmp	.-142    	; 0x4de <encoder_process+0x2e>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     56c:	41 30       	cpi	r20, 0x01	; 1
     56e:	49 f1       	breq	.+82     	; 0x5c2 <encoder_process+0x112>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     570:	42 30       	cpi	r20, 0x02	; 2
     572:	09 f0       	breq	.+2      	; 0x576 <encoder_process+0xc6>
     574:	b0 cf       	rjmp	.-160    	; 0x4d6 <encoder_process+0x26>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     576:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <adjust_flag>
     57a:	41 11       	cpse	r20, r1
     57c:	19 c0       	rjmp	.+50     	; 0x5b0 <encoder_process+0x100>
     57e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     582:	31 11       	cpse	r19, r1
     584:	15 c0       	rjmp	.+42     	; 0x5b0 <encoder_process+0x100>
     586:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <manual_brightness>
     58a:	31 30       	cpi	r19, 0x01	; 1
     58c:	89 f4       	brne	.+34     	; 0x5b0 <encoder_process+0x100>
			if(radio_tune == 0x01){
     58e:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <radio_tune>
     592:	31 30       	cpi	r19, 0x01	; 1
     594:	09 f4       	brne	.+2      	; 0x598 <encoder_process+0xe8>
     596:	d4 c0       	rjmp	.+424    	; 0x740 <encoder_process+0x290>
				current_fm_freq -= 10;			
			}
			else{
				if((OCR2 - 5) <= 0)
     598:	23 b5       	in	r18, 0x23	; 35
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	26 30       	cpi	r18, 0x06	; 6
     59e:	31 05       	cpc	r19, r1
     5a0:	0c f4       	brge	.+2      	; 0x5a4 <encoder_process+0xf4>
     5a2:	c4 c0       	rjmp	.+392    	; 0x72c <encoder_process+0x27c>
					OCR2 = 3;
				else
					OCR2 -= 5;
     5a4:	83 b5       	in	r24, 0x23	; 35
     5a6:	85 50       	subi	r24, 0x05	; 5
     5a8:	83 bd       	out	0x23, r24	; 35
     5aa:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <encoder_left>
     5ae:	93 cf       	rjmp	.-218    	; 0x4d6 <encoder_process+0x26>
			}
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
     5b0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_min>
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <encoder_process+0x10a>
     5b8:	55 c0       	rjmp	.+170    	; 0x664 <encoder_process+0x1b4>
				temp_min = 59;			
			}
			else
				temp_min--;				//decrement minute when right encoder turned to left
     5ba:	81 50       	subi	r24, 0x01	; 1
     5bc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <temp_min>
     5c0:	8c cf       	rjmp	.-232    	; 0x4da <encoder_process+0x2a>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     5c2:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <adjust_flag>
     5c6:	41 11       	cpse	r20, r1
     5c8:	1a c0       	rjmp	.+52     	; 0x5fe <encoder_process+0x14e>
     5ca:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     5ce:	31 11       	cpse	r19, r1
     5d0:	16 c0       	rjmp	.+44     	; 0x5fe <encoder_process+0x14e>
     5d2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <manual_brightness>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 f4       	brne	.+36     	; 0x5fe <encoder_process+0x14e>
			if(radio_tune == 0x01){
     5da:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <radio_tune>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <encoder_process+0x134>
     5e2:	9a cf       	rjmp	.-204    	; 0x518 <encoder_process+0x68>
				current_fm_freq += 10;
			}
			else{
				if((OCR2 + 5) >= 254)
     5e4:	83 b5       	in	r24, 0x23	; 35
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	89 3f       	cpi	r24, 0xF9	; 249
     5ea:	91 05       	cpc	r25, r1
     5ec:	0c f4       	brge	.+2      	; 0x5f0 <encoder_process+0x140>
     5ee:	9c c0       	rjmp	.+312    	; 0x728 <encoder_process+0x278>
					OCR2 = 250;
     5f0:	8a ef       	ldi	r24, 0xFA	; 250
     5f2:	83 bd       	out	0x23, r24	; 35
     5f4:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <encoder_left>
     5f8:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <adjust_flag>
     5fc:	6e cf       	rjmp	.-292    	; 0x4da <encoder_process+0x2a>
			}

		}
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
     5fe:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_min>
     602:	68 2f       	mov	r22, r24
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	6b 33       	cpi	r22, 0x3B	; 59
     608:	71 05       	cpc	r23, r1
     60a:	e4 f0       	brlt	.+56     	; 0x644 <encoder_process+0x194>
				temp_min = 0;
     60c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <temp_min>
     610:	64 cf       	rjmp	.-312    	; 0x4da <encoder_process+0x2a>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     612:	41 30       	cpi	r20, 0x01	; 1
     614:	09 f4       	brne	.+2      	; 0x618 <encoder_process+0x168>
     616:	65 c0       	rjmp	.+202    	; 0x6e2 <encoder_process+0x232>
     618:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     61c:	31 30       	cpi	r19, 0x01	; 1
     61e:	31 f1       	breq	.+76     	; 0x66c <encoder_process+0x1bc>
				temp_hour++;			//increment hour when left encoder turned right

		}
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
     620:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     624:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     628:	0a 96       	adiw	r24, 0x0a	; 10
     62a:	8f 3f       	cpi	r24, 0xFF	; 255
     62c:	91 05       	cpc	r25, r1
     62e:	71 f0       	breq	.+28     	; 0x64c <encoder_process+0x19c>
     630:	68 f0       	brcs	.+26     	; 0x64c <encoder_process+0x19c>
				OCR3A = 255;
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     63a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     63e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     642:	4f cf       	rjmp	.-354    	; 0x4e2 <encoder_process+0x32>
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
				temp_min = 0;
			else
				temp_min++;				//increment minute when right encoder turned to the right
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <temp_min>
     64a:	47 cf       	rjmp	.-370    	; 0x4da <encoder_process+0x2a>
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
				OCR3A = 255;
			else
				OCR3A += 10;			//increment resolution by 10s to avoid spinning a lot
     64c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     650:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     654:	0a 96       	adiw	r24, 0x0a	; 10
     656:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     65a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     65e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     662:	3f cf       	rjmp	.-386    	; 0x4e2 <encoder_process+0x32>
			}
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
				temp_min = 59;			
     664:	8b e3       	ldi	r24, 0x3B	; 59
     666:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <temp_min>
     66a:	37 cf       	rjmp	.-402    	; 0x4da <encoder_process+0x2a>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     66c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hour24_flag>
     670:	81 11       	cpse	r24, r1
     672:	1b c0       	rjmp	.+54     	; 0x6aa <encoder_process+0x1fa>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
     674:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     678:	68 2f       	mov	r22, r24
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	6c 30       	cpi	r22, 0x0C	; 12
     67e:	71 05       	cpc	r23, r1
     680:	0c f4       	brge	.+2      	; 0x684 <encoder_process+0x1d4>
     682:	44 c0       	rjmp	.+136    	; 0x70c <encoder_process+0x25c>
				temp_hour = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     68a:	2b cf       	rjmp	.-426    	; 0x4e2 <encoder_process+0x32>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     68c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hour24_flag>
     690:	81 11       	cpse	r24, r1
     692:	1a c0       	rjmp	.+52     	; 0x6c8 <encoder_process+0x218>
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
     694:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     698:	68 2f       	mov	r22, r24
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	62 30       	cpi	r22, 0x02	; 2
     69e:	71 05       	cpc	r23, r1
     6a0:	cc f1       	brlt	.+114    	; 0x714 <encoder_process+0x264>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
     6a2:	81 50       	subi	r24, 0x01	; 1
     6a4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     6a8:	1c cf       	rjmp	.-456    	; 0x4e2 <encoder_process+0x32>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <encoder_process+0x200>
     6ae:	b8 cf       	rjmp	.-144    	; 0x620 <encoder_process+0x170>
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
     6b0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	27 31       	cpi	r18, 0x17	; 23
     6ba:	31 05       	cpc	r19, r1
     6bc:	7c f1       	brlt	.+94     	; 0x71c <encoder_process+0x26c>
				temp_hour = 0;
     6be:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <temp_hour>
     6c2:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     6c6:	0d cf       	rjmp	.-486    	; 0x4e2 <encoder_process+0x32>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	09 f0       	breq	.+2      	; 0x6ce <encoder_process+0x21e>
     6cc:	3e cf       	rjmp	.-388    	; 0x54a <encoder_process+0x9a>
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
     6ce:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     6d2:	88 23       	and	r24, r24
     6d4:	79 f1       	breq	.+94     	; 0x734 <encoder_process+0x284>
				temp_hour = 23;
			else
				temp_hour--;			//decrement hour when left encoder turned left
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     6dc:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     6e0:	00 cf       	rjmp	.-512    	; 0x4e2 <encoder_process+0x32>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     6e2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hour24_flag>
     6e6:	81 11       	cpse	r24, r1
     6e8:	e0 cf       	rjmp	.-64     	; 0x6aa <encoder_process+0x1fa>
     6ea:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     6ee:	c2 cf       	rjmp	.-124    	; 0x674 <encoder_process+0x1c4>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     6f0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hour24_flag>
     6f4:	81 11       	cpse	r24, r1
     6f6:	e8 cf       	rjmp	.-48     	; 0x6c8 <encoder_process+0x218>
     6f8:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     6fc:	cb cf       	rjmp	.-106    	; 0x694 <encoder_process+0x1e4>
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
				OCR3A = 0;
     6fe:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     702:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     706:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     70a:	eb ce       	rjmp	.-554    	; 0x4e2 <encoder_process+0x32>
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     712:	e7 ce       	rjmp	.-562    	; 0x4e2 <encoder_process+0x32>
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 12;
     714:	8c e0       	ldi	r24, 0x0C	; 12
     716:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     71a:	e3 ce       	rjmp	.-570    	; 0x4e2 <encoder_process+0x32>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
				temp_hour = 0;
			else
				temp_hour++;			//increment hour when left encoder turned right
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     722:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     726:	dd ce       	rjmp	.-582    	; 0x4e2 <encoder_process+0x32>
			}
			else{
				if((OCR2 + 5) >= 254)
					OCR2 = 250;
				else	
					OCR2 += 5;
     728:	83 b5       	in	r24, 0x23	; 35
     72a:	8b 5f       	subi	r24, 0xFB	; 251
     72c:	83 bd       	out	0x23, r24	; 35
     72e:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <encoder_left>
     732:	d1 ce       	rjmp	.-606    	; 0x4d6 <encoder_process+0x26>
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
				temp_hour = 23;
     734:	87 e1       	ldi	r24, 0x17	; 23
     736:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
     73a:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     73e:	d1 ce       	rjmp	.-606    	; 0x4e2 <encoder_process+0x32>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if(radio_tune == 0x01){
				current_fm_freq -= 10;			
     740:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     744:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     748:	0a 97       	sbiw	r24, 0x0a	; 10
     74a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     74e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     752:	eb ce       	rjmp	.-554    	; 0x52a <encoder_process+0x7a>

00000754 <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     768:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     76a:	2f ef       	ldi	r18, 0xFF	; 255
     76c:	2b bb       	out	0x1b, r18	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     76e:	20 e7       	ldi	r18, 0x70	; 112
     770:	28 bb       	out	0x18, r18	; 24
     772:	2a e1       	ldi	r18, 0x1A	; 26
     774:	2a 95       	dec	r18
     776:	f1 f7       	brne	.-4      	; 0x774 <button_encoder_read+0x20>
     778:	00 c0       	rjmp	.+0      	; 0x77a <button_encoder_read+0x26>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     77a:	39 b3       	in	r19, 0x19	; 25
     77c:	c0 90 7e 01 	lds	r12, 0x017E	; 0x80017e <state.1905+0xe>
     780:	d0 90 7f 01 	lds	r13, 0x017F	; 0x80017f <state.1905+0xf>
     784:	cc 0c       	add	r12, r12
     786:	dd 1c       	adc	r13, r13
     788:	60 ee       	ldi	r22, 0xE0	; 224
     78a:	d6 2a       	or	r13, r22
     78c:	23 2f       	mov	r18, r19
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	22 0f       	add	r18, r18
     792:	23 2f       	mov	r18, r19
     794:	22 1f       	adc	r18, r18
     796:	33 0b       	sbc	r19, r19
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	26 27       	eor	r18, r22
     79c:	2c 29       	or	r18, r12
     79e:	3d 29       	or	r19, r13
     7a0:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <state.1905+0xf>
     7a4:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <state.1905+0xe>
	if(state[button] == 0xF000) return 1;
     7a8:	21 15       	cp	r18, r1
     7aa:	30 4f       	sbci	r19, 0xF0	; 240
     7ac:	31 f4       	brne	.+12     	; 0x7ba <button_encoder_read+0x66>
	_delay_us(5);

	//poll if button 7 is pressed
	//this toggles if the time adjustment flag is set or not
	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     7ae:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <adjust_flag>
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	23 27       	eor	r18, r19
     7b6:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     7ba:	29 b3       	in	r18, 0x19	; 25
     7bc:	26 fb       	bst	r18, 6
     7be:	ee 24       	eor	r14, r14
     7c0:	e0 f8       	bld	r14, 0
     7c2:	f1 2c       	mov	r15, r1
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	e2 26       	eor	r14, r18
     7c8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <state.1905+0xc>
     7cc:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <state.1905+0xd>
     7d0:	22 0f       	add	r18, r18
     7d2:	33 1f       	adc	r19, r19
     7d4:	30 6e       	ori	r19, 0xE0	; 224
     7d6:	e2 2a       	or	r14, r18
     7d8:	f3 2a       	or	r15, r19
     7da:	f0 92 7d 01 	sts	0x017D, r15	; 0x80017d <state.1905+0xd>
     7de:	e0 92 7c 01 	sts	0x017C, r14	; 0x80017c <state.1905+0xc>
	if(state[button] == 0xF000) return 1;
     7e2:	e1 14       	cp	r14, r1
     7e4:	30 ef       	ldi	r19, 0xF0	; 240
     7e6:	f3 06       	cpc	r15, r19
     7e8:	09 f4       	brne	.+2      	; 0x7ec <button_encoder_read+0x98>
     7ea:	3b c1       	rjmp	.+630    	; 0xa62 <button_encoder_read+0x30e>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     7ec:	29 b3       	in	r18, 0x19	; 25
     7ee:	25 fb       	bst	r18, 5
     7f0:	00 27       	eor	r16, r16
     7f2:	00 f9       	bld	r16, 0
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	06 27       	eor	r16, r22
     7fa:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <state.1905+0xa>
     7fe:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <state.1905+0xb>
     802:	22 0f       	add	r18, r18
     804:	33 1f       	adc	r19, r19
     806:	30 6e       	ori	r19, 0xE0	; 224
     808:	02 2b       	or	r16, r18
     80a:	13 2b       	or	r17, r19
     80c:	10 93 7b 01 	sts	0x017B, r17	; 0x80017b <state.1905+0xb>
     810:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <state.1905+0xa>
	if(state[button] == 0xF000) return 1;
     814:	01 15       	cp	r16, r1
     816:	10 4f       	sbci	r17, 0xF0	; 240
     818:	09 f4       	brne	.+2      	; 0x81c <button_encoder_read+0xc8>
     81a:	14 c1       	rjmp	.+552    	; 0xa44 <button_encoder_read+0x2f0>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     81c:	29 b3       	in	r18, 0x19	; 25
     81e:	22 95       	swap	r18
     820:	21 70       	andi	r18, 0x01	; 1
     822:	c2 2f       	mov	r28, r18
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	d3 2f       	mov	r29, r19
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	c6 27       	eor	r28, r22
     82c:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <state.1905+0x8>
     830:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <state.1905+0x9>
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	30 6e       	ori	r19, 0xE0	; 224
     83a:	c2 2b       	or	r28, r18
     83c:	d3 2b       	or	r29, r19
     83e:	d0 93 79 01 	sts	0x0179, r29	; 0x800179 <state.1905+0x9>
     842:	c0 93 78 01 	sts	0x0178, r28	; 0x800178 <state.1905+0x8>
	if(state[button] == 0xF000) return 1;
     846:	c1 15       	cp	r28, r1
     848:	d0 4f       	sbci	r29, 0xF0	; 240
     84a:	31 f4       	brne	.+12     	; 0x858 <button_encoder_read+0x104>
		pm_flag ^= 0x01;
	
	//poll if button 4 is pressed
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     84c:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <adjust_alarm>
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	23 27       	eor	r18, r19
     854:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     858:	29 b3       	in	r18, 0x19	; 25
     85a:	23 fb       	bst	r18, 3
     85c:	aa 27       	eor	r26, r26
     85e:	a0 f9       	bld	r26, 0
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	31 e0       	ldi	r19, 0x01	; 1
     864:	a3 27       	eor	r26, r19
     866:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <state.1905+0x6>
     86a:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <state.1905+0x7>
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	30 6e       	ori	r19, 0xE0	; 224
     874:	a2 2b       	or	r26, r18
     876:	b3 2b       	or	r27, r19
     878:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <state.1905+0x7>
     87c:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <state.1905+0x6>
	if(state[button] == 0xF000) return 1;
     880:	a1 15       	cp	r26, r1
     882:	b0 4f       	sbci	r27, 0xF0	; 240
     884:	41 f4       	brne	.+16     	; 0x896 <button_encoder_read+0x142>
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
	
	if(chk_buttons(3)){
		alarm_is_set ^= 0x01;
     886:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <alarm_is_set>
     88a:	31 e0       	ldi	r19, 0x01	; 1
     88c:	23 27       	eor	r18, r19
     88e:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <alarm_is_set>
		lcd_flag = 0x01;
     892:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <lcd_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     896:	29 b3       	in	r18, 0x19	; 25
     898:	22 fb       	bst	r18, 2
     89a:	ee 27       	eor	r30, r30
     89c:	e0 f9       	bld	r30, 0
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	e2 27       	eor	r30, r18
     8a4:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <state.1905+0x4>
     8a8:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <state.1905+0x5>
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	30 6e       	ori	r19, 0xE0	; 224
     8b2:	e2 2b       	or	r30, r18
     8b4:	f3 2b       	or	r31, r19
     8b6:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <state.1905+0x5>
     8ba:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <state.1905+0x4>
	if(state[button] == 0xF000) return 1;
     8be:	e1 15       	cp	r30, r1
     8c0:	f0 4f       	sbci	r31, 0xF0	; 240
     8c2:	59 f4       	brne	.+22     	; 0x8da <button_encoder_read+0x186>
		alarm_is_set ^= 0x01;
		lcd_flag = 0x01;
	}

	if(chk_buttons(2)){
		manual_brightness ^= 0x01;
     8c4:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <manual_brightness>
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	32 27       	eor	r19, r18
     8cc:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <manual_brightness>
		f_not_c ^= 0x01;
     8d0:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <f_not_c>
     8d4:	23 27       	eor	r18, r19
     8d6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <f_not_c>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     8da:	29 b3       	in	r18, 0x19	; 25
     8dc:	21 fb       	bst	r18, 1
     8de:	88 27       	eor	r24, r24
     8e0:	80 f9       	bld	r24, 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	86 27       	eor	r24, r22
     8e8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <state.1905+0x2>
     8ec:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <state.1905+0x3>
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	30 6e       	ori	r19, 0xE0	; 224
     8f6:	82 2b       	or	r24, r18
     8f8:	93 2b       	or	r25, r19
     8fa:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <state.1905+0x3>
     8fe:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <state.1905+0x2>
	if(state[button] == 0xF000) return 1;
     902:	81 15       	cp	r24, r1
     904:	20 ef       	ldi	r18, 0xF0	; 240
     906:	92 07       	cpc	r25, r18
     908:	09 f4       	brne	.+2      	; 0x90c <button_encoder_read+0x1b8>
     90a:	8e c0       	rjmp	.+284    	; 0xa28 <button_encoder_read+0x2d4>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     90c:	29 b3       	in	r18, 0x19	; 25
     90e:	21 fb       	bst	r18, 1
     910:	aa 24       	eor	r10, r10
     912:	a0 f8       	bld	r10, 0
     914:	b1 2c       	mov	r11, r1
     916:	b5 01       	movw	r22, r10
     918:	31 e0       	ldi	r19, 0x01	; 1
     91a:	63 27       	eor	r22, r19
     91c:	70 6e       	ori	r23, 0xE0	; 224
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	86 2b       	or	r24, r22
     924:	97 2b       	or	r25, r23
     926:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <state.1905+0x3>
     92a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <state.1905+0x2>
	if(state[button] == 0xF000) return 1;
     92e:	81 15       	cp	r24, r1
     930:	90 4f       	sbci	r25, 0xF0	; 240
     932:	41 f4       	brne	.+16     	; 0x944 <button_encoder_read+0x1f0>
		ten_sec_count = 0;			//the count variable starts at 0
		lcd_flag = 0x01;			//tell lcd to update
		
	}
	else if(chk_buttons(1)){
		radio_trigger ^= 0x01;
     934:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <radio_trigger>
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	89 27       	eor	r24, r25
     93c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <radio_trigger>
		radio_trig_once = 0x01;
     940:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <radio_trig_once>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     944:	29 b3       	in	r18, 0x19	; 25
     946:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <state.1905>
     94a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <state.1905+0x1>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	90 6e       	ori	r25, 0xE0	; 224
     954:	20 95       	com	r18
     956:	42 2f       	mov	r20, r18
     958:	41 70       	andi	r20, 0x01	; 1
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	84 2b       	or	r24, r20
     95e:	95 2b       	or	r25, r21
     960:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <state.1905+0x1>
     964:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <state.1905>
	if(state[button] == 0xF000) return 1;
     968:	81 15       	cp	r24, r1
     96a:	20 ef       	ldi	r18, 0xF0	; 240
     96c:	92 07       	cpc	r25, r18
     96e:	09 f4       	brne	.+2      	; 0x972 <button_encoder_read+0x21e>
     970:	51 c0       	rjmp	.+162    	; 0xa14 <button_encoder_read+0x2c0>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     972:	29 b3       	in	r18, 0x19	; 25
     974:	21 70       	andi	r18, 0x01	; 1
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	24 27       	eor	r18, r20
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	30 6e       	ori	r19, 0xE0	; 224
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	82 2b       	or	r24, r18
     984:	93 2b       	or	r25, r19
     986:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <state.1905+0x1>
     98a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <state.1905>
	if(state[button] == 0xF000) return 1;
     98e:	81 15       	cp	r24, r1
     990:	90 4f       	sbci	r25, 0xF0	; 240
     992:	51 f4       	brne	.+20     	; 0x9a8 <button_encoder_read+0x254>
	if(chk_buttons(0) && trigger_alarm == 0x01){
		trigger_alarm = 0;			//alarm turns off
		lcd_flag = 0x01;			//update lcd
	}
	else if(chk_buttons(0)){
		radio_tune ^= 0x01;
     994:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <radio_tune>
     998:	98 2f       	mov	r25, r24
     99a:	94 27       	eor	r25, r20
     99c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <radio_tune>
		radio_trig_once = 0x01;
     9a0:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <radio_trig_once>
		radio_power_down = radio_tune ^ 0x01;
     9a4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     9a8:	80 e6       	ldi	r24, 0x60	; 96
     9aa:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     9ac:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     9ae:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     9b0:	80 e4       	ldi	r24, 0x40	; 64
     9b2:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     9b4:	00 00       	nop

	//send out state of flags to the bar graph display
	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5) | (manual_brightness << 2);
     9b6:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <adjust_flag>
     9ba:	40 e8       	ldi	r20, 0x80	; 128
     9bc:	24 9f       	mul	r18, r20
     9be:	90 01       	movw	r18, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hour24_flag>
     9c6:	60 e4       	ldi	r22, 0x40	; 64
     9c8:	96 9f       	mul	r25, r22
     9ca:	c0 01       	movw	r24, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	28 2b       	or	r18, r24
     9d0:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <adjust_alarm>
     9d4:	30 e2       	ldi	r19, 0x20	; 32
     9d6:	93 9f       	mul	r25, r19
     9d8:	c0 01       	movw	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	82 2b       	or	r24, r18
     9de:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <manual_brightness>
     9e2:	99 0f       	add	r25, r25
     9e4:	99 0f       	add	r25, r25
     9e6:	89 2b       	or	r24, r25
     9e8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     9ea:	77 9b       	sbis	0x0e, 7	; 14
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <button_encoder_read+0x296>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     9ee:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     9f0:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     9f2:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     9f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     9fc:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	08 95       	ret
		radio_trig_once = 0x01;
	}

	//poll if button 0 is pressed
	//this silences all alarms, no snooze
	if(chk_buttons(0) && trigger_alarm == 0x01){
     a14:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <trigger_alarm>
     a18:	21 30       	cpi	r18, 0x01	; 1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <button_encoder_read+0x2ca>
     a1c:	aa cf       	rjmp	.-172    	; 0x972 <button_encoder_read+0x21e>
		trigger_alarm = 0;			//alarm turns off
     a1e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <trigger_alarm>
		lcd_flag = 0x01;			//update lcd
     a22:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <lcd_flag>
     a26:	c0 cf       	rjmp	.-128    	; 0x9a8 <button_encoder_read+0x254>
		f_not_c ^= 0x01;
	}

	//poll if button 1 is pressed
	//this activates the snooze feature
	if(chk_buttons(1) && trigger_alarm == 0x01){
     a28:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <trigger_alarm>
     a2c:	21 30       	cpi	r18, 0x01	; 1
     a2e:	09 f0       	breq	.+2      	; 0xa32 <button_encoder_read+0x2de>
     a30:	6d cf       	rjmp	.-294    	; 0x90c <button_encoder_read+0x1b8>
		trigger_alarm = 0;			//if pressed, alarm should turn off
     a32:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <trigger_alarm>
		ten_sec_start = 0x01;		//start the count for 10 second delay
     a36:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <ten_sec_start>
		ten_sec_count = 0;			//the count variable starts at 0
     a3a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <ten_sec_count>
		lcd_flag = 0x01;			//tell lcd to update
     a3e:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <lcd_flag>
     a42:	80 cf       	rjmp	.-256    	; 0x944 <button_encoder_read+0x1f0>
	}

	//poll if button 5 is pressed
	//this toggles the pm_flag for adjustment
	//this only works when in time set mode
	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     a44:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <adjust_flag>
     a48:	21 30       	cpi	r18, 0x01	; 1
     a4a:	09 f0       	breq	.+2      	; 0xa4e <button_encoder_read+0x2fa>
     a4c:	e7 ce       	rjmp	.-562    	; 0x81c <button_encoder_read+0xc8>
     a4e:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <hour24_flag>
     a52:	31 11       	cpse	r19, r1
     a54:	e3 ce       	rjmp	.-570    	; 0x81c <button_encoder_read+0xc8>
		pm_flag ^= 0x01;
     a56:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <pm_flag>
     a5a:	23 27       	eor	r18, r19
     a5c:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <pm_flag>
     a60:	dd ce       	rjmp	.-582    	; 0x81c <button_encoder_read+0xc8>
		adjust_flag ^= 0x01;

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     a62:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <hour24_flag>
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	23 27       	eor	r18, r19
     a6a:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     a6e:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <pm_flag>
     a72:	31 30       	cpi	r19, 0x01	; 1
     a74:	a9 f0       	breq	.+42     	; 0xaa0 <button_encoder_read+0x34c>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     a76:	21 11       	cpse	r18, r1
     a78:	b9 ce       	rjmp	.-654    	; 0x7ec <button_encoder_read+0x98>
     a7a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     a7e:	2c 30       	cpi	r18, 0x0C	; 12
     a80:	08 f4       	brcc	.+2      	; 0xa84 <button_encoder_read+0x330>
     a82:	b4 ce       	rjmp	.-664    	; 0x7ec <button_encoder_read+0x98>
			pm_flag = 0x01;			//set the pm_flag when coming from 24 hours and time is in afternoon
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <pm_flag>
			if(hour_count != 12)	//edge case of when the time is 12 for 24 hour time
     a8a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     a8e:	2c 30       	cpi	r18, 0x0C	; 12
     a90:	09 f4       	brne	.+2      	; 0xa94 <button_encoder_read+0x340>
     a92:	ac ce       	rjmp	.-680    	; 0x7ec <button_encoder_read+0x98>
				hour_count -= 12;
     a94:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     a98:	2c 50       	subi	r18, 0x0C	; 12
     a9a:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <hour_count>
     a9e:	a6 ce       	rjmp	.-692    	; 0x7ec <button_encoder_read+0x98>

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     aa0:	21 30       	cpi	r18, 0x01	; 1
     aa2:	49 f7       	brne	.-46     	; 0xa76 <button_encoder_read+0x322>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
     aa4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <pm_flag>
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
     aa8:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     aac:	2c 30       	cpi	r18, 0x0C	; 12
     aae:	09 f4       	brne	.+2      	; 0xab2 <button_encoder_read+0x35e>
     ab0:	9d ce       	rjmp	.-710    	; 0x7ec <button_encoder_read+0x98>
				hour_count += 12;
     ab2:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     ab6:	24 5f       	subi	r18, 0xF4	; 244
     ab8:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <hour_count>
     abc:	97 ce       	rjmp	.-722    	; 0x7ec <button_encoder_read+0x98>

00000abe <clock_count>:
 * mode.
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
     abe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <isr_count>
     ac2:	80 38       	cpi	r24, 0x80	; 128
     ac4:	09 f4       	brne	.+2      	; 0xac8 <clock_count+0xa>
     ac6:	82 c0       	rjmp	.+260    	; 0xbcc <clock_count+0x10e>
     ac8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <ten_sec_count>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
     acc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count>
     ad0:	9c 33       	cpi	r25, 0x3C	; 60
     ad2:	09 f4       	brne	.+2      	; 0xad6 <clock_count+0x18>
     ad4:	6f c0       	rjmp	.+222    	; 0xbb4 <clock_count+0xf6>
		}
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
     ad6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <min_count>
     ada:	9c 33       	cpi	r25, 0x3C	; 60
     adc:	09 f4       	brne	.+2      	; 0xae0 <clock_count+0x22>
     ade:	5e c0       	rjmp	.+188    	; 0xb9c <clock_count+0xde>
		}

		min_count = 0;
  	}
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
     ae0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     ae4:	9d 30       	cpi	r25, 0x0D	; 13
     ae6:	b0 f0       	brcs	.+44     	; 0xb14 <clock_count+0x56>
     ae8:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hour24_flag>
     aec:	91 11       	cpse	r25, r1
     aee:	12 c0       	rjmp	.+36     	; 0xb14 <clock_count+0x56>
		hour_count -= 12;	
     af0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     af4:	9c 50       	subi	r25, 0x0C	; 12
     af6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <hour_count>
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     afa:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <min_count>
     afe:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <alarm_time_min>
     b02:	29 17       	cp	r18, r25
     b04:	d1 f0       	breq	.+52     	; 0xb3a <clock_count+0x7c>
			lcd_flag = 0x01;				//update lcd
		}
	}
	//else meaning that the actual time does not equal saved alarm time
	else{
		trigger_alarm = 0;
     b06:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <trigger_alarm>
		alarm_match_count = 0;
     b0a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <alarm_match_count>
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
     b0e:	8a 30       	cpi	r24, 0x0A	; 10
     b10:	99 f1       	breq	.+102    	; 0xb78 <clock_count+0xba>
     b12:	08 95       	ret
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	//bind the hour to 0 and 24 if 24 hour flag is set
	else if(hour_count >= 24 && hour24_flag == 0x01){
     b14:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     b18:	98 31       	cpi	r25, 0x18	; 24
     b1a:	78 f3       	brcs	.-34     	; 0xafa <clock_count+0x3c>
     b1c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hour24_flag>
     b20:	91 30       	cpi	r25, 0x01	; 1
     b22:	59 f7       	brne	.-42     	; 0xafa <clock_count+0x3c>
		hour_count -= 24;
     b24:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     b28:	98 51       	subi	r25, 0x18	; 24
     b2a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <hour_count>
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     b2e:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <min_count>
     b32:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <alarm_time_min>
     b36:	29 13       	cpse	r18, r25
     b38:	e6 cf       	rjmp	.-52     	; 0xb06 <clock_count+0x48>
     b3a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <hour_count>
     b3e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <alarm_time_hour>
     b42:	29 13       	cpse	r18, r25
     b44:	e0 cf       	rjmp	.-64     	; 0xb06 <clock_count+0x48>
     b46:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <temp_pm_flag>
     b4a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <pm_flag>
     b4e:	29 13       	cpse	r18, r25
     b50:	da cf       	rjmp	.-76     	; 0xb06 <clock_count+0x48>
     b52:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <adjust_alarm>
     b56:	91 11       	cpse	r25, r1
     b58:	d6 cf       	rjmp	.-84     	; 0xb06 <clock_count+0x48>
		if(alarm_match_count == 0 && alarm_is_set == 0x01){			//a check so that this only goes in once
     b5a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <alarm_match_count>
     b5e:	91 11       	cpse	r25, r1
     b60:	d6 cf       	rjmp	.-84     	; 0xb0e <clock_count+0x50>
     b62:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <alarm_is_set>
     b66:	91 30       	cpi	r25, 0x01	; 1
     b68:	91 f6       	brne	.-92     	; 0xb0e <clock_count+0x50>
			trigger_alarm = 0x01;			//start the beeping
     b6a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <trigger_alarm>
			alarm_match_count = 0x01;
     b6e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <alarm_match_count>
			lcd_flag = 0x01;				//update lcd
     b72:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <lcd_flag>
     b76:	cb cf       	rjmp	.-106    	; 0xb0e <clock_count+0x50>
		alarm_match_count = 0;
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
		trigger_alarm = 0x01;			//initiate beep again after 10 second snooze
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <trigger_alarm>
		ten_sec_start = 0;				//reset the start variable
     b7e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <ten_sec_start>
		ten_sec_count = 0;				//reset the count variable
     b82:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <ten_sec_count>
		lcd_flag = 0x01;				//update lcd
     b86:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <lcd_flag>
		alarm_time_min = temp_min;		//beep for 1 minute
     b8a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <temp_min>
     b8e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <alarm_time_min>
		alarm_time_hour = temp_hour;		
     b92:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <temp_hour>
     b96:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <alarm_time_hour>
     b9a:	08 95       	ret
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
     b9c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     ba0:	9f 5f       	subi	r25, 0xFF	; 255
     ba2:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <hour_count>
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     ba6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <hour_count>
     baa:	9c 30       	cpi	r25, 0x0C	; 12
     bac:	79 f1       	breq	.+94     	; 0xc0c <clock_count+0x14e>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     bae:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <min_count>
     bb2:	96 cf       	rjmp	.-212    	; 0xae0 <clock_count+0x22>
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
     bb4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <trigger_alarm>
     bb8:	91 30       	cpi	r25, 0x01	; 1
     bba:	29 f1       	breq	.+74     	; 0xc06 <clock_count+0x148>
			lcd_flag = 0x01;
		}
	  	min_count++;
     bbc:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <min_count>
     bc0:	9f 5f       	subi	r25, 0xFF	; 255
     bc2:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <min_count>
		sec_count = 0;
     bc6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <sec_count>
     bca:	85 cf       	rjmp	.-246    	; 0xad6 <clock_count+0x18>
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
	  	sec_count++;				//increment 1 second
     bcc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <sec_count>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <sec_count>
		isr_count = 0;				//reset isr_count
     bd6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <isr_count>
		uart_send_flag ^= 0x01;
     bda:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uart_send_flag>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	98 27       	eor	r25, r24
     be2:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uart_send_flag>
		temp_read_flag ^= 0x01;
     be6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_read_flag>
     bea:	89 27       	eor	r24, r25
     bec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_read_flag>
	//	set_LCD();
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
     bf0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ten_sec_start>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <clock_count+0x13c>
     bf8:	67 cf       	rjmp	.-306    	; 0xac8 <clock_count+0xa>
			ten_sec_count++;
     bfa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <ten_sec_count>
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <ten_sec_count>
     c04:	63 cf       	rjmp	.-314    	; 0xacc <clock_count+0xe>
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
			lcd_flag = 0x01;
     c06:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <lcd_flag>
     c0a:	d8 cf       	rjmp	.-80     	; 0xbbc <clock_count+0xfe>
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     c0c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hour24_flag>
     c10:	91 11       	cpse	r25, r1
     c12:	cd cf       	rjmp	.-102    	; 0xbae <clock_count+0xf0>
			pm_flag ^= 0x01;
     c14:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <pm_flag>
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	92 27       	eor	r25, r18
     c1c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <pm_flag>
     c20:	c6 cf       	rjmp	.-116    	; 0xbae <clock_count+0xf0>

00000c22 <set_LCD>:
* Description: Update the LCD display to show the current state of the alarm
* clock, such as buzzing an alarm, snoozed, or the alarm is not buzzing.
*************************************************************************/
void set_LCD(){
	//clear current contents in display
   clear_display();
     c22:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <clear_display>
   cursor_home();
     c26:	0e 94 92 08 	call	0x1124	; 0x1124 <cursor_home>
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
     c2a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <trigger_alarm>
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	c1 f0       	breq	.+48     	; 0xc62 <set_LCD+0x40>
	  //	line2_col1();
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
     c32:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ten_sec_start>
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	c9 f0       	breq	.+50     	; 0xc6c <set_LCD+0x4a>
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
     c3a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <alarm_is_set>
     c3e:	88 23       	and	r24, r24
     c40:	21 f0       	breq	.+8      	; 0xc4a <set_LCD+0x28>
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	41 f0       	breq	.+16     	; 0xc56 <set_LCD+0x34>
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     c46:	0c 94 92 08 	jmp	0x1124	; 0x1124 <cursor_home>
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
     c4a:	88 e2       	ldi	r24, 0x28	; 40
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <string2lcd>
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     c52:	0c 94 92 08 	jmp	0x1124	; 0x1124 <cursor_home>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
     c56:	86 e3       	ldi	r24, 0x36	; 54
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <string2lcd>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     c5e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <cursor_home>
	//clear current contents in display
   clear_display();
   cursor_home();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");			//tell lcd to show "ALARM" message
     c62:	87 e1       	ldi	r24, 0x17	; 23
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <string2lcd>
     c6a:	ed cf       	rjmp	.-38     	; 0xc46 <set_LCD+0x24>
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
     c6c:	80 e2       	ldi	r24, 0x20	; 32
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <string2lcd>
     c74:	e8 cf       	rjmp	.-48     	; 0xc46 <set_LCD+0x24>

00000c76 <set_LCD_temp>:
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
     c76:	0e 94 aa 08 	call	0x1154	; 0x1154 <line2_col1>
	string2lcd(temp_string);
     c7a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_string>
     c7e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_string+0x1>
     c82:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <string2lcd>

00000c86 <read_lm73_sensor>:

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
     c86:	42 e0       	ldi	r20, 0x02	; 2
     c88:	6c e9       	ldi	r22, 0x9C	; 156
     c8a:	71 e0       	ldi	r23, 0x01	; 1
     c8c:	80 e9       	ldi	r24, 0x90	; 144
     c8e:	0e 94 3e 0c 	call	0x187c	; 0x187c <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
     c92:	ec e9       	ldi	r30, 0x9C	; 156
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 81       	ld	r24, Z
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	98 2f       	mov	r25, r24
     c9c:	88 27       	eor	r24, r24
	temp_reading |= read_i2c_buffer[1];

	//returns temp_reading
	return temp_reading;
     c9e:	21 81       	ldd	r18, Z+1	; 0x01

}//temp_reading
     ca0:	82 2b       	or	r24, r18
     ca2:	08 95       	ret

00000ca4 <uart_send_read>:

void uart_send_read(){
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
	
	if(f_not_c == 0x01){
     ca8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <f_not_c>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	19 f1       	breq	.+70     	; 0xcf6 <uart_send_read+0x52>
		uart_putc('F');
		temp_string[11] = 'F';
	}
	else{
		uart_putc('C');
     cb0:	83 e4       	ldi	r24, 0x43	; 67
     cb2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <uart_putc>
		temp_string[11] = 'C';
     cb6:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     cba:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     cbe:	83 e4       	ldi	r24, 0x43	; 67
     cc0:	8b 87       	std	Y+11, r24	; 0x0b
		UDR0 = 'F';
	else
		UDR0 = 'C';
	*/
	
	asm volatile ("nop");
     cc2:	00 00       	nop
	temp_string[9] = uart_getc();
     cc4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uart_getc>
     cc8:	89 87       	std	Y+9, r24	; 0x09
     cca:	8f e8       	ldi	r24, 0x8F	; 143
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <uart_send_read+0x2a>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <uart_send_read+0x30>
     cd4:	00 00       	nop
	_delay_us(100);
	temp_string[10] = uart_getc();
     cd6:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     cda:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     cde:	0e 94 ab 0c 	call	0x1956	; 0x1956 <uart_getc>
     ce2:	8a 87       	std	Y+10, r24	; 0x0a
     ce4:	8f e8       	ldi	r24, 0x8F	; 143
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <uart_send_read+0x44>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <uart_send_read+0x4a>
     cee:	00 00       	nop
	_delay_us(100);
	//temp_string[11] = uart_getc();*/

}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret
}//temp_reading

void uart_send_read(){
	
	if(f_not_c == 0x01){
		uart_putc('F');
     cf6:	86 e4       	ldi	r24, 0x46	; 70
     cf8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <uart_putc>
		temp_string[11] = 'F';
     cfc:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     d00:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     d04:	86 e4       	ldi	r24, 0x46	; 70
     d06:	8b 87       	std	Y+11, r24	; 0x0b
     d08:	dc cf       	rjmp	.-72     	; 0xcc2 <uart_send_read+0x1e>

00000d0a <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <input_flag>

	isr_count++;
     d1c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <isr_count>
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <isr_count>

}//ISR
     d26:	8f 91       	pop	r24
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_14>:
* If it is, then toggle the PORTC bit 3 pin to drive the annoying beeping
* for the speakers.
*
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25

	//check if trigger alarm is set
	if(trigger_alarm == 0x01 && radio_trigger == 0){
     d40:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <trigger_alarm>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	39 f0       	breq	.+14     	; 0xd56 <__vector_14+0x24>
		PORTC ^= (1 << PC3);		//start toggling PC3
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz

	}

}//ISR
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){

	//check if trigger alarm is set
	if(trigger_alarm == 0x01 && radio_trigger == 0){
     d56:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <radio_trigger>
     d5a:	81 11       	cpse	r24, r1
     d5c:	f5 cf       	rjmp	.-22     	; 0xd48 <__vector_14+0x16>
		
		PORTC ^= (1 << PC3);		//start toggling PC3
     d5e:	95 b3       	in	r25, 0x15	; 21
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	89 27       	eor	r24, r25
     d64:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	9c e9       	ldi	r25, 0x9C	; 156
     d6a:	9d bd       	out	0x2d, r25	; 45
     d6c:	8c bd       	out	0x2c, r24	; 44

	}

}//ISR
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_21>:
* With a defined prescale value of 128, this triggers approximately every 
* 125kHz. It reads the voltage value of the Cds and outputs the 8 bit reading
* to the OCR2 for brightness adjust.
*************************************************************************/

ISR(ADC_vect){
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	8f 93       	push	r24

	//checks to see if the manual_brightness flag is cleared
	if(manual_brightness == 0)
     d88:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <manual_brightness>
     d8c:	81 11       	cpse	r24, r1
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <__vector_21+0x18>
		OCR2 = ADCH;		//if cleared, store the 8 bit number to OCR2
     d90:	85 b1       	in	r24, 0x05	; 5
     d92:	83 bd       	out	0x23, r24	; 35

}//ISR
     d94:	8f 91       	pop	r24
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	8f 93       	push	r24
	STC_interrupt = TRUE;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <STC_interrupt>
}
     db2:	8f 91       	pop	r24
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	81 11       	cpse	r24, r1
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <send_lcd+0x8>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dc8:	77 9b       	sbis	0x0e, 7	; 14
     dca:	fe cf       	rjmp	.-4      	; 0xdc8 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     dcc:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dce:	77 9b       	sbis	0x0e, 7	; 14
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ddc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de6:	08 95       	ret

00000de8 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     de8:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <i.2094>
     dec:	82 0f       	add	r24, r18
     dee:	91 1d       	adc	r25, r1
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	81 11       	cpse	r24, r1
     df6:	1f c0       	rjmp	.+62     	; 0xe36 <refresh_lcd+0x4e>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e02:	77 9b       	sbis	0x0e, 7	; 14
     e04:	fe cf       	rjmp	.-4      	; 0xe02 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     e06:	80 e2       	ldi	r24, 0x20	; 32
     e08:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e0a:	77 9b       	sbis	0x0e, 7	; 14
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e18:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     e22:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <i.2094>
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     e2c:	80 31       	cpi	r24, 0x10	; 16
     e2e:	49 f1       	breq	.+82     	; 0xe82 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     e30:	80 32       	cpi	r24, 0x20	; 32
     e32:	69 f0       	breq	.+26     	; 0xe4e <refresh_lcd+0x66>
     e34:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     e36:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <null_flag.2095>
     e3a:	91 11       	cpse	r25, r1
     e3c:	e0 cf       	rjmp	.-64     	; 0xdfe <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e42:	77 9b       	sbis	0x0e, 7	; 14
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     e46:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e48:	77 9b       	sbis	0x0e, 7	; 14
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <refresh_lcd+0x60>
     e4c:	e0 cf       	rjmp	.-64     	; 0xe0e <refresh_lcd+0x26>
     e4e:	85 ed       	ldi	r24, 0xD5	; 213
     e50:	8a 95       	dec	r24
     e52:	f1 f7       	brne	.-4      	; 0xe50 <refresh_lcd+0x68>
     e54:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e56:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e58:	77 9b       	sbis	0x0e, 7	; 14
     e5a:	fe cf       	rjmp	.-4      	; 0xe58 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     e5c:	80 e8       	ldi	r24, 0x80	; 128
     e5e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e60:	77 9b       	sbis	0x0e, 7	; 14
     e62:	fe cf       	rjmp	.-4      	; 0xe60 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     e78:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <null_flag.2095>
      i=0;
     e7c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <i.2094>
     e80:	08 95       	ret
     e82:	f5 ed       	ldi	r31, 0xD5	; 213
     e84:	fa 95       	dec	r31
     e86:	f1 f7       	brne	.-4      	; 0xe84 <refresh_lcd+0x9c>
     e88:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e8a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e8c:	77 9b       	sbis	0x0e, 7	; 14
     e8e:	fe cf       	rjmp	.-4      	; 0xe8c <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     e90:	80 ec       	ldi	r24, 0xC0	; 192
     e92:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e94:	77 9b       	sbis	0x0e, 7	; 14
     e96:	fe cf       	rjmp	.-4      	; 0xe94 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eac:	08 95       	ret

00000eae <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     eae:	66 0f       	add	r22, r22
     eb0:	66 0f       	add	r22, r22
     eb2:	66 0f       	add	r22, r22
     eb4:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eb6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eb8:	77 9b       	sbis	0x0e, 7	; 14
     eba:	fe cf       	rjmp	.-4      	; 0xeb8 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     ebc:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ebe:	77 9b       	sbis	0x0e, 7	; 14
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ec2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec6:	28 60       	ori	r18, 0x08	; 8
     ec8:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ecc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed0:	27 7f       	andi	r18, 0xF7	; 247
     ed2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed6:	25 ed       	ldi	r18, 0xD5	; 213
     ed8:	2a 95       	dec	r18
     eda:	f1 f7       	brne	.-4      	; 0xed8 <set_custom_character+0x2a>
     edc:	00 00       	nop
     ede:	fc 01       	movw	r30, r24
     ee0:	9c 01       	movw	r18, r24
     ee2:	28 5f       	subi	r18, 0xF8	; 248
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ee6:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     ee8:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eea:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eec:	77 9b       	sbis	0x0e, 7	; 14
     eee:	fe cf       	rjmp	.-4      	; 0xeec <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     ef0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ef2:	77 9b       	sbis	0x0e, 7	; 14
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ef6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efa:	88 60       	ori	r24, 0x08	; 8
     efc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f04:	87 7f       	andi	r24, 0xF7	; 247
     f06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f0a:	85 ed       	ldi	r24, 0xD5	; 213
     f0c:	8a 95       	dec	r24
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <set_custom_character+0x5e>
     f10:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     f12:	e2 17       	cp	r30, r18
     f14:	f3 07       	cpc	r31, r19
     f16:	41 f7       	brne	.-48     	; 0xee8 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     f18:	08 95       	ret

00000f1a <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     f1a:	90 e4       	ldi	r25, 0x40	; 64
     f1c:	89 9f       	mul	r24, r25
     f1e:	60 0d       	add	r22, r0
     f20:	11 24       	eor	r1, r1
     f22:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f24:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f26:	77 9b       	sbis	0x0e, 7	; 14
     f28:	fe cf       	rjmp	.-4      	; 0xf26 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     f2a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f2c:	77 9b       	sbis	0x0e, 7	; 14
     f2e:	fe cf       	rjmp	.-4      	; 0xf2c <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f44:	08 95       	ret

00000f46 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f46:	81 11       	cpse	r24, r1
     f48:	13 c0       	rjmp	.+38     	; 0xf70 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f4e:	77 9b       	sbis	0x0e, 7	; 14
     f50:	fe cf       	rjmp	.-4      	; 0xf4e <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     f52:	80 e3       	ldi	r24, 0x30	; 48
     f54:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f56:	77 9b       	sbis	0x0e, 7	; 14
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f68:	87 7f       	andi	r24, 0xF7	; 247
     f6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f6e:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f70:	84 36       	cpi	r24, 0x64	; 100
     f72:	b0 f4       	brcc	.+44     	; 0xfa0 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	60 f5       	brcc	.+88     	; 0xfd0 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f7c:	77 9b       	sbis	0x0e, 7	; 14
     f7e:	fe cf       	rjmp	.-4      	; 0xf7c <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f80:	9d ec       	ldi	r25, 0xCD	; 205
     f82:	89 9f       	mul	r24, r25
     f84:	91 2d       	mov	r25, r1
     f86:	11 24       	eor	r1, r1
     f88:	96 95       	lsr	r25
     f8a:	96 95       	lsr	r25
     f8c:	96 95       	lsr	r25
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	92 9f       	mul	r25, r18
     f92:	80 19       	sub	r24, r0
     f94:	11 24       	eor	r1, r1
     f96:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     f98:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f9a:	77 9b       	sbis	0x0e, 7	; 14
     f9c:	fe cf       	rjmp	.-4      	; 0xf9a <uint2lcd+0x54>
     f9e:	dd cf       	rjmp	.-70     	; 0xf5a <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     fa0:	99 e2       	ldi	r25, 0x29	; 41
     fa2:	89 9f       	mul	r24, r25
     fa4:	91 2d       	mov	r25, r1
     fa6:	11 24       	eor	r1, r1
     fa8:	92 95       	swap	r25
     faa:	9f 70       	andi	r25, 0x0F	; 15
     fac:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fae:	21 e0       	ldi	r18, 0x01	; 1
     fb0:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fb2:	77 9b       	sbis	0x0e, 7	; 14
     fb4:	fe cf       	rjmp	.-4      	; 0xfb2 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     fb6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fb8:	77 9b       	sbis	0x0e, 7	; 14
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fbc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fc0:	98 60       	ori	r25, 0x08	; 8
     fc2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fc6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fca:	97 7f       	andi	r25, 0xF7	; 247
     fcc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     fd0:	99 e2       	ldi	r25, 0x29	; 41
     fd2:	89 9f       	mul	r24, r25
     fd4:	91 2d       	mov	r25, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	92 95       	swap	r25
     fda:	9f 70       	andi	r25, 0x0F	; 15
     fdc:	38 2f       	mov	r19, r24
     fde:	24 e6       	ldi	r18, 0x64	; 100
     fe0:	92 9f       	mul	r25, r18
     fe2:	30 19       	sub	r19, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	2d ec       	ldi	r18, 0xCD	; 205
     fe8:	32 9f       	mul	r19, r18
     fea:	91 2d       	mov	r25, r1
     fec:	11 24       	eor	r1, r1
     fee:	96 95       	lsr	r25
     ff0:	96 95       	lsr	r25
     ff2:	96 95       	lsr	r25
     ff4:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ff6:	21 e0       	ldi	r18, 0x01	; 1
     ff8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ffa:	77 9b       	sbis	0x0e, 7	; 14
     ffc:	fe cf       	rjmp	.-4      	; 0xffa <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     ffe:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1000:	77 9b       	sbis	0x0e, 7	; 14
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1004:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1008:	98 60       	ori	r25, 0x08	; 8
    100a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    100e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1012:	97 7f       	andi	r25, 0xF7	; 247
    1014:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1018:	af cf       	rjmp	.-162    	; 0xf78 <uint2lcd+0x32>

0000101a <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    101a:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
    101c:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1024:	77 9b       	sbis	0x0e, 7	; 14
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    1028:	9d e2       	ldi	r25, 0x2D	; 45
    102a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    102c:	77 9b       	sbis	0x0e, 7	; 14
    102e:	fe cf       	rjmp	.-4      	; 0x102c <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1030:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1034:	98 60       	ori	r25, 0x08	; 8
    1036:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103e:	97 7f       	andi	r25, 0xF7	; 247
    1040:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1044:	95 ed       	ldi	r25, 0xD5	; 213
    1046:	9a 95       	dec	r25
    1048:	f1 f7       	brne	.-4      	; 0x1046 <int2lcd+0x2c>
    104a:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    104c:	81 95       	neg	r24
    104e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <uint2lcd>

00001052 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1052:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1054:	77 9b       	sbis	0x0e, 7	; 14
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1058:	8e e0       	ldi	r24, 0x0E	; 14
    105a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    105c:	77 9b       	sbis	0x0e, 7	; 14
    105e:	fe cf       	rjmp	.-4      	; 0x105c <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1060:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    106a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    106e:	87 7f       	andi	r24, 0xF7	; 247
    1070:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1074:	08 95       	ret

00001076 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1076:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1078:	77 9b       	sbis	0x0e, 7	; 14
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1080:	77 9b       	sbis	0x0e, 7	; 14
    1082:	fe cf       	rjmp	.-4      	; 0x1080 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1084:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1088:	88 60       	ori	r24, 0x08	; 8
    108a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    108e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1092:	87 7f       	andi	r24, 0xF7	; 247
    1094:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1098:	08 95       	ret

0000109a <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    109a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    109c:	77 9b       	sbis	0x0e, 7	; 14
    109e:	fe cf       	rjmp	.-4      	; 0x109c <shift_right+0x2>
  SPDR = byte;                        //send payload
    10a0:	8e e1       	ldi	r24, 0x1E	; 30
    10a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10a4:	77 9b       	sbis	0x0e, 7	; 14
    10a6:	fe cf       	rjmp	.-4      	; 0x10a4 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b6:	87 7f       	andi	r24, 0xF7	; 247
    10b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10bc:	08 95       	ret

000010be <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10be:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10c0:	77 9b       	sbis	0x0e, 7	; 14
    10c2:	fe cf       	rjmp	.-4      	; 0x10c0 <shift_left+0x2>
  SPDR = byte;                        //send payload
    10c4:	88 e1       	ldi	r24, 0x18	; 24
    10c6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10c8:	77 9b       	sbis	0x0e, 7	; 14
    10ca:	fe cf       	rjmp	.-4      	; 0x10c8 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10da:	87 7f       	andi	r24, 0xF7	; 247
    10dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e0:	08 95       	ret

000010e2 <strobe_lcd>:
    10e2:	e2 e6       	ldi	r30, 0x62	; 98
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	80 83       	st	Z, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	87 7f       	andi	r24, 0xF7	; 247
    10f0:	80 83       	st	Z, r24
    10f2:	08 95       	ret

000010f4 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10f6:	77 9b       	sbis	0x0e, 7	; 14
    10f8:	fe cf       	rjmp	.-4      	; 0x10f6 <clear_display+0x2>
  SPDR = byte;                        //send payload
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10fe:	77 9b       	sbis	0x0e, 7	; 14
    1100:	fe cf       	rjmp	.-4      	; 0x10fe <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1102:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    110c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1110:	87 7f       	andi	r24, 0xF7	; 247
    1112:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1116:	8f e1       	ldi	r24, 0x1F	; 31
    1118:	9c e1       	ldi	r25, 0x1C	; 28
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <__stack+0x1b>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <__stack+0x21>
    1120:	00 00       	nop
    1122:	08 95       	ret

00001124 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1124:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1126:	77 9b       	sbis	0x0e, 7	; 14
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    112e:	77 9b       	sbis	0x0e, 7	; 14
    1130:	fe cf       	rjmp	.-4      	; 0x112e <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1136:	88 60       	ori	r24, 0x08	; 8
    1138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    113c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1146:	8f e6       	ldi	r24, 0x6F	; 111
    1148:	97 e1       	ldi	r25, 0x17	; 23
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <cursor_home+0x26>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <cursor_home+0x2c>
    1150:	00 00       	nop
    1152:	08 95       	ret

00001154 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1154:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1156:	77 9b       	sbis	0x0e, 7	; 14
    1158:	fe cf       	rjmp	.-4      	; 0x1156 <line2_col1+0x2>
  SPDR = byte;                        //send payload
    115a:	80 ec       	ldi	r24, 0xC0	; 192
    115c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    115e:	77 9b       	sbis	0x0e, 7	; 14
    1160:	fe cf       	rjmp	.-4      	; 0x115e <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1162:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    116c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1176:	08 95       	ret

00001178 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1178:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    117a:	77 9b       	sbis	0x0e, 7	; 14
    117c:	fe cf       	rjmp	.-4      	; 0x117a <line1_col1+0x2>
  SPDR = byte;                        //send payload
    117e:	80 e8       	ldi	r24, 0x80	; 128
    1180:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1182:	77 9b       	sbis	0x0e, 7	; 14
    1184:	fe cf       	rjmp	.-4      	; 0x1182 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1186:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    118a:	88 60       	ori	r24, 0x08	; 8
    118c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1194:	87 7f       	andi	r24, 0xF7	; 247
    1196:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    119a:	08 95       	ret

0000119c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    119c:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    119e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    11a0:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11a2:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11a4:	77 9b       	sbis	0x0e, 7	; 14
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    11a8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11aa:	77 9b       	sbis	0x0e, 7	; 14
    11ac:	fe cf       	rjmp	.-4      	; 0x11aa <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11bc:	87 7f       	andi	r24, 0xF7	; 247
    11be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11c2:	85 ed       	ldi	r24, 0xD5	; 213
    11c4:	8a 95       	dec	r24
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <fill_spaces+0x28>
    11c8:	00 00       	nop
    11ca:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    11cc:	51 f7       	brne	.-44     	; 0x11a2 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
    11ce:	08 95       	ret

000011d0 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11d4:	77 9b       	sbis	0x0e, 7	; 14
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    11d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11da:	77 9b       	sbis	0x0e, 7	; 14
    11dc:	fe cf       	rjmp	.-4      	; 0x11da <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e2:	88 60       	ori	r24, 0x08	; 8
    11e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11f2:	08 95       	ret

000011f4 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    11f4:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11fc:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    11fe:	df 01       	movw	r26, r30
    1200:	a4 0f       	add	r26, r20
    1202:	b5 1f       	adc	r27, r21
    1204:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1206:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1208:	77 9b       	sbis	0x0e, 7	; 14
    120a:	fe cf       	rjmp	.-4      	; 0x1208 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    120c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    120e:	77 9b       	sbis	0x0e, 7	; 14
    1210:	fe cf       	rjmp	.-4      	; 0x120e <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1212:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1216:	98 60       	ori	r25, 0x08	; 8
    1218:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    121c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1220:	97 7f       	andi	r25, 0xF7	; 247
    1222:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1226:	85 ed       	ldi	r24, 0xD5	; 213
    1228:	8a 95       	dec	r24
    122a:	f1 f7       	brne	.-4      	; 0x1228 <string2lcd+0x34>
    122c:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	46 2f       	mov	r20, r22
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	df 01       	movw	r26, r30
    1236:	0d 90       	ld	r0, X+
    1238:	00 20       	and	r0, r0
    123a:	e9 f7       	brne	.-6      	; 0x1236 <string2lcd+0x42>
    123c:	9d 01       	movw	r18, r26
    123e:	2e 1b       	sub	r18, r30
    1240:	3f 0b       	sbc	r19, r31
    1242:	22 50       	subi	r18, 0x02	; 2
    1244:	31 09       	sbc	r19, r1
    1246:	24 17       	cp	r18, r20
    1248:	35 07       	cpc	r19, r21
    124a:	c8 f6       	brcc	.-78     	; 0x11fe <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
    124c:	08 95       	ret

0000124e <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	99 ef       	ldi	r25, 0xF9	; 249
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <lcd_init+0x4>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <lcd_init+0xa>
    1258:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1260:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1262:	77 9b       	sbis	0x0e, 7	; 14
    1264:	fe cf       	rjmp	.-4      	; 0x1262 <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1266:	80 e3       	ldi	r24, 0x30	; 48
    1268:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    126a:	77 9b       	sbis	0x0e, 7	; 14
    126c:	fe cf       	rjmp	.-4      	; 0x126a <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    126e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1272:	88 60       	ori	r24, 0x08	; 8
    1274:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    127c:	87 7f       	andi	r24, 0xF7	; 247
    127e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1282:	8f e5       	ldi	r24, 0x5F	; 95
    1284:	9d e6       	ldi	r25, 0x6D	; 109
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <lcd_init+0x38>
    128a:	00 c0       	rjmp	.+0      	; 0x128c <lcd_init+0x3e>
    128c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    128e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1290:	77 9b       	sbis	0x0e, 7	; 14
    1292:	fe cf       	rjmp	.-4      	; 0x1290 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1298:	77 9b       	sbis	0x0e, 7	; 14
    129a:	fe cf       	rjmp	.-4      	; 0x1298 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    129c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12a0:	88 60       	ori	r24, 0x08	; 8
    12a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12b0:	8f e5       	ldi	r24, 0x5F	; 95
    12b2:	9d e6       	ldi	r25, 0x6D	; 109
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <lcd_init+0x66>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <lcd_init+0x6c>
    12ba:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12bc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12be:	77 9b       	sbis	0x0e, 7	; 14
    12c0:	fe cf       	rjmp	.-4      	; 0x12be <lcd_init+0x70>
  SPDR = byte;                        //send payload
    12c2:	80 e3       	ldi	r24, 0x30	; 48
    12c4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c6:	77 9b       	sbis	0x0e, 7	; 14
    12c8:	fe cf       	rjmp	.-4      	; 0x12c6 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ce:	88 60       	ori	r24, 0x08	; 8
    12d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d8:	87 7f       	andi	r24, 0xF7	; 247
    12da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12de:	8f e5       	ldi	r24, 0x5F	; 95
    12e0:	9d e6       	ldi	r25, 0x6D	; 109
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <lcd_init+0x94>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <lcd_init+0x9a>
    12e8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12ea:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12ec:	77 9b       	sbis	0x0e, 7	; 14
    12ee:	fe cf       	rjmp	.-4      	; 0x12ec <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    12f0:	88 e3       	ldi	r24, 0x38	; 56
    12f2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12f4:	77 9b       	sbis	0x0e, 7	; 14
    12f6:	fe cf       	rjmp	.-4      	; 0x12f4 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12fc:	88 60       	ori	r24, 0x08	; 8
    12fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1302:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    130c:	8f e1       	ldi	r24, 0x1F	; 31
    130e:	9e e4       	ldi	r25, 0x4E	; 78
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <lcd_init+0xc2>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <lcd_init+0xc8>
    1316:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1318:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    131a:	77 9b       	sbis	0x0e, 7	; 14
    131c:	fe cf       	rjmp	.-4      	; 0x131a <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    131e:	88 e0       	ldi	r24, 0x08	; 8
    1320:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1322:	77 9b       	sbis	0x0e, 7	; 14
    1324:	fe cf       	rjmp	.-4      	; 0x1322 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1326:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1330:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1334:	87 7f       	andi	r24, 0xF7	; 247
    1336:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133a:	8f e1       	ldi	r24, 0x1F	; 31
    133c:	9e e4       	ldi	r25, 0x4E	; 78
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <lcd_init+0xf0>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <lcd_init+0xf6>
    1344:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1346:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1348:	77 9b       	sbis	0x0e, 7	; 14
    134a:	fe cf       	rjmp	.-4      	; 0x1348 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1350:	77 9b       	sbis	0x0e, 7	; 14
    1352:	fe cf       	rjmp	.-4      	; 0x1350 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1354:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1358:	88 60       	ori	r24, 0x08	; 8
    135a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    135e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1368:	8f e1       	ldi	r24, 0x1F	; 31
    136a:	9e e4       	ldi	r25, 0x4E	; 78
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <lcd_init+0x11e>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <lcd_init+0x124>
    1372:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1374:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1376:	77 9b       	sbis	0x0e, 7	; 14
    1378:	fe cf       	rjmp	.-4      	; 0x1376 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    137a:	86 e0       	ldi	r24, 0x06	; 6
    137c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    137e:	77 9b       	sbis	0x0e, 7	; 14
    1380:	fe cf       	rjmp	.-4      	; 0x137e <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1382:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1386:	88 60       	ori	r24, 0x08	; 8
    1388:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    138c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1396:	8f e1       	ldi	r24, 0x1F	; 31
    1398:	9e e4       	ldi	r25, 0x4E	; 78
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <lcd_init+0x14c>
    139e:	00 c0       	rjmp	.+0      	; 0x13a0 <lcd_init+0x152>
    13a0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13a2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13a4:	77 9b       	sbis	0x0e, 7	; 14
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    13a8:	8c e0       	ldi	r24, 0x0C	; 12
    13aa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13ac:	77 9b       	sbis	0x0e, 7	; 14
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13b4:	88 60       	ori	r24, 0x08	; 8
    13b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13be:	87 7f       	andi	r24, 0xF7	; 247
    13c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c4:	8f e1       	ldi	r24, 0x1F	; 31
    13c6:	9e e4       	ldi	r25, 0x4E	; 78
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <lcd_init+0x17a>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <lcd_init+0x180>
    13ce:	00 00       	nop
    13d0:	08 95       	ret

000013d2 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	69 97       	sbiw	r28, 0x19	; 25
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	14 2f       	mov	r17, r20
    1404:	42 2e       	mov	r4, r18
    1406:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    1408:	00 23       	and	r16, r16
    140a:	79 f0       	breq	.+30     	; 0x142a <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    140c:	6b 01       	movw	r12, r22
    140e:	7c 01       	movw	r14, r24
    1410:	cc 24       	eor	r12, r12
    1412:	f7 fc       	sbrc	r15, 7
    1414:	c3 94       	inc	r12
    1416:	dd 24       	eor	r13, r13
    1418:	ee 24       	eor	r14, r14
    141a:	ff 24       	eor	r15, r15
    141c:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    141e:	6b 01       	movw	r12, r22
    1420:	7c 01       	movw	r14, r24
    1422:	97 fd       	sbrc	r25, 7
    1424:	a3 c0       	rjmp	.+326    	; 0x156c <lcd_int32+0x19a>
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    142a:	44 20       	and	r4, r4
    142c:	09 f4       	brne	.+2      	; 0x1430 <lcd_int32+0x5e>
    142e:	96 c0       	rjmp	.+300    	; 0x155c <lcd_int32+0x18a>
    1430:	9e 01       	movw	r18, r28
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	59 01       	movw	r10, r18
    1438:	49 01       	movw	r8, r18
    143a:	66 24       	eor	r6, r6
    143c:	6a 94       	dec	r6
    143e:	64 0c       	add	r6, r4
    1440:	71 2c       	mov	r7, r1
    1442:	3f ef       	ldi	r19, 0xFF	; 255
    1444:	63 1a       	sub	r6, r19
    1446:	73 0a       	sbc	r7, r19
    1448:	6a 0c       	add	r6, r10
    144a:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 09 10 	call	0x2012	; 0x2012 <__divmodsi4>
    1458:	e6 2f       	mov	r30, r22
    145a:	2a 8b       	std	Y+18, r18	; 0x12
    145c:	3b 8b       	std	Y+19, r19	; 0x13
    145e:	4c 8b       	std	Y+20, r20	; 0x14
    1460:	5d 8b       	std	Y+21, r21	; 0x15
    1462:	6a 89       	ldd	r22, Y+18	; 0x12
    1464:	7b 89       	ldd	r23, Y+19	; 0x13
    1466:	8c 89       	ldd	r24, Y+20	; 0x14
    1468:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    146a:	20 e3       	ldi	r18, 0x30	; 48
    146c:	2e 0f       	add	r18, r30
    146e:	f4 01       	movw	r30, r8
    1470:	21 93       	st	Z+, r18
    1472:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1474:	6e 16       	cp	r6, r30
    1476:	7f 06       	cpc	r7, r31
    1478:	49 f7       	brne	.-46     	; 0x144c <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    147a:	99 24       	eor	r9, r9
    147c:	93 94       	inc	r9
    147e:	94 0c       	add	r9, r4
    1480:	f5 01       	movw	r30, r10
    1482:	e4 0d       	add	r30, r4
    1484:	f1 1d       	adc	r31, r1
    1486:	2e e2       	ldi	r18, 0x2E	; 46
    1488:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    148a:	2a e0       	ldi	r18, 0x0A	; 10
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	0e 94 09 10 	call	0x2012	; 0x2012 <__divmodsi4>
    1496:	e6 2f       	mov	r30, r22
    1498:	2a 8b       	std	Y+18, r18	; 0x12
    149a:	3b 8b       	std	Y+19, r19	; 0x13
    149c:	4c 8b       	std	Y+20, r20	; 0x14
    149e:	5d 8b       	std	Y+21, r21	; 0x15
    14a0:	6e 8b       	std	Y+22, r22	; 0x16
    14a2:	7f 8b       	std	Y+23, r23	; 0x17
    14a4:	88 8f       	std	Y+24, r24	; 0x18
    14a6:	99 8f       	std	Y+25, r25	; 0x19
    14a8:	6a 89       	ldd	r22, Y+18	; 0x12
    14aa:	7b 89       	ldd	r23, Y+19	; 0x13
    14ac:	8c 89       	ldd	r24, Y+20	; 0x14
    14ae:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    14b0:	31 e0       	ldi	r19, 0x01	; 1
    14b2:	39 0d       	add	r19, r9
    14b4:	d5 01       	movw	r26, r10
    14b6:	a9 0d       	add	r26, r9
    14b8:	b1 1d       	adc	r27, r1
    14ba:	e0 5d       	subi	r30, 0xD0	; 208
    14bc:	ec 93       	st	X, r30
    14be:	93 2e       	mov	r9, r19
        }while(qr.quot);
    14c0:	61 15       	cp	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	81 05       	cpc	r24, r1
    14c6:	91 05       	cpc	r25, r1
    14c8:	01 f7       	brne	.-64     	; 0x148a <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    14ca:	11 23       	and	r17, r17
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    14ce:	51 10       	cpse	r5, r1
    14d0:	4b c0       	rjmp	.+150    	; 0x1568 <lcd_int32+0x196>
    14d2:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    14d4:	31 17       	cp	r19, r17
    14d6:	38 f4       	brcc	.+14     	; 0x14e6 <lcd_int32+0x114>
    14d8:	f5 01       	movw	r30, r10
    14da:	e3 0f       	add	r30, r19
    14dc:	f1 1d       	adc	r31, r1
    14de:	90 83       	st	Z, r25
    14e0:	3f 5f       	subi	r19, 0xFF	; 255
    14e2:	13 13       	cpse	r17, r19
    14e4:	f9 cf       	rjmp	.-14     	; 0x14d8 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    14e6:	00 23       	and	r16, r16
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <lcd_int32+0x124>
    14ea:	f5 01       	movw	r30, r10
    14ec:	e3 0f       	add	r30, r19
    14ee:	f1 1d       	adc	r31, r1
    14f0:	9d e2       	ldi	r25, 0x2D	; 45
    14f2:	90 83       	st	Z, r25
    14f4:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14f6:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    14f8:	31 50       	subi	r19, 0x01	; 1
    14fa:	f5 01       	movw	r30, r10
    14fc:	e3 0f       	add	r30, r19
    14fe:	f1 1d       	adc	r31, r1
    1500:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1502:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1504:	77 9b       	sbis	0x0e, 7	; 14
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1508:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    150a:	77 9b       	sbis	0x0e, 7	; 14
    150c:	fe cf       	rjmp	.-4      	; 0x150a <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    150e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1512:	98 60       	ori	r25, 0x08	; 8
    1514:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1518:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    151c:	97 7f       	andi	r25, 0xF7	; 247
    151e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1522:	85 ed       	ldi	r24, 0xD5	; 213
    1524:	8a 95       	dec	r24
    1526:	f1 f7       	brne	.-4      	; 0x1524 <lcd_int32+0x152>
    1528:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    152a:	31 11       	cpse	r19, r1
    152c:	e5 cf       	rjmp	.-54     	; 0x14f8 <lcd_int32+0x126>

}
    152e:	69 96       	adiw	r28, 0x19	; 25
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	7f 90       	pop	r7
    1554:	6f 90       	pop	r6
    1556:	5f 90       	pop	r5
    1558:	4f 90       	pop	r4
    155a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    155c:	91 2c       	mov	r9, r1
    155e:	9e 01       	movw	r18, r28
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	59 01       	movw	r10, r18
    1566:	91 cf       	rjmp	.-222    	; 0x148a <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1568:	90 e3       	ldi	r25, 0x30	; 48
    156a:	b4 cf       	rjmp	.-152    	; 0x14d4 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    156c:	f0 94       	com	r15
    156e:	e0 94       	com	r14
    1570:	d0 94       	com	r13
    1572:	c0 94       	com	r12
    1574:	c1 1c       	adc	r12, r1
    1576:	d1 1c       	adc	r13, r1
    1578:	e1 1c       	adc	r14, r1
    157a:	f1 1c       	adc	r15, r1
    157c:	54 cf       	rjmp	.-344    	; 0x1426 <lcd_int32+0x54>

0000157e <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    157e:	5f 92       	push	r5
    1580:	6f 92       	push	r6
    1582:	7f 92       	push	r7
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	61 97       	sbiw	r28, 0x11	; 17
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	5c 01       	movw	r10, r24
    15ae:	96 2e       	mov	r9, r22
    15b0:	54 2e       	mov	r5, r20
    15b2:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    15b4:	8b 2c       	mov	r8, r11
    15b6:	88 1c       	adc	r8, r8
    15b8:	88 24       	eor	r8, r8
    15ba:	88 1c       	adc	r8, r8
    15bc:	78 2c       	mov	r7, r8
    15be:	9c 01       	movw	r18, r24
    15c0:	97 fd       	sbrc	r25, 7
    15c2:	9d c0       	rjmp	.+314    	; 0x16fe <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    15c4:	55 20       	and	r5, r5
    15c6:	09 f4       	brne	.+2      	; 0x15ca <lcd_int16+0x4c>
    15c8:	8e c0       	rjmp	.+284    	; 0x16e6 <lcd_int16+0x168>
    15ca:	8e 01       	movw	r16, r28
    15cc:	0f 5f       	subi	r16, 0xFF	; 255
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	78 01       	movw	r14, r16
    15d2:	cc 24       	eor	r12, r12
    15d4:	ca 94       	dec	r12
    15d6:	c5 0c       	add	r12, r5
    15d8:	d1 2c       	mov	r13, r1
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	c8 1a       	sub	r12, r24
    15de:	d8 0a       	sbc	r13, r24
    15e0:	c0 0e       	add	r12, r16
    15e2:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    15e4:	6a e0       	ldi	r22, 0x0A	; 10
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	c9 01       	movw	r24, r18
    15ea:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__divmodhi4>
    15ee:	46 2f       	mov	r20, r22
    15f0:	24 2f       	mov	r18, r20
    15f2:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    15f4:	80 5d       	subi	r24, 0xD0	; 208
    15f6:	f7 01       	movw	r30, r14
    15f8:	81 93       	st	Z+, r24
    15fa:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    15fc:	ec 15       	cp	r30, r12
    15fe:	fd 05       	cpc	r31, r13
    1600:	89 f7       	brne	.-30     	; 0x15e4 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1602:	ff 24       	eor	r15, r15
    1604:	f3 94       	inc	r15
    1606:	f5 0c       	add	r15, r5
    1608:	f8 01       	movw	r30, r16
    160a:	e5 0d       	add	r30, r5
    160c:	f1 1d       	adc	r31, r1
    160e:	8e e2       	ldi	r24, 0x2E	; 46
    1610:	80 83       	st	Z, r24
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1614:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    1616:	6a e0       	ldi	r22, 0x0A	; 10
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	c9 01       	movw	r24, r18
    161c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__divmodhi4>
    1620:	46 2f       	mov	r20, r22
    1622:	24 2f       	mov	r18, r20
    1624:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	9f 0d       	add	r25, r15
    162a:	f8 01       	movw	r30, r16
    162c:	ef 0d       	add	r30, r15
    162e:	f1 1d       	adc	r31, r1
    1630:	80 5d       	subi	r24, 0xD0	; 208
    1632:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1634:	21 15       	cp	r18, r1
    1636:	31 05       	cpc	r19, r1
    1638:	69 f7       	brne	.-38     	; 0x1614 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    163a:	61 10       	cpse	r6, r1
    163c:	59 c0       	rjmp	.+178    	; 0x16f0 <lcd_int16+0x172>
    163e:	b7 fc       	sbrc	r11, 7
    1640:	63 c0       	rjmp	.+198    	; 0x1708 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1642:	99 20       	and	r9, r9
    1644:	b1 f0       	breq	.+44     	; 0x1672 <lcd_int16+0xf4>
    1646:	68 2d       	mov	r22, r8
    1648:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    164a:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    164c:	29 2f       	mov	r18, r25
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	49 2d       	mov	r20, r9
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	46 1b       	sub	r20, r22
    1656:	57 0b       	sbc	r21, r23
    1658:	24 17       	cp	r18, r20
    165a:	35 07       	cpc	r19, r21
    165c:	54 f4       	brge	.+20     	; 0x1672 <lcd_int16+0xf4>
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	f8 01       	movw	r30, r16
    1662:	e2 0f       	add	r30, r18
    1664:	f3 1f       	adc	r31, r19
    1666:	80 83       	st	Z, r24
    1668:	29 2f       	mov	r18, r25
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	24 17       	cp	r18, r20
    166e:	35 07       	cpc	r19, r21
    1670:	b4 f3       	brlt	.-20     	; 0x165e <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1672:	77 20       	and	r7, r7
    1674:	31 f0       	breq	.+12     	; 0x1682 <lcd_int16+0x104>
    1676:	f8 01       	movw	r30, r16
    1678:	e9 0f       	add	r30, r25
    167a:	f1 1d       	adc	r31, r1
    167c:	8d e2       	ldi	r24, 0x2D	; 45
    167e:	80 83       	st	Z, r24
    1680:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1682:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	f8 01       	movw	r30, r16
    1688:	e9 0f       	add	r30, r25
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    168e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1690:	77 9b       	sbis	0x0e, 7	; 14
    1692:	fe cf       	rjmp	.-4      	; 0x1690 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1694:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1696:	77 9b       	sbis	0x0e, 7	; 14
    1698:	fe cf       	rjmp	.-4      	; 0x1696 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    169a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    169e:	88 60       	ori	r24, 0x08	; 8
    16a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16a8:	87 7f       	andi	r24, 0xF7	; 247
    16aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16ae:	f5 ed       	ldi	r31, 0xD5	; 213
    16b0:	fa 95       	dec	r31
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <lcd_int16+0x132>
    16b4:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    16b6:	91 11       	cpse	r25, r1
    16b8:	e5 cf       	rjmp	.-54     	; 0x1684 <lcd_int16+0x106>
}
    16ba:	61 96       	adiw	r28, 0x11	; 17
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	7f 90       	pop	r7
    16e0:	6f 90       	pop	r6
    16e2:	5f 90       	pop	r5
    16e4:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    16e6:	f1 2c       	mov	r15, r1
    16e8:	8e 01       	movw	r16, r28
    16ea:	0f 5f       	subi	r16, 0xFF	; 255
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	93 cf       	rjmp	.-218    	; 0x1616 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    16f0:	99 20       	and	r9, r9
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <lcd_int16+0x178>
    16f4:	be cf       	rjmp	.-132    	; 0x1672 <lcd_int16+0xf4>
    16f6:	68 2d       	mov	r22, r8
    16f8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	a7 cf       	rjmp	.-178    	; 0x164c <lcd_int16+0xce>
    16fe:	22 27       	eor	r18, r18
    1700:	33 27       	eor	r19, r19
    1702:	28 1b       	sub	r18, r24
    1704:	39 0b       	sbc	r19, r25
    1706:	5e cf       	rjmp	.-324    	; 0x15c4 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1708:	f3 94       	inc	r15
    170a:	f3 94       	inc	r15
    170c:	f8 01       	movw	r30, r16
    170e:	e9 0f       	add	r30, r25
    1710:	f1 1d       	adc	r31, r1
    1712:	8d e2       	ldi	r24, 0x2D	; 45
    1714:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1716:	99 20       	and	r9, r9
    1718:	59 f0       	breq	.+22     	; 0x1730 <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    171a:	2f 2d       	mov	r18, r15
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	49 2d       	mov	r20, r9
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	24 17       	cp	r18, r20
    1724:	35 07       	cpc	r19, r21
    1726:	24 f4       	brge	.+8      	; 0x1730 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1728:	9f 2d       	mov	r25, r15
                bSigned = 0;
    172a:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	97 cf       	rjmp	.-210    	; 0x165e <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1730:	9f 2d       	mov	r25, r15
    1732:	a7 cf       	rjmp	.-178    	; 0x1682 <lcd_int16+0x104>

00001734 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	0b b6       	in	r0, 0x3b	; 59
    1740:	0f 92       	push	r0
    1742:	2f 93       	push	r18
    1744:	3f 93       	push	r19
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1752:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1756:	8e 2f       	mov	r24, r30
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	fc 01       	movw	r30, r24
    175c:	38 97       	sbiw	r30, 0x08	; 8
    175e:	e1 35       	cpi	r30, 0x51	; 81
    1760:	f1 05       	cpc	r31, r1
    1762:	b0 f0       	brcs	.+44     	; 0x1790 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1764:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1768:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1772:	ff 91       	pop	r31
    1774:	ef 91       	pop	r30
    1776:	bf 91       	pop	r27
    1778:	af 91       	pop	r26
    177a:	9f 91       	pop	r25
    177c:	8f 91       	pop	r24
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	0f 90       	pop	r0
    1784:	0b be       	out	0x3b, r0	; 59
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1790:	ea 5b       	subi	r30, 0xBA	; 186
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1798:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <twi_buf_ptr.1780>
    179c:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <twi_buf>
    17a0:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <twi_buf+0x1>
    17a4:	e8 0f       	add	r30, r24
    17a6:	f1 1d       	adc	r31, r1
    17a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    17ac:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    17ae:	84 e9       	ldi	r24, 0x94	; 148
    17b0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    17b4:	de cf       	rjmp	.-68     	; 0x1772 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    17b6:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <twi_bus_addr>
    17ba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    17be:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    17c2:	85 e8       	ldi	r24, 0x85	; 133
    17c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    17c8:	d4 cf       	rjmp	.-88     	; 0x1772 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    17ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <twi_buf_ptr.1780>
    17ce:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <twi_msg_size>
    17d2:	89 17       	cp	r24, r25
    17d4:	60 f7       	brcc	.-40     	; 0x17ae <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    17d6:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <twi_buf>
    17da:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <twi_buf+0x1>
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	98 0f       	add	r25, r24
    17e2:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <twi_buf_ptr.1780>
    17e6:	e8 0f       	add	r30, r24
    17e8:	f1 1d       	adc	r31, r1
    17ea:	80 81       	ld	r24, Z
    17ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    17f0:	85 e8       	ldi	r24, 0x85	; 133
    17f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    17f6:	bd cf       	rjmp	.-134    	; 0x1772 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    17f8:	85 ea       	ldi	r24, 0xA5	; 165
    17fa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    17fe:	b9 cf       	rjmp	.-142    	; 0x1772 <__vector_33+0x3e>
    1800:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1804:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_msg_size>
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	dc f4       	brge	.+54     	; 0x184a <__vector_33+0x116>
    1814:	85 ec       	ldi	r24, 0xC5	; 197
    1816:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    181a:	ab cf       	rjmp	.-170    	; 0x1772 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    181c:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <twi_buf>
    1820:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <twi_buf+0x1>
    1824:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <twi_buf_ptr.1780>
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	28 0f       	add	r18, r24
    182c:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <twi_buf_ptr.1780>
    1830:	e8 0f       	add	r30, r24
    1832:	f1 1d       	adc	r31, r1
    1834:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1838:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    183a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_msg_size>
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	28 17       	cp	r18, r24
    1846:	39 07       	cpc	r19, r25
    1848:	2c f3       	brlt	.-54     	; 0x1814 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    184a:	85 e8       	ldi	r24, 0x85	; 133
    184c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1850:	90 cf       	rjmp	.-224    	; 0x1772 <__vector_33+0x3e>

00001852 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1852:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	08 95       	ret

0000185a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    185a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    185e:	90 fd       	sbrc	r25, 0
    1860:	fc cf       	rjmp	.-8      	; 0x185a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1862:	8e 7f       	andi	r24, 0xFE	; 254
    1864:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1868:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <twi_buf+0x1>
    186c:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    1870:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1874:	85 ea       	ldi	r24, 0xA5	; 165
    1876:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    187a:	08 95       	ret

0000187c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    187c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1880:	90 fd       	sbrc	r25, 0
    1882:	fc cf       	rjmp	.-8      	; 0x187c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    188a:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <twi_buf+0x1>
    188e:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    1892:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1896:	85 ea       	ldi	r24, 0xA5	; 165
    1898:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    189c:	08 95       	ret

0000189e <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    18a4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    18a8:	8c e0       	ldi	r24, 0x0C	; 12
    18aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    18ae:	08 95       	ret

000018b0 <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
    18b0:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
    18b2:	cb 01       	movw	r24, r22
    18b4:	88 0f       	add	r24, r24
    18b6:	89 2f       	mov	r24, r25
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 0b       	sbc	r25, r25
    18bc:	91 95       	neg	r25

	if(f_not_c == 0x01){
    18be:	41 30       	cpi	r20, 0x01	; 1
    18c0:	91 f4       	brne	.+36     	; 0x18e6 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
    18c2:	9c 01       	movw	r18, r24
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	28 0f       	add	r18, r24
    18d2:	39 1f       	adc	r19, r25
    18d4:	ad ec       	ldi	r26, 0xCD	; 205
    18d6:	bc ec       	ldi	r27, 0xCC	; 204
    18d8:	0e 94 31 10 	call	0x2062	; 0x2062 <__umulhisi3>
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    18e6:	4a e0       	ldi	r20, 0x0A	; 10
    18e8:	bf 01       	movw	r22, r30
    18ea:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__itoa_ncheck>

000018ee <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    18ee:	5d 9b       	sbis	0x0b, 5	; 11
    18f0:	fe cf       	rjmp	.-4      	; 0x18ee <uart_putc>
    UDR0 = data;    // Send data byte
    18f2:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    18f4:	5d 9b       	sbis	0x0b, 5	; 11
    18f6:	fe cf       	rjmp	.-4      	; 0x18f4 <uart_putc+0x6>
}
    18f8:	08 95       	ret

000018fa <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    18fa:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    18fc:	90 81       	ld	r25, Z
    18fe:	99 23       	and	r25, r25
    1900:	49 f0       	breq	.+18     	; 0x1914 <uart_puts+0x1a>
    1902:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1904:	5d 9b       	sbis	0x0b, 5	; 11
    1906:	fe cf       	rjmp	.-4      	; 0x1904 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1908:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    190a:	5d 9b       	sbis	0x0b, 5	; 11
    190c:	fe cf       	rjmp	.-4      	; 0x190a <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    190e:	91 91       	ld	r25, Z+
    1910:	91 11       	cpse	r25, r1
    1912:	f8 cf       	rjmp	.-16     	; 0x1904 <uart_puts+0xa>
    1914:	08 95       	ret

00001916 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1916:	9c 01       	movw	r18, r24
    1918:	fc 01       	movw	r30, r24
    191a:	44 91       	lpm	r20, Z
    191c:	44 23       	and	r20, r20
    191e:	69 f0       	breq	.+26     	; 0x193a <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	f9 01       	movw	r30, r18
    1924:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1926:	5d 9b       	sbis	0x0b, 5	; 11
    1928:	fe cf       	rjmp	.-4      	; 0x1926 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    192a:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    192c:	5d 9b       	sbis	0x0b, 5	; 11
    192e:	fe cf       	rjmp	.-4      	; 0x192c <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1930:	9c 01       	movw	r18, r24
    1932:	fc 01       	movw	r30, r24
    1934:	44 91       	lpm	r20, Z
    1936:	41 11       	cpse	r20, r1
    1938:	f3 cf       	rjmp	.-26     	; 0x1920 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    193a:	08 95       	ret

0000193c <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
    193c:	8a b1       	in	r24, 0x0a	; 10
    193e:	88 61       	ori	r24, 0x18	; 24
    1940:	8a b9       	out	0x0a, r24	; 10

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1942:	e5 e9       	ldi	r30, 0x95	; 149
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	86 60       	ori	r24, 0x06	; 6
    194a:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    194c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1950:	87 e6       	ldi	r24, 0x67	; 103
    1952:	89 b9       	out	0x09, r24	; 9
    1954:	08 95       	ret

00001956 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1956:	80 e8       	ldi	r24, 0x80	; 128
    1958:	9e e3       	ldi	r25, 0x3E	; 62
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <uart_getc+0xa>
    195c:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    195e:	21 f0       	breq	.+8      	; 0x1968 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1960:	5f 9b       	sbis	0x0b, 7	; 11
    1962:	fc cf       	rjmp	.-8      	; 0x195c <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1964:	8c b1       	in	r24, 0x0c	; 12
    1966:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1968:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    196a:	08 95       	ret

0000196c <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    196c:	84 e1       	ldi	r24, 0x14	; 20
    196e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	6e e2       	ldi	r22, 0x2E	; 46
    1976:	72 e0       	ldi	r23, 0x02	; 2
    1978:	82 e2       	ldi	r24, 0x22	; 34
    197a:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    197e:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1982:	81 11       	cpse	r24, r1
    1984:	fc cf       	rjmp	.-8      	; 0x197e <get_int_status+0x12>
    1986:	8f ea       	ldi	r24, 0xAF	; 175
    1988:	94 e0       	ldi	r25, 0x04	; 4
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <get_int_status+0x1e>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <get_int_status+0x24>
    1990:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	60 e5       	ldi	r22, 0x50	; 80
    1996:	72 e0       	ldi	r23, 0x02	; 2
    1998:	82 e2       	ldi	r24, 0x22	; 34
    199a:	0e 94 3e 0c 	call	0x187c	; 0x187c <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    199e:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    19a2:	81 11       	cpse	r24, r1
    19a4:	fc cf       	rjmp	.-8      	; 0x199e <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    19a6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <si4734_rd_buf>
    19aa:	08 95       	ret

000019ac <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    19ac:	80 e2       	ldi	r24, 0x20	; 32
    19ae:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    19b2:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    19b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    19be:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    19c2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    19c6:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
    19ca:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    19ce:	45 e0       	ldi	r20, 0x05	; 5
    19d0:	6e e2       	ldi	r22, 0x2E	; 46
    19d2:	72 e0       	ldi	r23, 0x02	; 2
    19d4:	82 e2       	ldi	r24, 0x22	; 34
    19d6:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    19da:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <STC_interrupt>
    19de:	88 23       	and	r24, r24
    19e0:	e1 f3       	breq	.-8      	; 0x19da <fm_tune_freq+0x2e>
}
    19e2:	08 95       	ret

000019e4 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    19e4:	80 e4       	ldi	r24, 0x40	; 64
    19e6:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    19ea:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    19ee:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <current_am_freq>
    19f2:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <current_am_freq+0x1>
    19f6:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    19fa:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    19fe:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    1a02:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
    1a06:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1a0a:	46 e0       	ldi	r20, 0x06	; 6
    1a0c:	6e e2       	ldi	r22, 0x2E	; 46
    1a0e:	72 e0       	ldi	r23, 0x02	; 2
    1a10:	82 e2       	ldi	r24, 0x22	; 34
    1a12:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1a16:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <STC_interrupt>
    1a1a:	88 23       	and	r24, r24
    1a1c:	e1 f3       	breq	.-8      	; 0x1a16 <am_tune_freq+0x32>
}
    1a1e:	08 95       	ret

00001a20 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    1a20:	ee e2       	ldi	r30, 0x2E	; 46
    1a22:	f2 e0       	ldi	r31, 0x02	; 2
    1a24:	80 e4       	ldi	r24, 0x40	; 64
    1a26:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    1a28:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    1a2a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_sw_freq>
    1a2e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <current_sw_freq+0x1>
    1a32:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    1a34:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1a36:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1a3c:	46 e0       	ldi	r20, 0x06	; 6
    1a3e:	bf 01       	movw	r22, r30
    1a40:	82 e2       	ldi	r24, 0x22	; 34
    1a42:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a46:	2f ef       	ldi	r18, 0xFF	; 255
    1a48:	87 ee       	ldi	r24, 0xE7	; 231
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	21 50       	subi	r18, 0x01	; 1
    1a4e:	80 40       	sbci	r24, 0x00	; 0
    1a50:	90 40       	sbci	r25, 0x00	; 0
    1a52:	e1 f7       	brne	.-8      	; 0x1a4c <sw_tune_freq+0x2c>
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <sw_tune_freq+0x36>
    1a56:	00 00       	nop
    1a58:	08 95       	ret

00001a5a <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
    1a5a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <current_radio_band>
    1a5e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <current_radio_band+0x1>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	91 05       	cpc	r25, r1
    1a66:	51 f1       	breq	.+84     	; 0x1abc <radio_pwr_dwn+0x62>
    1a68:	00 f1       	brcs	.+64     	; 0x1aaa <radio_pwr_dwn+0x50>
    1a6a:	02 97       	sbiw	r24, 0x02	; 2
    1a6c:	41 f4       	brne	.+16     	; 0x1a7e <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    1a6e:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <current_sw_freq>
    1a72:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <current_sw_freq+0x1>
    1a76:	8e e9       	ldi	r24, 0x9E	; 158
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	0e 94 c6 10 	call	0x218c	; 0x218c <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    1a7e:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <current_volume>
    1a82:	83 e8       	ldi	r24, 0x83	; 131
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 b9 10 	call	0x2172	; 0x2172 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1a8a:	81 e1       	ldi	r24, 0x11	; 17
    1a8c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	6e e2       	ldi	r22, 0x2E	; 46
    1a94:	72 e0       	ldi	r23, 0x02	; 2
    1a96:	82 e2       	ldi	r24, 0x22	; 34
    1a98:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a9c:	87 ed       	ldi	r24, 0xD7	; 215
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <radio_pwr_dwn+0x46>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <radio_pwr_dwn+0x4c>
    1aa6:	00 00       	nop
    1aa8:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    1aaa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1aae:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1ab2:	84 e8       	ldi	r24, 0x84	; 132
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	0e 94 c6 10 	call	0x218c	; 0x218c <eeprom_write_word>
    1aba:	e1 cf       	rjmp	.-62     	; 0x1a7e <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    1abc:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <current_am_freq>
    1ac0:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <current_am_freq+0x1>
    1ac4:	82 e9       	ldi	r24, 0x92	; 146
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	0e 94 c6 10 	call	0x218c	; 0x218c <eeprom_write_word>
    1acc:	d8 cf       	rjmp	.-80     	; 0x1a7e <radio_pwr_dwn+0x24>

00001ace <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1ace:	83 e2       	ldi	r24, 0x23	; 35
    1ad0:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1ada:	42 e0       	ldi	r20, 0x02	; 2
    1adc:	6e e2       	ldi	r22, 0x2E	; 46
    1ade:	72 e0       	ldi	r23, 0x02	; 2
    1ae0:	82 e2       	ldi	r24, 0x22	; 34
    1ae2:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1ae6:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1aea:	81 11       	cpse	r24, r1
    1aec:	fc cf       	rjmp	.-8      	; 0x1ae6 <fm_rsq_status+0x18>
    1aee:	8f ea       	ldi	r24, 0xAF	; 175
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <fm_rsq_status+0x24>
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <fm_rsq_status+0x2a>
    1af8:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1afa:	48 e0       	ldi	r20, 0x08	; 8
    1afc:	67 e3       	ldi	r22, 0x37	; 55
    1afe:	72 e0       	ldi	r23, 0x02	; 2
    1b00:	82 e2       	ldi	r24, 0x22	; 34
    1b02:	0e 94 3e 0c 	call	0x187c	; 0x187c <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1b06:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	fc cf       	rjmp	.-8      	; 0x1b06 <fm_rsq_status+0x38>
}
    1b0e:	08 95       	ret

00001b10 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1b10:	82 e2       	ldi	r24, 0x22	; 34
    1b12:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b1c:	42 e0       	ldi	r20, 0x02	; 2
    1b1e:	6e e2       	ldi	r22, 0x2E	; 46
    1b20:	72 e0       	ldi	r23, 0x02	; 2
    1b22:	82 e2       	ldi	r24, 0x22	; 34
    1b24:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1b28:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	fc cf       	rjmp	.-8      	; 0x1b28 <fm_tune_status+0x18>
    1b30:	8f ea       	ldi	r24, 0xAF	; 175
    1b32:	94 e0       	ldi	r25, 0x04	; 4
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <fm_tune_status+0x24>
    1b38:	00 c0       	rjmp	.+0      	; 0x1b3a <fm_tune_status+0x2a>
    1b3a:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1b3c:	48 e0       	ldi	r20, 0x08	; 8
    1b3e:	67 e3       	ldi	r22, 0x37	; 55
    1b40:	72 e0       	ldi	r23, 0x02	; 2
    1b42:	82 e2       	ldi	r24, 0x22	; 34
    1b44:	0e 94 3e 0c 	call	0x187c	; 0x187c <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1b48:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	fc cf       	rjmp	.-8      	; 0x1b48 <fm_tune_status+0x38>
}
    1b50:	08 95       	ret

00001b52 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    1b52:	82 e4       	ldi	r24, 0x42	; 66
    1b54:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	6e e2       	ldi	r22, 0x2E	; 46
    1b62:	72 e0       	ldi	r23, 0x02	; 2
    1b64:	82 e2       	ldi	r24, 0x22	; 34
    1b66:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1b6a:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	fc cf       	rjmp	.-8      	; 0x1b6a <am_tune_status+0x18>
    1b72:	8f ea       	ldi	r24, 0xAF	; 175
    1b74:	94 e0       	ldi	r25, 0x04	; 4
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <am_tune_status+0x24>
    1b7a:	00 c0       	rjmp	.+0      	; 0x1b7c <am_tune_status+0x2a>
    1b7c:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1b7e:	48 e0       	ldi	r20, 0x08	; 8
    1b80:	67 e3       	ldi	r22, 0x37	; 55
    1b82:	72 e0       	ldi	r23, 0x02	; 2
    1b84:	82 e2       	ldi	r24, 0x22	; 34
    1b86:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <twi_start_rd>

00001b8a <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    1b8a:	83 e4       	ldi	r24, 0x43	; 67
    1b8c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b96:	42 e0       	ldi	r20, 0x02	; 2
    1b98:	6e e2       	ldi	r22, 0x2E	; 46
    1b9a:	72 e0       	ldi	r23, 0x02	; 2
    1b9c:	82 e2       	ldi	r24, 0x22	; 34
    1b9e:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1ba2:	0e 94 29 0c 	call	0x1852	; 0x1852 <twi_busy>
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	fc cf       	rjmp	.-8      	; 0x1ba2 <am_rsq_status+0x18>
    1baa:	8f ea       	ldi	r24, 0xAF	; 175
    1bac:	94 e0       	ldi	r25, 0x04	; 4
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <am_rsq_status+0x24>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <am_rsq_status+0x2a>
    1bb4:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1bb6:	48 e0       	ldi	r20, 0x08	; 8
    1bb8:	67 e3       	ldi	r22, 0x37	; 55
    1bba:	72 e0       	ldi	r23, 0x02	; 2
    1bbc:	82 e2       	ldi	r24, 0x22	; 34
    1bbe:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <twi_start_rd>

00001bc2 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1bc2:	ee e2       	ldi	r30, 0x2E	; 46
    1bc4:	f2 e0       	ldi	r31, 0x02	; 2
    1bc6:	22 e1       	ldi	r18, 0x12	; 18
    1bc8:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1bca:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1bcc:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1bce:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1bd0:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1bd2:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1bd4:	46 e0       	ldi	r20, 0x06	; 6
    1bd6:	bf 01       	movw	r22, r30
    1bd8:	82 e2       	ldi	r24, 0x22	; 34
    1bda:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bde:	8f e3       	ldi	r24, 0x3F	; 63
    1be0:	9c e9       	ldi	r25, 0x9C	; 156
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <set_property+0x20>
    1be6:	00 c0       	rjmp	.+0      	; 0x1be8 <set_property+0x26>
    1be8:	00 00       	nop
    1bea:	08 95       	ret

00001bec <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    1bec:	84 e8       	ldi	r24, 0x84	; 132
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 b3 10 	call	0x2166	; 0x2166 <eeprom_read_word>
    1bf4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1bf8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1bfc:	83 e8       	ldi	r24, 0x83	; 131
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 ab 10 	call	0x2156	; 0x2156 <eeprom_read_byte>
    1c04:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1c08:	ee e2       	ldi	r30, 0x2E	; 46
    1c0a:	f2 e0       	ldi	r31, 0x02	; 2
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1c10:	80 e5       	ldi	r24, 0x50	; 80
    1c12:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1c14:	85 e0       	ldi	r24, 0x05	; 5
    1c16:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1c18:	43 e0       	ldi	r20, 0x03	; 3
    1c1a:	bf 01       	movw	r22, r30
    1c1c:	82 e2       	ldi	r24, 0x22	; 34
    1c1e:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    1c22:	2f ef       	ldi	r18, 0xFF	; 255
    1c24:	8b ed       	ldi	r24, 0xDB	; 219
    1c26:	95 e0       	ldi	r25, 0x05	; 5
    1c28:	21 50       	subi	r18, 0x01	; 1
    1c2a:	80 40       	sbci	r24, 0x00	; 0
    1c2c:	90 40       	sbci	r25, 0x00	; 0
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <fm_pwr_up+0x3c>
    1c30:	00 c0       	rjmp	.+0      	; 0x1c32 <fm_pwr_up+0x46>
    1c32:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <set_property>

00001c40 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1c40:	82 e9       	ldi	r24, 0x92	; 146
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 b3 10 	call	0x2166	; 0x2166 <eeprom_read_word>
    1c48:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <current_am_freq+0x1>
    1c4c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1c50:	83 e8       	ldi	r24, 0x83	; 131
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	0e 94 ab 10 	call	0x2156	; 0x2156 <eeprom_read_byte>
    1c58:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    1c5c:	ee e2       	ldi	r30, 0x2E	; 46
    1c5e:	f2 e0       	ldi	r31, 0x02	; 2
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1c64:	81 e5       	ldi	r24, 0x51	; 81
    1c66:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    1c68:	85 e0       	ldi	r24, 0x05	; 5
    1c6a:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1c6c:	43 e0       	ldi	r20, 0x03	; 3
    1c6e:	bf 01       	movw	r22, r30
    1c70:	82 e2       	ldi	r24, 0x22	; 34
    1c72:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    1c76:	2f ef       	ldi	r18, 0xFF	; 255
    1c78:	8b ed       	ldi	r24, 0xDB	; 219
    1c7a:	95 e0       	ldi	r25, 0x05	; 5
    1c7c:	21 50       	subi	r18, 0x01	; 1
    1c7e:	80 40       	sbci	r24, 0x00	; 0
    1c80:	90 40       	sbci	r25, 0x00	; 0
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <am_pwr_up+0x3c>
    1c84:	00 c0       	rjmp	.+0      	; 0x1c86 <am_pwr_up+0x46>
    1c86:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <set_property>

00001c94 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1c94:	8e e9       	ldi	r24, 0x9E	; 158
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	0e 94 b3 10 	call	0x2166	; 0x2166 <eeprom_read_word>
    1c9c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <current_sw_freq+0x1>
    1ca0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1ca4:	83 e8       	ldi	r24, 0x83	; 131
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	0e 94 ab 10 	call	0x2156	; 0x2156 <eeprom_read_byte>
    1cac:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1cb0:	ee e2       	ldi	r30, 0x2E	; 46
    1cb2:	f2 e0       	ldi	r31, 0x02	; 2
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1cb8:	81 e5       	ldi	r24, 0x51	; 81
    1cba:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1cc0:	43 e0       	ldi	r20, 0x03	; 3
    1cc2:	bf 01       	movw	r22, r30
    1cc4:	82 e2       	ldi	r24, 0x22	; 34
    1cc6:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	8b ed       	ldi	r24, 0xDB	; 219
    1cce:	95 e0       	ldi	r25, 0x05	; 5
    1cd0:	21 50       	subi	r18, 0x01	; 1
    1cd2:	80 40       	sbci	r24, 0x00	; 0
    1cd4:	90 40       	sbci	r25, 0x00	; 0
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <sw_pwr_up+0x3c>
    1cd8:	00 c0       	rjmp	.+0      	; 0x1cda <sw_pwr_up+0x46>
    1cda:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	93 e3       	ldi	r25, 0x33	; 51
    1ce4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	71 e0       	ldi	r23, 0x01	; 1
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	91 e3       	ldi	r25, 0x31	; 49
    1cf0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <set_property>

00001d00 <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    1d00:	80 ef       	ldi	r24, 0xF0	; 240
    1d02:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    1d04:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    1d06:	85 b3       	in	r24, 0x15	; 21
    1d08:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    1d0a:	8c e2       	ldi	r24, 0x2C	; 44
    1d0c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    1d10:	89 e0       	ldi	r24, 0x09	; 9
    1d12:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    1d16:	82 e1       	ldi	r24, 0x12	; 18
    1d18:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1d1c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour_count>
    1d20:	8d 30       	cpi	r24, 0x0D	; 13
    1d22:	18 f0       	brcs	.+6      	; 0x1d2a <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    1d2a:	0e 94 c9 00 	call	0x192	; 0x192 <initialization>

//initialize I2C
init_twi(); //called from twi_master.c
    1d2e:	0e 94 4f 0c 	call	0x189e	; 0x189e <init_twi>
uart_init();
    1d32:	0e 94 9e 0c 	call	0x193c	; 0x193c <uart_init>
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	80 e9       	ldi	r24, 0x90	; 144
    1d3e:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_start_wr>
	asm volatile("nop");	
    1d42:	00 00       	nop
//initialize I2C
init_twi(); //called from twi_master.c
uart_init();
init_lm73_sensor();

EICRB |= (1<<ISC71) | (1<ISC70);
    1d44:	8a b7       	in	r24, 0x3a	; 58
    1d46:	81 68       	ori	r24, 0x81	; 129
    1d48:	8a bf       	out	0x3a, r24	; 58
EIMSK |= (1<<INT7);
    1d4a:	89 b7       	in	r24, 0x39	; 57
    1d4c:	80 68       	ori	r24, 0x80	; 128
    1d4e:	89 bf       	out	0x39, r24	; 57
    1d50:	8f e3       	ldi	r24, 0x3F	; 63
    1d52:	9f e1       	ldi	r25, 0x1F	; 31
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <main+0x54>
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <main+0x5a>
    1d5a:	00 00       	nop

_delay_ms(2);

//enable global interrupts
sei();
    1d5c:	78 94       	sei

//radio_init();
//radio_pwr_dwn();

//initially set output compare register for TC2 to 0 (brightness control)
OCR2 = 0;
    1d5e:	13 bc       	out	0x23, r1	; 35
//initially set output compare register for TC3 to 200 (volume control)
OCR3A = 200;
    1d60:	88 ec       	ldi	r24, 0xC8	; 200
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1d68:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

//initialize LCD
lcd_init();
    1d6c:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_init>
set_LCD();
    1d70:	0e 94 11 06 	call	0xc22	; 0xc22 <set_LCD>
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    1d74:	13 e4       	ldi	r17, 0x43	; 67
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    1d76:	06 e4       	ldi	r16, 0x46	; 70
			segsum(alarm_time_hour, alarm_time_min);
	}
	else
		segsum_freq(current_fm_freq);
  //make PORTA an output
	DDRA = 0xFF;
    1d78:	cf ef       	ldi	r28, 0xFF	; 255
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		if(radio_tune == 0x01)
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1d7a:	90 e2       	ldi	r25, 0x20	; 32
    1d7c:	d9 2e       	mov	r13, r25
    1d7e:	20 e4       	ldi	r18, 0x40	; 64
    1d80:	e2 2e       	mov	r14, r18
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    1d82:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1d84:	36 9a       	sbi	0x06, 6	; 6

	if(radio_tune == 0x01 && radio_trig_once == 0x01){
    1d86:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <radio_tune>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <main+0x90>
    1d8e:	8d c0       	rjmp	.+282    	; 0x1eaa <main+0x1aa>
		radio_init();
		radio_trig_once = 0;
	}
	else if(radio_tune == 0 && radio_power_down == 0x01){
    1d90:	81 11       	cpse	r24, r1
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <main+0x9e>
    1d94:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <main+0x9e>
    1d9c:	fd c0       	rjmp	.+506    	; 0x1f98 <main+0x298>
		radio_pwr_dwn();
		radio_power_down = 0;
	}*/

	
	if(temp_read_flag == 0x01){
    1d9e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_read_flag>
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <main+0xa8>
    1da6:	8f c0       	rjmp	.+286    	; 0x1ec6 <main+0x1c6>
		else
			temp_string[5] = 'C';		
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    1da8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <uart_send_flag>
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <main+0xb2>
    1db0:	b6 c0       	rjmp	.+364    	; 0x1f1e <main+0x21e>
		uart_send_flag = 0x00;
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1db2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <input_flag>
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <main+0xbc>
    1dba:	c2 c0       	rjmp	.+388    	; 0x1f40 <main+0x240>
	  	button_encoder_read();		//if so, read the encoders/buttons
	  	input_flag = FALSE;
  	}
	
	//update the clock counters
	clock_count();
    1dbc:	0e 94 5f 05 	call	0xabe	; 0xabe <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1dc0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcd_flag>
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <main+0xca>
    1dc8:	c6 c0       	rjmp	.+396    	; 0x1f56 <main+0x256>
		set_LCD();
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    1dca:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <adjust_alarm>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	cb c0       	rjmp	.+406    	; 0x1f68 <main+0x268>
		temp_min = min_count;
    1dd2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <min_count>
    1dd6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <temp_min>
		temp_hour = hour_count;
    1dda:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour_count>
    1dde:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
		temp_hour = alarm_time_hour;
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(radio_tune == 0){
    1de2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <radio_tune>
    1de6:	81 11       	cpse	r24, r1
    1de8:	d0 c0       	rjmp	.+416    	; 0x1f8a <main+0x28a>
		if(adjust_alarm == 0)
			segsum(hour_count, min_count);
    1dea:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <min_count>
    1dee:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <hour_count>
    1df2:	0e 94 15 02 	call	0x42a	; 0x42a <segsum>
			segsum(alarm_time_hour, alarm_time_min);
	}
	else
		segsum_freq(current_fm_freq);
  //make PORTA an output
	DDRA = 0xFF;
    1df6:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1df8:	00 00       	nop
    1dfa:	a0 ea       	ldi	r26, 0xA0	; 160
    1dfc:	b1 e0       	ldi	r27, 0x01	; 1
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1e06:	ed 91       	ld	r30, X+
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	e1 31       	cpi	r30, 0x11	; 17
    1e0e:	30 f5       	brcc	.+76     	; 0x1e5c <main+0x15c>
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	ea 5f       	subi	r30, 0xFA	; 250
    1e14:	fe 4f       	sbci	r31, 0xFE	; 254
    1e16:	40 81       	ld	r20, Z
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	19 f1       	breq	.+70     	; 0x1e62 <main+0x162>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	91 05       	cpc	r25, r1
    1e20:	51 f1       	breq	.+84     	; 0x1e76 <main+0x176>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	91 05       	cpc	r25, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <main+0x12a>
    1e28:	be c0       	rjmp	.+380    	; 0x1fa6 <main+0x2a6>
    1e2a:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		if(radio_tune == 0x01)
    1e2e:	51 30       	cpi	r21, 0x01	; 1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <main+0x134>
    1e32:	a9 c0       	rjmp	.+338    	; 0x1f86 <main+0x286>
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1e34:	58 2f       	mov	r21, r24
    1e36:	52 95       	swap	r21
    1e38:	50 7f       	andi	r21, 0xF0	; 240
    1e3a:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1e3c:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e3e:	ef e3       	ldi	r30, 0x3F	; 63
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	31 97       	sbiw	r30, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <main+0x142>
    1e46:	00 c0       	rjmp	.+0      	; 0x1e48 <main+0x148>
    1e48:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    1e4a:	25 30       	cpi	r18, 0x05	; 5
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	29 f1       	breq	.+74     	; 0x1e9a <main+0x19a>
    1e50:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1e52:	ed 91       	ld	r30, X+
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	e1 31       	cpi	r30, 0x11	; 17
    1e5a:	d0 f2       	brcs	.-76     	; 0x1e10 <main+0x110>
    1e5c:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	e9 f6       	brne	.-70     	; 0x1e1c <main+0x11c>
    1e62:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <alarm_is_set>
    1e66:	51 30       	cpi	r21, 0x01	; 1
    1e68:	01 f7       	brne	.-64     	; 0x1e2a <main+0x12a>
    1e6a:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
    1e6e:	51 11       	cpse	r21, r1
    1e70:	de cf       	rjmp	.-68     	; 0x1e2e <main+0x12e>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
    1e72:	4f 77       	andi	r20, 0x7F	; 127
    1e74:	df cf       	rjmp	.-66     	; 0x1e34 <main+0x134>
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1e76:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <pm_flag>
    1e7a:	51 30       	cpi	r21, 0x01	; 1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <main+0x180>
    1e7e:	ab c0       	rjmp	.+342    	; 0x1fd6 <main+0x2d6>
    1e80:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		if(radio_tune == 0x01)
    1e84:	51 30       	cpi	r21, 0x01	; 1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <main+0x18a>
    1e88:	7e c0       	rjmp	.+252    	; 0x1f86 <main+0x286>
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1e8a:	e8 ba       	out	0x18, r14	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1e8c:	4b bb       	out	0x1b, r20	; 27
    1e8e:	8f e3       	ldi	r24, 0x3F	; 63
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <main+0x192>
    1e96:	00 c0       	rjmp	.+0      	; 0x1e98 <main+0x198>
    1e98:	00 00       	nop
		//asm volatile ("nop");
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    1e9a:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1e9c:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1e9e:	36 9a       	sbi	0x06, 6	; 6

	if(radio_tune == 0x01 && radio_trig_once == 0x01){
    1ea0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <radio_tune>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <main+0x1aa>
    1ea8:	73 cf       	rjmp	.-282    	; 0x1d90 <main+0x90>
    1eaa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <radio_trig_once>
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <main+0x1b4>
    1eb2:	75 cf       	rjmp	.-278    	; 0x1d9e <main+0x9e>
		radio_init();
    1eb4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <radio_init>
		radio_trig_once = 0;
    1eb8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <radio_trig_once>
		radio_pwr_dwn();
		radio_power_down = 0;
	}*/

	
	if(temp_read_flag == 0x01){
    1ebc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_read_flag>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <main+0x1c6>
    1ec4:	71 cf       	rjmp	.-286    	; 0x1da8 <main+0xa8>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    1ec6:	f0 90 02 01 	lds	r15, 0x0102	; 0x800102 <f_not_c>

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
    1eca:	42 e0       	ldi	r20, 0x02	; 2
    1ecc:	6c e9       	ldi	r22, 0x9C	; 156
    1ece:	71 e0       	ldi	r23, 0x01	; 1
    1ed0:	80 e9       	ldi	r24, 0x90	; 144
    1ed2:	0e 94 3e 0c 	call	0x187c	; 0x187c <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
    1ed6:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <read_i2c_buffer>
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	76 2f       	mov	r23, r22
    1ede:	66 27       	eor	r22, r22
		radio_power_down = 0;
	}*/

	
	if(temp_read_flag == 0x01){
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    1ee0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <read_i2c_buffer+0x1>
    1ee4:	68 2b       	or	r22, r24
    1ee6:	4f 2d       	mov	r20, r15
    1ee8:	87 e9       	ldi	r24, 0x97	; 151
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <lm73_temp_convert>
		temp_string[3] = temp_digits[0];
    1ef0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <temp_string>
    1ef4:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <temp_string+0x1>
    1ef8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <temp_digits>
    1efc:	83 83       	std	Z+3, r24	; 0x03
		temp_string[4] = temp_digits[1];
    1efe:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <temp_digits+0x1>
    1f02:	84 83       	std	Z+4, r24	; 0x04
		temp_read_flag = 0x00;
    1f04:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_read_flag>
		if(f_not_c == 0x01)
    1f08:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <f_not_c>
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <main+0x212>
    1f10:	48 c0       	rjmp	.+144    	; 0x1fa2 <main+0x2a2>
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    1f12:	15 83       	std	Z+5, r17	; 0x05
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    1f14:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <uart_send_flag>
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <main+0x21e>
    1f1c:	4a cf       	rjmp	.-364    	; 0x1db2 <main+0xb2>
		uart_send_read();
    1f1e:	0e 94 52 06 	call	0xca4	; 0xca4 <uart_send_read>
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
    1f22:	0e 94 aa 08 	call	0x1154	; 0x1154 <line2_col1>
	string2lcd(temp_string);
    1f26:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_string>
    1f2a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_string+0x1>
    1f2e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <string2lcd>
	}
	
	if(uart_send_flag == 0x01){
		uart_send_read();
		set_LCD_temp();
		uart_send_flag = 0x00;
    1f32:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <uart_send_flag>
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1f36:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <input_flag>
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <main+0x240>
    1f3e:	3e cf       	rjmp	.-388    	; 0x1dbc <main+0xbc>
	  	button_encoder_read();		//if so, read the encoders/buttons
    1f40:	0e 94 aa 03 	call	0x754	; 0x754 <button_encoder_read>
	  	input_flag = FALSE;
    1f44:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <input_flag>
  	}
	
	//update the clock counters
	clock_count();
    1f48:	0e 94 5f 05 	call	0xabe	; 0xabe <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1f4c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <lcd_flag>
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <main+0x256>
    1f54:	3a cf       	rjmp	.-396    	; 0x1dca <main+0xca>
		lcd_flag = 0;
    1f56:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <lcd_flag>
		set_LCD();
    1f5a:	0e 94 11 06 	call	0xc22	; 0xc22 <set_LCD>
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    1f5e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <adjust_alarm>
    1f62:	88 23       	and	r24, r24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <main+0x268>
    1f66:	35 cf       	rjmp	.-406    	; 0x1dd2 <main+0xd2>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    1f68:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <alarm_time_min>
    1f6c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <temp_min>
		temp_hour = alarm_time_hour;
    1f70:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <alarm_time_hour>
    1f74:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <temp_hour>
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(radio_tune == 0){
    1f78:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <radio_tune>
    1f7c:	91 11       	cpse	r25, r1
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <main+0x28a>
		if(adjust_alarm == 0)
			segsum(hour_count, min_count);
		else
			segsum(alarm_time_hour, alarm_time_min);
    1f80:	0e 94 15 02 	call	0x42a	; 0x42a <segsum>
    1f84:	38 cf       	rjmp	.-400    	; 0x1df6 <main+0xf6>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		if(radio_tune == 0x01)
		PORTA = 0xFF;
    1f86:	cb bb       	out	0x1b, r28	; 27
    1f88:	55 cf       	rjmp	.-342    	; 0x1e34 <main+0x134>
			segsum(hour_count, min_count);
		else
			segsum(alarm_time_hour, alarm_time_min);
	}
	else
		segsum_freq(current_fm_freq);
    1f8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1f8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1f92:	0e 94 4a 01 	call	0x294	; 0x294 <segsum_freq>
    1f96:	2f cf       	rjmp	.-418    	; 0x1df6 <main+0xf6>
	if(radio_tune == 0x01 && radio_trig_once == 0x01){
		radio_init();
		radio_trig_once = 0;
	}
	else if(radio_tune == 0 && radio_power_down == 0x01){
		radio_pwr_dwn();
    1f98:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <radio_pwr_dwn>
		radio_power_down = 0;
    1f9c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
    1fa0:	fe ce       	rjmp	.-516    	; 0x1d9e <main+0x9e>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    1fa2:	05 83       	std	Z+5, r16	; 0x05
    1fa4:	01 cf       	rjmp	.-510    	; 0x1da8 <main+0xa8>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1fa6:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <trigger_alarm>
    1faa:	51 30       	cpi	r21, 0x01	; 1
    1fac:	71 f0       	breq	.+28     	; 0x1fca <main+0x2ca>
    1fae:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		if(radio_tune == 0x01)
    1fb2:	51 30       	cpi	r21, 0x01	; 1
    1fb4:	41 f3       	breq	.-48     	; 0x1f86 <main+0x286>
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1fb6:	d8 ba       	out	0x18, r13	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1fb8:	4b bb       	out	0x1b, r20	; 27
    1fba:	ef e3       	ldi	r30, 0x3F	; 63
    1fbc:	f1 e0       	ldi	r31, 0x01	; 1
    1fbe:	31 97       	sbiw	r30, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <main+0x2be>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <main+0x2c4>
    1fc4:	00 00       	nop
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	44 cf       	rjmp	.-376    	; 0x1e52 <main+0x152>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1fca:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
    1fce:	51 11       	cpse	r21, r1
    1fd0:	f0 cf       	rjmp	.-32     	; 0x1fb2 <main+0x2b2>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
    1fd2:	4b 7f       	andi	r20, 0xFB	; 251
    1fd4:	2f cf       	rjmp	.-418    	; 0x1e34 <main+0x134>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1fd6:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <hour24_flag>
    1fda:	51 11       	cpse	r21, r1
    1fdc:	51 cf       	rjmp	.-350    	; 0x1e80 <main+0x180>
    1fde:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <radio_tune>
    1fe2:	51 11       	cpse	r21, r1
    1fe4:	4f cf       	rjmp	.-354    	; 0x1e84 <main+0x184>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
    1fe6:	4f 77       	andi	r20, 0x7F	; 127
    1fe8:	50 cf       	rjmp	.-352    	; 0x1e8a <main+0x18a>

00001fea <__divmodhi4>:
    1fea:	97 fb       	bst	r25, 7
    1fec:	07 2e       	mov	r0, r23
    1fee:	16 f4       	brtc	.+4      	; 0x1ff4 <__divmodhi4+0xa>
    1ff0:	00 94       	com	r0
    1ff2:	07 d0       	rcall	.+14     	; 0x2002 <__divmodhi4_neg1>
    1ff4:	77 fd       	sbrc	r23, 7
    1ff6:	09 d0       	rcall	.+18     	; 0x200a <__divmodhi4_neg2>
    1ff8:	0e 94 40 10 	call	0x2080	; 0x2080 <__udivmodhi4>
    1ffc:	07 fc       	sbrc	r0, 7
    1ffe:	05 d0       	rcall	.+10     	; 0x200a <__divmodhi4_neg2>
    2000:	3e f4       	brtc	.+14     	; 0x2010 <__divmodhi4_exit>

00002002 <__divmodhi4_neg1>:
    2002:	90 95       	com	r25
    2004:	81 95       	neg	r24
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	08 95       	ret

0000200a <__divmodhi4_neg2>:
    200a:	70 95       	com	r23
    200c:	61 95       	neg	r22
    200e:	7f 4f       	sbci	r23, 0xFF	; 255

00002010 <__divmodhi4_exit>:
    2010:	08 95       	ret

00002012 <__divmodsi4>:
    2012:	05 2e       	mov	r0, r21
    2014:	97 fb       	bst	r25, 7
    2016:	1e f4       	brtc	.+6      	; 0x201e <__divmodsi4+0xc>
    2018:	00 94       	com	r0
    201a:	0e 94 20 10 	call	0x2040	; 0x2040 <__negsi2>
    201e:	57 fd       	sbrc	r21, 7
    2020:	07 d0       	rcall	.+14     	; 0x2030 <__divmodsi4_neg2>
    2022:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__udivmodsi4>
    2026:	07 fc       	sbrc	r0, 7
    2028:	03 d0       	rcall	.+6      	; 0x2030 <__divmodsi4_neg2>
    202a:	4e f4       	brtc	.+18     	; 0x203e <__divmodsi4_exit>
    202c:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__negsi2>

00002030 <__divmodsi4_neg2>:
    2030:	50 95       	com	r21
    2032:	40 95       	com	r20
    2034:	30 95       	com	r19
    2036:	21 95       	neg	r18
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	4f 4f       	sbci	r20, 0xFF	; 255
    203c:	5f 4f       	sbci	r21, 0xFF	; 255

0000203e <__divmodsi4_exit>:
    203e:	08 95       	ret

00002040 <__negsi2>:
    2040:	90 95       	com	r25
    2042:	80 95       	com	r24
    2044:	70 95       	com	r23
    2046:	61 95       	neg	r22
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	8f 4f       	sbci	r24, 0xFF	; 255
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	08 95       	ret

00002050 <__tablejump2__>:
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	00 24       	eor	r0, r0
    2056:	00 1c       	adc	r0, r0
    2058:	0b be       	out	0x3b, r0	; 59
    205a:	07 90       	elpm	r0, Z+
    205c:	f6 91       	elpm	r31, Z
    205e:	e0 2d       	mov	r30, r0
    2060:	09 94       	ijmp

00002062 <__umulhisi3>:
    2062:	a2 9f       	mul	r26, r18
    2064:	b0 01       	movw	r22, r0
    2066:	b3 9f       	mul	r27, r19
    2068:	c0 01       	movw	r24, r0
    206a:	a3 9f       	mul	r26, r19
    206c:	70 0d       	add	r23, r0
    206e:	81 1d       	adc	r24, r1
    2070:	11 24       	eor	r1, r1
    2072:	91 1d       	adc	r25, r1
    2074:	b2 9f       	mul	r27, r18
    2076:	70 0d       	add	r23, r0
    2078:	81 1d       	adc	r24, r1
    207a:	11 24       	eor	r1, r1
    207c:	91 1d       	adc	r25, r1
    207e:	08 95       	ret

00002080 <__udivmodhi4>:
    2080:	aa 1b       	sub	r26, r26
    2082:	bb 1b       	sub	r27, r27
    2084:	51 e1       	ldi	r21, 0x11	; 17
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <__udivmodhi4_ep>

00002088 <__udivmodhi4_loop>:
    2088:	aa 1f       	adc	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	a6 17       	cp	r26, r22
    208e:	b7 07       	cpc	r27, r23
    2090:	10 f0       	brcs	.+4      	; 0x2096 <__udivmodhi4_ep>
    2092:	a6 1b       	sub	r26, r22
    2094:	b7 0b       	sbc	r27, r23

00002096 <__udivmodhi4_ep>:
    2096:	88 1f       	adc	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	5a 95       	dec	r21
    209c:	a9 f7       	brne	.-22     	; 0x2088 <__udivmodhi4_loop>
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	08 95       	ret

000020a8 <__udivmodsi4>:
    20a8:	a1 e2       	ldi	r26, 0x21	; 33
    20aa:	1a 2e       	mov	r1, r26
    20ac:	aa 1b       	sub	r26, r26
    20ae:	bb 1b       	sub	r27, r27
    20b0:	fd 01       	movw	r30, r26
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <__udivmodsi4_ep>

000020b4 <__udivmodsi4_loop>:
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	ee 1f       	adc	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	a2 17       	cp	r26, r18
    20be:	b3 07       	cpc	r27, r19
    20c0:	e4 07       	cpc	r30, r20
    20c2:	f5 07       	cpc	r31, r21
    20c4:	20 f0       	brcs	.+8      	; 0x20ce <__udivmodsi4_ep>
    20c6:	a2 1b       	sub	r26, r18
    20c8:	b3 0b       	sbc	r27, r19
    20ca:	e4 0b       	sbc	r30, r20
    20cc:	f5 0b       	sbc	r31, r21

000020ce <__udivmodsi4_ep>:
    20ce:	66 1f       	adc	r22, r22
    20d0:	77 1f       	adc	r23, r23
    20d2:	88 1f       	adc	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	1a 94       	dec	r1
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <__udivmodsi4_loop>
    20da:	60 95       	com	r22
    20dc:	70 95       	com	r23
    20de:	80 95       	com	r24
    20e0:	90 95       	com	r25
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24
    20e6:	bd 01       	movw	r22, r26
    20e8:	cf 01       	movw	r24, r30
    20ea:	08 95       	ret

000020ec <__itoa_ncheck>:
    20ec:	bb 27       	eor	r27, r27
    20ee:	4a 30       	cpi	r20, 0x0A	; 10
    20f0:	31 f4       	brne	.+12     	; 0x20fe <__itoa_ncheck+0x12>
    20f2:	99 23       	and	r25, r25
    20f4:	22 f4       	brpl	.+8      	; 0x20fe <__itoa_ncheck+0x12>
    20f6:	bd e2       	ldi	r27, 0x2D	; 45
    20f8:	90 95       	com	r25
    20fa:	81 95       	neg	r24
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__utoa_common>

00002102 <__utoa_ncheck>:
    2102:	bb 27       	eor	r27, r27

00002104 <__utoa_common>:
    2104:	fb 01       	movw	r30, r22
    2106:	55 27       	eor	r21, r21
    2108:	aa 27       	eor	r26, r26
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	aa 1f       	adc	r26, r26
    2110:	a4 17       	cp	r26, r20
    2112:	10 f0       	brcs	.+4      	; 0x2118 <__utoa_common+0x14>
    2114:	a4 1b       	sub	r26, r20
    2116:	83 95       	inc	r24
    2118:	50 51       	subi	r21, 0x10	; 16
    211a:	b9 f7       	brne	.-18     	; 0x210a <__utoa_common+0x6>
    211c:	a0 5d       	subi	r26, 0xD0	; 208
    211e:	aa 33       	cpi	r26, 0x3A	; 58
    2120:	08 f0       	brcs	.+2      	; 0x2124 <__utoa_common+0x20>
    2122:	a9 5d       	subi	r26, 0xD9	; 217
    2124:	a1 93       	st	Z+, r26
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	79 f7       	brne	.-34     	; 0x2108 <__utoa_common+0x4>
    212a:	b1 11       	cpse	r27, r1
    212c:	b1 93       	st	Z+, r27
    212e:	11 92       	st	Z+, r1
    2130:	cb 01       	movw	r24, r22
    2132:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <strrev>

00002136 <strrev>:
    2136:	dc 01       	movw	r26, r24
    2138:	fc 01       	movw	r30, r24
    213a:	67 2f       	mov	r22, r23
    213c:	71 91       	ld	r23, Z+
    213e:	77 23       	and	r23, r23
    2140:	e1 f7       	brne	.-8      	; 0x213a <strrev+0x4>
    2142:	32 97       	sbiw	r30, 0x02	; 2
    2144:	04 c0       	rjmp	.+8      	; 0x214e <strrev+0x18>
    2146:	7c 91       	ld	r23, X
    2148:	6d 93       	st	X+, r22
    214a:	70 83       	st	Z, r23
    214c:	62 91       	ld	r22, -Z
    214e:	ae 17       	cp	r26, r30
    2150:	bf 07       	cpc	r27, r31
    2152:	c8 f3       	brcs	.-14     	; 0x2146 <strrev+0x10>
    2154:	08 95       	ret

00002156 <eeprom_read_byte>:
    2156:	e1 99       	sbic	0x1c, 1	; 28
    2158:	fe cf       	rjmp	.-4      	; 0x2156 <eeprom_read_byte>
    215a:	9f bb       	out	0x1f, r25	; 31
    215c:	8e bb       	out	0x1e, r24	; 30
    215e:	e0 9a       	sbi	0x1c, 0	; 28
    2160:	99 27       	eor	r25, r25
    2162:	8d b3       	in	r24, 0x1d	; 29
    2164:	08 95       	ret

00002166 <eeprom_read_word>:
    2166:	a8 e1       	ldi	r26, 0x18	; 24
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	42 e0       	ldi	r20, 0x02	; 2
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	0c 94 cd 10 	jmp	0x219a	; 0x219a <eeprom_read_blraw>

00002172 <eeprom_write_byte>:
    2172:	26 2f       	mov	r18, r22

00002174 <eeprom_write_r18>:
    2174:	e1 99       	sbic	0x1c, 1	; 28
    2176:	fe cf       	rjmp	.-4      	; 0x2174 <eeprom_write_r18>
    2178:	9f bb       	out	0x1f, r25	; 31
    217a:	8e bb       	out	0x1e, r24	; 30
    217c:	2d bb       	out	0x1d, r18	; 29
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	e2 9a       	sbi	0x1c, 2	; 28
    2184:	e1 9a       	sbi	0x1c, 1	; 28
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	08 95       	ret

0000218c <eeprom_write_word>:
    218c:	0e 94 b9 10 	call	0x2172	; 0x2172 <eeprom_write_byte>
    2190:	27 2f       	mov	r18, r23
    2192:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <eeprom_write_r18>

00002196 <eeprom_read_block>:
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22

0000219a <eeprom_read_blraw>:
    219a:	fc 01       	movw	r30, r24
    219c:	e1 99       	sbic	0x1c, 1	; 28
    219e:	fe cf       	rjmp	.-4      	; 0x219c <eeprom_read_blraw+0x2>
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <eeprom_read_blraw+0x14>
    21a2:	ff bb       	out	0x1f, r31	; 31
    21a4:	ee bb       	out	0x1e, r30	; 30
    21a6:	e0 9a       	sbi	0x1c, 0	; 28
    21a8:	31 96       	adiw	r30, 0x01	; 1
    21aa:	0d b2       	in	r0, 0x1d	; 29
    21ac:	0d 92       	st	X+, r0
    21ae:	41 50       	subi	r20, 0x01	; 1
    21b0:	50 40       	sbci	r21, 0x00	; 0
    21b2:	b8 f7       	brcc	.-18     	; 0x21a2 <eeprom_read_blraw+0x8>
    21b4:	08 95       	ret

000021b6 <_exit>:
    21b6:	f8 94       	cli

000021b8 <__stop_program>:
    21b8:	ff cf       	rjmp	.-2      	; 0x21b8 <__stop_program>
