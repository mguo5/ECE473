
lab6_code.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000204c  000020e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000204c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  0080014e  0080014e  0000212e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000212e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ee  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130d  00000000  00000000  00005b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cbe  00000000  00000000  00006e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba6  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024af  00000000  00000000  00009ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000c155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_14>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__vector_21>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	42 0b       	sbc	r20, r18
      8e:	19 0b       	sbc	r17, r25
      90:	19 0b       	sbc	r17, r25
      92:	19 0b       	sbc	r17, r25
      94:	19 0b       	sbc	r17, r25
      96:	19 0b       	sbc	r17, r25
      98:	19 0b       	sbc	r17, r25
      9a:	19 0b       	sbc	r17, r25
      9c:	42 0b       	sbc	r20, r18
      9e:	19 0b       	sbc	r17, r25
      a0:	19 0b       	sbc	r17, r25
      a2:	19 0b       	sbc	r17, r25
      a4:	19 0b       	sbc	r17, r25
      a6:	19 0b       	sbc	r17, r25
      a8:	19 0b       	sbc	r17, r25
      aa:	19 0b       	sbc	r17, r25
      ac:	4c 0b       	sbc	r20, r28
      ae:	19 0b       	sbc	r17, r25
      b0:	19 0b       	sbc	r17, r25
      b2:	19 0b       	sbc	r17, r25
      b4:	19 0b       	sbc	r17, r25
      b6:	19 0b       	sbc	r17, r25
      b8:	19 0b       	sbc	r17, r25
      ba:	19 0b       	sbc	r17, r25
      bc:	19 0b       	sbc	r17, r25
      be:	19 0b       	sbc	r17, r25
      c0:	19 0b       	sbc	r17, r25
      c2:	19 0b       	sbc	r17, r25
      c4:	19 0b       	sbc	r17, r25
      c6:	19 0b       	sbc	r17, r25
      c8:	19 0b       	sbc	r17, r25
      ca:	19 0b       	sbc	r17, r25
      cc:	4c 0b       	sbc	r20, r28
      ce:	19 0b       	sbc	r17, r25
      d0:	19 0b       	sbc	r17, r25
      d2:	19 0b       	sbc	r17, r25
      d4:	19 0b       	sbc	r17, r25
      d6:	19 0b       	sbc	r17, r25
      d8:	19 0b       	sbc	r17, r25
      da:	19 0b       	sbc	r17, r25
      dc:	19 0b       	sbc	r17, r25
      de:	19 0b       	sbc	r17, r25
      e0:	19 0b       	sbc	r17, r25
      e2:	19 0b       	sbc	r17, r25
      e4:	19 0b       	sbc	r17, r25
      e6:	19 0b       	sbc	r17, r25
      e8:	19 0b       	sbc	r17, r25
      ea:	19 0b       	sbc	r17, r25
      ec:	63 0b       	sbc	r22, r19
      ee:	19 0b       	sbc	r17, r25
      f0:	19 0b       	sbc	r17, r25
      f2:	19 0b       	sbc	r17, r25
      f4:	19 0b       	sbc	r17, r25
      f6:	19 0b       	sbc	r17, r25
      f8:	19 0b       	sbc	r17, r25
      fa:	19 0b       	sbc	r17, r25
      fc:	67 0b       	sbc	r22, r23
      fe:	19 0b       	sbc	r17, r25
     100:	19 0b       	sbc	r17, r25
     102:	19 0b       	sbc	r17, r25
     104:	19 0b       	sbc	r17, r25
     106:	19 0b       	sbc	r17, r25
     108:	19 0b       	sbc	r17, r25
     10a:	19 0b       	sbc	r17, r25
     10c:	19 0b       	sbc	r17, r25
     10e:	19 0b       	sbc	r17, r25
     110:	19 0b       	sbc	r17, r25
     112:	19 0b       	sbc	r17, r25
     114:	19 0b       	sbc	r17, r25
     116:	19 0b       	sbc	r17, r25
     118:	19 0b       	sbc	r17, r25
     11a:	19 0b       	sbc	r17, r25
     11c:	75 0b       	sbc	r23, r21
     11e:	19 0b       	sbc	r17, r25
     120:	19 0b       	sbc	r17, r25
     122:	19 0b       	sbc	r17, r25
     124:	19 0b       	sbc	r17, r25
     126:	19 0b       	sbc	r17, r25
     128:	19 0b       	sbc	r17, r25
     12a:	19 0b       	sbc	r17, r25
     12c:	33 0b       	sbc	r19, r19

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ec e4       	ldi	r30, 0x4C	; 76
     142:	f0 e2       	ldi	r31, 0x20	; 32
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ae 34       	cpi	r26, 0x4E	; 78
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	ae e4       	ldi	r26, 0x4E	; 78
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ad 35       	cpi	r26, 0x5D	; 93
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <main>
     168:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <real_time>:
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
     170:	81 e1       	ldi	r24, 0x11	; 17
     172:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
     176:	8c e1       	ldi	r24, 0x1C	; 28
     178:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
     17c:	8e e0       	ldi	r24, 0x0E	; 14
     17e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
     182:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     186:	8d 30       	cpi	r24, 0x0D	; 13
     188:	18 f0       	brcs	.+6      	; 0x190 <real_time+0x20>
//	hour_count -= 12;
	pm_flag = 0x01;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pm_flag>
     190:	08 95       	ret

00000192 <initialization>:
 * initialize Timer Counter 0 for overflow interrupt, and to initialize the SPI
 * bus for the encoders and bar graph display.
************************************************************************/
void initialization(){
	//initialize port b pins 3 as input, pins 2, 1, and 0 for output (SS, MOSI, SCLK)
	DDRB |= (0 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0);
     192:	87 b3       	in	r24, 0x17	; 23
     194:	87 60       	ori	r24, 0x07	; 7
     196:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//initialize port E as output
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//initialize port D as output
     19c:	81 bb       	out	0x11, r24	; 17


	SPCR = (1 << MSTR) | (0 << CPOL) | (0 << CPHA) | (1 << SPE);	//master mode, clk low, and leading edge
     19e:	80 e5       	ldi	r24, 0x50	; 80
     1a0:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);		//double speed operation
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	8e b9       	out	0x0e, r24	; 14


	ASSR |= (1 << AS0);			//enables external oscillator
     1a6:	80 b7       	in	r24, 0x30	; 48
     1a8:	88 60       	ori	r24, 0x08	; 8
     1aa:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);		//enable TC interrupt
     1ac:	87 b7       	in	r24, 0x37	; 55
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS00);		//128 prescale on normal mode
     1b2:	83 b7       	in	r24, 0x33	; 51
     1b4:	81 60       	ori	r24, 0x01	; 1
     1b6:	83 bf       	out	0x33, r24	; 51

	//enable fast PWM mode for TC2 for the seven segment adjust
	//prescale of 8
	//clear bit during output compare
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << CS20) | (0 << CS21) | (0 << CS22);
     1b8:	85 b5       	in	r24, 0x25	; 37
     1ba:	89 66       	ori	r24, 0x69	; 105
     1bc:	85 bd       	out	0x25, r24	; 37

	TCNT1 = 40000;				//set TCNT1 to obtain approximately 300Hz for beep
     1be:	80 e4       	ldi	r24, 0x40	; 64
     1c0:	9c e9       	ldi	r25, 0x9C	; 156
     1c2:	9d bd       	out	0x2d, r25	; 45
     1c4:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1 << TOIE1);		//enable TC1 interrupt
     1c6:	87 b7       	in	r24, 0x37	; 55
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0x00;				// normal mode
     1cc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS10) | (0 << CS11) | (0 << CS12);		//no prescale
     1ce:	8e b5       	in	r24, 0x2e	; 46
     1d0:	81 60       	ori	r24, 0x01	; 1
     1d2:	8e bd       	out	0x2e, r24	; 46

	//8-bit fast PWM for TC3 at PE3	 
	TCCR3A |= (0 << WGM31) | (1 << WGM30) | (1 << COM3A1) | (0 << COM3A0);
     1d4:	eb e8       	ldi	r30, 0x8B	; 139
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 68       	ori	r24, 0x81	; 129
     1dc:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33) | (0 << CS30) | (1 << CS31) | (0 << CS32);	//8 prescaler
     1de:	ea e8       	ldi	r30, 0x8A	; 138
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8a 60       	ori	r24, 0x0A	; 10
     1e6:	80 83       	st	Z, r24
	
	ADMUX = 0x67; //single-ended, input PORTF bit 7, left adjusted, 10 bits
     1e8:	87 e6       	ldi	r24, 0x67	; 103
     1ea:	87 b9       	out	0x07, r24	; 7
	//ADC enabled, start the conversion, single shot mode, interrupts enabled 
	ADCSRA = (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); 
     1ec:	8f e8       	ldi	r24, 0x8F	; 143
     1ee:	86 b9       	out	0x06, r24	; 6
     1f0:	08 95       	ret

000001f2 <radio_init>:
* Description: initializes the radio by doing the appropriate hardware reset of
* the radio module. This was from the code snippet handed out by Roger.
* After some experimentation, a loop of 5 times makes this radio turn on.
*****************************************************************************/

void radio_init(){
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	c2 e0       	ldi	r28, 0x02	; 2
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt

		fm_pwr_up(); //powerup the radio as appropriate
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     1fe:	06 eb       	ldi	r16, 0xB6	; 182
     200:	16 e2       	ldi	r17, 0x26	; 38
void radio_init(){

	for(int i = 0; i < 2; i++){

		
		DDRE  |= (1 << PE2); //Port E bit 2 is active high reset for radio 
     202:	12 9a       	sbi	0x02, 2	; 2
		PORTE |= (1 << PE2); //radio reset is on at powerup (active high)
     204:	1a 9a       	sbi	0x03, 2	; 3

		//hardware reset of Si4734
		PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     206:	1f 98       	cbi	0x03, 7	; 3
		DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     208:	17 9a       	sbi	0x02, 7	; 2
		PORTE |=  (1<<PE2); //hardware reset Si4734 
     20a:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	8f e1       	ldi	r24, 0x1F	; 31
     20e:	93 e0       	ldi	r25, 0x03	; 3
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <radio_init+0x1e>
     214:	00 c0       	rjmp	.+0      	; 0x216 <radio_init+0x24>
     216:	00 00       	nop
		_delay_us(200);     //hold for 200us, 100us by spec         
		PORTE &= ~(1<<PE2); //release reset 
     218:	1a 98       	cbi	0x03, 2	; 3
     21a:	90 ea       	ldi	r25, 0xA0	; 160
     21c:	9a 95       	dec	r25
     21e:	f1 f7       	brne	.-4      	; 0x21c <radio_init+0x2a>
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     220:	17 98       	cbi	0x02, 7	; 2

		fm_pwr_up(); //powerup the radio as appropriate
     222:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <fm_pwr_up>
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     226:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
     22a:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq
     22e:	0e 94 3d 0c 	call	0x187a	; 0x187a <fm_tune_freq>
     232:	21 97       	sbiw	r28, 0x01	; 1
* After some experimentation, a loop of 5 times makes this radio turn on.
*****************************************************************************/

void radio_init(){

	for(int i = 0; i < 2; i++){
     234:	31 f7       	brne	.-52     	; 0x202 <radio_init+0x10>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq

	}


}//radio_init
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <init_lm73_sensor>:
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e9       	ldi	r24, 0x90	; 144
     248:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
	asm volatile("nop");	
     24c:	00 00       	nop
     24e:	08 95       	ret

00000250 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//NOTE: This function was taken from lab1 for the class, modified so that it can be
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
     250:	48 2f       	mov	r20, r24
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     252:	e8 2f       	mov	r30, r24
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	99 b3       	in	r25, 0x19	; 25
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e2 59       	subi	r30, 0x92	; 146
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	20 81       	ld	r18, Z
     262:	31 81       	ldd	r19, Z+1	; 0x01
     264:	22 0f       	add	r18, r18
     266:	33 1f       	adc	r19, r19
     268:	30 6e       	ori	r19, 0xE0	; 224
     26a:	89 2f       	mov	r24, r25
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <chk_buttons+0x24>
     270:	95 95       	asr	r25
     272:	87 95       	ror	r24
     274:	4a 95       	dec	r20
     276:	e2 f7       	brpl	.-8      	; 0x270 <chk_buttons+0x20>
     278:	81 70       	andi	r24, 0x01	; 1
     27a:	99 27       	eor	r25, r25
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	84 27       	eor	r24, r20
     280:	28 2b       	or	r18, r24
     282:	39 2b       	or	r19, r25
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	21 15       	cp	r18, r1
     28c:	30 4f       	sbci	r19, 0xF0	; 240
     28e:	09 f0       	breq	.+2      	; 0x292 <chk_buttons+0x42>
     290:	80 e0       	ldi	r24, 0x00	; 0
	if(state[button] == 0xF000) return 1;
	return 0;

}
     292:	08 95       	ret

00000294 <segsum_freq>:
//******************************************************************************

void segsum_freq(uint16_t frequency){
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;

	//check to see if the total sum count is less than 1024 but at or greater than 1000 for parsing
	if(frequency <= 9999){
     29a:	80 31       	cpi	r24, 0x10	; 16
     29c:	27 e2       	ldi	r18, 0x27	; 39
     29e:	92 07       	cpc	r25, r18
     2a0:	08 f4       	brcc	.+2      	; 0x2a4 <segsum_freq+0x10>
     2a2:	60 c0       	rjmp	.+192    	; 0x364 <segsum_freq+0xd0>
		tens = (frequency % 1000) / 10;
		hundreds = (frequency % 1000) / 100;
		thousands = frequency / 1000;
	}
	else{
		ones = (frequency % 10000) % 10;
     2a4:	9c 01       	movw	r18, r24
     2a6:	32 95       	swap	r19
     2a8:	22 95       	swap	r18
     2aa:	2f 70       	andi	r18, 0x0F	; 15
     2ac:	23 27       	eor	r18, r19
     2ae:	3f 70       	andi	r19, 0x0F	; 15
     2b0:	23 27       	eor	r18, r19
     2b2:	a7 e4       	ldi	r26, 0x47	; 71
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     2ba:	ac 01       	movw	r20, r24
     2bc:	fc 01       	movw	r30, r24
     2be:	f6 95       	lsr	r31
     2c0:	e7 95       	ror	r30
     2c2:	f6 95       	lsr	r31
     2c4:	e7 95       	ror	r30
     2c6:	f6 95       	lsr	r31
     2c8:	e7 95       	ror	r30
     2ca:	20 e1       	ldi	r18, 0x10	; 16
     2cc:	37 e2       	ldi	r19, 0x27	; 39
     2ce:	e2 9f       	mul	r30, r18
     2d0:	c0 01       	movw	r24, r0
     2d2:	e3 9f       	mul	r30, r19
     2d4:	90 0d       	add	r25, r0
     2d6:	f2 9f       	mul	r31, r18
     2d8:	90 0d       	add	r25, r0
     2da:	11 24       	eor	r1, r1
     2dc:	fe 01       	movw	r30, r28
     2de:	e8 1b       	sub	r30, r24
     2e0:	f9 0b       	sbc	r31, r25
     2e2:	9f 01       	movw	r18, r30
     2e4:	ad ec       	ldi	r26, 0xCD	; 205
     2e6:	bc ec       	ldi	r27, 0xCC	; 204
     2e8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     2ec:	96 95       	lsr	r25
     2ee:	87 95       	ror	r24
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	de 2f       	mov	r29, r30
     2fa:	2a e0       	ldi	r18, 0x0A	; 10
     2fc:	82 9f       	mul	r24, r18
     2fe:	d0 19       	sub	r29, r0
     300:	11 24       	eor	r1, r1
		tens = (frequency % 10000) / 100;
     302:	9f 01       	movw	r18, r30
     304:	36 95       	lsr	r19
     306:	27 95       	ror	r18
     308:	36 95       	lsr	r19
     30a:	27 95       	ror	r18
     30c:	ab e7       	ldi	r26, 0x7B	; 123
     30e:	b4 e1       	ldi	r27, 0x14	; 20
     310:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     314:	96 95       	lsr	r25
     316:	87 95       	ror	r24
     318:	c8 2f       	mov	r28, r24
		hundreds = (frequency % 10000) / 1000;
     31a:	9f 01       	movw	r18, r30
     31c:	36 95       	lsr	r19
     31e:	27 95       	ror	r18
     320:	36 95       	lsr	r19
     322:	27 95       	ror	r18
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
     328:	a5 ec       	ldi	r26, 0xC5	; 197
     32a:	b0 e2       	ldi	r27, 0x20	; 32
     32c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     330:	92 95       	swap	r25
     332:	82 95       	swap	r24
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	89 27       	eor	r24, r25
     338:	9f 70       	andi	r25, 0x0F	; 15
     33a:	89 27       	eor	r24, r25
		thousands = frequency / 10000;
     33c:	56 95       	lsr	r21
     33e:	47 95       	ror	r20
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	56 95       	lsr	r21
     346:	47 95       	ror	r20
	
	}
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     348:	d0 93 9e 01 	sts	0x019E, r29	; 0x80019e <segment_data>
	segment_data[1] = tens;
     34c:	c0 93 9f 01 	sts	0x019F, r28	; 0x80019f <segment_data+0x1>
	segment_data[2] = -1;
     350:	9f ef       	ldi	r25, 0xFF	; 255
     352:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <segment_data+0x2>
	segment_data[3] = hundreds;
     356:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <segment_data+0x3>
	segment_data[4] = thousands;
     35a:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <segment_data+0x4>

}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret
	int8_t hundreds = -1;
	int8_t thousands = -1;

	//check to see if the total sum count is less than 1024 but at or greater than 1000 for parsing
	if(frequency <= 9999){
		ones = (frequency % 1000) % 10;
     364:	9c 01       	movw	r18, r24
     366:	36 95       	lsr	r19
     368:	27 95       	ror	r18
     36a:	36 95       	lsr	r19
     36c:	27 95       	ror	r18
     36e:	36 95       	lsr	r19
     370:	27 95       	ror	r18
     372:	a5 ec       	ldi	r26, 0xC5	; 197
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     37a:	ac 01       	movw	r20, r24
     37c:	fc 01       	movw	r30, r24
     37e:	f2 95       	swap	r31
     380:	e2 95       	swap	r30
     382:	ef 70       	andi	r30, 0x0F	; 15
     384:	ef 27       	eor	r30, r31
     386:	ff 70       	andi	r31, 0x0F	; 15
     388:	ef 27       	eor	r30, r31
     38a:	28 ee       	ldi	r18, 0xE8	; 232
     38c:	33 e0       	ldi	r19, 0x03	; 3
     38e:	e2 9f       	mul	r30, r18
     390:	c0 01       	movw	r24, r0
     392:	e3 9f       	mul	r30, r19
     394:	90 0d       	add	r25, r0
     396:	f2 9f       	mul	r31, r18
     398:	90 0d       	add	r25, r0
     39a:	11 24       	eor	r1, r1
     39c:	fe 01       	movw	r30, r28
     39e:	e8 1b       	sub	r30, r24
     3a0:	f9 0b       	sbc	r31, r25
     3a2:	9f 01       	movw	r18, r30
     3a4:	ad ec       	ldi	r26, 0xCD	; 205
     3a6:	bc ec       	ldi	r27, 0xCC	; 204
     3a8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	de 2f       	mov	r29, r30
     3ba:	2a e0       	ldi	r18, 0x0A	; 10
     3bc:	82 9f       	mul	r24, r18
     3be:	d0 19       	sub	r29, r0
     3c0:	11 24       	eor	r1, r1
		tens = (frequency % 1000) / 10;
     3c2:	c8 2f       	mov	r28, r24
		hundreds = (frequency % 1000) / 100;
     3c4:	9f 01       	movw	r18, r30
     3c6:	36 95       	lsr	r19
     3c8:	27 95       	ror	r18
     3ca:	36 95       	lsr	r19
     3cc:	27 95       	ror	r18
     3ce:	ab e7       	ldi	r26, 0x7B	; 123
     3d0:	b4 e1       	ldi	r27, 0x14	; 20
     3d2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
     3d6:	96 95       	lsr	r25
     3d8:	87 95       	ror	r24
		thousands = frequency / 1000;
     3da:	52 95       	swap	r21
     3dc:	42 95       	swap	r20
     3de:	4f 70       	andi	r20, 0x0F	; 15
     3e0:	45 27       	eor	r20, r21
     3e2:	5f 70       	andi	r21, 0x0F	; 15
     3e4:	45 27       	eor	r20, r21
     3e6:	b0 cf       	rjmp	.-160    	; 0x348 <segsum_freq+0xb4>

000003e8 <segsum>:
	int8_t tens = -1;
	int8_t hundreds = -1;
	int8_t thousands = -1;
  
	//parse out the two digits for the minutes
	ones = minute % 10;
     3e8:	9d ec       	ldi	r25, 0xCD	; 205
     3ea:	69 9f       	mul	r22, r25
     3ec:	21 2d       	mov	r18, r1
     3ee:	11 24       	eor	r1, r1
     3f0:	32 2f       	mov	r19, r18
     3f2:	36 95       	lsr	r19
     3f4:	36 95       	lsr	r19
     3f6:	36 95       	lsr	r19
     3f8:	4a e0       	ldi	r20, 0x0A	; 10
     3fa:	34 9f       	mul	r19, r20
     3fc:	60 19       	sub	r22, r0
     3fe:	11 24       	eor	r1, r1
     400:	36 2f       	mov	r19, r22
	tens = minute / 10;
     402:	26 95       	lsr	r18
     404:	26 95       	lsr	r18
     406:	26 95       	lsr	r18

	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
     408:	89 9f       	mul	r24, r25
     40a:	91 2d       	mov	r25, r1
     40c:	11 24       	eor	r1, r1
     40e:	96 95       	lsr	r25
     410:	96 95       	lsr	r25
     412:	96 95       	lsr	r25
     414:	48 2f       	mov	r20, r24
     416:	5a e0       	ldi	r21, 0x0A	; 10
     418:	95 9f       	mul	r25, r21
     41a:	40 19       	sub	r20, r0
     41c:	11 24       	eor	r1, r1
	if(hour > 9)
     41e:	8a 30       	cpi	r24, 0x0A	; 10
     420:	30 f4       	brcc	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	a9 f0       	breq	.+42     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     42c:	91 95       	neg	r25
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
     42e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sec_count>
     432:	80 ff       	sbrs	r24, 0
     434:	0c c0       	rjmp	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		segment_data[2] = 16;
	else
		segment_data[2] = -1;
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <segment_data+0x2>
	
	//place the variables into the segment_data[] array to be displayed
	segment_data[0] = ones;
     43c:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <segment_data>
	segment_data[1] = tens;
     440:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <segment_data+0x1>
	
	segment_data[3] = hundreds;
     444:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <segment_data+0x3>
	segment_data[4] = thousands;
     448:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <segment_data+0x4>
     44c:	08 95       	ret
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
		thousands = 0;
	//toggle the middle colon every second
	if(sec_count % 2 == 0)
		segment_data[2] = 16;
     44e:	80 e1       	ldi	r24, 0x10	; 16
     450:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <segment_data+0x2>
     454:	f3 cf       	rjmp	.-26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	//parse out the (potential) two digits for hours
	hundreds = hour % 10;
	if(hour > 9)
		thousands = hour / 10;
	//check to see if the 24 hour flag is set, since it MUST show the leading 0
	else if(hour24_flag == 0x01)
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	e9 cf       	rjmp	.-46     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

0000045a <seven_seg_encoding>:
//thousands place integers, and from there, use the number to display the needed
//segments on the LED display to represent those numbers.
//
//***********************************************************************************

uint8_t seven_seg_encoding(int8_t num){
     45a:	81 31       	cpi	r24, 0x11	; 17
     45c:	30 f4       	brcc	.+12     	; 0x46a <seven_seg_encoding+0x10>
     45e:	e8 2f       	mov	r30, r24
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	ea 5f       	subi	r30, 0xFA	; 250
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	80 81       	ld	r24, Z
     468:	08 95       	ret
     46a:	8f ef       	ldi	r24, 0xFF	; 255
	
	}

	return output;	//return the seven segment display encoding

}//seven_seg_encoding()
     46c:	08 95       	ret

0000046e <encoder_process>:
***********************************************************************************/

void encoder_process(uint8_t encoder){

	//initialize variables to store previous encoder state
	int8_t encoder_left_prev = encoder_left;
     46e:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <encoder_left>
	uint8_t encoder_right_prev = encoder_right;
     472:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <encoder_right>

	//obtain the left and right encoder values from the SPDR
	encoder_left = encoder & 0x03;
     476:	28 2f       	mov	r18, r24
     478:	23 70       	andi	r18, 0x03	; 3
     47a:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <encoder_left>
	encoder_right = (encoder & (0x03 << 2)) >> 2;
     47e:	8c 70       	andi	r24, 0x0C	; 12
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <encoder_right>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     48e:	83 30       	cpi	r24, 0x03	; 3
     490:	e9 f1       	breq	.+122    	; 0x50c <encoder_process+0x9e>
     492:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <adjust_flag>
     496:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adjust_alarm>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     49a:	23 30       	cpi	r18, 0x03	; 3
     49c:	d9 f0       	breq	.+54     	; 0x4d4 <encoder_process+0x66>
		}
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
     49e:	31 30       	cpi	r19, 0x01	; 1
     4a0:	81 f0       	breq	.+32     	; 0x4c2 <encoder_process+0x54>
		min_count = temp_min;
	}

	//if the alarm adjustment flag is set, set the alarm time
	//to the temporary variables used to increment/decrement
	if(adjust_alarm == 0x01){
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <encoder_process+0x3a>
     4a6:	08 95       	ret
		alarm_time_min = temp_min;
     4a8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp_min>
     4ac:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <alarm_time_min>
		alarm_time_hour = temp_hour;
     4b0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     4b4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <alarm_time_hour>
		temp_pm_flag = pm_flag;			//also save the pm_flag
     4b8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pm_flag>
     4bc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <temp_pm_flag>
	//	temp_min = min_count;
	//	temp_hour = hour_count;	
	}


}//encoder_process()
     4c0:	08 95       	ret
	}

	//if time adjustment flag is set, set the actual time to the
	//temporary variables used to increment/decrement
	if(adjust_flag == 0x01){
		hour_count = temp_hour;
     4c2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     4c6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <hour_count>
		min_count = temp_min;
     4ca:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp_min>
     4ce:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <min_count>
     4d2:	e7 cf       	rjmp	.-50     	; 0x4a2 <encoder_process+0x34>
	//check left encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
     4d4:	51 30       	cpi	r21, 0x01	; 1
     4d6:	09 f4       	brne	.+2      	; 0x4da <encoder_process+0x6c>
     4d8:	60 c0       	rjmp	.+192    	; 0x59a <encoder_process+0x12c>

		}
	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
     4da:	52 30       	cpi	r21, 0x02	; 2
     4dc:	01 f7       	brne	.-64     	; 0x49e <encoder_process+0x30>
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     4de:	31 30       	cpi	r19, 0x01	; 1
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <encoder_process+0x76>
     4e2:	b1 c0       	rjmp	.+354    	; 0x646 <encoder_process+0x1d8>
     4e4:	41 30       	cpi	r20, 0x01	; 1
     4e6:	09 f4       	brne	.+2      	; 0x4ea <encoder_process+0x7c>
     4e8:	8e c0       	rjmp	.+284    	; 0x606 <encoder_process+0x198>
			else
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
     4ea:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4ee:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4f2:	0a 97       	sbiw	r24, 0x0a	; 10
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <encoder_process+0x8a>
     4f6:	ba c0       	rjmp	.+372    	; 0x66c <encoder_process+0x1fe>
				OCR3A = 0;
			else
				OCR3A -= 10;			//decrement resolution by 10s to avoid spinning a lot
     4f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4fc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     500:	0a 97       	sbiw	r24, 0x0a	; 10
     502:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     506:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     50a:	c9 cf       	rjmp	.-110    	; 0x49e <encoder_process+0x30>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     50c:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <adjust_flag>

	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
     510:	41 30       	cpi	r20, 0x01	; 1
     512:	01 f1       	breq	.+64     	; 0x554 <encoder_process+0xe6>
		

	}
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
     514:	42 30       	cpi	r20, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <encoder_process+0xac>
     518:	be cf       	rjmp	.-132    	; 0x496 <encoder_process+0x28>
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     51a:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adjust_alarm>
     51e:	31 11       	cpse	r19, r1
     520:	10 c0       	rjmp	.+32     	; 0x542 <encoder_process+0xd4>
     522:	41 11       	cpse	r20, r1
     524:	0e c0       	rjmp	.+28     	; 0x542 <encoder_process+0xd4>
     526:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <manual_brightness>
     52a:	61 30       	cpi	r22, 0x01	; 1
     52c:	51 f4       	brne	.+20     	; 0x542 <encoder_process+0xd4>
			if((OCR2 - 5) <= 0)
     52e:	23 b5       	in	r18, 0x23	; 35
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	26 30       	cpi	r18, 0x06	; 6
     534:	31 05       	cpc	r19, r1
     536:	0c f0       	brlt	.+2      	; 0x53a <encoder_process+0xcc>
     538:	a8 c0       	rjmp	.+336    	; 0x68a <encoder_process+0x21c>
				OCR2 = 3;
     53a:	83 bd       	out	0x23, r24	; 35
     53c:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <encoder_left>
     540:	a8 cf       	rjmp	.-176    	; 0x492 <encoder_process+0x24>
			else
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
     542:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp_min>
     546:	88 23       	and	r24, r24
     548:	09 f4       	brne	.+2      	; 0x54c <encoder_process+0xde>
     54a:	4a c0       	rjmp	.+148    	; 0x5e0 <encoder_process+0x172>
				temp_min = 59;			
			}
			else
				temp_min--;				//decrement minute when right encoder turned to left
     54c:	81 50       	subi	r24, 0x01	; 1
     54e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp_min>
     552:	a3 cf       	rjmp	.-186    	; 0x49a <encoder_process+0x2c>
	//check right encoder:
	//transistion is 3 -> 2 -> 0 -> 1 -> 3
	//if current state is 3 and its previous is 1, then we know
	//that this was turned to the right
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
     554:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adjust_alarm>
     558:	31 11       	cpse	r19, r1
     55a:	15 c0       	rjmp	.+42     	; 0x586 <encoder_process+0x118>
     55c:	41 11       	cpse	r20, r1
     55e:	13 c0       	rjmp	.+38     	; 0x586 <encoder_process+0x118>
     560:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <manual_brightness>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	79 f4       	brne	.+30     	; 0x586 <encoder_process+0x118>
			if((OCR2 + 5) >= 254)
     568:	83 b5       	in	r24, 0x23	; 35
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	89 3f       	cpi	r24, 0xF9	; 249
     56e:	91 05       	cpc	r25, r1
     570:	0c f4       	brge	.+2      	; 0x574 <encoder_process+0x106>
     572:	85 c0       	rjmp	.+266    	; 0x67e <encoder_process+0x210>
				OCR2 = 250;
     574:	8a ef       	ldi	r24, 0xFA	; 250
     576:	83 bd       	out	0x23, r24	; 35
     578:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <encoder_left>
     57c:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <adjust_flag>
     580:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adjust_alarm>
     584:	8a cf       	rjmp	.-236    	; 0x49a <encoder_process+0x2c>
				OCR2 += 5;

		}
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
     586:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp_min>
     58a:	68 2f       	mov	r22, r24
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	6b 33       	cpi	r22, 0x3B	; 59
     590:	71 05       	cpc	r23, r1
     592:	c4 f0       	brlt	.+48     	; 0x5c4 <encoder_process+0x156>
				temp_min = 0;
     594:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <temp_min>
     598:	80 cf       	rjmp	.-256    	; 0x49a <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     59a:	31 30       	cpi	r19, 0x01	; 1
     59c:	09 f4       	brne	.+2      	; 0x5a0 <encoder_process+0x132>
     59e:	42 c0       	rjmp	.+132    	; 0x624 <encoder_process+0x1b6>
     5a0:	41 30       	cpi	r20, 0x01	; 1
     5a2:	11 f1       	breq	.+68     	; 0x5e8 <encoder_process+0x17a>
				temp_hour++;			//increment hour when left encoder turned right

		}
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
     5a4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5a8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5ac:	0a 96       	adiw	r24, 0x0a	; 10
     5ae:	8f 3f       	cpi	r24, 0xFF	; 255
     5b0:	91 05       	cpc	r25, r1
     5b2:	61 f0       	breq	.+24     	; 0x5cc <encoder_process+0x15e>
     5b4:	58 f0       	brcs	.+22     	; 0x5cc <encoder_process+0x15e>
				OCR3A = 255;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5c2:	6d cf       	rjmp	.-294    	; 0x49e <encoder_process+0x30>
		else
		{
			if(temp_min + 1 > 59)		//bound the count to 0 and 59
				temp_min = 0;
			else
				temp_min++;				//increment minute when right encoder turned to the right
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp_min>
     5ca:	67 cf       	rjmp	.-306    	; 0x49a <encoder_process+0x2c>
		//else meaning that either time set modes are not set, thus default to volume adjust		
		else{
			if((OCR3A + 10) > 255)		//binds volume to 255 (~5V via PWM to DC converter)
				OCR3A = 255;
			else
				OCR3A += 10;			//increment resolution by 10s to avoid spinning a lot
     5cc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5d0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d4:	0a 96       	adiw	r24, 0x0a	; 10
     5d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5de:	5f cf       	rjmp	.-322    	; 0x49e <encoder_process+0x30>
				OCR2 -= 5;
		}
		else
		{
			if(temp_min - 1 < 0){		//bound the count to 0 and 59
				temp_min = 59;			
     5e0:	8b e3       	ldi	r24, 0x3B	; 59
     5e2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp_min>
     5e6:	59 cf       	rjmp	.-334    	; 0x49a <encoder_process+0x2c>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     5e8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
     5ec:	81 11       	cpse	r24, r1
     5ee:	1e c0       	rjmp	.+60     	; 0x62c <encoder_process+0x1be>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
     5f0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     5f4:	68 2f       	mov	r22, r24
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	6c 30       	cpi	r22, 0x0C	; 12
     5fa:	71 05       	cpc	r23, r1
     5fc:	9c f1       	brlt	.+102    	; 0x664 <encoder_process+0x1f6>
				temp_hour = 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
     604:	4c cf       	rjmp	.-360    	; 0x49e <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     606:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
     60a:	81 11       	cpse	r24, r1
     60c:	20 c0       	rjmp	.+64     	; 0x64e <encoder_process+0x1e0>
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
     60e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     612:	68 2f       	mov	r22, r24
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	71 05       	cpc	r23, r1
     61a:	6c f1       	brlt	.+90     	; 0x676 <encoder_process+0x208>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
				temp_hour = 23;
			else
				temp_hour--;			//decrement hour when left encoder turned left
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
     622:	3d cf       	rjmp	.-390    	; 0x49e <encoder_process+0x30>
	//that this was turned to the right
	
	if(encoder_left == 0x03 && encoder_left_prev == 0x01){
		//increment hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     624:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
     628:	88 23       	and	r24, r24
     62a:	11 f3       	breq	.-60     	; 0x5f0 <encoder_process+0x182>
			if(temp_hour + 1 > 12)		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 1;
			else
				temp_hour++;			//increment hour when left encoder turned right
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	09 f0       	breq	.+2      	; 0x632 <encoder_process+0x1c4>
     630:	b9 cf       	rjmp	.-142    	; 0x5a4 <encoder_process+0x136>
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
     632:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     636:	68 2f       	mov	r22, r24
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	67 31       	cpi	r22, 0x17	; 23
     63c:	71 05       	cpc	r23, r1
     63e:	94 f0       	brlt	.+36     	; 0x664 <encoder_process+0x1f6>
				temp_hour = 0;
     640:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <temp_hour>
     644:	2c cf       	rjmp	.-424    	; 0x49e <encoder_process+0x30>
	//if current state is 3 and its previous is 2, then we know
	//that this was turned to the left
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
     646:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
     64a:	88 23       	and	r24, r24
     64c:	01 f3       	breq	.-64     	; 0x60e <encoder_process+0x1a0>
				temp_hour = 12;
			}
			else
				temp_hour--;	 		//decrememnt hour when left encoder turned left
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	09 f0       	breq	.+2      	; 0x654 <encoder_process+0x1e6>
     652:	4b cf       	rjmp	.-362    	; 0x4ea <encoder_process+0x7c>
			if(temp_hour - 1 < 0)		//if 24 hour flag is set, bound count to 0 and 23
     654:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     658:	81 11       	cpse	r24, r1
     65a:	e0 cf       	rjmp	.-64     	; 0x61c <encoder_process+0x1ae>
				temp_hour = 23;
     65c:	87 e1       	ldi	r24, 0x17	; 23
     65e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
     662:	1d cf       	rjmp	.-454    	; 0x49e <encoder_process+0x30>
		}
		else if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0x01){
			if(temp_hour + 1 > 23)		//if 24 hour flag is set, bound the count from 0 to 24
				temp_hour = 0;
			else
				temp_hour++;			//increment hour when left encoder turned right
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
     66a:	19 cf       	rjmp	.-462    	; 0x49e <encoder_process+0x30>
				temp_hour--;			//decrement hour when left encoder turned left
		}
		//else meaning that either time set modes are not set, thus default to volume adjust
		else{
			if((OCR3A - 10) <= 0)		//binds volume to 0 (~0V)
				OCR3A = 0;
     66c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     670:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     674:	14 cf       	rjmp	.-472    	; 0x49e <encoder_process+0x30>
	else if (encoder_left == 0x03 && encoder_left_prev == 0x02){
		//decrement hours during time set mode or alarm adjustment mode
		//appropriately binds the count depending on 24 hour flag
		if((adjust_flag == 0x01 || adjust_alarm == 0x01) && hour24_flag == 0){
			if(temp_hour - 1 < 1){		//if 24 hour flag not set, bound count to 1 and 12
				temp_hour = 12;
     676:	8c e0       	ldi	r24, 0x0C	; 12
     678:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
     67c:	10 cf       	rjmp	.-480    	; 0x49e <encoder_process+0x30>
	if(encoder_right == 0x03 && encoder_right_prev == 0x01){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 + 5) >= 254)
				OCR2 = 250;
			else	
				OCR2 += 5;
     67e:	83 b5       	in	r24, 0x23	; 35
     680:	8b 5f       	subi	r24, 0xFB	; 251
     682:	83 bd       	out	0x23, r24	; 35
     684:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <encoder_left>
     688:	04 cf       	rjmp	.-504    	; 0x492 <encoder_process+0x24>
	else if (encoder_right == 0x03 && encoder_right_prev == 0x02){
		if(adjust_flag == 0x00 && adjust_alarm == 0x00 && manual_brightness == 0x01){
			if((OCR2 - 5) <= 0)
				OCR2 = 3;
			else
				OCR2 -= 5;
     68a:	83 b5       	in	r24, 0x23	; 35
     68c:	85 50       	subi	r24, 0x05	; 5
     68e:	83 bd       	out	0x23, r24	; 35
     690:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <encoder_left>
     694:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <adjust_flag>
     698:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adjust_alarm>
     69c:	fe ce       	rjmp	.-516    	; 0x49a <encoder_process+0x2c>

0000069e <button_encoder_read>:
 * Function: button_encoder_read
 * Parameter: None
 * Function: A routinely called cuntion that checks the buttons being pressed and the
 * encoders being read.
***********************************************************************************/
void button_encoder_read(){
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29

 //make PORTA an input port with pullups
	DDRA = 0x00;
     6ae:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;	
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	8b bb       	out	0x1b, r24	; 27
  //enable tristate buffer for pushbutton switches
    PORTB = 0x70;
     6b4:	80 e7       	ldi	r24, 0x70	; 112
     6b6:	88 bb       	out	0x18, r24	; 24
     6b8:	2a e1       	ldi	r18, 0x1A	; 26
     6ba:	2a 95       	dec	r18
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <button_encoder_read+0x1c>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <button_encoder_read+0x22>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     6c0:	99 b3       	in	r25, 0x19	; 25
     6c2:	e0 90 7c 01 	lds	r14, 0x017C	; 0x80017c <state.1903+0xe>
     6c6:	f0 90 7d 01 	lds	r15, 0x017D	; 0x80017d <state.1903+0xf>
     6ca:	ee 0c       	add	r14, r14
     6cc:	ff 1c       	adc	r15, r15
     6ce:	30 ee       	ldi	r19, 0xE0	; 224
     6d0:	f3 2a       	or	r15, r19
     6d2:	89 2f       	mov	r24, r25
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9c 01       	movw	r18, r24
     6d8:	22 0f       	add	r18, r18
     6da:	23 2f       	mov	r18, r19
     6dc:	22 1f       	adc	r18, r18
     6de:	33 0b       	sbc	r19, r19
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	28 27       	eor	r18, r24
     6e4:	c9 01       	movw	r24, r18
     6e6:	8e 29       	or	r24, r14
     6e8:	9f 29       	or	r25, r15
     6ea:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <state.1903+0xf>
     6ee:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <state.1903+0xe>
	if(state[button] == 0xF000) return 1;
     6f2:	81 15       	cp	r24, r1
     6f4:	90 4f       	sbci	r25, 0xF0	; 240
     6f6:	31 f4       	brne	.+12     	; 0x704 <button_encoder_read+0x66>
	_delay_us(5);

	//poll if button 7 is pressed
	//this toggles if the time adjustment flag is set or not
	if(chk_buttons(7))
		adjust_flag ^= 0x01;
     6f8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <adjust_flag>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	89 27       	eor	r24, r25
     700:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <adjust_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     704:	89 b3       	in	r24, 0x19	; 25
     706:	86 fb       	bst	r24, 6
     708:	88 27       	eor	r24, r24
     70a:	80 f9       	bld	r24, 0
     70c:	c8 2f       	mov	r28, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	d3 2f       	mov	r29, r19
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	c8 27       	eor	r28, r24
     716:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <state.1903+0xc>
     71a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <state.1903+0xd>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	90 6e       	ori	r25, 0xE0	; 224
     724:	c8 2b       	or	r28, r24
     726:	d9 2b       	or	r29, r25
     728:	d0 93 7b 01 	sts	0x017B, r29	; 0x80017b <state.1903+0xd>
     72c:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <state.1903+0xc>
	if(state[button] == 0xF000) return 1;
     730:	c1 15       	cp	r28, r1
     732:	d0 4f       	sbci	r29, 0xF0	; 240
     734:	09 f4       	brne	.+2      	; 0x738 <button_encoder_read+0x9a>
     736:	0b c1       	rjmp	.+534    	; 0x94e <button_encoder_read+0x2b0>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     738:	89 b3       	in	r24, 0x19	; 25
     73a:	85 fb       	bst	r24, 5
     73c:	aa 27       	eor	r26, r26
     73e:	a0 f9       	bld	r26, 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	a3 27       	eor	r26, r19
     746:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <state.1903+0xa>
     74a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <state.1903+0xb>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	90 6e       	ori	r25, 0xE0	; 224
     754:	a8 2b       	or	r26, r24
     756:	b9 2b       	or	r27, r25
     758:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <state.1903+0xb>
     75c:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <state.1903+0xa>
	if(state[button] == 0xF000) return 1;
     760:	a1 15       	cp	r26, r1
     762:	b0 4f       	sbci	r27, 0xF0	; 240
     764:	09 f4       	brne	.+2      	; 0x768 <button_encoder_read+0xca>
     766:	e4 c0       	rjmp	.+456    	; 0x930 <button_encoder_read+0x292>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     768:	89 b3       	in	r24, 0x19	; 25
     76a:	84 fb       	bst	r24, 4
     76c:	ee 27       	eor	r30, r30
     76e:	e0 f9       	bld	r30, 0
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	e2 27       	eor	r30, r18
     776:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <state.1903+0x8>
     77a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <state.1903+0x9>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	90 6e       	ori	r25, 0xE0	; 224
     784:	e8 2b       	or	r30, r24
     786:	f9 2b       	or	r31, r25
     788:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <state.1903+0x9>
     78c:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <state.1903+0x8>
	if(state[button] == 0xF000) return 1;
     790:	e1 15       	cp	r30, r1
     792:	f0 4f       	sbci	r31, 0xF0	; 240
     794:	31 f4       	brne	.+12     	; 0x7a2 <button_encoder_read+0x104>
		pm_flag ^= 0x01;
	
	//poll if button 4 is pressed
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
     796:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <adjust_alarm>
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	89 27       	eor	r24, r25
     79e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <adjust_alarm>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     7a2:	89 b3       	in	r24, 0x19	; 25
     7a4:	83 fb       	bst	r24, 3
     7a6:	66 27       	eor	r22, r22
     7a8:	60 f9       	bld	r22, 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	68 27       	eor	r22, r24
     7b0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <state.1903+0x6>
     7b4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <state.1903+0x7>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	90 6e       	ori	r25, 0xE0	; 224
     7be:	68 2b       	or	r22, r24
     7c0:	79 2b       	or	r23, r25
     7c2:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <state.1903+0x7>
     7c6:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <state.1903+0x6>
	if(state[button] == 0xF000) return 1;
     7ca:	61 15       	cp	r22, r1
     7cc:	70 4f       	sbci	r23, 0xF0	; 240
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <button_encoder_read+0x142>
	//this toggles the alarm adjustment mode
	if(chk_buttons(4))
		adjust_alarm ^= 0x01;
	
	if(chk_buttons(3)){
		alarm_is_set ^= 0x01;
     7d0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <alarm_is_set>
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	89 27       	eor	r24, r25
     7d8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <alarm_is_set>
		lcd_flag = 0x01;
     7dc:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <lcd_flag>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     7e0:	89 b3       	in	r24, 0x19	; 25
     7e2:	82 fb       	bst	r24, 2
     7e4:	44 27       	eor	r20, r20
     7e6:	40 f9       	bld	r20, 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	31 e0       	ldi	r19, 0x01	; 1
     7ec:	43 27       	eor	r20, r19
     7ee:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <state.1903+0x4>
     7f2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <state.1903+0x5>
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	90 6e       	ori	r25, 0xE0	; 224
     7fc:	48 2b       	or	r20, r24
     7fe:	59 2b       	or	r21, r25
     800:	50 93 73 01 	sts	0x0173, r21	; 0x800173 <state.1903+0x5>
     804:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <state.1903+0x4>
	if(state[button] == 0xF000) return 1;
     808:	41 15       	cp	r20, r1
     80a:	50 4f       	sbci	r21, 0xF0	; 240
     80c:	59 f4       	brne	.+22     	; 0x824 <button_encoder_read+0x186>
		alarm_is_set ^= 0x01;
		lcd_flag = 0x01;
	}

	if(chk_buttons(2)){
		manual_brightness ^= 0x01;
     80e:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <manual_brightness>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	98 27       	eor	r25, r24
     816:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <manual_brightness>
		f_not_c ^= 0x01;
     81a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_not_c>
     81e:	89 27       	eor	r24, r25
     820:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <f_not_c>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     824:	89 b3       	in	r24, 0x19	; 25
     826:	81 fb       	bst	r24, 1
     828:	cc 24       	eor	r12, r12
     82a:	c0 f8       	bld	r12, 0
     82c:	d1 2c       	mov	r13, r1
     82e:	96 01       	movw	r18, r12
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	24 27       	eor	r18, r20
     834:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <state.1903+0x2>
     838:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <state.1903+0x3>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	90 6e       	ori	r25, 0xE0	; 224
     842:	28 2b       	or	r18, r24
     844:	39 2b       	or	r19, r25
     846:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <state.1903+0x3>
     84a:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <state.1903+0x2>
	if(state[button] == 0xF000) return 1;
     84e:	21 15       	cp	r18, r1
     850:	30 4f       	sbci	r19, 0xF0	; 240
     852:	09 f4       	brne	.+2      	; 0x856 <button_encoder_read+0x1b8>
     854:	5f c0       	rjmp	.+190    	; 0x914 <button_encoder_read+0x276>
		ten_sec_count = 0;			//the count variable starts at 0
		lcd_flag = 0x01;			//tell lcd to update
		
	}
	else{
		radio_trigger ^= 0x01;
     856:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <radio_trigger>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	89 27       	eor	r24, r25
     85e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <radio_trigger>
//      used for all of the buttons on PORTA
//
uint8_t chk_buttons(uint8_t button) {
	//make state an array to hold different state values for different buttons
	static uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	state[button] = (state[button] << 1) | (bit_is_clear(PINA, button)) | 0xE000;
     862:	29 b3       	in	r18, 0x19	; 25
     864:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <state.1903>
     868:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <state.1903+0x1>
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	90 6e       	ori	r25, 0xE0	; 224
     872:	20 95       	com	r18
     874:	02 2f       	mov	r16, r18
     876:	01 70       	andi	r16, 0x01	; 1
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	08 2b       	or	r16, r24
     87c:	19 2b       	or	r17, r25
     87e:	10 93 6f 01 	sts	0x016F, r17	; 0x80016f <state.1903+0x1>
     882:	00 93 6e 01 	sts	0x016E, r16	; 0x80016e <state.1903>
	if(state[button] == 0xF000) return 1;
     886:	01 15       	cp	r16, r1
     888:	10 4f       	sbci	r17, 0xF0	; 240
     88a:	d1 f1       	breq	.+116    	; 0x900 <button_encoder_read+0x262>
	if(chk_buttons(0) && trigger_alarm == 0x01){
		trigger_alarm = 0;			//alarm turns off
		lcd_flag = 0x01;			//update lcd
	}
	else{
		radio_tune ^= 0x01;
     88c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	89 27       	eor	r24, r25
     894:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
	}
	
  //disable tristate buffer for pushbutton switches
    PORTB = 0x60;
     898:	80 e6       	ldi	r24, 0x60	; 96
     89a:	88 bb       	out	0x18, r24	; 24

	asm volatile ("nop");
     89c:	00 00       	nop

	//set CLK_INH low and SH/nLD high to shift encoder values through
	//its shift register
	PORTD = (0 << PD2);
     89e:	12 ba       	out	0x12, r1	; 18
	PORTE = (1 << PE6);
     8a0:	80 e4       	ldi	r24, 0x40	; 64
     8a2:	83 b9       	out	0x03, r24	; 3

	asm volatile ("nop");
     8a4:	00 00       	nop

	//send out state of flags to the bar graph display
	SPDR = (adjust_flag << 7) | (hour24_flag << 6) | (adjust_alarm << 5) | (manual_brightness << 2);
     8a6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <adjust_flag>
     8aa:	40 e8       	ldi	r20, 0x80	; 128
     8ac:	24 9f       	mul	r18, r20
     8ae:	90 01       	movw	r18, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     8b6:	40 e4       	ldi	r20, 0x40	; 64
     8b8:	94 9f       	mul	r25, r20
     8ba:	c0 01       	movw	r24, r0
     8bc:	11 24       	eor	r1, r1
     8be:	28 2b       	or	r18, r24
     8c0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <adjust_alarm>
     8c4:	30 e2       	ldi	r19, 0x20	; 32
     8c6:	93 9f       	mul	r25, r19
     8c8:	c0 01       	movw	r24, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	82 2b       	or	r24, r18
     8ce:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <manual_brightness>
     8d2:	99 0f       	add	r25, r25
     8d4:	99 0f       	add	r25, r25
     8d6:	89 2b       	or	r24, r25
     8d8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR, SPIF)){}		//continue on while loop until all SPI contents are sent
     8da:	77 9b       	sbis	0x0e, 7	; 14
     8dc:	fe cf       	rjmp	.-4      	; 0x8da <button_encoder_read+0x23c>

	//pulse PB0 to send out bar_disp to bar graph
	PORTB |= 0x01;
     8de:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= 0xFE;
     8e0:	c0 98       	cbi	0x18, 0	; 24

	//store the SPDR encoder value
	uint8_t encoder = SPDR;
     8e2:	8f b1       	in	r24, 0x0f	; 15

	//call function to process that encoder value
	encoder_process(encoder);
     8e4:	0e 94 37 02 	call	0x46e	; 0x46e <encoder_process>

	//reset the CLK_INH and SH/nLD
	PORTD = (1 << PD2);
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	82 bb       	out	0x12, r24	; 18
	PORTE = (0 << PE6);
     8ec:	13 b8       	out	0x03, r1	; 3

}//button_encoder_read
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	08 95       	ret
		radio_trigger ^= 0x01;
	}

	//poll if button 0 is pressed
	//this silences all alarms, no snooze
	if(chk_buttons(0) && trigger_alarm == 0x01){
     900:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trigger_alarm>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	09 f0       	breq	.+2      	; 0x90a <button_encoder_read+0x26c>
     908:	c1 cf       	rjmp	.-126    	; 0x88c <button_encoder_read+0x1ee>
		trigger_alarm = 0;			//alarm turns off
     90a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <trigger_alarm>
		lcd_flag = 0x01;			//update lcd
     90e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <lcd_flag>
     912:	c2 cf       	rjmp	.-124    	; 0x898 <button_encoder_read+0x1fa>
		f_not_c ^= 0x01;
	}

	//poll if button 1 is pressed
	//this activates the snooze feature
	if(chk_buttons(1) && trigger_alarm == 0x01){
     914:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trigger_alarm>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	09 f0       	breq	.+2      	; 0x91e <button_encoder_read+0x280>
     91c:	9c cf       	rjmp	.-200    	; 0x856 <button_encoder_read+0x1b8>
		trigger_alarm = 0;			//if pressed, alarm should turn off
     91e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <trigger_alarm>
		ten_sec_start = 0x01;		//start the count for 10 second delay
     922:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <ten_sec_start>
		ten_sec_count = 0;			//the count variable starts at 0
     926:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <ten_sec_count>
		lcd_flag = 0x01;			//tell lcd to update
     92a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <lcd_flag>
     92e:	99 cf       	rjmp	.-206    	; 0x862 <button_encoder_read+0x1c4>
	}

	//poll if button 5 is pressed
	//this toggles the pm_flag for adjustment
	//this only works when in time set mode
	if(chk_buttons(5) && adjust_flag == 0x01 && hour24_flag == 0)
     930:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <adjust_flag>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f0       	breq	.+2      	; 0x93a <button_encoder_read+0x29c>
     938:	17 cf       	rjmp	.-466    	; 0x768 <button_encoder_read+0xca>
     93a:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     93e:	91 11       	cpse	r25, r1
     940:	13 cf       	rjmp	.-474    	; 0x768 <button_encoder_read+0xca>
		pm_flag ^= 0x01;
     942:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <pm_flag>
     946:	89 27       	eor	r24, r25
     948:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pm_flag>
     94c:	0d cf       	rjmp	.-486    	; 0x768 <button_encoder_read+0xca>
		adjust_flag ^= 0x01;

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
     94e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	89 27       	eor	r24, r25
     956:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <hour24_flag>
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     95a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <pm_flag>
     95e:	91 30       	cpi	r25, 0x01	; 1
     960:	a9 f0       	breq	.+42     	; 0x98c <button_encoder_read+0x2ee>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
				hour_count += 12;
		}
		if(hour24_flag == 0 && hour_count >= 12){
     962:	81 11       	cpse	r24, r1
     964:	e9 ce       	rjmp	.-558    	; 0x738 <button_encoder_read+0x9a>
     966:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     96a:	8c 30       	cpi	r24, 0x0C	; 12
     96c:	08 f4       	brcc	.+2      	; 0x970 <button_encoder_read+0x2d2>
     96e:	e4 ce       	rjmp	.-568    	; 0x738 <button_encoder_read+0x9a>
			pm_flag = 0x01;			//set the pm_flag when coming from 24 hours and time is in afternoon
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pm_flag>
			if(hour_count != 12)	//edge case of when the time is 12 for 24 hour time
     976:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     97a:	8c 30       	cpi	r24, 0x0C	; 12
     97c:	09 f4       	brne	.+2      	; 0x980 <button_encoder_read+0x2e2>
     97e:	dc ce       	rjmp	.-584    	; 0x738 <button_encoder_read+0x9a>
				hour_count -= 12;
     980:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     984:	8c 50       	subi	r24, 0x0C	; 12
     986:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <hour_count>
     98a:	d6 ce       	rjmp	.-596    	; 0x738 <button_encoder_read+0x9a>

	//poll if button 6 is pressed
	//this toggles the 24 hour flag
	if(chk_buttons(6)){
		hour24_flag ^= 0x01;
		if(pm_flag == 0x01 && hour24_flag == 0x01){
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	49 f7       	brne	.-46     	; 0x962 <button_encoder_read+0x2c4>
			pm_flag = 0;			//pm_flag should not be set when in 24 hour mode
     990:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <pm_flag>
			if(hour_count != 12)	//if it is afternoon in 12 hour format, add 12 to obtain 24 hour
     994:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     998:	8c 30       	cpi	r24, 0x0C	; 12
     99a:	09 f4       	brne	.+2      	; 0x99e <button_encoder_read+0x300>
     99c:	cd ce       	rjmp	.-614    	; 0x738 <button_encoder_read+0x9a>
				hour_count += 12;
     99e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
     9a2:	84 5f       	subi	r24, 0xF4	; 244
     9a4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <hour_count>
     9a8:	c7 ce       	rjmp	.-626    	; 0x738 <button_encoder_read+0x9a>

000009aa <clock_count>:
 * mode.
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
     9aa:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isr_count>
     9ae:	80 38       	cpi	r24, 0x80	; 128
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <clock_count+0xa>
     9b2:	82 c0       	rjmp	.+260    	; 0xab8 <clock_count+0x10e>
     9b4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <ten_sec_count>
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
     9b8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count>
     9bc:	9c 33       	cpi	r25, 0x3C	; 60
     9be:	09 f4       	brne	.+2      	; 0x9c2 <clock_count+0x18>
     9c0:	6f c0       	rjmp	.+222    	; 0xaa0 <clock_count+0xf6>
		}
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
     9c2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <min_count>
     9c6:	9c 33       	cpi	r25, 0x3C	; 60
     9c8:	09 f4       	brne	.+2      	; 0x9cc <clock_count+0x22>
     9ca:	5e c0       	rjmp	.+188    	; 0xa88 <clock_count+0xde>
		}

		min_count = 0;
  	}
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
     9cc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     9d0:	9d 30       	cpi	r25, 0x0D	; 13
     9d2:	b0 f0       	brcs	.+44     	; 0xa00 <clock_count+0x56>
     9d4:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     9d8:	91 11       	cpse	r25, r1
     9da:	12 c0       	rjmp	.+36     	; 0xa00 <clock_count+0x56>
		hour_count -= 12;	
     9dc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     9e0:	9c 50       	subi	r25, 0x0C	; 12
     9e2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <hour_count>
	else if(hour_count >= 24 && hour24_flag == 0x01){
		hour_count -= 24;
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     9e6:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <min_count>
     9ea:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <alarm_time_min>
     9ee:	29 17       	cp	r18, r25
     9f0:	d1 f0       	breq	.+52     	; 0xa26 <clock_count+0x7c>
			lcd_flag = 0x01;				//update lcd
		}
	}
	//else meaning that the actual time does not equal saved alarm time
	else{
		trigger_alarm = 0;
     9f2:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <trigger_alarm>
		alarm_match_count = 0;
     9f6:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <alarm_match_count>
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
     9fa:	8a 30       	cpi	r24, 0x0A	; 10
     9fc:	99 f1       	breq	.+102    	; 0xa64 <clock_count+0xba>
     9fe:	08 95       	ret
	//bind the hour to 1 and 12 if 24 hour flag is not set
	if(hour_count >= 13 && hour24_flag == 0){
		hour_count -= 12;	
	}
	//bind the hour to 0 and 24 if 24 hour flag is set
	else if(hour_count >= 24 && hour24_flag == 0x01){
     a00:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     a04:	98 31       	cpi	r25, 0x18	; 24
     a06:	78 f3       	brcs	.-34     	; 0x9e6 <clock_count+0x3c>
     a08:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     a0c:	91 30       	cpi	r25, 0x01	; 1
     a0e:	59 f7       	brne	.-42     	; 0x9e6 <clock_count+0x3c>
		hour_count -= 24;
     a10:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     a14:	98 51       	subi	r25, 0x18	; 24
     a16:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <hour_count>
	}
	
	//if current time matches saved alarm set time, then start the beeping
	if(min_count == alarm_time_min && hour_count == alarm_time_hour && temp_pm_flag == pm_flag && adjust_alarm == 0){
     a1a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <min_count>
     a1e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <alarm_time_min>
     a22:	29 13       	cpse	r18, r25
     a24:	e6 cf       	rjmp	.-52     	; 0x9f2 <clock_count+0x48>
     a26:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <hour_count>
     a2a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <alarm_time_hour>
     a2e:	29 13       	cpse	r18, r25
     a30:	e0 cf       	rjmp	.-64     	; 0x9f2 <clock_count+0x48>
     a32:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <temp_pm_flag>
     a36:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <pm_flag>
     a3a:	29 13       	cpse	r18, r25
     a3c:	da cf       	rjmp	.-76     	; 0x9f2 <clock_count+0x48>
     a3e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <adjust_alarm>
     a42:	91 11       	cpse	r25, r1
     a44:	d6 cf       	rjmp	.-84     	; 0x9f2 <clock_count+0x48>
		if(alarm_match_count == 0 && alarm_is_set == 0x01){			//a check so that this only goes in once
     a46:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <alarm_match_count>
     a4a:	91 11       	cpse	r25, r1
     a4c:	d6 cf       	rjmp	.-84     	; 0x9fa <clock_count+0x50>
     a4e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <alarm_is_set>
     a52:	91 30       	cpi	r25, 0x01	; 1
     a54:	91 f6       	brne	.-92     	; 0x9fa <clock_count+0x50>
			trigger_alarm = 0x01;			//start the beeping
     a56:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <trigger_alarm>
			alarm_match_count = 0x01;
     a5a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <alarm_match_count>
			lcd_flag = 0x01;				//update lcd
     a5e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <lcd_flag>
     a62:	cb cf       	rjmp	.-106    	; 0x9fa <clock_count+0x50>
		alarm_match_count = 0;
	}

	//if snooze is pressed, check to see if 10 seconds has elapsed
	if(ten_sec_count == 10){
		trigger_alarm = 0x01;			//initiate beep again after 10 second snooze
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <trigger_alarm>
		ten_sec_start = 0;				//reset the start variable
     a6a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <ten_sec_start>
		ten_sec_count = 0;				//reset the count variable
     a6e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <ten_sec_count>
		lcd_flag = 0x01;				//update lcd
     a72:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <lcd_flag>
		alarm_time_min = temp_min;		//beep for 1 minute
     a76:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temp_min>
     a7a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <alarm_time_min>
		alarm_time_hour = temp_hour;		
     a7e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <temp_hour>
     a82:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <alarm_time_hour>
     a86:	08 95       	ret
	  	min_count++;
		sec_count = 0;
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
     a88:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     a8c:	9f 5f       	subi	r25, 0xFF	; 255
     a8e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <hour_count>
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     a92:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <hour_count>
     a96:	9c 30       	cpi	r25, 0x0C	; 12
     a98:	79 f1       	breq	.+94     	; 0xaf8 <clock_count+0x14e>
			pm_flag ^= 0x01;
		}

		min_count = 0;
     a9a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <min_count>
     a9e:	96 cf       	rjmp	.-212    	; 0x9cc <clock_count+0x22>
		if(ten_sec_start == 0x01)
			ten_sec_count++;
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
     aa0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <trigger_alarm>
     aa4:	91 30       	cpi	r25, 0x01	; 1
     aa6:	29 f1       	breq	.+74     	; 0xaf2 <clock_count+0x148>
			lcd_flag = 0x01;
		}
	  	min_count++;
     aa8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <min_count>
     aac:	9f 5f       	subi	r25, 0xFF	; 255
     aae:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <min_count>
		sec_count = 0;
     ab2:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <sec_count>
     ab6:	85 cf       	rjmp	.-246    	; 0x9c2 <clock_count+0x18>
***********************************************************************************/
void clock_count(){

	//after 128 jumps in TC0 ISR, one second has passed
	if(isr_count == 128){
	  	sec_count++;				//increment 1 second
     ab8:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sec_count>
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <sec_count>
		isr_count = 0;				//reset isr_count
     ac2:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <isr_count>
		uart_send_flag ^= 0x01;
     ac6:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <uart_send_flag>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	98 27       	eor	r25, r24
     ace:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <uart_send_flag>
		temp_read_flag ^= 0x01;
     ad2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_read_flag>
     ad6:	89 27       	eor	r24, r25
     ad8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_read_flag>
	//	set_LCD();
		//if snooze is activated, also increment count for snooze
		if(ten_sec_start == 0x01)
     adc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ten_sec_start>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <clock_count+0x13c>
     ae4:	67 cf       	rjmp	.-306    	; 0x9b4 <clock_count+0xa>
			ten_sec_count++;
     ae6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <ten_sec_count>
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <ten_sec_count>
     af0:	63 cf       	rjmp	.-314    	; 0x9b8 <clock_count+0xe>
  	}
	//after 60 seconds, 1 minute is incremented
  	if(sec_count == 60){
		if(trigger_alarm == 0x01){
			lcd_flag = 0x01;
     af2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <lcd_flag>
     af6:	d8 cf       	rjmp	.-80     	; 0xaa8 <clock_count+0xfe>
  	}
	//after 60 minutes, 1 hour is incremented
  	if(min_count == 60){
	  	hour_count++;
		//if in 12 hour mode, set pm when necessary
		if(hour_count == 12 && hour24_flag == 0){
     af8:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <hour24_flag>
     afc:	91 11       	cpse	r25, r1
     afe:	cd cf       	rjmp	.-102    	; 0xa9a <clock_count+0xf0>
			pm_flag ^= 0x01;
     b00:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <pm_flag>
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	92 27       	eor	r25, r18
     b08:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <pm_flag>
     b0c:	c6 cf       	rjmp	.-116    	; 0xa9a <clock_count+0xf0>

00000b0e <set_LCD>:
* Description: Update the LCD display to show the current state of the alarm
* clock, such as buzzing an alarm, snoozed, or the alarm is not buzzing.
*************************************************************************/
void set_LCD(){
	//clear current contents in display
   clear_display();
     b0e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <clear_display>
   cursor_home();
     b12:	0e 94 f9 07 	call	0xff2	; 0xff2 <cursor_home>
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
     b16:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trigger_alarm>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	c1 f0       	breq	.+48     	; 0xb4e <set_LCD+0x40>
	  //	line2_col1();
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
     b1e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ten_sec_start>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	c9 f0       	breq	.+50     	; 0xb58 <set_LCD+0x4a>
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
     b26:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <alarm_is_set>
     b2a:	88 23       	and	r24, r24
     b2c:	21 f0       	breq	.+8      	; 0xb36 <set_LCD+0x28>
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	41 f0       	breq	.+16     	; 0xb42 <set_LCD+0x34>
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     b32:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <cursor_home>
      //	line2_col1();
      //	string2lcd(temp_string);
   }
	//check to see if alarm clock is not set
   else if(alarm_is_set == 0){
		string2lcd("ALARM NOT SET");	//tell lcd to show "alarm not set" message
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <string2lcd>
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     b3e:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <cursor_home>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
	//check to see if alarm clock is set
	else if(alarm_is_set == 0x01){
		string2lcd("ALARM SET");		//tell lcd to show "alarm set" message
     b42:	86 e3       	ldi	r24, 0x36	; 54
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 61 08 	call	0x10c2	; 0x10c2 <string2lcd>
	//	line2_col1();
	//	string2lcd(temp_string);
	}
   cursor_home();
     b4a:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <cursor_home>
	//clear current contents in display
   clear_display();
   cursor_home();
	//check to see if trigger_alarm is set
   if(trigger_alarm == 0x01){
      	string2lcd("ALARM!!!");			//tell lcd to show "ALARM" message
     b4e:	87 e1       	ldi	r24, 0x17	; 23
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 61 08 	call	0x10c2	; 0x10c2 <string2lcd>
     b56:	ed cf       	rjmp	.-38     	; 0xb32 <set_LCD+0x24>
	//	string2lcd(temp_string);

   }
	//check to see if alarm clock is in snooze mode
   else if(ten_sec_start == 0x01){
      	string2lcd("SNOOZED");			//tell lcd to show "SNOOZED" message
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <string2lcd>
     b60:	e8 cf       	rjmp	.-48     	; 0xb32 <set_LCD+0x24>

00000b62 <set_LCD_temp>:
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
     b62:	0e 94 11 08 	call	0x1022	; 0x1022 <line2_col1>
	string2lcd(temp_string);
     b66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_string>
     b6a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_string+0x1>
     b6e:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <string2lcd>

00000b72 <read_lm73_sensor>:

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
     b72:	42 e0       	ldi	r20, 0x02	; 2
     b74:	6a e9       	ldi	r22, 0x9A	; 154
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	80 e9       	ldi	r24, 0x90	; 144
     b7a:	0e 94 a5 0b 	call	0x174a	; 0x174a <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
     b7e:	ea e9       	ldi	r30, 0x9A	; 154
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	80 81       	ld	r24, Z
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	98 2f       	mov	r25, r24
     b88:	88 27       	eor	r24, r24
	temp_reading |= read_i2c_buffer[1];

	//returns temp_reading
	return temp_reading;
     b8a:	21 81       	ldd	r18, Z+1	; 0x01

}//temp_reading
     b8c:	82 2b       	or	r24, r18
     b8e:	08 95       	ret

00000b90 <uart_send_read>:

void uart_send_read(){
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
	
	if(f_not_c == 0x01){
     b94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <f_not_c>
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	19 f1       	breq	.+70     	; 0xbe2 <uart_send_read+0x52>
		uart_putc('F');
		temp_string[11] = 'F';
	}
	else{
		uart_putc('C');
     b9c:	83 e4       	ldi	r24, 0x43	; 67
     b9e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_putc>
		temp_string[11] = 'C';
     ba2:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     ba6:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     baa:	83 e4       	ldi	r24, 0x43	; 67
     bac:	8b 87       	std	Y+11, r24	; 0x0b
		UDR0 = 'F';
	else
		UDR0 = 'C';
	*/
	
	asm volatile ("nop");
     bae:	00 00       	nop
	temp_string[9] = uart_getc();
     bb0:	0e 94 12 0c 	call	0x1824	; 0x1824 <uart_getc>
     bb4:	89 87       	std	Y+9, r24	; 0x09
     bb6:	8f e8       	ldi	r24, 0x8F	; 143
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <uart_send_read+0x2a>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <uart_send_read+0x30>
     bc0:	00 00       	nop
	_delay_us(100);
	temp_string[10] = uart_getc();
     bc2:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     bc6:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     bca:	0e 94 12 0c 	call	0x1824	; 0x1824 <uart_getc>
     bce:	8a 87       	std	Y+10, r24	; 0x0a
     bd0:	8f e8       	ldi	r24, 0x8F	; 143
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <uart_send_read+0x44>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <uart_send_read+0x4a>
     bda:	00 00       	nop
	_delay_us(100);
	//temp_string[11] = uart_getc();*/

}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret
}//temp_reading

void uart_send_read(){
	
	if(f_not_c == 0x01){
		uart_putc('F');
     be2:	86 e4       	ldi	r24, 0x46	; 70
     be4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <uart_putc>
		temp_string[11] = 'F';
     be8:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <temp_string>
     bec:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <temp_string+0x1>
     bf0:	86 e4       	ldi	r24, 0x46	; 70
     bf2:	8b 87       	std	Y+11, r24	; 0x0b
     bf4:	dc cf       	rjmp	.-72     	; 0xbae <uart_send_read+0x1e>

00000bf6 <__vector_16>:
 * current state.
 * 
 * NOTE: TRIGGERS EVERY 7.8125ms
 * *********************************************************************/

ISR(TIMER0_OVF_vect){
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24

	input_flag = TRUE;		//subject to change
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <input_flag>

	isr_count++;
     c08:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <isr_count>
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <isr_count>

}//ISR
     c12:	8f 91       	pop	r24
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_14>:
* If it is, then toggle the PORTC bit 3 pin to drive the annoying beeping
* for the speakers.
*
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25

	//check if trigger alarm is set
	if(trigger_alarm == 0x01 && radio_trigger == 0){
     c2c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trigger_alarm>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	39 f0       	breq	.+14     	; 0xc42 <__vector_14+0x24>
		PORTC ^= (1 << PC3);		//start toggling PC3
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz

	}

}//ISR
     c34:	9f 91       	pop	r25
     c36:	8f 91       	pop	r24
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti
* NOTE: FREQUENCY IS APPROXIMATELY 300Hz
*************************************************************************/
ISR(TIMER1_OVF_vect){

	//check if trigger alarm is set
	if(trigger_alarm == 0x01 && radio_trigger == 0){
     c42:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <radio_trigger>
     c46:	81 11       	cpse	r24, r1
     c48:	f5 cf       	rjmp	.-22     	; 0xc34 <__vector_14+0x16>
		
		PORTC ^= (1 << PC3);		//start toggling PC3
     c4a:	95 b3       	in	r25, 0x15	; 21
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	89 27       	eor	r24, r25
     c50:	85 bb       	out	0x15, r24	; 21
		TCNT1 = 40000;				//reset TCN1 to 40000 for ~300Hz
     c52:	80 e4       	ldi	r24, 0x40	; 64
     c54:	9c e9       	ldi	r25, 0x9C	; 156
     c56:	9d bd       	out	0x2d, r25	; 45
     c58:	8c bd       	out	0x2c, r24	; 44

	}

}//ISR
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <__vector_21>:
* With a defined prescale value of 128, this triggers approximately every 
* 125kHz. It reads the voltage value of the Cds and outputs the 8 bit reading
* to the OCR2 for brightness adjust.
*************************************************************************/

ISR(ADC_vect){
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	8f 93       	push	r24

	//checks to see if the manual_brightness flag is cleared
	if(manual_brightness == 0)
     c74:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <manual_brightness>
     c78:	81 11       	cpse	r24, r1
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <__vector_21+0x18>
		OCR2 = ADCH;		//if cleared, store the 8 bit number to OCR2
     c7c:	85 b1       	in	r24, 0x05	; 5
     c7e:	83 bd       	out	0x23, r24	; 35

}//ISR
     c80:	8f 91       	pop	r24
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	81 11       	cpse	r24, r1
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <send_lcd+0x8>
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c96:	77 9b       	sbis	0x0e, 7	; 14
     c98:	fe cf       	rjmp	.-4      	; 0xc96 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     c9a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c9c:	77 9b       	sbis	0x0e, 7	; 14
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ca0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     caa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cae:	87 7f       	andi	r24, 0xF7	; 247
     cb0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cb4:	08 95       	ret

00000cb6 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     cb6:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <i.2094>
     cba:	82 0f       	add	r24, r18
     cbc:	91 1d       	adc	r25, r1
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	81 11       	cpse	r24, r1
     cc4:	1f c0       	rjmp	.+62     	; 0xd04 <refresh_lcd+0x4e>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cd0:	77 9b       	sbis	0x0e, 7	; 14
     cd2:	fe cf       	rjmp	.-4      	; 0xcd0 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     cd4:	80 e2       	ldi	r24, 0x20	; 32
     cd6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cd8:	77 9b       	sbis	0x0e, 7	; 14
     cda:	fe cf       	rjmp	.-4      	; 0xcd8 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cdc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ce6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     cf0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <i.2094>
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     cfa:	80 31       	cpi	r24, 0x10	; 16
     cfc:	49 f1       	breq	.+82     	; 0xd50 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     cfe:	80 32       	cpi	r24, 0x20	; 32
     d00:	69 f0       	breq	.+26     	; 0xd1c <refresh_lcd+0x66>
     d02:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     d04:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <null_flag.2095>
     d08:	91 11       	cpse	r25, r1
     d0a:	e0 cf       	rjmp	.-64     	; 0xccc <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d10:	77 9b       	sbis	0x0e, 7	; 14
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     d14:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d16:	77 9b       	sbis	0x0e, 7	; 14
     d18:	fe cf       	rjmp	.-4      	; 0xd16 <refresh_lcd+0x60>
     d1a:	e0 cf       	rjmp	.-64     	; 0xcdc <refresh_lcd+0x26>
     d1c:	85 ed       	ldi	r24, 0xD5	; 213
     d1e:	8a 95       	dec	r24
     d20:	f1 f7       	brne	.-4      	; 0xd1e <refresh_lcd+0x68>
     d22:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d24:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d26:	77 9b       	sbis	0x0e, 7	; 14
     d28:	fe cf       	rjmp	.-4      	; 0xd26 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d2e:	77 9b       	sbis	0x0e, 7	; 14
     d30:	fe cf       	rjmp	.-4      	; 0xd2e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d40:	87 7f       	andi	r24, 0xF7	; 247
     d42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     d46:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <null_flag.2095>
      i=0;
     d4a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <i.2094>
     d4e:	08 95       	ret
     d50:	f5 ed       	ldi	r31, 0xD5	; 213
     d52:	fa 95       	dec	r31
     d54:	f1 f7       	brne	.-4      	; 0xd52 <refresh_lcd+0x9c>
     d56:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d58:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d5a:	77 9b       	sbis	0x0e, 7	; 14
     d5c:	fe cf       	rjmp	.-4      	; 0xd5a <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     d5e:	80 ec       	ldi	r24, 0xC0	; 192
     d60:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d62:	77 9b       	sbis	0x0e, 7	; 14
     d64:	fe cf       	rjmp	.-4      	; 0xd62 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d66:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d70:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d74:	87 7f       	andi	r24, 0xF7	; 247
     d76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d7a:	08 95       	ret

00000d7c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     d7c:	66 0f       	add	r22, r22
     d7e:	66 0f       	add	r22, r22
     d80:	66 0f       	add	r22, r22
     d82:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d84:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d86:	77 9b       	sbis	0x0e, 7	; 14
     d88:	fe cf       	rjmp	.-4      	; 0xd86 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     d8a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d8c:	77 9b       	sbis	0x0e, 7	; 14
     d8e:	fe cf       	rjmp	.-4      	; 0xd8c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d90:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d94:	28 60       	ori	r18, 0x08	; 8
     d96:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d9e:	27 7f       	andi	r18, 0xF7	; 247
     da0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     da4:	25 ed       	ldi	r18, 0xD5	; 213
     da6:	2a 95       	dec	r18
     da8:	f1 f7       	brne	.-4      	; 0xda6 <set_custom_character+0x2a>
     daa:	00 00       	nop
     dac:	fc 01       	movw	r30, r24
     dae:	9c 01       	movw	r18, r24
     db0:	28 5f       	subi	r18, 0xF8	; 248
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     db4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     db6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     db8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dba:	77 9b       	sbis	0x0e, 7	; 14
     dbc:	fe cf       	rjmp	.-4      	; 0xdba <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     dbe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dc0:	77 9b       	sbis	0x0e, 7	; 14
     dc2:	fe cf       	rjmp	.-4      	; 0xdc0 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dc4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc8:	88 60       	ori	r24, 0x08	; 8
     dca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd2:	87 7f       	andi	r24, 0xF7	; 247
     dd4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dd8:	85 ed       	ldi	r24, 0xD5	; 213
     dda:	8a 95       	dec	r24
     ddc:	f1 f7       	brne	.-4      	; 0xdda <set_custom_character+0x5e>
     dde:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     de0:	e2 17       	cp	r30, r18
     de2:	f3 07       	cpc	r31, r19
     de4:	41 f7       	brne	.-48     	; 0xdb6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     de6:	08 95       	ret

00000de8 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     de8:	90 e4       	ldi	r25, 0x40	; 64
     dea:	89 9f       	mul	r24, r25
     dec:	60 0d       	add	r22, r0
     dee:	11 24       	eor	r1, r1
     df0:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     df2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     df4:	77 9b       	sbis	0x0e, 7	; 14
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     df8:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dfa:	77 9b       	sbis	0x0e, 7	; 14
     dfc:	fe cf       	rjmp	.-4      	; 0xdfa <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     dfe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e08:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e0c:	87 7f       	andi	r24, 0xF7	; 247
     e0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e12:	08 95       	ret

00000e14 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     e14:	81 11       	cpse	r24, r1
     e16:	13 c0       	rjmp	.+38     	; 0xe3e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e1c:	77 9b       	sbis	0x0e, 7	; 14
     e1e:	fe cf       	rjmp	.-4      	; 0xe1c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e24:	77 9b       	sbis	0x0e, 7	; 14
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e2c:	88 60       	ori	r24, 0x08	; 8
     e2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e36:	87 7f       	andi	r24, 0xF7	; 247
     e38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e3c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     e3e:	84 36       	cpi	r24, 0x64	; 100
     e40:	b0 f4       	brcc	.+44     	; 0xe6e <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	60 f5       	brcc	.+88     	; 0xe9e <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e4a:	77 9b       	sbis	0x0e, 7	; 14
     e4c:	fe cf       	rjmp	.-4      	; 0xe4a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     e4e:	9d ec       	ldi	r25, 0xCD	; 205
     e50:	89 9f       	mul	r24, r25
     e52:	91 2d       	mov	r25, r1
     e54:	11 24       	eor	r1, r1
     e56:	96 95       	lsr	r25
     e58:	96 95       	lsr	r25
     e5a:	96 95       	lsr	r25
     e5c:	2a e0       	ldi	r18, 0x0A	; 10
     e5e:	92 9f       	mul	r25, r18
     e60:	80 19       	sub	r24, r0
     e62:	11 24       	eor	r1, r1
     e64:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     e66:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e68:	77 9b       	sbis	0x0e, 7	; 14
     e6a:	fe cf       	rjmp	.-4      	; 0xe68 <uint2lcd+0x54>
     e6c:	dd cf       	rjmp	.-70     	; 0xe28 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     e6e:	99 e2       	ldi	r25, 0x29	; 41
     e70:	89 9f       	mul	r24, r25
     e72:	91 2d       	mov	r25, r1
     e74:	11 24       	eor	r1, r1
     e76:	92 95       	swap	r25
     e78:	9f 70       	andi	r25, 0x0F	; 15
     e7a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e80:	77 9b       	sbis	0x0e, 7	; 14
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     e84:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e86:	77 9b       	sbis	0x0e, 7	; 14
     e88:	fe cf       	rjmp	.-4      	; 0xe86 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e8a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8e:	98 60       	ori	r25, 0x08	; 8
     e90:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e94:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e98:	97 7f       	andi	r25, 0xF7	; 247
     e9a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     e9e:	99 e2       	ldi	r25, 0x29	; 41
     ea0:	89 9f       	mul	r24, r25
     ea2:	91 2d       	mov	r25, r1
     ea4:	11 24       	eor	r1, r1
     ea6:	92 95       	swap	r25
     ea8:	9f 70       	andi	r25, 0x0F	; 15
     eaa:	38 2f       	mov	r19, r24
     eac:	24 e6       	ldi	r18, 0x64	; 100
     eae:	92 9f       	mul	r25, r18
     eb0:	30 19       	sub	r19, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2d ec       	ldi	r18, 0xCD	; 205
     eb6:	32 9f       	mul	r19, r18
     eb8:	91 2d       	mov	r25, r1
     eba:	11 24       	eor	r1, r1
     ebc:	96 95       	lsr	r25
     ebe:	96 95       	lsr	r25
     ec0:	96 95       	lsr	r25
     ec2:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ec8:	77 9b       	sbis	0x0e, 7	; 14
     eca:	fe cf       	rjmp	.-4      	; 0xec8 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     ecc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ece:	77 9b       	sbis	0x0e, 7	; 14
     ed0:	fe cf       	rjmp	.-4      	; 0xece <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ed2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed6:	98 60       	ori	r25, 0x08	; 8
     ed8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     edc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ee0:	97 7f       	andi	r25, 0xF7	; 247
     ee2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ee6:	af cf       	rjmp	.-162    	; 0xe46 <uint2lcd+0x32>

00000ee8 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     ee8:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     eea:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ef2:	77 9b       	sbis	0x0e, 7	; 14
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     ef6:	9d e2       	ldi	r25, 0x2D	; 45
     ef8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     efa:	77 9b       	sbis	0x0e, 7	; 14
     efc:	fe cf       	rjmp	.-4      	; 0xefa <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     efe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f02:	98 60       	ori	r25, 0x08	; 8
     f04:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f08:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f0c:	97 7f       	andi	r25, 0xF7	; 247
     f0e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f12:	95 ed       	ldi	r25, 0xD5	; 213
     f14:	9a 95       	dec	r25
     f16:	f1 f7       	brne	.-4      	; 0xf14 <int2lcd+0x2c>
     f18:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     f1a:	81 95       	neg	r24
     f1c:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <uint2lcd>

00000f20 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f20:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f22:	77 9b       	sbis	0x0e, 7	; 14
     f24:	fe cf       	rjmp	.-4      	; 0xf22 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     f26:	8e e0       	ldi	r24, 0x0E	; 14
     f28:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f2a:	77 9b       	sbis	0x0e, 7	; 14
     f2c:	fe cf       	rjmp	.-4      	; 0xf2a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f32:	88 60       	ori	r24, 0x08	; 8
     f34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f38:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f3c:	87 7f       	andi	r24, 0xF7	; 247
     f3e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f42:	08 95       	ret

00000f44 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f44:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f46:	77 9b       	sbis	0x0e, 7	; 14
     f48:	fe cf       	rjmp	.-4      	; 0xf46 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     f4a:	8c e0       	ldi	r24, 0x0C	; 12
     f4c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f4e:	77 9b       	sbis	0x0e, 7	; 14
     f50:	fe cf       	rjmp	.-4      	; 0xf4e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f56:	88 60       	ori	r24, 0x08	; 8
     f58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f66:	08 95       	ret

00000f68 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f6a:	77 9b       	sbis	0x0e, 7	; 14
     f6c:	fe cf       	rjmp	.-4      	; 0xf6a <shift_right+0x2>
  SPDR = byte;                        //send payload
     f6e:	8e e1       	ldi	r24, 0x1E	; 30
     f70:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f72:	77 9b       	sbis	0x0e, 7	; 14
     f74:	fe cf       	rjmp	.-4      	; 0xf72 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f7a:	88 60       	ori	r24, 0x08	; 8
     f7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f84:	87 7f       	andi	r24, 0xF7	; 247
     f86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f8a:	08 95       	ret

00000f8c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f8c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f8e:	77 9b       	sbis	0x0e, 7	; 14
     f90:	fe cf       	rjmp	.-4      	; 0xf8e <shift_left+0x2>
  SPDR = byte;                        //send payload
     f92:	88 e1       	ldi	r24, 0x18	; 24
     f94:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f96:	77 9b       	sbis	0x0e, 7	; 14
     f98:	fe cf       	rjmp	.-4      	; 0xf96 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa8:	87 7f       	andi	r24, 0xF7	; 247
     faa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fae:	08 95       	ret

00000fb0 <strobe_lcd>:
     fb0:	e2 e6       	ldi	r30, 0x62	; 98
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 60       	ori	r24, 0x08	; 8
     fb8:	80 83       	st	Z, r24
     fba:	80 81       	ld	r24, Z
     fbc:	87 7f       	andi	r24, 0xF7	; 247
     fbe:	80 83       	st	Z, r24
     fc0:	08 95       	ret

00000fc2 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fc2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fc4:	77 9b       	sbis	0x0e, 7	; 14
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <clear_display+0x2>
  SPDR = byte;                        //send payload
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fcc:	77 9b       	sbis	0x0e, 7	; 14
     fce:	fe cf       	rjmp	.-4      	; 0xfcc <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fd0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fda:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fe4:	8f e1       	ldi	r24, 0x1F	; 31
     fe6:	9c e1       	ldi	r25, 0x1C	; 28
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <clear_display+0x26>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <clear_display+0x2c>
     fee:	00 00       	nop
     ff0:	08 95       	ret

00000ff2 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ff2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ff4:	77 9b       	sbis	0x0e, 7	; 14
     ff6:	fe cf       	rjmp	.-4      	; 0xff4 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ffc:	77 9b       	sbis	0x0e, 7	; 14
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1000:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1004:	88 60       	ori	r24, 0x08	; 8
    1006:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    100a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    100e:	87 7f       	andi	r24, 0xF7	; 247
    1010:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1014:	8f e6       	ldi	r24, 0x6F	; 111
    1016:	97 e1       	ldi	r25, 0x17	; 23
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <cursor_home+0x26>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <cursor_home+0x2c>
    101e:	00 00       	nop
    1020:	08 95       	ret

00001022 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1022:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1024:	77 9b       	sbis	0x0e, 7	; 14
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <line2_col1+0x2>
  SPDR = byte;                        //send payload
    1028:	80 ec       	ldi	r24, 0xC0	; 192
    102a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    102c:	77 9b       	sbis	0x0e, 7	; 14
    102e:	fe cf       	rjmp	.-4      	; 0x102c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1030:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1034:	88 60       	ori	r24, 0x08	; 8
    1036:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1044:	08 95       	ret

00001046 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1046:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1048:	77 9b       	sbis	0x0e, 7	; 14
    104a:	fe cf       	rjmp	.-4      	; 0x1048 <line1_col1+0x2>
  SPDR = byte;                        //send payload
    104c:	80 e8       	ldi	r24, 0x80	; 128
    104e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1050:	77 9b       	sbis	0x0e, 7	; 14
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1054:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1058:	88 60       	ori	r24, 0x08	; 8
    105a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1062:	87 7f       	andi	r24, 0xF7	; 247
    1064:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1068:	08 95       	ret

0000106a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    106a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    106c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    106e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1070:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1072:	77 9b       	sbis	0x0e, 7	; 14
    1074:	fe cf       	rjmp	.-4      	; 0x1072 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    1076:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1078:	77 9b       	sbis	0x0e, 7	; 14
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    107c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1086:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1090:	85 ed       	ldi	r24, 0xD5	; 213
    1092:	8a 95       	dec	r24
    1094:	f1 f7       	brne	.-4      	; 0x1092 <fill_spaces+0x28>
    1096:	00 00       	nop
    1098:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    109a:	51 f7       	brne	.-44     	; 0x1070 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
    109c:	08 95       	ret

0000109e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10a2:	77 9b       	sbis	0x0e, 7	; 14
    10a4:	fe cf       	rjmp	.-4      	; 0x10a2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    10a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10a8:	77 9b       	sbis	0x0e, 7	; 14
    10aa:	fe cf       	rjmp	.-4      	; 0x10a8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b0:	88 60       	ori	r24, 0x08	; 8
    10b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10c0:	08 95       	ret

000010c2 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    10c2:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10ca:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    10cc:	df 01       	movw	r26, r30
    10ce:	a4 0f       	add	r26, r20
    10d0:	b5 1f       	adc	r27, r21
    10d2:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10d4:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    10da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10dc:	77 9b       	sbis	0x0e, 7	; 14
    10de:	fe cf       	rjmp	.-4      	; 0x10dc <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10e0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e4:	98 60       	ori	r25, 0x08	; 8
    10e6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ee:	97 7f       	andi	r25, 0xF7	; 247
    10f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10f4:	85 ed       	ldi	r24, 0xD5	; 213
    10f6:	8a 95       	dec	r24
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <string2lcd+0x34>
    10fa:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	46 2f       	mov	r20, r22
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	df 01       	movw	r26, r30
    1104:	0d 90       	ld	r0, X+
    1106:	00 20       	and	r0, r0
    1108:	e9 f7       	brne	.-6      	; 0x1104 <__stack+0x5>
    110a:	9d 01       	movw	r18, r26
    110c:	2e 1b       	sub	r18, r30
    110e:	3f 0b       	sbc	r19, r31
    1110:	22 50       	subi	r18, 0x02	; 2
    1112:	31 09       	sbc	r19, r1
    1114:	24 17       	cp	r18, r20
    1116:	35 07       	cpc	r19, r21
    1118:	c8 f6       	brcc	.-78     	; 0x10cc <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
    111a:	08 95       	ret

0000111c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	99 ef       	ldi	r25, 0xF9	; 249
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <lcd_init+0x4>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <lcd_init+0xa>
    1126:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    112e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1130:	77 9b       	sbis	0x0e, 7	; 14
    1132:	fe cf       	rjmp	.-4      	; 0x1130 <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1134:	80 e3       	ldi	r24, 0x30	; 48
    1136:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1138:	77 9b       	sbis	0x0e, 7	; 14
    113a:	fe cf       	rjmp	.-4      	; 0x1138 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    113c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1140:	88 60       	ori	r24, 0x08	; 8
    1142:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1146:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1150:	8f e5       	ldi	r24, 0x5F	; 95
    1152:	9d e6       	ldi	r25, 0x6D	; 109
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_init+0x38>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <lcd_init+0x3e>
    115a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    115c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    115e:	77 9b       	sbis	0x0e, 7	; 14
    1160:	fe cf       	rjmp	.-4      	; 0x115e <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1162:	80 e3       	ldi	r24, 0x30	; 48
    1164:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1166:	77 9b       	sbis	0x0e, 7	; 14
    1168:	fe cf       	rjmp	.-4      	; 0x1166 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    116a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1174:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1178:	87 7f       	andi	r24, 0xF7	; 247
    117a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    117e:	8f e5       	ldi	r24, 0x5F	; 95
    1180:	9d e6       	ldi	r25, 0x6D	; 109
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <lcd_init+0x66>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <lcd_init+0x6c>
    1188:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    118a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    118c:	77 9b       	sbis	0x0e, 7	; 14
    118e:	fe cf       	rjmp	.-4      	; 0x118c <lcd_init+0x70>
  SPDR = byte;                        //send payload
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1194:	77 9b       	sbis	0x0e, 7	; 14
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1198:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a6:	87 7f       	andi	r24, 0xF7	; 247
    11a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ac:	8f e5       	ldi	r24, 0x5F	; 95
    11ae:	9d e6       	ldi	r25, 0x6D	; 109
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <lcd_init+0x94>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <lcd_init+0x9a>
    11b6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11b8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11ba:	77 9b       	sbis	0x0e, 7	; 14
    11bc:	fe cf       	rjmp	.-4      	; 0x11ba <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    11be:	88 e3       	ldi	r24, 0x38	; 56
    11c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11c2:	77 9b       	sbis	0x0e, 7	; 14
    11c4:	fe cf       	rjmp	.-4      	; 0x11c2 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ca:	88 60       	ori	r24, 0x08	; 8
    11cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d4:	87 7f       	andi	r24, 0xF7	; 247
    11d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11da:	8f e1       	ldi	r24, 0x1F	; 31
    11dc:	9e e4       	ldi	r25, 0x4E	; 78
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <lcd_init+0xc2>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <lcd_init+0xc8>
    11e4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11e8:	77 9b       	sbis	0x0e, 7	; 14
    11ea:	fe cf       	rjmp	.-4      	; 0x11e8 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    11ec:	88 e0       	ldi	r24, 0x08	; 8
    11ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11f0:	77 9b       	sbis	0x0e, 7	; 14
    11f2:	fe cf       	rjmp	.-4      	; 0x11f0 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11f8:	88 60       	ori	r24, 0x08	; 8
    11fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1202:	87 7f       	andi	r24, 0xF7	; 247
    1204:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1208:	8f e1       	ldi	r24, 0x1F	; 31
    120a:	9e e4       	ldi	r25, 0x4E	; 78
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <lcd_init+0xf0>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <lcd_init+0xf6>
    1212:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1214:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1216:	77 9b       	sbis	0x0e, 7	; 14
    1218:	fe cf       	rjmp	.-4      	; 0x1216 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    121e:	77 9b       	sbis	0x0e, 7	; 14
    1220:	fe cf       	rjmp	.-4      	; 0x121e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1222:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    122c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1230:	87 7f       	andi	r24, 0xF7	; 247
    1232:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1236:	8f e1       	ldi	r24, 0x1F	; 31
    1238:	9e e4       	ldi	r25, 0x4E	; 78
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <lcd_init+0x11e>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <lcd_init+0x124>
    1240:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1242:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1244:	77 9b       	sbis	0x0e, 7	; 14
    1246:	fe cf       	rjmp	.-4      	; 0x1244 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1248:	86 e0       	ldi	r24, 0x06	; 6
    124a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    124c:	77 9b       	sbis	0x0e, 7	; 14
    124e:	fe cf       	rjmp	.-4      	; 0x124c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1250:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    125a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1264:	8f e1       	ldi	r24, 0x1F	; 31
    1266:	9e e4       	ldi	r25, 0x4E	; 78
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <lcd_init+0x14c>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <lcd_init+0x152>
    126e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1270:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1272:	77 9b       	sbis	0x0e, 7	; 14
    1274:	fe cf       	rjmp	.-4      	; 0x1272 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1276:	8c e0       	ldi	r24, 0x0C	; 12
    1278:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    127a:	77 9b       	sbis	0x0e, 7	; 14
    127c:	fe cf       	rjmp	.-4      	; 0x127a <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    127e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1282:	88 60       	ori	r24, 0x08	; 8
    1284:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1288:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    128c:	87 7f       	andi	r24, 0xF7	; 247
    128e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1292:	8f e1       	ldi	r24, 0x1F	; 31
    1294:	9e e4       	ldi	r25, 0x4E	; 78
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <lcd_init+0x17a>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <lcd_init+0x180>
    129c:	00 00       	nop
    129e:	08 95       	ret

000012a0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    12a0:	4f 92       	push	r4
    12a2:	5f 92       	push	r5
    12a4:	6f 92       	push	r6
    12a6:	7f 92       	push	r7
    12a8:	8f 92       	push	r8
    12aa:	9f 92       	push	r9
    12ac:	af 92       	push	r10
    12ae:	bf 92       	push	r11
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	69 97       	sbiw	r28, 0x19	; 25
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	14 2f       	mov	r17, r20
    12d2:	42 2e       	mov	r4, r18
    12d4:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    12d6:	00 23       	and	r16, r16
    12d8:	79 f0       	breq	.+30     	; 0x12f8 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    12da:	6b 01       	movw	r12, r22
    12dc:	7c 01       	movw	r14, r24
    12de:	cc 24       	eor	r12, r12
    12e0:	f7 fc       	sbrc	r15, 7
    12e2:	c3 94       	inc	r12
    12e4:	dd 24       	eor	r13, r13
    12e6:	ee 24       	eor	r14, r14
    12e8:	ff 24       	eor	r15, r15
    12ea:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    12ec:	6b 01       	movw	r12, r22
    12ee:	7c 01       	movw	r14, r24
    12f0:	97 fd       	sbrc	r25, 7
    12f2:	a3 c0       	rjmp	.+326    	; 0x143a <lcd_int32+0x19a>
    12f4:	c7 01       	movw	r24, r14
    12f6:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    12f8:	44 20       	and	r4, r4
    12fa:	09 f4       	brne	.+2      	; 0x12fe <lcd_int32+0x5e>
    12fc:	96 c0       	rjmp	.+300    	; 0x142a <lcd_int32+0x18a>
    12fe:	9e 01       	movw	r18, r28
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	59 01       	movw	r10, r18
    1306:	49 01       	movw	r8, r18
    1308:	66 24       	eor	r6, r6
    130a:	6a 94       	dec	r6
    130c:	64 0c       	add	r6, r4
    130e:	71 2c       	mov	r7, r1
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	63 1a       	sub	r6, r19
    1314:	73 0a       	sbc	r7, r19
    1316:	6a 0c       	add	r6, r10
    1318:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodsi4>
    1326:	e6 2f       	mov	r30, r22
    1328:	2a 8b       	std	Y+18, r18	; 0x12
    132a:	3b 8b       	std	Y+19, r19	; 0x13
    132c:	4c 8b       	std	Y+20, r20	; 0x14
    132e:	5d 8b       	std	Y+21, r21	; 0x15
    1330:	6a 89       	ldd	r22, Y+18	; 0x12
    1332:	7b 89       	ldd	r23, Y+19	; 0x13
    1334:	8c 89       	ldd	r24, Y+20	; 0x14
    1336:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1338:	20 e3       	ldi	r18, 0x30	; 48
    133a:	2e 0f       	add	r18, r30
    133c:	f4 01       	movw	r30, r8
    133e:	21 93       	st	Z+, r18
    1340:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1342:	6e 16       	cp	r6, r30
    1344:	7f 06       	cpc	r7, r31
    1346:	49 f7       	brne	.-46     	; 0x131a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1348:	99 24       	eor	r9, r9
    134a:	93 94       	inc	r9
    134c:	94 0c       	add	r9, r4
    134e:	f5 01       	movw	r30, r10
    1350:	e4 0d       	add	r30, r4
    1352:	f1 1d       	adc	r31, r1
    1354:	2e e2       	ldi	r18, 0x2E	; 46
    1356:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodsi4>
    1364:	e6 2f       	mov	r30, r22
    1366:	2a 8b       	std	Y+18, r18	; 0x12
    1368:	3b 8b       	std	Y+19, r19	; 0x13
    136a:	4c 8b       	std	Y+20, r20	; 0x14
    136c:	5d 8b       	std	Y+21, r21	; 0x15
    136e:	6e 8b       	std	Y+22, r22	; 0x16
    1370:	7f 8b       	std	Y+23, r23	; 0x17
    1372:	88 8f       	std	Y+24, r24	; 0x18
    1374:	99 8f       	std	Y+25, r25	; 0x19
    1376:	6a 89       	ldd	r22, Y+18	; 0x12
    1378:	7b 89       	ldd	r23, Y+19	; 0x13
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    137e:	31 e0       	ldi	r19, 0x01	; 1
    1380:	39 0d       	add	r19, r9
    1382:	d5 01       	movw	r26, r10
    1384:	a9 0d       	add	r26, r9
    1386:	b1 1d       	adc	r27, r1
    1388:	e0 5d       	subi	r30, 0xD0	; 208
    138a:	ec 93       	st	X, r30
    138c:	93 2e       	mov	r9, r19
        }while(qr.quot);
    138e:	61 15       	cp	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	81 05       	cpc	r24, r1
    1394:	91 05       	cpc	r25, r1
    1396:	01 f7       	brne	.-64     	; 0x1358 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1398:	11 23       	and	r17, r17
    139a:	61 f0       	breq	.+24     	; 0x13b4 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    139c:	51 10       	cpse	r5, r1
    139e:	4b c0       	rjmp	.+150    	; 0x1436 <lcd_int32+0x196>
    13a0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    13a2:	31 17       	cp	r19, r17
    13a4:	38 f4       	brcc	.+14     	; 0x13b4 <lcd_int32+0x114>
    13a6:	f5 01       	movw	r30, r10
    13a8:	e3 0f       	add	r30, r19
    13aa:	f1 1d       	adc	r31, r1
    13ac:	90 83       	st	Z, r25
    13ae:	3f 5f       	subi	r19, 0xFF	; 255
    13b0:	13 13       	cpse	r17, r19
    13b2:	f9 cf       	rjmp	.-14     	; 0x13a6 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    13b4:	00 23       	and	r16, r16
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <lcd_int32+0x124>
    13b8:	f5 01       	movw	r30, r10
    13ba:	e3 0f       	add	r30, r19
    13bc:	f1 1d       	adc	r31, r1
    13be:	9d e2       	ldi	r25, 0x2D	; 45
    13c0:	90 83       	st	Z, r25
    13c2:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13c4:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    13c6:	31 50       	subi	r19, 0x01	; 1
    13c8:	f5 01       	movw	r30, r10
    13ca:	e3 0f       	add	r30, r19
    13cc:	f1 1d       	adc	r31, r1
    13ce:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13d0:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13d2:	77 9b       	sbis	0x0e, 7	; 14
    13d4:	fe cf       	rjmp	.-4      	; 0x13d2 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    13d6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13d8:	77 9b       	sbis	0x0e, 7	; 14
    13da:	fe cf       	rjmp	.-4      	; 0x13d8 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13e0:	98 60       	ori	r25, 0x08	; 8
    13e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ea:	97 7f       	andi	r25, 0xF7	; 247
    13ec:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13f0:	85 ed       	ldi	r24, 0xD5	; 213
    13f2:	8a 95       	dec	r24
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <lcd_int32+0x152>
    13f6:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    13f8:	31 11       	cpse	r19, r1
    13fa:	e5 cf       	rjmp	.-54     	; 0x13c6 <lcd_int32+0x126>

}
    13fc:	69 96       	adiw	r28, 0x19	; 25
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	7f 90       	pop	r7
    1422:	6f 90       	pop	r6
    1424:	5f 90       	pop	r5
    1426:	4f 90       	pop	r4
    1428:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    142a:	91 2c       	mov	r9, r1
    142c:	9e 01       	movw	r18, r28
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	59 01       	movw	r10, r18
    1434:	91 cf       	rjmp	.-222    	; 0x1358 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1436:	90 e3       	ldi	r25, 0x30	; 48
    1438:	b4 cf       	rjmp	.-152    	; 0x13a2 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    143a:	f0 94       	com	r15
    143c:	e0 94       	com	r14
    143e:	d0 94       	com	r13
    1440:	c0 94       	com	r12
    1442:	c1 1c       	adc	r12, r1
    1444:	d1 1c       	adc	r13, r1
    1446:	e1 1c       	adc	r14, r1
    1448:	f1 1c       	adc	r15, r1
    144a:	54 cf       	rjmp	.-344    	; 0x12f4 <lcd_int32+0x54>

0000144c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    144c:	5f 92       	push	r5
    144e:	6f 92       	push	r6
    1450:	7f 92       	push	r7
    1452:	8f 92       	push	r8
    1454:	9f 92       	push	r9
    1456:	af 92       	push	r10
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	61 97       	sbiw	r28, 0x11	; 17
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	5c 01       	movw	r10, r24
    147c:	96 2e       	mov	r9, r22
    147e:	54 2e       	mov	r5, r20
    1480:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1482:	8b 2c       	mov	r8, r11
    1484:	88 1c       	adc	r8, r8
    1486:	88 24       	eor	r8, r8
    1488:	88 1c       	adc	r8, r8
    148a:	78 2c       	mov	r7, r8
    148c:	9c 01       	movw	r18, r24
    148e:	97 fd       	sbrc	r25, 7
    1490:	9d c0       	rjmp	.+314    	; 0x15cc <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1492:	55 20       	and	r5, r5
    1494:	09 f4       	brne	.+2      	; 0x1498 <lcd_int16+0x4c>
    1496:	8e c0       	rjmp	.+284    	; 0x15b4 <lcd_int16+0x168>
    1498:	8e 01       	movw	r16, r28
    149a:	0f 5f       	subi	r16, 0xFF	; 255
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	78 01       	movw	r14, r16
    14a0:	cc 24       	eor	r12, r12
    14a2:	ca 94       	dec	r12
    14a4:	c5 0c       	add	r12, r5
    14a6:	d1 2c       	mov	r13, r1
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	c8 1a       	sub	r12, r24
    14ac:	d8 0a       	sbc	r13, r24
    14ae:	c0 0e       	add	r12, r16
    14b0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    14b2:	6a e0       	ldi	r22, 0x0A	; 10
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	c9 01       	movw	r24, r18
    14b8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__divmodhi4>
    14bc:	46 2f       	mov	r20, r22
    14be:	24 2f       	mov	r18, r20
    14c0:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    14c2:	80 5d       	subi	r24, 0xD0	; 208
    14c4:	f7 01       	movw	r30, r14
    14c6:	81 93       	st	Z+, r24
    14c8:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    14ca:	ec 15       	cp	r30, r12
    14cc:	fd 05       	cpc	r31, r13
    14ce:	89 f7       	brne	.-30     	; 0x14b2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    14d0:	ff 24       	eor	r15, r15
    14d2:	f3 94       	inc	r15
    14d4:	f5 0c       	add	r15, r5
    14d6:	f8 01       	movw	r30, r16
    14d8:	e5 0d       	add	r30, r5
    14da:	f1 1d       	adc	r31, r1
    14dc:	8e e2       	ldi	r24, 0x2E	; 46
    14de:	80 83       	st	Z, r24
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    14e2:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    14e4:	6a e0       	ldi	r22, 0x0A	; 10
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	c9 01       	movw	r24, r18
    14ea:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__divmodhi4>
    14ee:	46 2f       	mov	r20, r22
    14f0:	24 2f       	mov	r18, r20
    14f2:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	9f 0d       	add	r25, r15
    14f8:	f8 01       	movw	r30, r16
    14fa:	ef 0d       	add	r30, r15
    14fc:	f1 1d       	adc	r31, r1
    14fe:	80 5d       	subi	r24, 0xD0	; 208
    1500:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1502:	21 15       	cp	r18, r1
    1504:	31 05       	cpc	r19, r1
    1506:	69 f7       	brne	.-38     	; 0x14e2 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    1508:	61 10       	cpse	r6, r1
    150a:	59 c0       	rjmp	.+178    	; 0x15be <lcd_int16+0x172>
    150c:	b7 fc       	sbrc	r11, 7
    150e:	63 c0       	rjmp	.+198    	; 0x15d6 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1510:	99 20       	and	r9, r9
    1512:	b1 f0       	breq	.+44     	; 0x1540 <lcd_int16+0xf4>
    1514:	68 2d       	mov	r22, r8
    1516:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1518:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    151a:	29 2f       	mov	r18, r25
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	49 2d       	mov	r20, r9
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	46 1b       	sub	r20, r22
    1524:	57 0b       	sbc	r21, r23
    1526:	24 17       	cp	r18, r20
    1528:	35 07       	cpc	r19, r21
    152a:	54 f4       	brge	.+20     	; 0x1540 <lcd_int16+0xf4>
    152c:	9f 5f       	subi	r25, 0xFF	; 255
    152e:	f8 01       	movw	r30, r16
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	80 83       	st	Z, r24
    1536:	29 2f       	mov	r18, r25
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	24 17       	cp	r18, r20
    153c:	35 07       	cpc	r19, r21
    153e:	b4 f3       	brlt	.-20     	; 0x152c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1540:	77 20       	and	r7, r7
    1542:	31 f0       	breq	.+12     	; 0x1550 <lcd_int16+0x104>
    1544:	f8 01       	movw	r30, r16
    1546:	e9 0f       	add	r30, r25
    1548:	f1 1d       	adc	r31, r1
    154a:	8d e2       	ldi	r24, 0x2D	; 45
    154c:	80 83       	st	Z, r24
    154e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1550:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1552:	91 50       	subi	r25, 0x01	; 1
    1554:	f8 01       	movw	r30, r16
    1556:	e9 0f       	add	r30, r25
    1558:	f1 1d       	adc	r31, r1
    155a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    155c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    155e:	77 9b       	sbis	0x0e, 7	; 14
    1560:	fe cf       	rjmp	.-4      	; 0x155e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1562:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1564:	77 9b       	sbis	0x0e, 7	; 14
    1566:	fe cf       	rjmp	.-4      	; 0x1564 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1568:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    156c:	88 60       	ori	r24, 0x08	; 8
    156e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1572:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1576:	87 7f       	andi	r24, 0xF7	; 247
    1578:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    157c:	f5 ed       	ldi	r31, 0xD5	; 213
    157e:	fa 95       	dec	r31
    1580:	f1 f7       	brne	.-4      	; 0x157e <lcd_int16+0x132>
    1582:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1584:	91 11       	cpse	r25, r1
    1586:	e5 cf       	rjmp	.-54     	; 0x1552 <lcd_int16+0x106>
}
    1588:	61 96       	adiw	r28, 0x11	; 17
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	df 90       	pop	r13
    15a2:	cf 90       	pop	r12
    15a4:	bf 90       	pop	r11
    15a6:	af 90       	pop	r10
    15a8:	9f 90       	pop	r9
    15aa:	8f 90       	pop	r8
    15ac:	7f 90       	pop	r7
    15ae:	6f 90       	pop	r6
    15b0:	5f 90       	pop	r5
    15b2:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    15b4:	f1 2c       	mov	r15, r1
    15b6:	8e 01       	movw	r16, r28
    15b8:	0f 5f       	subi	r16, 0xFF	; 255
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	93 cf       	rjmp	.-218    	; 0x14e4 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    15be:	99 20       	and	r9, r9
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <lcd_int16+0x178>
    15c2:	be cf       	rjmp	.-132    	; 0x1540 <lcd_int16+0xf4>
    15c4:	68 2d       	mov	r22, r8
    15c6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    15c8:	80 e3       	ldi	r24, 0x30	; 48
    15ca:	a7 cf       	rjmp	.-178    	; 0x151a <lcd_int16+0xce>
    15cc:	22 27       	eor	r18, r18
    15ce:	33 27       	eor	r19, r19
    15d0:	28 1b       	sub	r18, r24
    15d2:	39 0b       	sbc	r19, r25
    15d4:	5e cf       	rjmp	.-324    	; 0x1492 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    15d6:	f3 94       	inc	r15
    15d8:	f3 94       	inc	r15
    15da:	f8 01       	movw	r30, r16
    15dc:	e9 0f       	add	r30, r25
    15de:	f1 1d       	adc	r31, r1
    15e0:	8d e2       	ldi	r24, 0x2D	; 45
    15e2:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    15e4:	99 20       	and	r9, r9
    15e6:	59 f0       	breq	.+22     	; 0x15fe <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    15e8:	2f 2d       	mov	r18, r15
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	49 2d       	mov	r20, r9
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	24 17       	cp	r18, r20
    15f2:	35 07       	cpc	r19, r21
    15f4:	24 f4       	brge	.+8      	; 0x15fe <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    15f6:	9f 2d       	mov	r25, r15
                bSigned = 0;
    15f8:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	97 cf       	rjmp	.-210    	; 0x152c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    15fe:	9f 2d       	mov	r25, r15
    1600:	a7 cf       	rjmp	.-178    	; 0x1550 <lcd_int16+0x104>

00001602 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	0b b6       	in	r0, 0x3b	; 59
    160e:	0f 92       	push	r0
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1620:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1624:	8e 2f       	mov	r24, r30
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	fc 01       	movw	r30, r24
    162a:	38 97       	sbiw	r30, 0x08	; 8
    162c:	e1 35       	cpi	r30, 0x51	; 81
    162e:	f1 05       	cpc	r31, r1
    1630:	b0 f0       	brcs	.+44     	; 0x165e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1632:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1636:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0b be       	out	0x3b, r0	; 59
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    165e:	ea 5b       	subi	r30, 0xBA	; 186
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1666:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <twi_buf_ptr.1780>
    166a:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <twi_buf>
    166e:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <twi_buf+0x1>
    1672:	e8 0f       	add	r30, r24
    1674:	f1 1d       	adc	r31, r1
    1676:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    167a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    167c:	84 e9       	ldi	r24, 0x94	; 148
    167e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    1682:	de cf       	rjmp	.-68     	; 0x1640 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1684:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <twi_bus_addr>
    1688:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    168c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    1690:	85 e8       	ldi	r24, 0x85	; 133
    1692:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1696:	d4 cf       	rjmp	.-88     	; 0x1640 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1698:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <twi_buf_ptr.1780>
    169c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <twi_msg_size>
    16a0:	89 17       	cp	r24, r25
    16a2:	60 f7       	brcc	.-40     	; 0x167c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    16a4:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <twi_buf>
    16a8:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <twi_buf+0x1>
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	98 0f       	add	r25, r24
    16b0:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <twi_buf_ptr.1780>
    16b4:	e8 0f       	add	r30, r24
    16b6:	f1 1d       	adc	r31, r1
    16b8:	80 81       	ld	r24, Z
    16ba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    16be:	85 e8       	ldi	r24, 0x85	; 133
    16c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16c4:	bd cf       	rjmp	.-134    	; 0x1640 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    16c6:	85 ea       	ldi	r24, 0xA5	; 165
    16c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    16cc:	b9 cf       	rjmp	.-142    	; 0x1640 <__vector_33+0x3e>
    16ce:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    16d2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <twi_msg_size>
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	dc f4       	brge	.+54     	; 0x1718 <__vector_33+0x116>
    16e2:	85 ec       	ldi	r24, 0xC5	; 197
    16e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16e8:	ab cf       	rjmp	.-170    	; 0x1640 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    16ea:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <twi_buf>
    16ee:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <twi_buf+0x1>
    16f2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <twi_buf_ptr.1780>
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	28 0f       	add	r18, r24
    16fa:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <twi_buf_ptr.1780>
    16fe:	e8 0f       	add	r30, r24
    1700:	f1 1d       	adc	r31, r1
    1702:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1706:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1708:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <twi_msg_size>
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	28 17       	cp	r18, r24
    1714:	39 07       	cpc	r19, r25
    1716:	2c f3       	brlt	.-54     	; 0x16e2 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1718:	85 e8       	ldi	r24, 0x85	; 133
    171a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    171e:	90 cf       	rjmp	.-224    	; 0x1640 <__vector_33+0x3e>

00001720 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1720:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1724:	81 70       	andi	r24, 0x01	; 1
    1726:	08 95       	ret

00001728 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1728:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    172c:	90 fd       	sbrc	r25, 0
    172e:	fc cf       	rjmp	.-8      	; 0x1728 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1730:	8e 7f       	andi	r24, 0xFE	; 254
    1732:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1736:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <twi_buf+0x1>
    173a:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    173e:	40 93 d7 01 	sts	0x01D7, r20	; 0x8001d7 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1742:	85 ea       	ldi	r24, 0xA5	; 165
    1744:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1748:	08 95       	ret

0000174a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    174a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    174e:	90 fd       	sbrc	r25, 0
    1750:	fc cf       	rjmp	.-8      	; 0x174a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    1758:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <twi_buf+0x1>
    175c:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    1760:	40 93 d7 01 	sts	0x01D7, r20	; 0x8001d7 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1764:	85 ea       	ldi	r24, 0xA5	; 165
    1766:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    176a:	08 95       	ret

0000176c <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    1772:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1776:	8c e0       	ldi	r24, 0x0C	; 12
    1778:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    177c:	08 95       	ret

0000177e <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
    177e:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
    1780:	cb 01       	movw	r24, r22
    1782:	88 0f       	add	r24, r24
    1784:	89 2f       	mov	r24, r25
    1786:	88 1f       	adc	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	91 95       	neg	r25

	if(f_not_c == 0x01){
    178c:	41 30       	cpi	r20, 0x01	; 1
    178e:	91 f4       	brne	.+36     	; 0x17b4 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
    1790:	9c 01       	movw	r18, r24
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	28 0f       	add	r18, r24
    17a0:	39 1f       	adc	r19, r25
    17a2:	ad ec       	ldi	r26, 0xCD	; 205
    17a4:	bc ec       	ldi	r27, 0xCC	; 204
    17a6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__umulhisi3>
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    17b4:	4a e0       	ldi	r20, 0x0A	; 10
    17b6:	bf 01       	movw	r22, r30
    17b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__itoa_ncheck>

000017bc <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17bc:	5d 9b       	sbis	0x0b, 5	; 11
    17be:	fe cf       	rjmp	.-4      	; 0x17bc <uart_putc>
    UDR0 = data;    // Send data byte
    17c0:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17c2:	5d 9b       	sbis	0x0b, 5	; 11
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <uart_putc+0x6>
}
    17c6:	08 95       	ret

000017c8 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    17c8:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    17ca:	90 81       	ld	r25, Z
    17cc:	99 23       	and	r25, r25
    17ce:	49 f0       	breq	.+18     	; 0x17e2 <uart_puts+0x1a>
    17d0:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17d2:	5d 9b       	sbis	0x0b, 5	; 11
    17d4:	fe cf       	rjmp	.-4      	; 0x17d2 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    17d6:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17d8:	5d 9b       	sbis	0x0b, 5	; 11
    17da:	fe cf       	rjmp	.-4      	; 0x17d8 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    17dc:	91 91       	ld	r25, Z+
    17de:	91 11       	cpse	r25, r1
    17e0:	f8 cf       	rjmp	.-16     	; 0x17d2 <uart_puts+0xa>
    17e2:	08 95       	ret

000017e4 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    17e4:	9c 01       	movw	r18, r24
    17e6:	fc 01       	movw	r30, r24
    17e8:	44 91       	lpm	r20, Z
    17ea:	44 23       	and	r20, r20
    17ec:	69 f0       	breq	.+26     	; 0x1808 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	f9 01       	movw	r30, r18
    17f2:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17f4:	5d 9b       	sbis	0x0b, 5	; 11
    17f6:	fe cf       	rjmp	.-4      	; 0x17f4 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    17f8:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17fa:	5d 9b       	sbis	0x0b, 5	; 11
    17fc:	fe cf       	rjmp	.-4      	; 0x17fa <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    17fe:	9c 01       	movw	r18, r24
    1800:	fc 01       	movw	r30, r24
    1802:	44 91       	lpm	r20, Z
    1804:	41 11       	cpse	r20, r1
    1806:	f3 cf       	rjmp	.-26     	; 0x17ee <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1808:	08 95       	ret

0000180a <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
    180a:	8a b1       	in	r24, 0x0a	; 10
    180c:	88 61       	ori	r24, 0x18	; 24
    180e:	8a b9       	out	0x0a, r24	; 10

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1810:	e5 e9       	ldi	r30, 0x95	; 149
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	86 60       	ori	r24, 0x06	; 6
    1818:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    181a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    181e:	87 e6       	ldi	r24, 0x67	; 103
    1820:	89 b9       	out	0x09, r24	; 9
    1822:	08 95       	ret

00001824 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	9e e3       	ldi	r25, 0x3E	; 62
    1828:	02 c0       	rjmp	.+4      	; 0x182e <uart_getc+0xa>
    182a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    182c:	21 f0       	breq	.+8      	; 0x1836 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    182e:	5f 9b       	sbis	0x0b, 7	; 11
    1830:	fc cf       	rjmp	.-8      	; 0x182a <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1832:	8c b1       	in	r24, 0x0c	; 12
    1834:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1836:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1838:	08 95       	ret

0000183a <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    183a:	84 e1       	ldi	r24, 0x14	; 20
    183c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	6c e2       	ldi	r22, 0x2C	; 44
    1844:	72 e0       	ldi	r23, 0x02	; 2
    1846:	82 e2       	ldi	r24, 0x22	; 34
    1848:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    184c:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    1850:	81 11       	cpse	r24, r1
    1852:	fc cf       	rjmp	.-8      	; 0x184c <get_int_status+0x12>
    1854:	8f ea       	ldi	r24, 0xAF	; 175
    1856:	94 e0       	ldi	r25, 0x04	; 4
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <get_int_status+0x1e>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <get_int_status+0x24>
    185e:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	6e e4       	ldi	r22, 0x4E	; 78
    1864:	72 e0       	ldi	r23, 0x02	; 2
    1866:	82 e2       	ldi	r24, 0x22	; 34
    1868:	0e 94 a5 0b 	call	0x174a	; 0x174a <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    186c:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    1870:	81 11       	cpse	r24, r1
    1872:	fc cf       	rjmp	.-8      	; 0x186c <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    1874:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <si4734_rd_buf>
    1878:	08 95       	ret

0000187a <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    1880:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    1884:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1888:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    188c:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    1890:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    1894:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
    1898:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    189c:	45 e0       	ldi	r20, 0x05	; 5
    189e:	6c e2       	ldi	r22, 0x2C	; 44
    18a0:	72 e0       	ldi	r23, 0x02	; 2
    18a2:	82 e2       	ldi	r24, 0x22	; 34
    18a4:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    18a8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <STC_interrupt>
    18ac:	88 23       	and	r24, r24
    18ae:	e1 f3       	breq	.-8      	; 0x18a8 <fm_tune_freq+0x2e>
}
    18b0:	08 95       	ret

000018b2 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    18b2:	80 e4       	ldi	r24, 0x40	; 64
    18b4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    18b8:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    18bc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <current_am_freq>
    18c0:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <current_am_freq+0x1>
    18c4:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    18c8:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    18cc:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    18d0:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
    18d4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    18d8:	46 e0       	ldi	r20, 0x06	; 6
    18da:	6c e2       	ldi	r22, 0x2C	; 44
    18dc:	72 e0       	ldi	r23, 0x02	; 2
    18de:	82 e2       	ldi	r24, 0x22	; 34
    18e0:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    18e4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <STC_interrupt>
    18e8:	88 23       	and	r24, r24
    18ea:	e1 f3       	breq	.-8      	; 0x18e4 <am_tune_freq+0x32>
}
    18ec:	08 95       	ret

000018ee <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    18ee:	ec e2       	ldi	r30, 0x2C	; 44
    18f0:	f2 e0       	ldi	r31, 0x02	; 2
    18f2:	80 e4       	ldi	r24, 0x40	; 64
    18f4:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    18f6:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    18f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_sw_freq>
    18fc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <current_sw_freq+0x1>
    1900:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    1902:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1904:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    190a:	46 e0       	ldi	r20, 0x06	; 6
    190c:	bf 01       	movw	r22, r30
    190e:	82 e2       	ldi	r24, 0x22	; 34
    1910:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1914:	2f ef       	ldi	r18, 0xFF	; 255
    1916:	87 ee       	ldi	r24, 0xE7	; 231
    1918:	93 e0       	ldi	r25, 0x03	; 3
    191a:	21 50       	subi	r18, 0x01	; 1
    191c:	80 40       	sbci	r24, 0x00	; 0
    191e:	90 40       	sbci	r25, 0x00	; 0
    1920:	e1 f7       	brne	.-8      	; 0x191a <sw_tune_freq+0x2c>
    1922:	00 c0       	rjmp	.+0      	; 0x1924 <sw_tune_freq+0x36>
    1924:	00 00       	nop
    1926:	08 95       	ret

00001928 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
    1928:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <current_radio_band>
    192c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <current_radio_band+0x1>
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	51 f1       	breq	.+84     	; 0x198a <radio_pwr_dwn+0x62>
    1936:	00 f1       	brcs	.+64     	; 0x1978 <radio_pwr_dwn+0x50>
    1938:	02 97       	sbiw	r24, 0x02	; 2
    193a:	41 f4       	brne	.+16     	; 0x194c <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    193c:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <current_sw_freq>
    1940:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <current_sw_freq+0x1>
    1944:	8c e9       	ldi	r24, 0x9C	; 156
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	0e 94 0f 10 	call	0x201e	; 0x201e <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    194c:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <current_volume>
    1950:	81 e8       	ldi	r24, 0x81	; 129
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	0e 94 02 10 	call	0x2004	; 0x2004 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1958:	81 e1       	ldi	r24, 0x11	; 17
    195a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	6c e2       	ldi	r22, 0x2C	; 44
    1962:	72 e0       	ldi	r23, 0x02	; 2
    1964:	82 e2       	ldi	r24, 0x22	; 34
    1966:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    196a:	87 ed       	ldi	r24, 0xD7	; 215
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <radio_pwr_dwn+0x46>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <radio_pwr_dwn+0x4c>
    1974:	00 00       	nop
    1976:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    1978:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    197c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1980:	82 e8       	ldi	r24, 0x82	; 130
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 0f 10 	call	0x201e	; 0x201e <eeprom_write_word>
    1988:	e1 cf       	rjmp	.-62     	; 0x194c <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    198a:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <current_am_freq>
    198e:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <current_am_freq+0x1>
    1992:	80 e9       	ldi	r24, 0x90	; 144
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	0e 94 0f 10 	call	0x201e	; 0x201e <eeprom_write_word>
    199a:	d8 cf       	rjmp	.-80     	; 0x194c <radio_pwr_dwn+0x24>

0000199c <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    199c:	83 e2       	ldi	r24, 0x23	; 35
    199e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    19a8:	42 e0       	ldi	r20, 0x02	; 2
    19aa:	6c e2       	ldi	r22, 0x2C	; 44
    19ac:	72 e0       	ldi	r23, 0x02	; 2
    19ae:	82 e2       	ldi	r24, 0x22	; 34
    19b0:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    19b4:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    19b8:	81 11       	cpse	r24, r1
    19ba:	fc cf       	rjmp	.-8      	; 0x19b4 <fm_rsq_status+0x18>
    19bc:	8f ea       	ldi	r24, 0xAF	; 175
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <fm_rsq_status+0x24>
    19c4:	00 c0       	rjmp	.+0      	; 0x19c6 <fm_rsq_status+0x2a>
    19c6:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    19c8:	48 e0       	ldi	r20, 0x08	; 8
    19ca:	65 e3       	ldi	r22, 0x35	; 53
    19cc:	72 e0       	ldi	r23, 0x02	; 2
    19ce:	82 e2       	ldi	r24, 0x22	; 34
    19d0:	0e 94 a5 0b 	call	0x174a	; 0x174a <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    19d4:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    19d8:	81 11       	cpse	r24, r1
    19da:	fc cf       	rjmp	.-8      	; 0x19d4 <fm_rsq_status+0x38>
}
    19dc:	08 95       	ret

000019de <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    19de:	82 e2       	ldi	r24, 0x22	; 34
    19e0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    19ea:	42 e0       	ldi	r20, 0x02	; 2
    19ec:	6c e2       	ldi	r22, 0x2C	; 44
    19ee:	72 e0       	ldi	r23, 0x02	; 2
    19f0:	82 e2       	ldi	r24, 0x22	; 34
    19f2:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    19f6:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    19fa:	81 11       	cpse	r24, r1
    19fc:	fc cf       	rjmp	.-8      	; 0x19f6 <fm_tune_status+0x18>
    19fe:	8f ea       	ldi	r24, 0xAF	; 175
    1a00:	94 e0       	ldi	r25, 0x04	; 4
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <fm_tune_status+0x24>
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <fm_tune_status+0x2a>
    1a08:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1a0a:	48 e0       	ldi	r20, 0x08	; 8
    1a0c:	65 e3       	ldi	r22, 0x35	; 53
    1a0e:	72 e0       	ldi	r23, 0x02	; 2
    1a10:	82 e2       	ldi	r24, 0x22	; 34
    1a12:	0e 94 a5 0b 	call	0x174a	; 0x174a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1a16:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	fc cf       	rjmp	.-8      	; 0x1a16 <fm_tune_status+0x38>
}
    1a1e:	08 95       	ret

00001a20 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    1a20:	82 e4       	ldi	r24, 0x42	; 66
    1a22:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1a2c:	42 e0       	ldi	r20, 0x02	; 2
    1a2e:	6c e2       	ldi	r22, 0x2C	; 44
    1a30:	72 e0       	ldi	r23, 0x02	; 2
    1a32:	82 e2       	ldi	r24, 0x22	; 34
    1a34:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1a38:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	fc cf       	rjmp	.-8      	; 0x1a38 <am_tune_status+0x18>
    1a40:	8f ea       	ldi	r24, 0xAF	; 175
    1a42:	94 e0       	ldi	r25, 0x04	; 4
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <am_tune_status+0x24>
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <am_tune_status+0x2a>
    1a4a:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1a4c:	48 e0       	ldi	r20, 0x08	; 8
    1a4e:	65 e3       	ldi	r22, 0x35	; 53
    1a50:	72 e0       	ldi	r23, 0x02	; 2
    1a52:	82 e2       	ldi	r24, 0x22	; 34
    1a54:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <twi_start_rd>

00001a58 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    1a58:	83 e4       	ldi	r24, 0x43	; 67
    1a5a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1a64:	42 e0       	ldi	r20, 0x02	; 2
    1a66:	6c e2       	ldi	r22, 0x2C	; 44
    1a68:	72 e0       	ldi	r23, 0x02	; 2
    1a6a:	82 e2       	ldi	r24, 0x22	; 34
    1a6c:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1a70:	0e 94 90 0b 	call	0x1720	; 0x1720 <twi_busy>
    1a74:	81 11       	cpse	r24, r1
    1a76:	fc cf       	rjmp	.-8      	; 0x1a70 <am_rsq_status+0x18>
    1a78:	8f ea       	ldi	r24, 0xAF	; 175
    1a7a:	94 e0       	ldi	r25, 0x04	; 4
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <am_rsq_status+0x24>
    1a80:	00 c0       	rjmp	.+0      	; 0x1a82 <am_rsq_status+0x2a>
    1a82:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1a84:	48 e0       	ldi	r20, 0x08	; 8
    1a86:	65 e3       	ldi	r22, 0x35	; 53
    1a88:	72 e0       	ldi	r23, 0x02	; 2
    1a8a:	82 e2       	ldi	r24, 0x22	; 34
    1a8c:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <twi_start_rd>

00001a90 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1a90:	ec e2       	ldi	r30, 0x2C	; 44
    1a92:	f2 e0       	ldi	r31, 0x02	; 2
    1a94:	22 e1       	ldi	r18, 0x12	; 18
    1a96:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1a98:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1a9a:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1a9c:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1a9e:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1aa0:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1aa2:	46 e0       	ldi	r20, 0x06	; 6
    1aa4:	bf 01       	movw	r22, r30
    1aa6:	82 e2       	ldi	r24, 0x22	; 34
    1aa8:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aac:	8f e3       	ldi	r24, 0x3F	; 63
    1aae:	9c e9       	ldi	r25, 0x9C	; 156
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <set_property+0x20>
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <set_property+0x26>
    1ab6:	00 00       	nop
    1ab8:	08 95       	ret

00001aba <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    1aba:	82 e8       	ldi	r24, 0x82	; 130
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <eeprom_read_word>
    1ac2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1ac6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1aca:	81 e8       	ldi	r24, 0x81	; 129
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <eeprom_read_byte>
    1ad2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1ad6:	ec e2       	ldi	r30, 0x2C	; 44
    1ad8:	f2 e0       	ldi	r31, 0x02	; 2
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1ade:	80 e5       	ldi	r24, 0x50	; 80
    1ae0:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1ae2:	85 e0       	ldi	r24, 0x05	; 5
    1ae4:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1ae6:	43 e0       	ldi	r20, 0x03	; 3
    1ae8:	bf 01       	movw	r22, r30
    1aea:	82 e2       	ldi	r24, 0x22	; 34
    1aec:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    1af0:	2f ef       	ldi	r18, 0xFF	; 255
    1af2:	8b ed       	ldi	r24, 0xDB	; 219
    1af4:	95 e0       	ldi	r25, 0x05	; 5
    1af6:	21 50       	subi	r18, 0x01	; 1
    1af8:	80 40       	sbci	r24, 0x00	; 0
    1afa:	90 40       	sbci	r25, 0x00	; 0
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <fm_pwr_up+0x3c>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <fm_pwr_up+0x46>
    1b00:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <set_property>

00001b0e <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1b0e:	80 e9       	ldi	r24, 0x90	; 144
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <eeprom_read_word>
    1b16:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <current_am_freq+0x1>
    1b1a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1b1e:	81 e8       	ldi	r24, 0x81	; 129
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <eeprom_read_byte>
    1b26:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    1b2a:	ec e2       	ldi	r30, 0x2C	; 44
    1b2c:	f2 e0       	ldi	r31, 0x02	; 2
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1b32:	81 e5       	ldi	r24, 0x51	; 81
    1b34:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    1b36:	85 e0       	ldi	r24, 0x05	; 5
    1b38:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1b3a:	43 e0       	ldi	r20, 0x03	; 3
    1b3c:	bf 01       	movw	r22, r30
    1b3e:	82 e2       	ldi	r24, 0x22	; 34
    1b40:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	8b ed       	ldi	r24, 0xDB	; 219
    1b48:	95 e0       	ldi	r25, 0x05	; 5
    1b4a:	21 50       	subi	r18, 0x01	; 1
    1b4c:	80 40       	sbci	r24, 0x00	; 0
    1b4e:	90 40       	sbci	r25, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <am_pwr_up+0x3c>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <am_pwr_up+0x46>
    1b54:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <set_property>

00001b62 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1b62:	8c e9       	ldi	r24, 0x9C	; 156
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <eeprom_read_word>
    1b6a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <current_sw_freq+0x1>
    1b6e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1b72:	81 e8       	ldi	r24, 0x81	; 129
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <eeprom_read_byte>
    1b7a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1b7e:	ec e2       	ldi	r30, 0x2C	; 44
    1b80:	f2 e0       	ldi	r31, 0x02	; 2
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1b86:	81 e5       	ldi	r24, 0x51	; 81
    1b88:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1b8a:	85 e0       	ldi	r24, 0x05	; 5
    1b8c:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1b8e:	43 e0       	ldi	r20, 0x03	; 3
    1b90:	bf 01       	movw	r22, r30
    1b92:	82 e2       	ldi	r24, 0x22	; 34
    1b94:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
    1b98:	2f ef       	ldi	r18, 0xFF	; 255
    1b9a:	8b ed       	ldi	r24, 0xDB	; 219
    1b9c:	95 e0       	ldi	r25, 0x05	; 5
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	80 40       	sbci	r24, 0x00	; 0
    1ba2:	90 40       	sbci	r25, 0x00	; 0
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <sw_pwr_up+0x3c>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <sw_pwr_up+0x46>
    1ba8:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	93 e3       	ldi	r25, 0x33	; 51
    1bb2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	71 e0       	ldi	r23, 0x01	; 1
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	91 e3       	ldi	r25, 0x31	; 49
    1bbe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <set_property>

00001bce <main>:

//***********************************************************************************
int main()
{
//set port bits 4-7 B as outputs
DDRB = 0xF0;
    1bce:	80 ef       	ldi	r24, 0xF0	; 240
    1bd0:	87 bb       	out	0x17, r24	; 23
DDRC |= (1 << PC3);
    1bd2:	a3 9a       	sbi	0x14, 3	; 20
PORTC |= (0 << PC3);
    1bd4:	85 b3       	in	r24, 0x15	; 21
    1bd6:	85 bb       	out	0x15, r24	; 21
* program. This is done to initialize sec_count, min_count, and hour_count
* to the right start up time.
**********************************************************************/
void real_time(){

sec_count = (__TIME__[6]-48)*10 + (__TIME__[7]-48);		//get real time seconds
    1bd8:	81 e1       	ldi	r24, 0x11	; 17
    1bda:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <sec_count>
min_count = (__TIME__[3]-48)*10 + (__TIME__[4]-48);		//get real time minutes
    1bde:	8c e1       	ldi	r24, 0x1C	; 28
    1be0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <min_count>
hour_count = (__TIME__[0]-48)*10 + (__TIME__[1]-48);	//get real time hours in 24 hour format
    1be4:	8e e0       	ldi	r24, 0x0E	; 14
    1be6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <hour_count>


//check if it is am or pm, set pm_flag if necessary
if(hour_count > 12){
    1bea:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
    1bee:	8d 30       	cpi	r24, 0x0D	; 13
    1bf0:	18 f0       	brcs	.+6      	; 0x1bf8 <main+0x2a>
//	hour_count -= 12;
	pm_flag = 0x01;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pm_flag>
uint8_t encoding = 0;

real_time();

//call function to initialize SPI and TC
initialization();
    1bf8:	0e 94 c9 00 	call	0x192	; 0x192 <initialization>

//initialize I2C
init_twi(); //called from twi_master.c
    1bfc:	0e 94 b6 0b 	call	0x176c	; 0x176c <init_twi>
uart_init();
    1c00:	0e 94 05 0c 	call	0x180a	; 0x180a <uart_init>
* Description: Initializes the lm73 temperature sensor via i2c by calling the
* twi_start_wr() from twi_master.c at location LM73_ADDRESS.
******************************************************************************/
void init_lm73_sensor(){

	twi_start_wr(LM73_ADDRESS, 0x00, 1);		//called from twi_master.c
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	80 e9       	ldi	r24, 0x90	; 144
    1c0c:	0e 94 94 0b 	call	0x1728	; 0x1728 <twi_start_wr>
	asm volatile("nop");	
    1c10:	00 00       	nop
//initialize I2C
init_twi(); //called from twi_master.c
uart_init();
init_lm73_sensor();

radio_init();
    1c12:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <radio_init>
radio_pwr_dwn();
    1c16:	0e 94 94 0c 	call	0x1928	; 0x1928 <radio_pwr_dwn>

//enable global interrupts
sei();
    1c1a:	78 94       	sei

//initially set output compare register for TC2 to 0 (brightness control)
OCR2 = 0;
    1c1c:	13 bc       	out	0x23, r1	; 35
//initially set output compare register for TC3 to 200 (volume control)
OCR3A = 100;
    1c1e:	84 e6       	ldi	r24, 0x64	; 100
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1c26:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

//initialize LCD
lcd_init();
    1c2a:	0e 94 8e 08 	call	0x111c	; 0x111c <lcd_init>
set_LCD();
    1c2e:	0e 94 87 05 	call	0xb0e	; 0xb0e <set_LCD>
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    1c32:	13 e4       	ldi	r17, 0x43	; 67
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    1c34:	06 e4       	ldi	r16, 0x46	; 70
			segsum(alarm_time_hour, alarm_time_min);
	}
	else
		segsum_freq(current_fm_freq);
  //make PORTA an output
	DDRA = 0xFF;
    1c36:	cf ef       	ldi	r28, 0xFF	; 255
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1c38:	90 e2       	ldi	r25, 0x20	; 32
    1c3a:	d9 2e       	mov	r13, r25
    1c3c:	20 e4       	ldi	r18, 0x40	; 64
    1c3e:	e2 2e       	mov	r14, r18
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
	PORTB = (5 << 4);
    1c40:	d0 e5       	ldi	r29, 0x50	; 80
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1c42:	36 9a       	sbi	0x06, 6	; 6

	if((radio_trigger == 0x01 && trigger_alarm == 0x01) || radio_tune == 0x01){
    1c44:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <radio_trigger>
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <main+0x80>
    1c4c:	83 c0       	rjmp	.+262    	; 0x1d54 <main+0x186>
    1c4e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <main+0x8a>
    1c56:	83 c0       	rjmp	.+262    	; 0x1d5e <main+0x190>
		radio_init();
	}

	
	if(temp_read_flag == 0x01){
    1c58:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_read_flag>
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <main+0x94>
    1c60:	85 c0       	rjmp	.+266    	; 0x1d6c <main+0x19e>
		else
			temp_string[5] = 'C';		
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    1c62:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <uart_send_flag>
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <main+0x9e>
    1c6a:	ac c0       	rjmp	.+344    	; 0x1dc4 <main+0x1f6>
		uart_send_flag = 0x00;
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1c6c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <input_flag>
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <main+0xa8>
    1c74:	b8 c0       	rjmp	.+368    	; 0x1de6 <main+0x218>
	  	button_encoder_read();		//if so, read the encoders/buttons
	  	input_flag = FALSE;
  	}
	
	//update the clock counters
	clock_count();
    1c76:	0e 94 d5 04 	call	0x9aa	; 0x9aa <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1c7a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <lcd_flag>
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0xb6>
    1c82:	bc c0       	rjmp	.+376    	; 0x1dfc <main+0x22e>
		set_LCD();
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    1c84:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <adjust_alarm>
    1c88:	81 11       	cpse	r24, r1
    1c8a:	c1 c0       	rjmp	.+386    	; 0x1e0e <main+0x240>
		temp_min = min_count;
    1c8c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <min_count>
    1c90:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temp_min>
		temp_hour = hour_count;
    1c94:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
    1c98:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
		temp_hour = alarm_time_hour;
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(radio_tune == 0){
    1c9c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	c4 c0       	rjmp	.+392    	; 0x1e2c <main+0x25e>
		if(adjust_alarm == 0)
			segsum(hour_count, min_count);
    1ca4:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <min_count>
    1ca8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <hour_count>
    1cac:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <segsum>
			segsum(alarm_time_hour, alarm_time_min);
	}
	else
		segsum_freq(current_fm_freq);
  //make PORTA an output
	DDRA = 0xFF;
    1cb0:	ca bb       	out	0x1a, r28	; 26
	//uses "nop" to add a little delay
	asm volatile ("nop");
    1cb2:	00 00       	nop
    1cb4:	ae e9       	ldi	r26, 0x9E	; 158
    1cb6:	b1 e0       	ldi	r27, 0x01	; 1
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1cc0:	ed 91       	ld	r30, X+
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	e1 31       	cpi	r30, 0x11	; 17
    1cc8:	10 f5       	brcc	.+68     	; 0x1d0e <main+0x140>
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	ea 5f       	subi	r30, 0xFA	; 250
    1cce:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd0:	40 81       	ld	r20, Z
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	f9 f0       	breq	.+62     	; 0x1d14 <main+0x146>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1cd6:	84 30       	cpi	r24, 0x04	; 4
    1cd8:	91 05       	cpc	r25, r1
    1cda:	31 f1       	breq	.+76     	; 0x1d28 <main+0x15a>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <main+0x116>
    1ce2:	ad c0       	rjmp	.+346    	; 0x1e3e <main+0x270>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1ce4:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1ce6:	58 2f       	mov	r21, r24
    1ce8:	52 95       	swap	r21
    1cea:	50 7f       	andi	r21, 0xF0	; 240
    1cec:	58 bb       	out	0x18, r21	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1cee:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cf0:	ef e3       	ldi	r30, 0x3F	; 63
    1cf2:	f1 e0       	ldi	r31, 0x01	; 1
    1cf4:	31 97       	sbiw	r30, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <main+0x126>
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <main+0x12c>
    1cfa:	00 00       	nop
	//uses "nop" to add a little delay
	asm volatile ("nop");
  //send 7 segment code to LED segments
	//calls seven_seg_encoding function to grab seven seg encoding, then displays it
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
    1cfc:	25 30       	cpi	r18, 0x05	; 5
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f1       	breq	.+66     	; 0x1d44 <main+0x176>
    1d02:	01 96       	adiw	r24, 0x01	; 1
		encoding = seven_seg_encoding(segment_data[i_seg]);
    1d04:	ed 91       	ld	r30, X+
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	e1 31       	cpi	r30, 0x11	; 17
    1d0c:	f0 f2       	brcs	.-68     	; 0x1cca <main+0xfc>
    1d0e:	4f ef       	ldi	r20, 0xFF	; 255
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	09 f7       	brne	.-62     	; 0x1cd6 <main+0x108>
    1d14:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <alarm_is_set>
    1d18:	51 30       	cpi	r21, 0x01	; 1
    1d1a:	21 f7       	brne	.-56     	; 0x1ce4 <main+0x116>
    1d1c:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <__data_end>
    1d20:	51 11       	cpse	r21, r1
    1d22:	e0 cf       	rjmp	.-64     	; 0x1ce4 <main+0x116>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
    1d24:	4f 77       	andi	r20, 0x7F	; 127
    1d26:	de cf       	rjmp	.-68     	; 0x1ce4 <main+0x116>
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1d28:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pm_flag>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <main+0x164>
    1d30:	9b c0       	rjmp	.+310    	; 0x1e68 <main+0x29a>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1d32:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1d34:	e8 ba       	out	0x18, r14	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1d36:	4b bb       	out	0x1b, r20	; 27
    1d38:	8f e3       	ldi	r24, 0x3F	; 63
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <main+0x16e>
    1d40:	00 c0       	rjmp	.+0      	; 0x1d42 <main+0x174>
    1d42:	00 00       	nop
		//asm volatile ("nop");
		_delay_us(80);					//add in tiny delay, but not large enough for flicker
	}

	//anti-ghosting protocol
	PORTA = 0xFF;
    1d44:	cb bb       	out	0x1b, r28	; 27
	PORTB = (5 << 4);
    1d46:	d8 bb       	out	0x18, r29	; 24
while(1){
  //insert loop delay for debounce
	//PORTB |= (6 << 4);
	//_delay_us(300);
	
	ADCSRA |= (1 << ADSC);//poke ADSC and start conversion
    1d48:	36 9a       	sbi	0x06, 6	; 6

	if((radio_trigger == 0x01 && trigger_alarm == 0x01) || radio_tune == 0x01){
    1d4a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <radio_trigger>
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <main+0x186>
    1d52:	7d cf       	rjmp	.-262    	; 0x1c4e <main+0x80>
    1d54:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trigger_alarm>
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <main+0x190>
    1d5c:	78 cf       	rjmp	.-272    	; 0x1c4e <main+0x80>
		radio_init();
    1d5e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <radio_init>
	}

	
	if(temp_read_flag == 0x01){
    1d62:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_read_flag>
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <main+0x19e>
    1d6a:	7b cf       	rjmp	.-266    	; 0x1c62 <main+0x94>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    1d6c:	f0 90 02 01 	lds	r15, 0x0102	; 0x800102 <f_not_c>

	//initialize a 16-bit variable to return
	uint16_t temp_reading = 0;

	//called from twi_master.c to obtain temp reading
	twi_start_rd(LM73_ADDRESS, read_i2c_buffer, 2);
    1d70:	42 e0       	ldi	r20, 0x02	; 2
    1d72:	6a e9       	ldi	r22, 0x9A	; 154
    1d74:	71 e0       	ldi	r23, 0x01	; 1
    1d76:	80 e9       	ldi	r24, 0x90	; 144
    1d78:	0e 94 a5 0b 	call	0x174a	; 0x174a <twi_start_rd>

	//stores temp reading to temp_reading
	temp_reading = read_i2c_buffer[0] << 8;
    1d7c:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <read_i2c_buffer>
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	76 2f       	mov	r23, r22
    1d84:	66 27       	eor	r22, r22
		radio_init();
	}

	
	if(temp_read_flag == 0x01){
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
    1d86:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <read_i2c_buffer+0x1>
    1d8a:	68 2b       	or	r22, r24
    1d8c:	4f 2d       	mov	r20, r15
    1d8e:	85 e9       	ldi	r24, 0x95	; 149
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0e 94 bf 0b 	call	0x177e	; 0x177e <lm73_temp_convert>
		temp_string[3] = temp_digits[0];
    1d96:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <temp_string>
    1d9a:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <temp_string+0x1>
    1d9e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <temp_digits>
    1da2:	83 83       	std	Z+3, r24	; 0x03
		temp_string[4] = temp_digits[1];
    1da4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <temp_digits+0x1>
    1da8:	84 83       	std	Z+4, r24	; 0x04
		temp_read_flag = 0x00;
    1daa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp_read_flag>
		if(f_not_c == 0x01)
    1dae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <f_not_c>
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <main+0x1ea>
    1db6:	41 c0       	rjmp	.+130    	; 0x1e3a <main+0x26c>
			temp_string[5] = 'F';
		else
			temp_string[5] = 'C';		
    1db8:	15 83       	std	Z+5, r17	; 0x05
		//set_LCD_temp();
	}
	
	if(uart_send_flag == 0x01){
    1dba:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <uart_send_flag>
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <main+0x1f6>
    1dc2:	54 cf       	rjmp	.-344    	; 0x1c6c <main+0x9e>
		uart_send_read();
    1dc4:	0e 94 c8 05 	call	0xb90	; 0xb90 <uart_send_read>
   cursor_home();
}

void set_LCD_temp(){

	line2_col1();
    1dc8:	0e 94 11 08 	call	0x1022	; 0x1022 <line2_col1>
	string2lcd(temp_string);
    1dcc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_string>
    1dd0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_string+0x1>
    1dd4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <string2lcd>
	}
	
	if(uart_send_flag == 0x01){
		uart_send_read();
		set_LCD_temp();
		uart_send_flag = 0x00;
    1dd8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <uart_send_flag>
	}

	
	//Check to see if program went into ISR
  	if(input_flag == TRUE){
    1ddc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <input_flag>
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <main+0x218>
    1de4:	48 cf       	rjmp	.-368    	; 0x1c76 <main+0xa8>
	  	button_encoder_read();		//if so, read the encoders/buttons
    1de6:	0e 94 4f 03 	call	0x69e	; 0x69e <button_encoder_read>
	  	input_flag = FALSE;
    1dea:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <input_flag>
  	}
	
	//update the clock counters
	clock_count();
    1dee:	0e 94 d5 04 	call	0x9aa	; 0x9aa <clock_count>

	//call set_LCD() function if there is a need to update
	if(lcd_flag == 0x01){
    1df2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <lcd_flag>
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <main+0x22e>
    1dfa:	44 cf       	rjmp	.-376    	; 0x1c84 <main+0xb6>
		lcd_flag = 0;
    1dfc:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <lcd_flag>
		set_LCD();
    1e00:	0e 94 87 05 	call	0xb0e	; 0xb0e <set_LCD>
	}
	
	//if adjustment alarm is set, need to show the alarm set time on the LED display
	//otherwise, show the current time
	if(adjust_alarm == 0){
    1e04:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <adjust_alarm>
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <main+0x240>
    1e0c:	3f cf       	rjmp	.-386    	; 0x1c8c <main+0xbe>
		temp_min = min_count;
		temp_hour = hour_count;
	}
	else{
		temp_min = alarm_time_min;
    1e0e:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <alarm_time_min>
    1e12:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <temp_min>
		temp_hour = alarm_time_hour;
    1e16:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <alarm_time_hour>
    1e1a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <temp_hour>
	}
	
	//parse the alarm set time if necessary (if alarm adjust is set)
	//otherwise, parse the current time
	if(radio_tune == 0){
    1e1e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
    1e22:	91 11       	cpse	r25, r1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <main+0x25e>
		if(adjust_alarm == 0)
			segsum(hour_count, min_count);
		else
			segsum(alarm_time_hour, alarm_time_min);
    1e26:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <segsum>
    1e2a:	42 cf       	rjmp	.-380    	; 0x1cb0 <main+0xe2>
	}
	else
		segsum_freq(current_fm_freq);
    1e2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1e30:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1e34:	0e 94 4a 01 	call	0x294	; 0x294 <segsum_freq>
    1e38:	3b cf       	rjmp	.-394    	; 0x1cb0 <main+0xe2>
		lm73_temp_convert(temp_digits, read_lm73_sensor(), f_not_c);
		temp_string[3] = temp_digits[0];
		temp_string[4] = temp_digits[1];
		temp_read_flag = 0x00;
		if(f_not_c == 0x01)
			temp_string[5] = 'F';
    1e3a:	05 83       	std	Z+5, r16	; 0x05
    1e3c:	12 cf       	rjmp	.-476    	; 0x1c62 <main+0x94>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1e3e:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <trigger_alarm>
    1e42:	51 30       	cpi	r21, 0x01	; 1
    1e44:	59 f0       	breq	.+22     	; 0x1e5c <main+0x28e>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
											//the alarm is triggered
		PORTA = 0xFF;
    1e46:	cb bb       	out	0x1b, r28	; 27
		PORTB = (i_seg << 4);			//output onto PORTB to select segment digit
    1e48:	d8 ba       	out	0x18, r13	; 24
		PORTA = encoding;				//output the encoding value to PORTA for seven seg display
    1e4a:	4b bb       	out	0x1b, r20	; 27
    1e4c:	ef e3       	ldi	r30, 0x3F	; 63
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	31 97       	sbiw	r30, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <main+0x282>
    1e54:	00 c0       	rjmp	.+0      	; 0x1e56 <main+0x288>
    1e56:	00 00       	nop
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	54 cf       	rjmp	.-344    	; 0x1d04 <main+0x136>
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
		if(i_seg == 2 && trigger_alarm == 0x01 && radio_tune == 0)
    1e5c:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <__data_end>
    1e60:	51 11       	cpse	r21, r1
    1e62:	f1 cf       	rjmp	.-30     	; 0x1e46 <main+0x278>
			encoding &= 0b11111011;			//indicate on the LED display (top decimal point for seg 2) that
    1e64:	4b 7f       	andi	r20, 0xFB	; 251
    1e66:	ef cf       	rjmp	.-34     	; 0x1e46 <main+0x278>
	//based on the parsed number of the overall count
	for(int i_seg = 0; i_seg < 5; i_seg++){
		encoding = seven_seg_encoding(segment_data[i_seg]);
		if(i_seg == 0 && alarm_is_set == 0x01 && radio_tune == 0)
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 0) that alarm set
		if(i_seg == 4 && pm_flag == 0x01 && hour24_flag == 0 && radio_tune == 0)
    1e68:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <hour24_flag>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	61 cf       	rjmp	.-318    	; 0x1d32 <main+0x164>
    1e70:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
    1e74:	81 11       	cpse	r24, r1
    1e76:	5d cf       	rjmp	.-326    	; 0x1d32 <main+0x164>
			encoding &= 0b01111111;			//indicate on the LED display (decimal point for seg 4) that it is pm
    1e78:	4f 77       	andi	r20, 0x7F	; 127
    1e7a:	5b cf       	rjmp	.-330    	; 0x1d32 <main+0x164>

00001e7c <__divmodhi4>:
    1e7c:	97 fb       	bst	r25, 7
    1e7e:	07 2e       	mov	r0, r23
    1e80:	16 f4       	brtc	.+4      	; 0x1e86 <__divmodhi4+0xa>
    1e82:	00 94       	com	r0
    1e84:	07 d0       	rcall	.+14     	; 0x1e94 <__divmodhi4_neg1>
    1e86:	77 fd       	sbrc	r23, 7
    1e88:	09 d0       	rcall	.+18     	; 0x1e9c <__divmodhi4_neg2>
    1e8a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__udivmodhi4>
    1e8e:	07 fc       	sbrc	r0, 7
    1e90:	05 d0       	rcall	.+10     	; 0x1e9c <__divmodhi4_neg2>
    1e92:	3e f4       	brtc	.+14     	; 0x1ea2 <__divmodhi4_exit>

00001e94 <__divmodhi4_neg1>:
    1e94:	90 95       	com	r25
    1e96:	81 95       	neg	r24
    1e98:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9a:	08 95       	ret

00001e9c <__divmodhi4_neg2>:
    1e9c:	70 95       	com	r23
    1e9e:	61 95       	neg	r22
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ea2 <__divmodhi4_exit>:
    1ea2:	08 95       	ret

00001ea4 <__divmodsi4>:
    1ea4:	05 2e       	mov	r0, r21
    1ea6:	97 fb       	bst	r25, 7
    1ea8:	1e f4       	brtc	.+6      	; 0x1eb0 <__divmodsi4+0xc>
    1eaa:	00 94       	com	r0
    1eac:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__negsi2>
    1eb0:	57 fd       	sbrc	r21, 7
    1eb2:	07 d0       	rcall	.+14     	; 0x1ec2 <__divmodsi4_neg2>
    1eb4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmodsi4>
    1eb8:	07 fc       	sbrc	r0, 7
    1eba:	03 d0       	rcall	.+6      	; 0x1ec2 <__divmodsi4_neg2>
    1ebc:	4e f4       	brtc	.+18     	; 0x1ed0 <__divmodsi4_exit>
    1ebe:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__negsi2>

00001ec2 <__divmodsi4_neg2>:
    1ec2:	50 95       	com	r21
    1ec4:	40 95       	com	r20
    1ec6:	30 95       	com	r19
    1ec8:	21 95       	neg	r18
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255

00001ed0 <__divmodsi4_exit>:
    1ed0:	08 95       	ret

00001ed2 <__negsi2>:
    1ed2:	90 95       	com	r25
    1ed4:	80 95       	com	r24
    1ed6:	70 95       	com	r23
    1ed8:	61 95       	neg	r22
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	08 95       	ret

00001ee2 <__tablejump2__>:
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	00 24       	eor	r0, r0
    1ee8:	00 1c       	adc	r0, r0
    1eea:	0b be       	out	0x3b, r0	; 59
    1eec:	07 90       	elpm	r0, Z+
    1eee:	f6 91       	elpm	r31, Z
    1ef0:	e0 2d       	mov	r30, r0
    1ef2:	09 94       	ijmp

00001ef4 <__umulhisi3>:
    1ef4:	a2 9f       	mul	r26, r18
    1ef6:	b0 01       	movw	r22, r0
    1ef8:	b3 9f       	mul	r27, r19
    1efa:	c0 01       	movw	r24, r0
    1efc:	a3 9f       	mul	r26, r19
    1efe:	70 0d       	add	r23, r0
    1f00:	81 1d       	adc	r24, r1
    1f02:	11 24       	eor	r1, r1
    1f04:	91 1d       	adc	r25, r1
    1f06:	b2 9f       	mul	r27, r18
    1f08:	70 0d       	add	r23, r0
    1f0a:	81 1d       	adc	r24, r1
    1f0c:	11 24       	eor	r1, r1
    1f0e:	91 1d       	adc	r25, r1
    1f10:	08 95       	ret

00001f12 <__udivmodhi4>:
    1f12:	aa 1b       	sub	r26, r26
    1f14:	bb 1b       	sub	r27, r27
    1f16:	51 e1       	ldi	r21, 0x11	; 17
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <__udivmodhi4_ep>

00001f1a <__udivmodhi4_loop>:
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	a6 17       	cp	r26, r22
    1f20:	b7 07       	cpc	r27, r23
    1f22:	10 f0       	brcs	.+4      	; 0x1f28 <__udivmodhi4_ep>
    1f24:	a6 1b       	sub	r26, r22
    1f26:	b7 0b       	sbc	r27, r23

00001f28 <__udivmodhi4_ep>:
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	5a 95       	dec	r21
    1f2e:	a9 f7       	brne	.-22     	; 0x1f1a <__udivmodhi4_loop>
    1f30:	80 95       	com	r24
    1f32:	90 95       	com	r25
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	08 95       	ret

00001f3a <__udivmodsi4>:
    1f3a:	a1 e2       	ldi	r26, 0x21	; 33
    1f3c:	1a 2e       	mov	r1, r26
    1f3e:	aa 1b       	sub	r26, r26
    1f40:	bb 1b       	sub	r27, r27
    1f42:	fd 01       	movw	r30, r26
    1f44:	0d c0       	rjmp	.+26     	; 0x1f60 <__udivmodsi4_ep>

00001f46 <__udivmodsi4_loop>:
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	ee 1f       	adc	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	a2 17       	cp	r26, r18
    1f50:	b3 07       	cpc	r27, r19
    1f52:	e4 07       	cpc	r30, r20
    1f54:	f5 07       	cpc	r31, r21
    1f56:	20 f0       	brcs	.+8      	; 0x1f60 <__udivmodsi4_ep>
    1f58:	a2 1b       	sub	r26, r18
    1f5a:	b3 0b       	sbc	r27, r19
    1f5c:	e4 0b       	sbc	r30, r20
    1f5e:	f5 0b       	sbc	r31, r21

00001f60 <__udivmodsi4_ep>:
    1f60:	66 1f       	adc	r22, r22
    1f62:	77 1f       	adc	r23, r23
    1f64:	88 1f       	adc	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	1a 94       	dec	r1
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <__udivmodsi4_loop>
    1f6c:	60 95       	com	r22
    1f6e:	70 95       	com	r23
    1f70:	80 95       	com	r24
    1f72:	90 95       	com	r25
    1f74:	9b 01       	movw	r18, r22
    1f76:	ac 01       	movw	r20, r24
    1f78:	bd 01       	movw	r22, r26
    1f7a:	cf 01       	movw	r24, r30
    1f7c:	08 95       	ret

00001f7e <__itoa_ncheck>:
    1f7e:	bb 27       	eor	r27, r27
    1f80:	4a 30       	cpi	r20, 0x0A	; 10
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <__itoa_ncheck+0x12>
    1f84:	99 23       	and	r25, r25
    1f86:	22 f4       	brpl	.+8      	; 0x1f90 <__itoa_ncheck+0x12>
    1f88:	bd e2       	ldi	r27, 0x2D	; 45
    1f8a:	90 95       	com	r25
    1f8c:	81 95       	neg	r24
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__utoa_common>

00001f94 <__utoa_ncheck>:
    1f94:	bb 27       	eor	r27, r27

00001f96 <__utoa_common>:
    1f96:	fb 01       	movw	r30, r22
    1f98:	55 27       	eor	r21, r21
    1f9a:	aa 27       	eor	r26, r26
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	aa 1f       	adc	r26, r26
    1fa2:	a4 17       	cp	r26, r20
    1fa4:	10 f0       	brcs	.+4      	; 0x1faa <__utoa_common+0x14>
    1fa6:	a4 1b       	sub	r26, r20
    1fa8:	83 95       	inc	r24
    1faa:	50 51       	subi	r21, 0x10	; 16
    1fac:	b9 f7       	brne	.-18     	; 0x1f9c <__utoa_common+0x6>
    1fae:	a0 5d       	subi	r26, 0xD0	; 208
    1fb0:	aa 33       	cpi	r26, 0x3A	; 58
    1fb2:	08 f0       	brcs	.+2      	; 0x1fb6 <__utoa_common+0x20>
    1fb4:	a9 5d       	subi	r26, 0xD9	; 217
    1fb6:	a1 93       	st	Z+, r26
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	79 f7       	brne	.-34     	; 0x1f9a <__utoa_common+0x4>
    1fbc:	b1 11       	cpse	r27, r1
    1fbe:	b1 93       	st	Z+, r27
    1fc0:	11 92       	st	Z+, r1
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <strrev>

00001fc8 <strrev>:
    1fc8:	dc 01       	movw	r26, r24
    1fca:	fc 01       	movw	r30, r24
    1fcc:	67 2f       	mov	r22, r23
    1fce:	71 91       	ld	r23, Z+
    1fd0:	77 23       	and	r23, r23
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <strrev+0x4>
    1fd4:	32 97       	sbiw	r30, 0x02	; 2
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <strrev+0x18>
    1fd8:	7c 91       	ld	r23, X
    1fda:	6d 93       	st	X+, r22
    1fdc:	70 83       	st	Z, r23
    1fde:	62 91       	ld	r22, -Z
    1fe0:	ae 17       	cp	r26, r30
    1fe2:	bf 07       	cpc	r27, r31
    1fe4:	c8 f3       	brcs	.-14     	; 0x1fd8 <strrev+0x10>
    1fe6:	08 95       	ret

00001fe8 <eeprom_read_byte>:
    1fe8:	e1 99       	sbic	0x1c, 1	; 28
    1fea:	fe cf       	rjmp	.-4      	; 0x1fe8 <eeprom_read_byte>
    1fec:	9f bb       	out	0x1f, r25	; 31
    1fee:	8e bb       	out	0x1e, r24	; 30
    1ff0:	e0 9a       	sbi	0x1c, 0	; 28
    1ff2:	99 27       	eor	r25, r25
    1ff4:	8d b3       	in	r24, 0x1d	; 29
    1ff6:	08 95       	ret

00001ff8 <eeprom_read_word>:
    1ff8:	a8 e1       	ldi	r26, 0x18	; 24
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	42 e0       	ldi	r20, 0x02	; 2
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	0c 94 16 10 	jmp	0x202c	; 0x202c <eeprom_read_blraw>

00002004 <eeprom_write_byte>:
    2004:	26 2f       	mov	r18, r22

00002006 <eeprom_write_r18>:
    2006:	e1 99       	sbic	0x1c, 1	; 28
    2008:	fe cf       	rjmp	.-4      	; 0x2006 <eeprom_write_r18>
    200a:	9f bb       	out	0x1f, r25	; 31
    200c:	8e bb       	out	0x1e, r24	; 30
    200e:	2d bb       	out	0x1d, r18	; 29
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	e2 9a       	sbi	0x1c, 2	; 28
    2016:	e1 9a       	sbi	0x1c, 1	; 28
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	08 95       	ret

0000201e <eeprom_write_word>:
    201e:	0e 94 02 10 	call	0x2004	; 0x2004 <eeprom_write_byte>
    2022:	27 2f       	mov	r18, r23
    2024:	0c 94 03 10 	jmp	0x2006	; 0x2006 <eeprom_write_r18>

00002028 <eeprom_read_block>:
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22

0000202c <eeprom_read_blraw>:
    202c:	fc 01       	movw	r30, r24
    202e:	e1 99       	sbic	0x1c, 1	; 28
    2030:	fe cf       	rjmp	.-4      	; 0x202e <eeprom_read_blraw+0x2>
    2032:	06 c0       	rjmp	.+12     	; 0x2040 <eeprom_read_blraw+0x14>
    2034:	ff bb       	out	0x1f, r31	; 31
    2036:	ee bb       	out	0x1e, r30	; 30
    2038:	e0 9a       	sbi	0x1c, 0	; 28
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	0d b2       	in	r0, 0x1d	; 29
    203e:	0d 92       	st	X+, r0
    2040:	41 50       	subi	r20, 0x01	; 1
    2042:	50 40       	sbci	r21, 0x00	; 0
    2044:	b8 f7       	brcc	.-18     	; 0x2034 <eeprom_read_blraw+0x8>
    2046:	08 95       	ret

00002048 <_exit>:
    2048:	f8 94       	cli

0000204a <__stop_program>:
    204a:	ff cf       	rjmp	.-2      	; 0x204a <__stop_program>
