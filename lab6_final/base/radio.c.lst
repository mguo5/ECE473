
radio.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001376  0000140a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cb  00800102  00800102  0000140c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e03  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001153  00000000  00000000  00004343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012fc  00000000  00000000  00005496  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00006794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b5  00000000  00000000  00006c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e4e  00000000  00000000  000074d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00009323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	fa 05       	cpc	r31, r10
      8e:	d1 05       	cpc	r29, r1
      90:	d1 05       	cpc	r29, r1
      92:	d1 05       	cpc	r29, r1
      94:	d1 05       	cpc	r29, r1
      96:	d1 05       	cpc	r29, r1
      98:	d1 05       	cpc	r29, r1
      9a:	d1 05       	cpc	r29, r1
      9c:	fa 05       	cpc	r31, r10
      9e:	d1 05       	cpc	r29, r1
      a0:	d1 05       	cpc	r29, r1
      a2:	d1 05       	cpc	r29, r1
      a4:	d1 05       	cpc	r29, r1
      a6:	d1 05       	cpc	r29, r1
      a8:	d1 05       	cpc	r29, r1
      aa:	d1 05       	cpc	r29, r1
      ac:	04 06       	cpc	r0, r20
      ae:	d1 05       	cpc	r29, r1
      b0:	d1 05       	cpc	r29, r1
      b2:	d1 05       	cpc	r29, r1
      b4:	d1 05       	cpc	r29, r1
      b6:	d1 05       	cpc	r29, r1
      b8:	d1 05       	cpc	r29, r1
      ba:	d1 05       	cpc	r29, r1
      bc:	d1 05       	cpc	r29, r1
      be:	d1 05       	cpc	r29, r1
      c0:	d1 05       	cpc	r29, r1
      c2:	d1 05       	cpc	r29, r1
      c4:	d1 05       	cpc	r29, r1
      c6:	d1 05       	cpc	r29, r1
      c8:	d1 05       	cpc	r29, r1
      ca:	d1 05       	cpc	r29, r1
      cc:	04 06       	cpc	r0, r20
      ce:	d1 05       	cpc	r29, r1
      d0:	d1 05       	cpc	r29, r1
      d2:	d1 05       	cpc	r29, r1
      d4:	d1 05       	cpc	r29, r1
      d6:	d1 05       	cpc	r29, r1
      d8:	d1 05       	cpc	r29, r1
      da:	d1 05       	cpc	r29, r1
      dc:	d1 05       	cpc	r29, r1
      de:	d1 05       	cpc	r29, r1
      e0:	d1 05       	cpc	r29, r1
      e2:	d1 05       	cpc	r29, r1
      e4:	d1 05       	cpc	r29, r1
      e6:	d1 05       	cpc	r29, r1
      e8:	d1 05       	cpc	r29, r1
      ea:	d1 05       	cpc	r29, r1
      ec:	1b 06       	cpc	r1, r27
      ee:	d1 05       	cpc	r29, r1
      f0:	d1 05       	cpc	r29, r1
      f2:	d1 05       	cpc	r29, r1
      f4:	d1 05       	cpc	r29, r1
      f6:	d1 05       	cpc	r29, r1
      f8:	d1 05       	cpc	r29, r1
      fa:	d1 05       	cpc	r29, r1
      fc:	1f 06       	cpc	r1, r31
      fe:	d1 05       	cpc	r29, r1
     100:	d1 05       	cpc	r29, r1
     102:	d1 05       	cpc	r29, r1
     104:	d1 05       	cpc	r29, r1
     106:	d1 05       	cpc	r29, r1
     108:	d1 05       	cpc	r29, r1
     10a:	d1 05       	cpc	r29, r1
     10c:	d1 05       	cpc	r29, r1
     10e:	d1 05       	cpc	r29, r1
     110:	d1 05       	cpc	r29, r1
     112:	d1 05       	cpc	r29, r1
     114:	d1 05       	cpc	r29, r1
     116:	d1 05       	cpc	r29, r1
     118:	d1 05       	cpc	r29, r1
     11a:	d1 05       	cpc	r29, r1
     11c:	2d 06       	cpc	r2, r29
     11e:	d1 05       	cpc	r29, r1
     120:	d1 05       	cpc	r29, r1
     122:	d1 05       	cpc	r29, r1
     124:	d1 05       	cpc	r29, r1
     126:	d1 05       	cpc	r29, r1
     128:	d1 05       	cpc	r29, r1
     12a:	d1 05       	cpc	r29, r1
     12c:	eb 05       	cpc	r30, r11

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 e7       	ldi	r30, 0x76	; 118
     142:	f3 e1       	ldi	r31, 0x13	; 19
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 30       	cpi	r26, 0x02	; 2
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e0       	ldi	r18, 0x01	; 1
     156:	a2 e0       	ldi	r26, 0x02	; 2
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ad 3c       	cpi	r26, 0xCD	; 205
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 9f 08 	call	0x113e	; 0x113e <main>
     168:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	0b b6       	in	r0, 0x3b	; 59
     17c:	0f 92       	push	r0
     17e:	8f 93       	push	r24
     180:	9f 93       	push	r25
     182:	ef 93       	push	r30
     184:	ff 93       	push	r31
	STC_interrupt = TRUE;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <STC_interrupt>
	PORTF ^= (1 << PF1);
     18c:	e2 e6       	ldi	r30, 0x62	; 98
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	90 81       	ld	r25, Z
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	89 27       	eor	r24, r25
     196:	80 83       	st	Z, r24
}
     198:	ff 91       	pop	r31
     19a:	ef 91       	pop	r30
     19c:	9f 91       	pop	r25
     19e:	8f 91       	pop	r24
     1a0:	0f 90       	pop	r0
     1a2:	0b be       	out	0x3b, r0	; 59
     1a4:	0f 90       	pop	r0
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	0f 90       	pop	r0
     1aa:	1f 90       	pop	r1
     1ac:	18 95       	reti

000001ae <radio_init>:
/***********************************************************************/


void radio_init(){
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	c5 e0       	ldi	r28, 0x05	; 5
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt

		fm_pwr_up(); //powerup the radio as appropriate
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     1ba:	06 eb       	ldi	r16, 0xB6	; 182
     1bc:	16 e2       	ldi	r17, 0x26	; 38
void radio_init(){

	for(int i = 0; i < 5; i++){

		
		DDRE  |= (1 << PE2); //Port E bit 2 is active high reset for radio 
     1be:	12 9a       	sbi	0x02, 2	; 2
		PORTE |= (1 << PE2); //radio reset is on at powerup (active high)
     1c0:	1a 9a       	sbi	0x03, 2	; 3

		//hardware reset of Si4734
		PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     1c2:	1f 98       	cbi	0x03, 7	; 3
		DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     1c4:	17 9a       	sbi	0x02, 7	; 2
		PORTE |=  (1<<PE2); //hardware reset Si4734 
     1c6:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c8:	8f e1       	ldi	r24, 0x1F	; 31
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <radio_init+0x1e>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <radio_init+0x24>
     1d2:	00 00       	nop
		_delay_us(200);     //hold for 200us, 100us by spec         
		PORTE &= ~(1<<PE2); //release reset 
     1d4:	1a 98       	cbi	0x03, 2	; 3
     1d6:	90 ea       	ldi	r25, 0xA0	; 160
     1d8:	9a 95       	dec	r25
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <radio_init+0x2a>
		_delay_us(30);      //5us required because of my slow I2C translators I suspect
		//Si code in "low" has 30us delay...no explaination
		DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     1dc:	17 98       	cbi	0x02, 7	; 2

		fm_pwr_up(); //powerup the radio as appropriate
     1de:	0e 94 15 08 	call	0x102a	; 0x102a <fm_pwr_up>
		current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
     1e2:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
     1e6:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq
     1ea:	0e 94 f5 06 	call	0xdea	; 0xdea <fm_tune_freq>
     1ee:	21 97       	sbiw	r28, 0x01	; 1
/***********************************************************************/


void radio_init(){

	for(int i = 0; i < 5; i++){
     1f0:	31 f7       	brne	.-52     	; 0x1be <radio_init+0x10>
		fm_tune_freq(); //tune radio to frequency in current_fm_freq

	}


}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	81 11       	cpse	r24, r1
     200:	01 c0       	rjmp	.+2      	; 0x204 <send_lcd+0x8>
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     20a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     20c:	77 9b       	sbis	0x0e, 7	; 14
     20e:	fe cf       	rjmp	.-4      	; 0x20c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     210:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     214:	88 60       	ori	r24, 0x08	; 8
     216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     21a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     21e:	87 7f       	andi	r24, 0xF7	; 247
     220:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     224:	08 95       	ret

00000226 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     226:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <i.2094>
     22a:	82 0f       	add	r24, r18
     22c:	91 1d       	adc	r25, r1
     22e:	fc 01       	movw	r30, r24
     230:	80 81       	ld	r24, Z
     232:	81 11       	cpse	r24, r1
     234:	1f c0       	rjmp	.+62     	; 0x274 <refresh_lcd+0x4e>
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     240:	77 9b       	sbis	0x0e, 7	; 14
     242:	fe cf       	rjmp	.-4      	; 0x240 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     248:	77 9b       	sbis	0x0e, 7	; 14
     24a:	fe cf       	rjmp	.-4      	; 0x248 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     250:	88 60       	ori	r24, 0x08	; 8
     252:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     256:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     25a:	87 7f       	andi	r24, 0xF7	; 247
     25c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     260:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <i.2094>
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     26a:	80 31       	cpi	r24, 0x10	; 16
     26c:	49 f1       	breq	.+82     	; 0x2c0 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     26e:	80 32       	cpi	r24, 0x20	; 32
     270:	69 f0       	breq	.+26     	; 0x28c <refresh_lcd+0x66>
     272:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     274:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <null_flag.2095>
     278:	91 11       	cpse	r25, r1
     27a:	e0 cf       	rjmp	.-64     	; 0x23c <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     280:	77 9b       	sbis	0x0e, 7	; 14
     282:	fe cf       	rjmp	.-4      	; 0x280 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     284:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     286:	77 9b       	sbis	0x0e, 7	; 14
     288:	fe cf       	rjmp	.-4      	; 0x286 <refresh_lcd+0x60>
     28a:	e0 cf       	rjmp	.-64     	; 0x24c <refresh_lcd+0x26>
     28c:	85 ed       	ldi	r24, 0xD5	; 213
     28e:	8a 95       	dec	r24
     290:	f1 f7       	brne	.-4      	; 0x28e <refresh_lcd+0x68>
     292:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     294:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     296:	77 9b       	sbis	0x0e, 7	; 14
     298:	fe cf       	rjmp	.-4      	; 0x296 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     29e:	77 9b       	sbis	0x0e, 7	; 14
     2a0:	fe cf       	rjmp	.-4      	; 0x29e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2b0:	87 7f       	andi	r24, 0xF7	; 247
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     2b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <null_flag.2095>
      i=0;
     2ba:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i.2094>
     2be:	08 95       	ret
     2c0:	f5 ed       	ldi	r31, 0xD5	; 213
     2c2:	fa 95       	dec	r31
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <refresh_lcd+0x9c>
     2c6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2c8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2ca:	77 9b       	sbis	0x0e, 7	; 14
     2cc:	fe cf       	rjmp	.-4      	; 0x2ca <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     2ce:	80 ec       	ldi	r24, 0xC0	; 192
     2d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2d2:	77 9b       	sbis	0x0e, 7	; 14
     2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2da:	88 60       	ori	r24, 0x08	; 8
     2dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2e4:	87 7f       	andi	r24, 0xF7	; 247
     2e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ea:	08 95       	ret

000002ec <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     2ec:	66 0f       	add	r22, r22
     2ee:	66 0f       	add	r22, r22
     2f0:	66 0f       	add	r22, r22
     2f2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2f6:	77 9b       	sbis	0x0e, 7	; 14
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     2fa:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     300:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     304:	28 60       	ori	r18, 0x08	; 8
     306:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     30a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     30e:	27 7f       	andi	r18, 0xF7	; 247
     310:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     314:	25 ed       	ldi	r18, 0xD5	; 213
     316:	2a 95       	dec	r18
     318:	f1 f7       	brne	.-4      	; 0x316 <set_custom_character+0x2a>
     31a:	00 00       	nop
     31c:	fc 01       	movw	r30, r24
     31e:	9c 01       	movw	r18, r24
     320:	28 5f       	subi	r18, 0xF8	; 248
     322:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     324:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     326:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     328:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     32a:	77 9b       	sbis	0x0e, 7	; 14
     32c:	fe cf       	rjmp	.-4      	; 0x32a <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     32e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     330:	77 9b       	sbis	0x0e, 7	; 14
     332:	fe cf       	rjmp	.-4      	; 0x330 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     338:	88 60       	ori	r24, 0x08	; 8
     33a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     33e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     342:	87 7f       	andi	r24, 0xF7	; 247
     344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     348:	85 ed       	ldi	r24, 0xD5	; 213
     34a:	8a 95       	dec	r24
     34c:	f1 f7       	brne	.-4      	; 0x34a <set_custom_character+0x5e>
     34e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     350:	e2 17       	cp	r30, r18
     352:	f3 07       	cpc	r31, r19
     354:	41 f7       	brne	.-48     	; 0x326 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     356:	08 95       	ret

00000358 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     358:	90 e4       	ldi	r25, 0x40	; 64
     35a:	89 9f       	mul	r24, r25
     35c:	60 0d       	add	r22, r0
     35e:	11 24       	eor	r1, r1
     360:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     362:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     364:	77 9b       	sbis	0x0e, 7	; 14
     366:	fe cf       	rjmp	.-4      	; 0x364 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     368:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     36a:	77 9b       	sbis	0x0e, 7	; 14
     36c:	fe cf       	rjmp	.-4      	; 0x36a <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     36e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     372:	88 60       	ori	r24, 0x08	; 8
     374:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     378:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     37c:	87 7f       	andi	r24, 0xF7	; 247
     37e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     382:	08 95       	ret

00000384 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     384:	81 11       	cpse	r24, r1
     386:	13 c0       	rjmp	.+38     	; 0x3ae <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     38c:	77 9b       	sbis	0x0e, 7	; 14
     38e:	fe cf       	rjmp	.-4      	; 0x38c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     390:	80 e3       	ldi	r24, 0x30	; 48
     392:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     394:	77 9b       	sbis	0x0e, 7	; 14
     396:	fe cf       	rjmp	.-4      	; 0x394 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     398:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     39c:	88 60       	ori	r24, 0x08	; 8
     39e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3ac:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     3ae:	84 36       	cpi	r24, 0x64	; 100
     3b0:	b0 f4       	brcc	.+44     	; 0x3de <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     3b2:	8a 30       	cpi	r24, 0x0A	; 10
     3b4:	60 f5       	brcc	.+88     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3ba:	77 9b       	sbis	0x0e, 7	; 14
     3bc:	fe cf       	rjmp	.-4      	; 0x3ba <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     3be:	9d ec       	ldi	r25, 0xCD	; 205
     3c0:	89 9f       	mul	r24, r25
     3c2:	91 2d       	mov	r25, r1
     3c4:	11 24       	eor	r1, r1
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
     3cc:	2a e0       	ldi	r18, 0x0A	; 10
     3ce:	92 9f       	mul	r25, r18
     3d0:	80 19       	sub	r24, r0
     3d2:	11 24       	eor	r1, r1
     3d4:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     3d6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3d8:	77 9b       	sbis	0x0e, 7	; 14
     3da:	fe cf       	rjmp	.-4      	; 0x3d8 <uint2lcd+0x54>
     3dc:	dd cf       	rjmp	.-70     	; 0x398 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     3de:	99 e2       	ldi	r25, 0x29	; 41
     3e0:	89 9f       	mul	r24, r25
     3e2:	91 2d       	mov	r25, r1
     3e4:	11 24       	eor	r1, r1
     3e6:	92 95       	swap	r25
     3e8:	9f 70       	andi	r25, 0x0F	; 15
     3ea:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3ec:	21 e0       	ldi	r18, 0x01	; 1
     3ee:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3f0:	77 9b       	sbis	0x0e, 7	; 14
     3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     3f4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3f6:	77 9b       	sbis	0x0e, 7	; 14
     3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3fa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3fe:	98 60       	ori	r25, 0x08	; 8
     400:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     404:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     408:	97 7f       	andi	r25, 0xF7	; 247
     40a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     40e:	99 e2       	ldi	r25, 0x29	; 41
     410:	89 9f       	mul	r24, r25
     412:	91 2d       	mov	r25, r1
     414:	11 24       	eor	r1, r1
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	38 2f       	mov	r19, r24
     41c:	24 e6       	ldi	r18, 0x64	; 100
     41e:	92 9f       	mul	r25, r18
     420:	30 19       	sub	r19, r0
     422:	11 24       	eor	r1, r1
     424:	2d ec       	ldi	r18, 0xCD	; 205
     426:	32 9f       	mul	r19, r18
     428:	91 2d       	mov	r25, r1
     42a:	11 24       	eor	r1, r1
     42c:	96 95       	lsr	r25
     42e:	96 95       	lsr	r25
     430:	96 95       	lsr	r25
     432:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     438:	77 9b       	sbis	0x0e, 7	; 14
     43a:	fe cf       	rjmp	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
  SPDR = byte;                        //send payload
     43c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     43e:	77 9b       	sbis	0x0e, 7	; 14
     440:	fe cf       	rjmp	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     442:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     446:	98 60       	ori	r25, 0x08	; 8
     448:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     44c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     450:	97 7f       	andi	r25, 0xF7	; 247
     452:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     456:	af cf       	rjmp	.-162    	; 0x3b6 <uint2lcd+0x32>

00000458 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     458:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     45a:	0c 94 c2 01 	jmp	0x384	; 0x384 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     462:	77 9b       	sbis	0x0e, 7	; 14
     464:	fe cf       	rjmp	.-4      	; 0x462 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     466:	9d e2       	ldi	r25, 0x2D	; 45
     468:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     46a:	77 9b       	sbis	0x0e, 7	; 14
     46c:	fe cf       	rjmp	.-4      	; 0x46a <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     46e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     472:	98 60       	ori	r25, 0x08	; 8
     474:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     478:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     47c:	97 7f       	andi	r25, 0xF7	; 247
     47e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     482:	95 ed       	ldi	r25, 0xD5	; 213
     484:	9a 95       	dec	r25
     486:	f1 f7       	brne	.-4      	; 0x484 <int2lcd+0x2c>
     488:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
     48a:	81 95       	neg	r24
     48c:	0c 94 c2 01 	jmp	0x384	; 0x384 <uint2lcd>

00000490 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     490:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     492:	77 9b       	sbis	0x0e, 7	; 14
     494:	fe cf       	rjmp	.-4      	; 0x492 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     496:	8e e0       	ldi	r24, 0x0E	; 14
     498:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     49a:	77 9b       	sbis	0x0e, 7	; 14
     49c:	fe cf       	rjmp	.-4      	; 0x49a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     49e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4a2:	88 60       	ori	r24, 0x08	; 8
     4a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ac:	87 7f       	andi	r24, 0xF7	; 247
     4ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b2:	08 95       	ret

000004b4 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4b6:	77 9b       	sbis	0x0e, 7	; 14
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4be:	77 9b       	sbis	0x0e, 7	; 14
     4c0:	fe cf       	rjmp	.-4      	; 0x4be <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4d0:	87 7f       	andi	r24, 0xF7	; 247
     4d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4d6:	08 95       	ret

000004d8 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4d8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <shift_right+0x2>
  SPDR = byte;                        //send payload
     4de:	8e e1       	ldi	r24, 0x1E	; 30
     4e0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4e2:	77 9b       	sbis	0x0e, 7	; 14
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ea:	88 60       	ori	r24, 0x08	; 8
     4ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4f4:	87 7f       	andi	r24, 0xF7	; 247
     4f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4fa:	08 95       	ret

000004fc <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4fc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <shift_left+0x2>
  SPDR = byte;                        //send payload
     502:	88 e1       	ldi	r24, 0x18	; 24
     504:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     506:	77 9b       	sbis	0x0e, 7	; 14
     508:	fe cf       	rjmp	.-4      	; 0x506 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     50a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     514:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     518:	87 7f       	andi	r24, 0xF7	; 247
     51a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     51e:	08 95       	ret

00000520 <strobe_lcd>:
     520:	e2 e6       	ldi	r30, 0x62	; 98
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	88 60       	ori	r24, 0x08	; 8
     528:	80 83       	st	Z, r24
     52a:	80 81       	ld	r24, Z
     52c:	87 7f       	andi	r24, 0xF7	; 247
     52e:	80 83       	st	Z, r24
     530:	08 95       	ret

00000532 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     532:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     534:	77 9b       	sbis	0x0e, 7	; 14
     536:	fe cf       	rjmp	.-4      	; 0x534 <clear_display+0x2>
  SPDR = byte;                        //send payload
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     53c:	77 9b       	sbis	0x0e, 7	; 14
     53e:	fe cf       	rjmp	.-4      	; 0x53c <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     540:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     544:	88 60       	ori	r24, 0x08	; 8
     546:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     54a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     54e:	87 7f       	andi	r24, 0xF7	; 247
     550:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     554:	8f e1       	ldi	r24, 0x1F	; 31
     556:	9c e1       	ldi	r25, 0x1C	; 28
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <clear_display+0x26>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <clear_display+0x2c>
     55e:	00 00       	nop
     560:	08 95       	ret

00000562 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     562:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     564:	77 9b       	sbis	0x0e, 7	; 14
     566:	fe cf       	rjmp	.-4      	; 0x564 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     56c:	77 9b       	sbis	0x0e, 7	; 14
     56e:	fe cf       	rjmp	.-4      	; 0x56c <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     570:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     574:	88 60       	ori	r24, 0x08	; 8
     576:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     57a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     57e:	87 7f       	andi	r24, 0xF7	; 247
     580:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     584:	8f e6       	ldi	r24, 0x6F	; 111
     586:	97 e1       	ldi	r25, 0x17	; 23
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <cursor_home+0x26>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <cursor_home+0x2c>
     58e:	00 00       	nop
     590:	08 95       	ret

00000592 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     592:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     594:	77 9b       	sbis	0x0e, 7	; 14
     596:	fe cf       	rjmp	.-4      	; 0x594 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     598:	80 ec       	ldi	r24, 0xC0	; 192
     59a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     59c:	77 9b       	sbis	0x0e, 7	; 14
     59e:	fe cf       	rjmp	.-4      	; 0x59c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5a4:	88 60       	ori	r24, 0x08	; 8
     5a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ae:	87 7f       	andi	r24, 0xF7	; 247
     5b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b4:	08 95       	ret

000005b6 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5b6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5b8:	77 9b       	sbis	0x0e, 7	; 14
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     5bc:	80 e8       	ldi	r24, 0x80	; 128
     5be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5c0:	77 9b       	sbis	0x0e, 7	; 14
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5c8:	88 60       	ori	r24, 0x08	; 8
     5ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5d2:	87 7f       	andi	r24, 0xF7	; 247
     5d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5d8:	08 95       	ret

000005da <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     5da:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5dc:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     5de:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5e0:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5e2:	77 9b       	sbis	0x0e, 7	; 14
     5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     5e6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5e8:	77 9b       	sbis	0x0e, 7	; 14
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5fa:	87 7f       	andi	r24, 0xF7	; 247
     5fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     600:	85 ed       	ldi	r24, 0xD5	; 213
     602:	8a 95       	dec	r24
     604:	f1 f7       	brne	.-4      	; 0x602 <fill_spaces+0x28>
     606:	00 00       	nop
     608:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     60a:	51 f7       	brne	.-44     	; 0x5e0 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     60c:	08 95       	ret

0000060e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     612:	77 9b       	sbis	0x0e, 7	; 14
     614:	fe cf       	rjmp	.-4      	; 0x612 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     616:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     618:	77 9b       	sbis	0x0e, 7	; 14
     61a:	fe cf       	rjmp	.-4      	; 0x618 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     61c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     620:	88 60       	ori	r24, 0x08	; 8
     622:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     626:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     62a:	87 7f       	andi	r24, 0xF7	; 247
     62c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     630:	08 95       	ret

00000632 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     632:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     63a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     63c:	df 01       	movw	r26, r30
     63e:	a4 0f       	add	r26, r20
     640:	b5 1f       	adc	r27, r21
     642:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     644:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     646:	77 9b       	sbis	0x0e, 7	; 14
     648:	fe cf       	rjmp	.-4      	; 0x646 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     64a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     64c:	77 9b       	sbis	0x0e, 7	; 14
     64e:	fe cf       	rjmp	.-4      	; 0x64c <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     650:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     654:	98 60       	ori	r25, 0x08	; 8
     656:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     65a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     65e:	97 7f       	andi	r25, 0xF7	; 247
     660:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     664:	85 ed       	ldi	r24, 0xD5	; 213
     666:	8a 95       	dec	r24
     668:	f1 f7       	brne	.-4      	; 0x666 <string2lcd+0x34>
     66a:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	46 2f       	mov	r20, r22
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	df 01       	movw	r26, r30
     674:	0d 90       	ld	r0, X+
     676:	00 20       	and	r0, r0
     678:	e9 f7       	brne	.-6      	; 0x674 <string2lcd+0x42>
     67a:	9d 01       	movw	r18, r26
     67c:	2e 1b       	sub	r18, r30
     67e:	3f 0b       	sbc	r19, r31
     680:	22 50       	subi	r18, 0x02	; 2
     682:	31 09       	sbc	r19, r1
     684:	24 17       	cp	r18, r20
     686:	35 07       	cpc	r19, r21
     688:	c8 f6       	brcc	.-78     	; 0x63c <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
     68a:	08 95       	ret

0000068c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	99 ef       	ldi	r25, 0xF9	; 249
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <lcd_init+0x4>
     694:	00 c0       	rjmp	.+0      	; 0x696 <lcd_init+0xa>
     696:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     69e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6a0:	77 9b       	sbis	0x0e, 7	; 14
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6a8:	77 9b       	sbis	0x0e, 7	; 14
     6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6b0:	88 60       	ori	r24, 0x08	; 8
     6b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ba:	87 7f       	andi	r24, 0xF7	; 247
     6bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c0:	8f e5       	ldi	r24, 0x5F	; 95
     6c2:	9d e6       	ldi	r25, 0x6D	; 109
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <lcd_init+0x38>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <lcd_init+0x3e>
     6ca:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ce:	77 9b       	sbis	0x0e, 7	; 14
     6d0:	fe cf       	rjmp	.-4      	; 0x6ce <lcd_init+0x42>
  SPDR = byte;                        //send payload
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6d6:	77 9b       	sbis	0x0e, 7	; 14
     6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6de:	88 60       	ori	r24, 0x08	; 8
     6e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e8:	87 7f       	andi	r24, 0xF7	; 247
     6ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ee:	8f e5       	ldi	r24, 0x5F	; 95
     6f0:	9d e6       	ldi	r25, 0x6D	; 109
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd_init+0x66>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <lcd_init+0x6c>
     6f8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6fa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6fc:	77 9b       	sbis	0x0e, 7	; 14
     6fe:	fe cf       	rjmp	.-4      	; 0x6fc <lcd_init+0x70>
  SPDR = byte;                        //send payload
     700:	80 e3       	ldi	r24, 0x30	; 48
     702:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     704:	77 9b       	sbis	0x0e, 7	; 14
     706:	fe cf       	rjmp	.-4      	; 0x704 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     708:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     70c:	88 60       	ori	r24, 0x08	; 8
     70e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     712:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     716:	87 7f       	andi	r24, 0xF7	; 247
     718:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71c:	8f e5       	ldi	r24, 0x5F	; 95
     71e:	9d e6       	ldi	r25, 0x6D	; 109
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <lcd_init+0x94>
     724:	00 c0       	rjmp	.+0      	; 0x726 <lcd_init+0x9a>
     726:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     728:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     72a:	77 9b       	sbis	0x0e, 7	; 14
     72c:	fe cf       	rjmp	.-4      	; 0x72a <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     72e:	88 e3       	ldi	r24, 0x38	; 56
     730:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     732:	77 9b       	sbis	0x0e, 7	; 14
     734:	fe cf       	rjmp	.-4      	; 0x732 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     736:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     73a:	88 60       	ori	r24, 0x08	; 8
     73c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     740:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     744:	87 7f       	andi	r24, 0xF7	; 247
     746:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74a:	8f e1       	ldi	r24, 0x1F	; 31
     74c:	9e e4       	ldi	r25, 0x4E	; 78
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <lcd_init+0xc2>
     752:	00 c0       	rjmp	.+0      	; 0x754 <lcd_init+0xc8>
     754:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     756:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     760:	77 9b       	sbis	0x0e, 7	; 14
     762:	fe cf       	rjmp	.-4      	; 0x760 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     764:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     76e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     772:	87 7f       	andi	r24, 0xF7	; 247
     774:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     778:	8f e1       	ldi	r24, 0x1F	; 31
     77a:	9e e4       	ldi	r25, 0x4E	; 78
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <lcd_init+0xf0>
     780:	00 c0       	rjmp	.+0      	; 0x782 <lcd_init+0xf6>
     782:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     784:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     786:	77 9b       	sbis	0x0e, 7	; 14
     788:	fe cf       	rjmp	.-4      	; 0x786 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     78e:	77 9b       	sbis	0x0e, 7	; 14
     790:	fe cf       	rjmp	.-4      	; 0x78e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     792:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     796:	88 60       	ori	r24, 0x08	; 8
     798:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     79c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a0:	87 7f       	andi	r24, 0xF7	; 247
     7a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a6:	8f e1       	ldi	r24, 0x1F	; 31
     7a8:	9e e4       	ldi	r25, 0x4E	; 78
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <lcd_init+0x11e>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <lcd_init+0x124>
     7b0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7b2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7b4:	77 9b       	sbis	0x0e, 7	; 14
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     7b8:	86 e0       	ldi	r24, 0x06	; 6
     7ba:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7bc:	77 9b       	sbis	0x0e, 7	; 14
     7be:	fe cf       	rjmp	.-4      	; 0x7bc <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c4:	88 60       	ori	r24, 0x08	; 8
     7c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ce:	87 7f       	andi	r24, 0xF7	; 247
     7d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d4:	8f e1       	ldi	r24, 0x1F	; 31
     7d6:	9e e4       	ldi	r25, 0x4E	; 78
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <lcd_init+0x14c>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <lcd_init+0x152>
     7de:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7e0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7e2:	77 9b       	sbis	0x0e, 7	; 14
     7e4:	fe cf       	rjmp	.-4      	; 0x7e2 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     7e6:	8c e0       	ldi	r24, 0x0C	; 12
     7e8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ea:	77 9b       	sbis	0x0e, 7	; 14
     7ec:	fe cf       	rjmp	.-4      	; 0x7ea <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7f2:	88 60       	ori	r24, 0x08	; 8
     7f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7fc:	87 7f       	andi	r24, 0xF7	; 247
     7fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     802:	8f e1       	ldi	r24, 0x1F	; 31
     804:	9e e4       	ldi	r25, 0x4E	; 78
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <lcd_init+0x17a>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <lcd_init+0x180>
     80c:	00 00       	nop
     80e:	08 95       	ret

00000810 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	69 97       	sbiw	r28, 0x19	; 25
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	14 2f       	mov	r17, r20
     842:	42 2e       	mov	r4, r18
     844:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     846:	00 23       	and	r16, r16
     848:	79 f0       	breq	.+30     	; 0x868 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
     84e:	cc 24       	eor	r12, r12
     850:	f7 fc       	sbrc	r15, 7
     852:	c3 94       	inc	r12
     854:	dd 24       	eor	r13, r13
     856:	ee 24       	eor	r14, r14
     858:	ff 24       	eor	r15, r15
     85a:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
     860:	97 fd       	sbrc	r25, 7
     862:	a3 c0       	rjmp	.+326    	; 0x9aa <lcd_int32+0x19a>
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     868:	44 20       	and	r4, r4
     86a:	09 f4       	brne	.+2      	; 0x86e <lcd_int32+0x5e>
     86c:	96 c0       	rjmp	.+300    	; 0x99a <lcd_int32+0x18a>
     86e:	9e 01       	movw	r18, r28
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	59 01       	movw	r10, r18
     876:	49 01       	movw	r8, r18
     878:	66 24       	eor	r6, r6
     87a:	6a 94       	dec	r6
     87c:	64 0c       	add	r6, r4
     87e:	71 2c       	mov	r7, r1
     880:	3f ef       	ldi	r19, 0xFF	; 255
     882:	63 1a       	sub	r6, r19
     884:	73 0a       	sbc	r7, r19
     886:	6a 0c       	add	r6, r10
     888:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     88a:	2a e0       	ldi	r18, 0x0A	; 10
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divmodsi4>
     896:	e6 2f       	mov	r30, r22
     898:	2a 8b       	std	Y+18, r18	; 0x12
     89a:	3b 8b       	std	Y+19, r19	; 0x13
     89c:	4c 8b       	std	Y+20, r20	; 0x14
     89e:	5d 8b       	std	Y+21, r21	; 0x15
     8a0:	6a 89       	ldd	r22, Y+18	; 0x12
     8a2:	7b 89       	ldd	r23, Y+19	; 0x13
     8a4:	8c 89       	ldd	r24, Y+20	; 0x14
     8a6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     8a8:	20 e3       	ldi	r18, 0x30	; 48
     8aa:	2e 0f       	add	r18, r30
     8ac:	f4 01       	movw	r30, r8
     8ae:	21 93       	st	Z+, r18
     8b0:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     8b2:	6e 16       	cp	r6, r30
     8b4:	7f 06       	cpc	r7, r31
     8b6:	49 f7       	brne	.-46     	; 0x88a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     8b8:	99 24       	eor	r9, r9
     8ba:	93 94       	inc	r9
     8bc:	94 0c       	add	r9, r4
     8be:	f5 01       	movw	r30, r10
     8c0:	e4 0d       	add	r30, r4
     8c2:	f1 1d       	adc	r31, r1
     8c4:	2e e2       	ldi	r18, 0x2E	; 46
     8c6:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     8c8:	2a e0       	ldi	r18, 0x0A	; 10
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divmodsi4>
     8d4:	e6 2f       	mov	r30, r22
     8d6:	2a 8b       	std	Y+18, r18	; 0x12
     8d8:	3b 8b       	std	Y+19, r19	; 0x13
     8da:	4c 8b       	std	Y+20, r20	; 0x14
     8dc:	5d 8b       	std	Y+21, r21	; 0x15
     8de:	6e 8b       	std	Y+22, r22	; 0x16
     8e0:	7f 8b       	std	Y+23, r23	; 0x17
     8e2:	88 8f       	std	Y+24, r24	; 0x18
     8e4:	99 8f       	std	Y+25, r25	; 0x19
     8e6:	6a 89       	ldd	r22, Y+18	; 0x12
     8e8:	7b 89       	ldd	r23, Y+19	; 0x13
     8ea:	8c 89       	ldd	r24, Y+20	; 0x14
     8ec:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     8ee:	31 e0       	ldi	r19, 0x01	; 1
     8f0:	39 0d       	add	r19, r9
     8f2:	d5 01       	movw	r26, r10
     8f4:	a9 0d       	add	r26, r9
     8f6:	b1 1d       	adc	r27, r1
     8f8:	e0 5d       	subi	r30, 0xD0	; 208
     8fa:	ec 93       	st	X, r30
     8fc:	93 2e       	mov	r9, r19
        }while(qr.quot);
     8fe:	61 15       	cp	r22, r1
     900:	71 05       	cpc	r23, r1
     902:	81 05       	cpc	r24, r1
     904:	91 05       	cpc	r25, r1
     906:	01 f7       	brne	.-64     	; 0x8c8 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     908:	11 23       	and	r17, r17
     90a:	61 f0       	breq	.+24     	; 0x924 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     90c:	51 10       	cpse	r5, r1
     90e:	4b c0       	rjmp	.+150    	; 0x9a6 <lcd_int32+0x196>
     910:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     912:	31 17       	cp	r19, r17
     914:	38 f4       	brcc	.+14     	; 0x924 <lcd_int32+0x114>
     916:	f5 01       	movw	r30, r10
     918:	e3 0f       	add	r30, r19
     91a:	f1 1d       	adc	r31, r1
     91c:	90 83       	st	Z, r25
     91e:	3f 5f       	subi	r19, 0xFF	; 255
     920:	13 13       	cpse	r17, r19
     922:	f9 cf       	rjmp	.-14     	; 0x916 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     924:	00 23       	and	r16, r16
     926:	31 f0       	breq	.+12     	; 0x934 <lcd_int32+0x124>
     928:	f5 01       	movw	r30, r10
     92a:	e3 0f       	add	r30, r19
     92c:	f1 1d       	adc	r31, r1
     92e:	9d e2       	ldi	r25, 0x2D	; 45
     930:	90 83       	st	Z, r25
     932:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     934:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     936:	31 50       	subi	r19, 0x01	; 1
     938:	f5 01       	movw	r30, r10
     93a:	e3 0f       	add	r30, r19
     93c:	f1 1d       	adc	r31, r1
     93e:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     940:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     942:	77 9b       	sbis	0x0e, 7	; 14
     944:	fe cf       	rjmp	.-4      	; 0x942 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     946:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     948:	77 9b       	sbis	0x0e, 7	; 14
     94a:	fe cf       	rjmp	.-4      	; 0x948 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     94c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     950:	98 60       	ori	r25, 0x08	; 8
     952:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     956:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95a:	97 7f       	andi	r25, 0xF7	; 247
     95c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     960:	85 ed       	ldi	r24, 0xD5	; 213
     962:	8a 95       	dec	r24
     964:	f1 f7       	brne	.-4      	; 0x962 <lcd_int32+0x152>
     966:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     968:	31 11       	cpse	r19, r1
     96a:	e5 cf       	rjmp	.-54     	; 0x936 <lcd_int32+0x126>

}
     96c:	69 96       	adiw	r28, 0x19	; 25
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	8f 90       	pop	r8
     990:	7f 90       	pop	r7
     992:	6f 90       	pop	r6
     994:	5f 90       	pop	r5
     996:	4f 90       	pop	r4
     998:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     99a:	91 2c       	mov	r9, r1
     99c:	9e 01       	movw	r18, r28
     99e:	2f 5f       	subi	r18, 0xFF	; 255
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	59 01       	movw	r10, r18
     9a4:	91 cf       	rjmp	.-222    	; 0x8c8 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     9a6:	90 e3       	ldi	r25, 0x30	; 48
     9a8:	b4 cf       	rjmp	.-152    	; 0x912 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     9aa:	f0 94       	com	r15
     9ac:	e0 94       	com	r14
     9ae:	d0 94       	com	r13
     9b0:	c0 94       	com	r12
     9b2:	c1 1c       	adc	r12, r1
     9b4:	d1 1c       	adc	r13, r1
     9b6:	e1 1c       	adc	r14, r1
     9b8:	f1 1c       	adc	r15, r1
     9ba:	54 cf       	rjmp	.-344    	; 0x864 <lcd_int32+0x54>

000009bc <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
     9bc:	5f 92       	push	r5
     9be:	6f 92       	push	r6
     9c0:	7f 92       	push	r7
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	61 97       	sbiw	r28, 0x11	; 17
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	5c 01       	movw	r10, r24
     9ec:	96 2e       	mov	r9, r22
     9ee:	54 2e       	mov	r5, r20
     9f0:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     9f2:	8b 2c       	mov	r8, r11
     9f4:	88 1c       	adc	r8, r8
     9f6:	88 24       	eor	r8, r8
     9f8:	88 1c       	adc	r8, r8
     9fa:	78 2c       	mov	r7, r8
     9fc:	9c 01       	movw	r18, r24
     9fe:	97 fd       	sbrc	r25, 7
     a00:	9d c0       	rjmp	.+314    	; 0xb3c <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
     a02:	55 20       	and	r5, r5
     a04:	09 f4       	brne	.+2      	; 0xa08 <lcd_int16+0x4c>
     a06:	8e c0       	rjmp	.+284    	; 0xb24 <lcd_int16+0x168>
     a08:	8e 01       	movw	r16, r28
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	78 01       	movw	r14, r16
     a10:	cc 24       	eor	r12, r12
     a12:	ca 94       	dec	r12
     a14:	c5 0c       	add	r12, r5
     a16:	d1 2c       	mov	r13, r1
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	c8 1a       	sub	r12, r24
     a1c:	d8 0a       	sbc	r13, r24
     a1e:	c0 0e       	add	r12, r16
     a20:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     a22:	6a e0       	ldi	r22, 0x0A	; 10
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	c9 01       	movw	r24, r18
     a28:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__divmodhi4>
     a2c:	46 2f       	mov	r20, r22
     a2e:	24 2f       	mov	r18, r20
     a30:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     a32:	80 5d       	subi	r24, 0xD0	; 208
     a34:	f7 01       	movw	r30, r14
     a36:	81 93       	st	Z+, r24
     a38:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
     a3a:	ec 15       	cp	r30, r12
     a3c:	fd 05       	cpc	r31, r13
     a3e:	89 f7       	brne	.-30     	; 0xa22 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     a40:	ff 24       	eor	r15, r15
     a42:	f3 94       	inc	r15
     a44:	f5 0c       	add	r15, r5
     a46:	f8 01       	movw	r30, r16
     a48:	e5 0d       	add	r30, r5
     a4a:	f1 1d       	adc	r31, r1
     a4c:	8e e2       	ldi	r24, 0x2E	; 46
     a4e:	80 83       	st	Z, r24
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     a52:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
     a54:	6a e0       	ldi	r22, 0x0A	; 10
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	c9 01       	movw	r24, r18
     a5a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__divmodhi4>
     a5e:	46 2f       	mov	r20, r22
     a60:	24 2f       	mov	r18, r20
     a62:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	9f 0d       	add	r25, r15
     a68:	f8 01       	movw	r30, r16
     a6a:	ef 0d       	add	r30, r15
     a6c:	f1 1d       	adc	r31, r1
     a6e:	80 5d       	subi	r24, 0xD0	; 208
     a70:	80 83       	st	Z, r24
        }
        while(qr.quot);
     a72:	21 15       	cp	r18, r1
     a74:	31 05       	cpc	r19, r1
     a76:	69 f7       	brne	.-38     	; 0xa52 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
     a78:	61 10       	cpse	r6, r1
     a7a:	59 c0       	rjmp	.+178    	; 0xb2e <lcd_int16+0x172>
     a7c:	b7 fc       	sbrc	r11, 7
     a7e:	63 c0       	rjmp	.+198    	; 0xb46 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     a80:	99 20       	and	r9, r9
     a82:	b1 f0       	breq	.+44     	; 0xab0 <lcd_int16+0xf4>
     a84:	68 2d       	mov	r22, r8
     a86:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     a88:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     a8a:	29 2f       	mov	r18, r25
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	49 2d       	mov	r20, r9
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	46 1b       	sub	r20, r22
     a94:	57 0b       	sbc	r21, r23
     a96:	24 17       	cp	r18, r20
     a98:	35 07       	cpc	r19, r21
     a9a:	54 f4       	brge	.+20     	; 0xab0 <lcd_int16+0xf4>
     a9c:	9f 5f       	subi	r25, 0xFF	; 255
     a9e:	f8 01       	movw	r30, r16
     aa0:	e2 0f       	add	r30, r18
     aa2:	f3 1f       	adc	r31, r19
     aa4:	80 83       	st	Z, r24
     aa6:	29 2f       	mov	r18, r25
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	24 17       	cp	r18, r20
     aac:	35 07       	cpc	r19, r21
     aae:	b4 f3       	brlt	.-20     	; 0xa9c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
     ab0:	77 20       	and	r7, r7
     ab2:	31 f0       	breq	.+12     	; 0xac0 <lcd_int16+0x104>
     ab4:	f8 01       	movw	r30, r16
     ab6:	e9 0f       	add	r30, r25
     ab8:	f1 1d       	adc	r31, r1
     aba:	8d e2       	ldi	r24, 0x2D	; 45
     abc:	80 83       	st	Z, r24
     abe:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ac0:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     ac2:	91 50       	subi	r25, 0x01	; 1
     ac4:	f8 01       	movw	r30, r16
     ac6:	e9 0f       	add	r30, r25
     ac8:	f1 1d       	adc	r31, r1
     aca:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     acc:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ace:	77 9b       	sbis	0x0e, 7	; 14
     ad0:	fe cf       	rjmp	.-4      	; 0xace <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     ad2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad4:	77 9b       	sbis	0x0e, 7	; 14
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ad8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae6:	87 7f       	andi	r24, 0xF7	; 247
     ae8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aec:	f5 ed       	ldi	r31, 0xD5	; 213
     aee:	fa 95       	dec	r31
     af0:	f1 f7       	brne	.-4      	; 0xaee <lcd_int16+0x132>
     af2:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     af4:	91 11       	cpse	r25, r1
     af6:	e5 cf       	rjmp	.-54     	; 0xac2 <lcd_int16+0x106>
}
     af8:	61 96       	adiw	r28, 0x11	; 17
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	6f 90       	pop	r6
     b20:	5f 90       	pop	r5
     b22:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     b24:	f1 2c       	mov	r15, r1
     b26:	8e 01       	movw	r16, r28
     b28:	0f 5f       	subi	r16, 0xFF	; 255
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
     b2c:	93 cf       	rjmp	.-218    	; 0xa54 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     b2e:	99 20       	and	r9, r9
     b30:	09 f4       	brne	.+2      	; 0xb34 <lcd_int16+0x178>
     b32:	be cf       	rjmp	.-132    	; 0xab0 <lcd_int16+0xf4>
     b34:	68 2d       	mov	r22, r8
     b36:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     b38:	80 e3       	ldi	r24, 0x30	; 48
     b3a:	a7 cf       	rjmp	.-178    	; 0xa8a <lcd_int16+0xce>
     b3c:	22 27       	eor	r18, r18
     b3e:	33 27       	eor	r19, r19
     b40:	28 1b       	sub	r18, r24
     b42:	39 0b       	sbc	r19, r25
     b44:	5e cf       	rjmp	.-324    	; 0xa02 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b46:	f3 94       	inc	r15
     b48:	f3 94       	inc	r15
     b4a:	f8 01       	movw	r30, r16
     b4c:	e9 0f       	add	r30, r25
     b4e:	f1 1d       	adc	r31, r1
     b50:	8d e2       	ldi	r24, 0x2D	; 45
     b52:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
     b54:	99 20       	and	r9, r9
     b56:	59 f0       	breq	.+22     	; 0xb6e <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     b58:	2f 2d       	mov	r18, r15
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	49 2d       	mov	r20, r9
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	24 17       	cp	r18, r20
     b62:	35 07       	cpc	r19, r21
     b64:	24 f4       	brge	.+8      	; 0xb6e <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b66:	9f 2d       	mov	r25, r15
                bSigned = 0;
     b68:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
     b6a:	80 e2       	ldi	r24, 0x20	; 32
     b6c:	97 cf       	rjmp	.-210    	; 0xa9c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b6e:	9f 2d       	mov	r25, r15
     b70:	a7 cf       	rjmp	.-178    	; 0xac0 <lcd_int16+0x104>

00000b72 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	0b b6       	in	r0, 0x3b	; 59
     b7e:	0f 92       	push	r0
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     b90:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b94:	8e 2f       	mov	r24, r30
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	38 97       	sbiw	r30, 0x08	; 8
     b9c:	e1 35       	cpi	r30, 0x51	; 81
     b9e:	f1 05       	cpc	r31, r1
     ba0:	b0 f0       	brcs	.+44     	; 0xbce <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     ba2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     ba6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0b be       	out	0x3b, r0	; 59
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     bce:	ea 5b       	subi	r30, 0xBA	; 186
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	0c 94 06 09 	jmp	0x120c	; 0x120c <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     bd6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     bda:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_buf>
     bde:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <twi_buf+0x1>
     be2:	e8 0f       	add	r30, r24
     be4:	f1 1d       	adc	r31, r1
     be6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     bea:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     bec:	84 e9       	ldi	r24, 0x94	; 148
     bee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
     bf2:	de cf       	rjmp	.-68     	; 0xbb0 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     bf4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <twi_bus_addr>
     bf8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
     bfc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
     c00:	85 e8       	ldi	r24, 0x85	; 133
     c02:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     c06:	d4 cf       	rjmp	.-88     	; 0xbb0 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     c08:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     c0c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <twi_msg_size>
     c10:	89 17       	cp	r24, r25
     c12:	60 f7       	brcc	.-40     	; 0xbec <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     c14:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_buf>
     c18:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <twi_buf+0x1>
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	98 0f       	add	r25, r24
     c20:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <twi_buf_ptr.1780>
     c24:	e8 0f       	add	r30, r24
     c26:	f1 1d       	adc	r31, r1
     c28:	80 81       	ld	r24, Z
     c2a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
     c2e:	85 e8       	ldi	r24, 0x85	; 133
     c30:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c34:	bd cf       	rjmp	.-134    	; 0xbb0 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     c36:	85 ea       	ldi	r24, 0xA5	; 165
     c38:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     c3c:	b9 cf       	rjmp	.-142    	; 0xbb0 <__vector_33+0x3e>
     c3e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     c42:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <twi_msg_size>
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	dc f4       	brge	.+54     	; 0xc88 <__vector_33+0x116>
     c52:	85 ec       	ldi	r24, 0xC5	; 197
     c54:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c58:	ab cf       	rjmp	.-170    	; 0xbb0 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     c5a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_buf>
     c5e:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <twi_buf+0x1>
     c62:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <twi_buf_ptr.1780>
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	28 0f       	add	r18, r24
     c6a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <twi_buf_ptr.1780>
     c6e:	e8 0f       	add	r30, r24
     c70:	f1 1d       	adc	r31, r1
     c72:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     c76:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     c78:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <twi_msg_size>
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	28 17       	cp	r18, r24
     c84:	39 07       	cpc	r19, r25
     c86:	2c f3       	brlt	.-54     	; 0xc52 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     c88:	85 e8       	ldi	r24, 0x85	; 133
     c8a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c8e:	90 cf       	rjmp	.-224    	; 0xbb0 <__vector_33+0x3e>

00000c90 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c90:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	08 95       	ret

00000c98 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c98:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     c9c:	90 fd       	sbrc	r25, 0
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     ca0:	8e 7f       	andi	r24, 0xFE	; 254
     ca2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
     ca6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <twi_buf+0x1>
     caa:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
     cae:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
     cb2:	85 ea       	ldi	r24, 0xA5	; 165
     cb4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     cb8:	08 95       	ret

00000cba <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cba:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     cbe:	90 fd       	sbrc	r25, 0
     cc0:	fc cf       	rjmp	.-8      	; 0xcba <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
     cc8:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <twi_buf+0x1>
     ccc:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
     cd0:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
     cd4:	85 ea       	ldi	r24, 0xA5	; 165
     cd6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     cda:	08 95       	ret

00000cdc <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
     ce2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     cec:	08 95       	ret

00000cee <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
     cee:	fc 01       	movw	r30, r24
//given a temperature reading from an LM73, the address of a buffer
//array, and a format (deg F or C) it formats the temperature into ascii in 
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

	uint16_t temperature = lm73_temp / 128;
     cf0:	cb 01       	movw	r24, r22
     cf2:	88 0f       	add	r24, r24
     cf4:	89 2f       	mov	r24, r25
     cf6:	88 1f       	adc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	91 95       	neg	r25

	if(f_not_c == 0x01){
     cfc:	41 30       	cpi	r20, 0x01	; 1
     cfe:	91 f4       	brne	.+36     	; 0xd24 <lm73_temp_convert+0x36>
		temperature = (temperature * 9)/5 + 32;
     d00:	9c 01       	movw	r18, r24
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	28 0f       	add	r18, r24
     d10:	39 1f       	adc	r19, r25
     d12:	ad ec       	ldi	r26, 0xCD	; 205
     d14:	bc ec       	ldi	r27, 0xCC	; 204
     d16:	0e 94 0f 09 	call	0x121e	; 0x121e <__umulhisi3>
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
     d22:	80 96       	adiw	r24, 0x20	; 32
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d24:	4a e0       	ldi	r20, 0x0A	; 10
     d26:	bf 01       	movw	r22, r30
     d28:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__itoa_ncheck>

00000d2c <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d2c:	5d 9b       	sbis	0x0b, 5	; 11
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <uart_putc>
    UDR0 = data;    // Send data byte
     d30:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d32:	5d 9b       	sbis	0x0b, 5	; 11
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <uart_putc+0x6>
}
     d36:	08 95       	ret

00000d38 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
     d38:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
     d3a:	90 81       	ld	r25, Z
     d3c:	99 23       	and	r25, r25
     d3e:	49 f0       	breq	.+18     	; 0xd52 <uart_puts+0x1a>
     d40:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d42:	5d 9b       	sbis	0x0b, 5	; 11
     d44:	fe cf       	rjmp	.-4      	; 0xd42 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
     d46:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d48:	5d 9b       	sbis	0x0b, 5	; 11
     d4a:	fe cf       	rjmp	.-4      	; 0xd48 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
     d4c:	91 91       	ld	r25, Z+
     d4e:	91 11       	cpse	r25, r1
     d50:	f8 cf       	rjmp	.-16     	; 0xd42 <uart_puts+0xa>
     d52:	08 95       	ret

00000d54 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
     d54:	9c 01       	movw	r18, r24
     d56:	fc 01       	movw	r30, r24
     d58:	44 91       	lpm	r20, Z
     d5a:	44 23       	and	r20, r20
     d5c:	69 f0       	breq	.+26     	; 0xd78 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	f9 01       	movw	r30, r18
     d62:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d64:	5d 9b       	sbis	0x0b, 5	; 11
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
     d68:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d6a:	5d 9b       	sbis	0x0b, 5	; 11
     d6c:	fe cf       	rjmp	.-4      	; 0xd6a <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
     d6e:	9c 01       	movw	r18, r24
     d70:	fc 01       	movw	r30, r24
     d72:	44 91       	lpm	r20, Z
     d74:	41 11       	cpse	r20, r1
     d76:	f3 cf       	rjmp	.-26     	; 0xd5e <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
     d78:	08 95       	ret

00000d7a <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
     d7a:	8a b1       	in	r24, 0x0a	; 10
     d7c:	88 61       	ori	r24, 0x18	; 24
     d7e:	8a b9       	out	0x0a, r24	; 10

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     d80:	e5 e9       	ldi	r30, 0x95	; 149
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	86 60       	ori	r24, 0x06	; 6
     d88:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     d8a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     d8e:	87 e6       	ldi	r24, 0x67	; 103
     d90:	89 b9       	out	0x09, r24	; 9
     d92:	08 95       	ret

00000d94 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     d94:	80 e8       	ldi	r24, 0x80	; 128
     d96:	9e e3       	ldi	r25, 0x3E	; 62
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <uart_getc+0xa>
     d9a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     d9c:	21 f0       	breq	.+8      	; 0xda6 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     d9e:	5f 9b       	sbis	0x0b, 7	; 11
     da0:	fc cf       	rjmp	.-8      	; 0xd9a <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
     da2:	8c b1       	in	r24, 0x0c	; 12
     da4:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
     da6:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
     da8:	08 95       	ret

00000daa <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     daa:	84 e1       	ldi	r24, 0x14	; 20
     dac:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	6c e9       	ldi	r22, 0x9C	; 156
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	82 e2       	ldi	r24, 0x22	; 34
     db8:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     dbc:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     dc0:	81 11       	cpse	r24, r1
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <get_int_status+0x12>
     dc4:	8f ea       	ldi	r24, 0xAF	; 175
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <get_int_status+0x1e>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <get_int_status+0x24>
     dce:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	6e eb       	ldi	r22, 0xBE	; 190
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	82 e2       	ldi	r24, 0x22	; 34
     dd8:	0e 94 5d 06 	call	0xcba	; 0xcba <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     ddc:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     de0:	81 11       	cpse	r24, r1
     de2:	fc cf       	rjmp	.-8      	; 0xddc <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
     de4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <si4734_rd_buf>
     de8:	08 95       	ret

00000dea <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
     df0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     df4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     df8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dfc:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     e00:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
     e04:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
     e08:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     e0c:	45 e0       	ldi	r20, 0x05	; 5
     e0e:	6c e9       	ldi	r22, 0x9C	; 156
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	82 e2       	ldi	r24, 0x22	; 34
     e14:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     e18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <STC_interrupt>
     e1c:	88 23       	and	r24, r24
     e1e:	e1 f3       	breq	.-8      	; 0xe18 <fm_tune_freq+0x2e>
}
     e20:	08 95       	ret

00000e22 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
     e22:	80 e4       	ldi	r24, 0x40	; 64
     e24:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
     e28:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     e2c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <current_am_freq>
     e30:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <current_am_freq+0x1>
     e34:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     e38:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     e3c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
     e40:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
     e44:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     e48:	46 e0       	ldi	r20, 0x06	; 6
     e4a:	6c e9       	ldi	r22, 0x9C	; 156
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	82 e2       	ldi	r24, 0x22	; 34
     e50:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     e54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <STC_interrupt>
     e58:	88 23       	and	r24, r24
     e5a:	e1 f3       	breq	.-8      	; 0xe54 <am_tune_freq+0x32>
}
     e5c:	08 95       	ret

00000e5e <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
     e5e:	ec e9       	ldi	r30, 0x9C	; 156
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
     e66:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     e68:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <current_sw_freq>
     e6c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <current_sw_freq+0x1>
     e70:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     e72:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     e74:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     e7a:	46 e0       	ldi	r20, 0x06	; 6
     e7c:	bf 01       	movw	r22, r30
     e7e:	82 e2       	ldi	r24, 0x22	; 34
     e80:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e84:	2f ef       	ldi	r18, 0xFF	; 255
     e86:	87 ee       	ldi	r24, 0xE7	; 231
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	21 50       	subi	r18, 0x01	; 1
     e8c:	80 40       	sbci	r24, 0x00	; 0
     e8e:	90 40       	sbci	r25, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <sw_tune_freq+0x2c>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <sw_tune_freq+0x36>
     e94:	00 00       	nop
     e96:	08 95       	ret

00000e98 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
     e98:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     e9c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	51 f1       	breq	.+84     	; 0xefa <radio_pwr_dwn+0x62>
     ea6:	00 f1       	brcs	.+64     	; 0xee8 <radio_pwr_dwn+0x50>
     ea8:	02 97       	sbiw	r24, 0x02	; 2
     eaa:	41 f4       	brne	.+16     	; 0xebc <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
     eac:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <current_sw_freq>
     eb0:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <current_sw_freq+0x1>
     eb4:	81 e1       	ldi	r24, 0x11	; 17
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 a4 09 	call	0x1348	; 0x1348 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
     ebc:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <current_volume>
     ec0:	87 e0       	ldi	r24, 0x07	; 7
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 97 09 	call	0x132e	; 0x132e <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
     ec8:	81 e1       	ldi	r24, 0x11	; 17
     eca:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	6c e9       	ldi	r22, 0x9C	; 156
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	82 e2       	ldi	r24, 0x22	; 34
     ed6:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eda:	87 ed       	ldi	r24, 0xD7	; 215
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <radio_pwr_dwn+0x46>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <radio_pwr_dwn+0x4c>
     ee4:	00 00       	nop
     ee6:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
     ee8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     eec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     ef0:	88 e0       	ldi	r24, 0x08	; 8
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 a4 09 	call	0x1348	; 0x1348 <eeprom_write_word>
     ef8:	e1 cf       	rjmp	.-62     	; 0xebc <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
     efa:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <current_am_freq>
     efe:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <current_am_freq+0x1>
     f02:	8a e0       	ldi	r24, 0x0A	; 10
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 a4 09 	call	0x1348	; 0x1348 <eeprom_write_word>
     f0a:	d8 cf       	rjmp	.-80     	; 0xebc <radio_pwr_dwn+0x24>

00000f0c <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
     f0c:	83 e2       	ldi	r24, 0x23	; 35
     f0e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	6c e9       	ldi	r22, 0x9C	; 156
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	82 e2       	ldi	r24, 0x22	; 34
     f20:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f24:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     f28:	81 11       	cpse	r24, r1
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <fm_rsq_status+0x18>
     f2c:	8f ea       	ldi	r24, 0xAF	; 175
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <fm_rsq_status+0x24>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <fm_rsq_status+0x2a>
     f36:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f38:	48 e0       	ldi	r20, 0x08	; 8
     f3a:	65 ea       	ldi	r22, 0xA5	; 165
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	82 e2       	ldi	r24, 0x22	; 34
     f40:	0e 94 5d 06 	call	0xcba	; 0xcba <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f44:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     f48:	81 11       	cpse	r24, r1
     f4a:	fc cf       	rjmp	.-8      	; 0xf44 <fm_rsq_status+0x38>
}
     f4c:	08 95       	ret

00000f4e <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
     f4e:	82 e2       	ldi	r24, 0x22	; 34
     f50:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f5a:	42 e0       	ldi	r20, 0x02	; 2
     f5c:	6c e9       	ldi	r22, 0x9C	; 156
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	82 e2       	ldi	r24, 0x22	; 34
     f62:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f66:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     f6a:	81 11       	cpse	r24, r1
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <fm_tune_status+0x18>
     f6e:	8f ea       	ldi	r24, 0xAF	; 175
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <fm_tune_status+0x24>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <fm_tune_status+0x2a>
     f78:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f7a:	48 e0       	ldi	r20, 0x08	; 8
     f7c:	65 ea       	ldi	r22, 0xA5	; 165
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	82 e2       	ldi	r24, 0x22	; 34
     f82:	0e 94 5d 06 	call	0xcba	; 0xcba <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
     f86:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     f8a:	81 11       	cpse	r24, r1
     f8c:	fc cf       	rjmp	.-8      	; 0xf86 <fm_tune_status+0x38>
}
     f8e:	08 95       	ret

00000f90 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
     f90:	82 e4       	ldi	r24, 0x42	; 66
     f92:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	6c e9       	ldi	r22, 0x9C	; 156
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	82 e2       	ldi	r24, 0x22	; 34
     fa4:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     fa8:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     fac:	81 11       	cpse	r24, r1
     fae:	fc cf       	rjmp	.-8      	; 0xfa8 <am_tune_status+0x18>
     fb0:	8f ea       	ldi	r24, 0xAF	; 175
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <am_tune_status+0x24>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <am_tune_status+0x2a>
     fba:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     fbc:	48 e0       	ldi	r20, 0x08	; 8
     fbe:	65 ea       	ldi	r22, 0xA5	; 165
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	82 e2       	ldi	r24, 0x22	; 34
     fc4:	0c 94 5d 06 	jmp	0xcba	; 0xcba <twi_start_rd>

00000fc8 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
     fc8:	83 e4       	ldi	r24, 0x43	; 67
     fca:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     fd4:	42 e0       	ldi	r20, 0x02	; 2
     fd6:	6c e9       	ldi	r22, 0x9C	; 156
     fd8:	71 e0       	ldi	r23, 0x01	; 1
     fda:	82 e2       	ldi	r24, 0x22	; 34
     fdc:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     fe0:	0e 94 48 06 	call	0xc90	; 0xc90 <twi_busy>
     fe4:	81 11       	cpse	r24, r1
     fe6:	fc cf       	rjmp	.-8      	; 0xfe0 <am_rsq_status+0x18>
     fe8:	8f ea       	ldi	r24, 0xAF	; 175
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <am_rsq_status+0x24>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <am_rsq_status+0x2a>
     ff2:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     ff4:	48 e0       	ldi	r20, 0x08	; 8
     ff6:	65 ea       	ldi	r22, 0xA5	; 165
     ff8:	71 e0       	ldi	r23, 0x01	; 1
     ffa:	82 e2       	ldi	r24, 0x22	; 34
     ffc:	0c 94 5d 06 	jmp	0xcba	; 0xcba <twi_start_rd>

00001000 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1000:	ec e9       	ldi	r30, 0x9C	; 156
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	22 e1       	ldi	r18, 0x12	; 18
    1006:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1008:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    100a:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    100c:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    100e:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1010:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1012:	46 e0       	ldi	r20, 0x06	; 6
    1014:	bf 01       	movw	r22, r30
    1016:	82 e2       	ldi	r24, 0x22	; 34
    1018:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101c:	8f e3       	ldi	r24, 0x3F	; 63
    101e:	9c e9       	ldi	r25, 0x9C	; 156
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <set_property+0x20>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <set_property+0x26>
    1026:	00 00       	nop
    1028:	08 95       	ret

0000102a <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 91 09 	call	0x1322	; 0x1322 <eeprom_read_word>
    1032:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1036:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    103a:	87 e0       	ldi	r24, 0x07	; 7
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 89 09 	call	0x1312	; 0x1312 <eeprom_read_byte>
    1042:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1046:	ec e9       	ldi	r30, 0x9C	; 156
    1048:	f1 e0       	ldi	r31, 0x01	; 1
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    104e:	80 e5       	ldi	r24, 0x50	; 80
    1050:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1052:	85 e0       	ldi	r24, 0x05	; 5
    1054:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1056:	43 e0       	ldi	r20, 0x03	; 3
    1058:	bf 01       	movw	r22, r30
    105a:	82 e2       	ldi	r24, 0x22	; 34
    105c:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    1060:	2f ef       	ldi	r18, 0xFF	; 255
    1062:	8b ed       	ldi	r24, 0xDB	; 219
    1064:	95 e0       	ldi	r25, 0x05	; 5
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	80 40       	sbci	r24, 0x00	; 0
    106a:	90 40       	sbci	r25, 0x00	; 0
    106c:	e1 f7       	brne	.-8      	; 0x1066 <fm_pwr_up+0x3c>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <fm_pwr_up+0x46>
    1070:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <set_property>

0000107e <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	0e 94 91 09 	call	0x1322	; 0x1322 <eeprom_read_word>
    1086:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <current_am_freq+0x1>
    108a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    108e:	87 e0       	ldi	r24, 0x07	; 7
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 89 09 	call	0x1312	; 0x1312 <eeprom_read_byte>
    1096:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    109a:	ec e9       	ldi	r30, 0x9C	; 156
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    10a2:	81 e5       	ldi	r24, 0x51	; 81
    10a4:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    10aa:	43 e0       	ldi	r20, 0x03	; 3
    10ac:	bf 01       	movw	r22, r30
    10ae:	82 e2       	ldi	r24, 0x22	; 34
    10b0:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	8b ed       	ldi	r24, 0xDB	; 219
    10b8:	95 e0       	ldi	r25, 0x05	; 5
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	80 40       	sbci	r24, 0x00	; 0
    10be:	90 40       	sbci	r25, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <am_pwr_up+0x3c>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <am_pwr_up+0x46>
    10c4:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0c 94 00 08 	jmp	0x1000	; 0x1000 <set_property>

000010d2 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    10d2:	81 e1       	ldi	r24, 0x11	; 17
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 91 09 	call	0x1322	; 0x1322 <eeprom_read_word>
    10da:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <current_sw_freq+0x1>
    10de:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    10e2:	87 e0       	ldi	r24, 0x07	; 7
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 89 09 	call	0x1312	; 0x1312 <eeprom_read_byte>
    10ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    10ee:	ec e9       	ldi	r30, 0x9C	; 156
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    10f6:	81 e5       	ldi	r24, 0x51	; 81
    10f8:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    10fe:	43 e0       	ldi	r20, 0x03	; 3
    1100:	bf 01       	movw	r22, r30
    1102:	82 e2       	ldi	r24, 0x22	; 34
    1104:	0e 94 4c 06 	call	0xc98	; 0xc98 <twi_start_wr>
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	8b ed       	ldi	r24, 0xDB	; 219
    110c:	95 e0       	ldi	r25, 0x05	; 5
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <__stack+0xf>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <__stack+0x19>
    1118:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	93 e3       	ldi	r25, 0x33	; 51
    1122:	0e 94 00 08 	call	0x1000	; 0x1000 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	71 e0       	ldi	r23, 0x01	; 1
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	91 e3       	ldi	r25, 0x31	; 49
    112e:	0e 94 00 08 	call	0x1000	; 0x1000 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <set_property>

0000113e <main>:


int main(){
        init_twi();
    113e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <init_twi>

	DDRF |= (1 << PF1);
    1142:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF |= (0 << PF1);
    114c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1150:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

        //Setup audio output (max)
	DDRE  |= (1 << PE3);
    1154:	13 9a       	sbi	0x02, 3	; 2
        PORTE |= (1 << PE3);
    1156:	1b 9a       	sbi	0x03, 3	; 3
	


        EICRB |= (1<<ISC71) | (1<ISC70);
    1158:	8a b7       	in	r24, 0x3a	; 58
    115a:	81 68       	ori	r24, 0x81	; 129
    115c:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT7);
    115e:	89 b7       	in	r24, 0x39	; 57
    1160:	80 68       	ori	r24, 0x80	; 128
    1162:	89 bf       	out	0x39, r24	; 57
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	83 ed       	ldi	r24, 0xD3	; 211
    1168:	90 e3       	ldi	r25, 0x30	; 48
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x2c>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <main+0x36>
    1174:	00 00       	nop

	_delay_ms(1000);



	sei();
    1176:	78 94       	sei
    1178:	2f ef       	ldi	r18, 0xFF	; 255
    117a:	8b e7       	ldi	r24, 0x7B	; 123
    117c:	92 e9       	ldi	r25, 0x92	; 146
    117e:	21 50       	subi	r18, 0x01	; 1
    1180:	80 40       	sbci	r24, 0x00	; 0
    1182:	90 40       	sbci	r25, 0x00	; 0
    1184:	e1 f7       	brne	.-8      	; 0x117e <main+0x40>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <main+0x4a>
    1188:	00 00       	nop



		_delay_ms(3000);

		radio_pwr_dwn();
    118a:	0e 94 4c 07 	call	0xe98	; 0xe98 <radio_pwr_dwn>
    118e:	2f ef       	ldi	r18, 0xFF	; 255
    1190:	8b e7       	ldi	r24, 0x7B	; 123
    1192:	92 e9       	ldi	r25, 0x92	; 146
    1194:	21 50       	subi	r18, 0x01	; 1
    1196:	80 40       	sbci	r24, 0x00	; 0
    1198:	90 40       	sbci	r25, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <main+0x56>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <main+0x60>
    119e:	00 00       	nop

		_delay_ms(3000);

		radio_init();
    11a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <radio_init>
    11a4:	e9 cf       	rjmp	.-46     	; 0x1178 <main+0x3a>

000011a6 <__divmodhi4>:
    11a6:	97 fb       	bst	r25, 7
    11a8:	07 2e       	mov	r0, r23
    11aa:	16 f4       	brtc	.+4      	; 0x11b0 <__divmodhi4+0xa>
    11ac:	00 94       	com	r0
    11ae:	07 d0       	rcall	.+14     	; 0x11be <__divmodhi4_neg1>
    11b0:	77 fd       	sbrc	r23, 7
    11b2:	09 d0       	rcall	.+18     	; 0x11c6 <__divmodhi4_neg2>
    11b4:	0e 94 1e 09 	call	0x123c	; 0x123c <__udivmodhi4>
    11b8:	07 fc       	sbrc	r0, 7
    11ba:	05 d0       	rcall	.+10     	; 0x11c6 <__divmodhi4_neg2>
    11bc:	3e f4       	brtc	.+14     	; 0x11cc <__divmodhi4_exit>

000011be <__divmodhi4_neg1>:
    11be:	90 95       	com	r25
    11c0:	81 95       	neg	r24
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__divmodhi4_neg2>:
    11c6:	70 95       	com	r23
    11c8:	61 95       	neg	r22
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255

000011cc <__divmodhi4_exit>:
    11cc:	08 95       	ret

000011ce <__divmodsi4>:
    11ce:	05 2e       	mov	r0, r21
    11d0:	97 fb       	bst	r25, 7
    11d2:	1e f4       	brtc	.+6      	; 0x11da <__divmodsi4+0xc>
    11d4:	00 94       	com	r0
    11d6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__negsi2>
    11da:	57 fd       	sbrc	r21, 7
    11dc:	07 d0       	rcall	.+14     	; 0x11ec <__divmodsi4_neg2>
    11de:	0e 94 32 09 	call	0x1264	; 0x1264 <__udivmodsi4>
    11e2:	07 fc       	sbrc	r0, 7
    11e4:	03 d0       	rcall	.+6      	; 0x11ec <__divmodsi4_neg2>
    11e6:	4e f4       	brtc	.+18     	; 0x11fa <__divmodsi4_exit>
    11e8:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__negsi2>

000011ec <__divmodsi4_neg2>:
    11ec:	50 95       	com	r21
    11ee:	40 95       	com	r20
    11f0:	30 95       	com	r19
    11f2:	21 95       	neg	r18
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	4f 4f       	sbci	r20, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255

000011fa <__divmodsi4_exit>:
    11fa:	08 95       	ret

000011fc <__negsi2>:
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	08 95       	ret

0000120c <__tablejump2__>:
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	00 24       	eor	r0, r0
    1212:	00 1c       	adc	r0, r0
    1214:	0b be       	out	0x3b, r0	; 59
    1216:	07 90       	elpm	r0, Z+
    1218:	f6 91       	elpm	r31, Z
    121a:	e0 2d       	mov	r30, r0
    121c:	09 94       	ijmp

0000121e <__umulhisi3>:
    121e:	a2 9f       	mul	r26, r18
    1220:	b0 01       	movw	r22, r0
    1222:	b3 9f       	mul	r27, r19
    1224:	c0 01       	movw	r24, r0
    1226:	a3 9f       	mul	r26, r19
    1228:	70 0d       	add	r23, r0
    122a:	81 1d       	adc	r24, r1
    122c:	11 24       	eor	r1, r1
    122e:	91 1d       	adc	r25, r1
    1230:	b2 9f       	mul	r27, r18
    1232:	70 0d       	add	r23, r0
    1234:	81 1d       	adc	r24, r1
    1236:	11 24       	eor	r1, r1
    1238:	91 1d       	adc	r25, r1
    123a:	08 95       	ret

0000123c <__udivmodhi4>:
    123c:	aa 1b       	sub	r26, r26
    123e:	bb 1b       	sub	r27, r27
    1240:	51 e1       	ldi	r21, 0x11	; 17
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <__udivmodhi4_ep>

00001244 <__udivmodhi4_loop>:
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	a6 17       	cp	r26, r22
    124a:	b7 07       	cpc	r27, r23
    124c:	10 f0       	brcs	.+4      	; 0x1252 <__udivmodhi4_ep>
    124e:	a6 1b       	sub	r26, r22
    1250:	b7 0b       	sbc	r27, r23

00001252 <__udivmodhi4_ep>:
    1252:	88 1f       	adc	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	5a 95       	dec	r21
    1258:	a9 f7       	brne	.-22     	; 0x1244 <__udivmodhi4_loop>
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	08 95       	ret

00001264 <__udivmodsi4>:
    1264:	a1 e2       	ldi	r26, 0x21	; 33
    1266:	1a 2e       	mov	r1, r26
    1268:	aa 1b       	sub	r26, r26
    126a:	bb 1b       	sub	r27, r27
    126c:	fd 01       	movw	r30, r26
    126e:	0d c0       	rjmp	.+26     	; 0x128a <__udivmodsi4_ep>

00001270 <__udivmodsi4_loop>:
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	ee 1f       	adc	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	a2 17       	cp	r26, r18
    127a:	b3 07       	cpc	r27, r19
    127c:	e4 07       	cpc	r30, r20
    127e:	f5 07       	cpc	r31, r21
    1280:	20 f0       	brcs	.+8      	; 0x128a <__udivmodsi4_ep>
    1282:	a2 1b       	sub	r26, r18
    1284:	b3 0b       	sbc	r27, r19
    1286:	e4 0b       	sbc	r30, r20
    1288:	f5 0b       	sbc	r31, r21

0000128a <__udivmodsi4_ep>:
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	1a 94       	dec	r1
    1294:	69 f7       	brne	.-38     	; 0x1270 <__udivmodsi4_loop>
    1296:	60 95       	com	r22
    1298:	70 95       	com	r23
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	bd 01       	movw	r22, r26
    12a4:	cf 01       	movw	r24, r30
    12a6:	08 95       	ret

000012a8 <__itoa_ncheck>:
    12a8:	bb 27       	eor	r27, r27
    12aa:	4a 30       	cpi	r20, 0x0A	; 10
    12ac:	31 f4       	brne	.+12     	; 0x12ba <__itoa_ncheck+0x12>
    12ae:	99 23       	and	r25, r25
    12b0:	22 f4       	brpl	.+8      	; 0x12ba <__itoa_ncheck+0x12>
    12b2:	bd e2       	ldi	r27, 0x2D	; 45
    12b4:	90 95       	com	r25
    12b6:	81 95       	neg	r24
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__utoa_common>

000012be <__utoa_ncheck>:
    12be:	bb 27       	eor	r27, r27

000012c0 <__utoa_common>:
    12c0:	fb 01       	movw	r30, r22
    12c2:	55 27       	eor	r21, r21
    12c4:	aa 27       	eor	r26, r26
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a4 17       	cp	r26, r20
    12ce:	10 f0       	brcs	.+4      	; 0x12d4 <__utoa_common+0x14>
    12d0:	a4 1b       	sub	r26, r20
    12d2:	83 95       	inc	r24
    12d4:	50 51       	subi	r21, 0x10	; 16
    12d6:	b9 f7       	brne	.-18     	; 0x12c6 <__utoa_common+0x6>
    12d8:	a0 5d       	subi	r26, 0xD0	; 208
    12da:	aa 33       	cpi	r26, 0x3A	; 58
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <__utoa_common+0x20>
    12de:	a9 5d       	subi	r26, 0xD9	; 217
    12e0:	a1 93       	st	Z+, r26
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	79 f7       	brne	.-34     	; 0x12c4 <__utoa_common+0x4>
    12e6:	b1 11       	cpse	r27, r1
    12e8:	b1 93       	st	Z+, r27
    12ea:	11 92       	st	Z+, r1
    12ec:	cb 01       	movw	r24, r22
    12ee:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <strrev>

000012f2 <strrev>:
    12f2:	dc 01       	movw	r26, r24
    12f4:	fc 01       	movw	r30, r24
    12f6:	67 2f       	mov	r22, r23
    12f8:	71 91       	ld	r23, Z+
    12fa:	77 23       	and	r23, r23
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <strrev+0x4>
    12fe:	32 97       	sbiw	r30, 0x02	; 2
    1300:	04 c0       	rjmp	.+8      	; 0x130a <strrev+0x18>
    1302:	7c 91       	ld	r23, X
    1304:	6d 93       	st	X+, r22
    1306:	70 83       	st	Z, r23
    1308:	62 91       	ld	r22, -Z
    130a:	ae 17       	cp	r26, r30
    130c:	bf 07       	cpc	r27, r31
    130e:	c8 f3       	brcs	.-14     	; 0x1302 <strrev+0x10>
    1310:	08 95       	ret

00001312 <eeprom_read_byte>:
    1312:	e1 99       	sbic	0x1c, 1	; 28
    1314:	fe cf       	rjmp	.-4      	; 0x1312 <eeprom_read_byte>
    1316:	9f bb       	out	0x1f, r25	; 31
    1318:	8e bb       	out	0x1e, r24	; 30
    131a:	e0 9a       	sbi	0x1c, 0	; 28
    131c:	99 27       	eor	r25, r25
    131e:	8d b3       	in	r24, 0x1d	; 29
    1320:	08 95       	ret

00001322 <eeprom_read_word>:
    1322:	a8 e1       	ldi	r26, 0x18	; 24
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	42 e0       	ldi	r20, 0x02	; 2
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <eeprom_read_blraw>

0000132e <eeprom_write_byte>:
    132e:	26 2f       	mov	r18, r22

00001330 <eeprom_write_r18>:
    1330:	e1 99       	sbic	0x1c, 1	; 28
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <eeprom_write_r18>
    1334:	9f bb       	out	0x1f, r25	; 31
    1336:	8e bb       	out	0x1e, r24	; 30
    1338:	2d bb       	out	0x1d, r18	; 29
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	e2 9a       	sbi	0x1c, 2	; 28
    1340:	e1 9a       	sbi	0x1c, 1	; 28
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	08 95       	ret

00001348 <eeprom_write_word>:
    1348:	0e 94 97 09 	call	0x132e	; 0x132e <eeprom_write_byte>
    134c:	27 2f       	mov	r18, r23
    134e:	0c 94 98 09 	jmp	0x1330	; 0x1330 <eeprom_write_r18>

00001352 <eeprom_read_block>:
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22

00001356 <eeprom_read_blraw>:
    1356:	fc 01       	movw	r30, r24
    1358:	e1 99       	sbic	0x1c, 1	; 28
    135a:	fe cf       	rjmp	.-4      	; 0x1358 <eeprom_read_blraw+0x2>
    135c:	06 c0       	rjmp	.+12     	; 0x136a <eeprom_read_blraw+0x14>
    135e:	ff bb       	out	0x1f, r31	; 31
    1360:	ee bb       	out	0x1e, r30	; 30
    1362:	e0 9a       	sbi	0x1c, 0	; 28
    1364:	31 96       	adiw	r30, 0x01	; 1
    1366:	0d b2       	in	r0, 0x1d	; 29
    1368:	0d 92       	st	X+, r0
    136a:	41 50       	subi	r20, 0x01	; 1
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	b8 f7       	brcc	.-18     	; 0x135e <eeprom_read_blraw+0x8>
    1370:	08 95       	ret

00001372 <_exit>:
    1372:	f8 94       	cli

00001374 <__stop_program>:
    1374:	ff cf       	rjmp	.-2      	; 0x1374 <__stop_program>
